From taco at elvenkind.com  Thu Sep 15 12:42:02 2005
From: taco at elvenkind.com (Taco Hoekwater)
Date: Thu Sep 15 12:44:07 2005
Subject: [Dev-luatex] pick up the thread
In-Reply-To: <74f506dc050831040572ec4cc7@mail.gmail.com>
References: <74f506dc050831040572ec4cc7@mail.gmail.com>
Message-ID: <43294FFA.9050504@elvenkind.com>


Hi,

A quick update on some things have happened:

* There is a project for LuaTeX on Fabrice's gforge server:

	https://foundry.supelec.fr/projects/luatex/

  In the repository there, you will find the latest sources.
  If somebody wants to join, let one of use know.

* There is a domain registered:

	http://www.luatex.org

   Nothing much on there yet, just Hans' presentation and some
   outdated binaries.

* Hartmut has discovered another lua project with identical
   name, see http://www.luatex.com.
   Because of that, we may have to change the project's name.
   (I'm not quite sure we really have to)

* Hartmut has created an extra extension called \latelua,
   allowing bits of lua code to be executed at shipout time,
   like so:

   \latelua{
     for i=1, 50, 5 do
       tex.print("0 0 ", i, " ", i, " re S ")
     end
   }


I'll forward a few e-mails to the list now.

Cheers, Taco


Thanh Han The wrote:
> Hi,
> 
> very interesting and promissing indeed. Great idea! If this
> happened sooner, a lot of effort on extending pdftex could
> have been saved.
> 
> Thanh
> 
> 
> On Wed, Aug 31, 2005 at 11:48:59AM +0200, Hans Hagen wrote:
> 
>>Hi,
>>
>>Since this is the first mail to the list ... i attach the presentation
>>done at tug 2005 since it summarizes the state of the project as well as
>>some demo's at that time. There may be errors in it, but beter have this
>>than a bunch of dutch/english mails.
>>
>>Hans
>>
>>
>>-----------------------------------------------------------------
>>                                          Hans Hagen | PRAGMA ADE
>>              Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
>>     tel: 038 477 53 69 | fax: 038 477 53 74 | www.pragma-ade.com
>>                                             | www.pragma-pod.nl
>>-----------------------------------------------------------------
>>
>>
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>>_______________________________________________
>>Dev-luatex mailing list
>>Dev-luatex@ntg.nl
>>http://www.ntg.nl/mailman/listinfo/dev-luatex
> 
> _______________________________________________
> Dev-luatex mailing list
> Dev-luatex@ntg.nl
> http://www.ntg.nl/mailman/listinfo/dev-luatex

From taco at elvenkind.com  Thu Sep 15 12:47:48 2005
From: taco at elvenkind.com (Taco Hoekwater)
Date: Thu Sep 15 12:49:54 2005
Subject: [Dev-luatex] FWD: \latelua
Message-ID: <43295154.3050702@elvenkind.com>



-------- Original Message --------
Subject: Re: [macleod@cvrti.utah.edu: changebar support for pdflatex]
Date: Wed, 14 Sep 2005 00:46:11 +0200
From: Hans Hagen <pragma@wxs.nl>
To: Hartmut Henkel <hartmut_henkel@gmx.de>
CC: Taco Hoekwater <taco@elvenkind.com>
References: <20050912140052.GE17097@lucien.oneiros.kn-bremen.de> 
<432592A7.3000708@wxs.nl> 
<20050912154605.GG17097@lucien.oneiros.kn-bremen.de> 
<4325A568.3060300@wxs.nl> 
<Pine.LNX.4.61.0509122047420.4490@hahepc1.hahe> 
<4325EA6B.9050206@wxs.nl> 
<Pine.LNX.4.61.0509122330070.5143@hahepc1.hahe> 
<Pine.LNX.4.61.0509130002150.5327@hahepc1.hahe> 
<4325FF12.1070906@wxs.nl> <Pine.LNX.4.61.0509140000590.16751@hahepc1.hahe>

Hartmut Henkel wrote:

>Hi Hans and Taco,
>
>here's a first rough try on \latelua: It just creates a node like
>\pdfliteral, and the given program code is executed by lua during
>shipout. Output (if any) currently goes via print into the PDF.
>
>If we would get access to the position cur_h, cur_v valid at the point
>of lua call (Taco has this already?), we could then e. g. draw the
>changebars (and other random drawings on the page between previously
>marked points :-) with lua, single pass.
>
>All lua register changes are obviously available to "later" both \lua or
>\latelua calls...
>
>Currently the \latelua has the same options "page" and "direct" as
>\pdfliteral (because this happened by copying the code).
>
>Couldn't such a \latelua be removed if one would change \lua to
>\immediate\lua and \lua? Or is this something different?
>
>Sorry, still old system, no tex.print yet and the other fancy stuff from
>Taco.
>  
>
interesting

i don't like the \immediate\lus thing, too texie -)

maybe better than \latelua is:

\lua otr {...}

since there can be more variants.

I also wonder ... how about

pdf.print.direct("...")
pdf.print.page("...")

(one can always say pdf.direct = pdf.print.direct)

this is more luaish, esp if we also have:

pdf.h (or pdf.x)
pdf.v (or pdf.y)

Interesting experiment

Hans


-----------------------------------------------------------------
                                          Hans Hagen | PRAGMA ADE
              Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | fax: 038 477 53 74 | www.pragma-ade.com
                                             | www.pragma-pod.nl
-----------------------------------------------------------------
From taco at elvenkind.com  Thu Sep 15 12:49:13 2005
From: taco at elvenkind.com (Taco Hoekwater)
Date: Thu Sep 15 12:51:20 2005
Subject: [Dev-luatex] FWD: The other LuateX
Message-ID: <432951A9.7050907@elvenkind.com>



-------- Original Message --------
Subject: Re: LuateX
Date: Wed, 14 Sep 2005 22:24:16 +0200
From: Hans Hagen <pragma@wxs.nl>
To: Hartmut Henkel <hartmut_henkel@gmx.de>
CC: Taco Hoekwater <taco@elvenkind.com>
References: <20050912140052.GE17097@lucien.oneiros.kn-bremen.de> 
<432592A7.3000708@wxs.nl> 
<20050912154605.GG17097@lucien.oneiros.kn-bremen.de> 
<4325A568.3060300@wxs.nl> 
<Pine.LNX.4.61.0509122047420.4490@hahepc1.hahe> 
<4325EA6B.9050206@wxs.nl> 
<Pine.LNX.4.61.0509122330070.5143@hahepc1.hahe> 
<Pine.LNX.4.61.0509130002150.5327@hahepc1.hahe> 
<4325FF12.1070906@wxs.nl> 
<Pine.LNX.4.61.0509140000590.16751@hahepc1.hahe> <432756B3.10307@wxs.nl> 
<Pine.LNX.4.61.0509142201430.4684@hahepc1.hahe>

Hartmut Henkel wrote:

>just googled for luatex. To my surpries, many hits...
>
>http://www.luatex.com/
>  
>
ha, interesting,

so we nee to change to:

  pdfluatex
  eltex (e-lua-tex)
  letex (lua-e-tex)
  lentex (lua enhanced tex -> later pdflentex)
  lextex (lua extended tex -> latex plextex)
  lunatex

(i like lentex -)

as working title; in the end it will be pdftex anyway

Hans

-----------------------------------------------------------------
                                          Hans Hagen | PRAGMA ADE
              Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | fax: 038 477 53 74 | www.pragma-ade.com
                                             | www.pragma-pod.nl
-----------------------------------------------------------------
From taco at elvenkind.com  Thu Sep 15 12:50:35 2005
From: taco at elvenkind.com (Taco Hoekwater)
Date: Thu Sep 15 12:52:40 2005
Subject: [Dev-luatex] FWD: Re: The Other LuateX
Message-ID: <432951FB.5080207@elvenkind.com>



-------- Original Message --------
Subject: Re: LuateX
Date: Thu, 15 Sep 2005 08:55:11 +0200
From: Taco Hoekwater <taco@elvenkind.com>
To: Hans Hagen <pragma@wxs.nl>
CC: Hartmut Henkel <hartmut_henkel@gmx.de>
References: <20050912140052.GE17097@lucien.oneiros.kn-bremen.de> 
<432592A7.3000708@wxs.nl> 
<20050912154605.GG17097@lucien.oneiros.kn-bremen.de> 
<4325A568.3060300@wxs.nl> 
<Pine.LNX.4.61.0509122047420.4490@hahepc1.hahe> 
<4325EA6B.9050206@wxs.nl> 
<Pine.LNX.4.61.0509122330070.5143@hahepc1.hahe> 
<Pine.LNX.4.61.0509130002150.5327@hahepc1.hahe> 
<4325FF12.1070906@wxs.nl> 
<Pine.LNX.4.61.0509140000590.16751@hahepc1.hahe> <432756B3.10307@wxs.nl> 
<Pine.LNX.4.61.0509142201430.4684@hahepc1.hahe> <432886F0.9020304@wxs.nl>



Hans Hagen wrote:
> Hartmut Henkel wrote:
> 
>> just googled for luatex. To my surpries, many hits...
>>
>> http://www.luatex.com/

Unfortunate, I should have checked for that before registering the
new domain. :-(

>>
> ha, interesting,
> 
> so we nee to change to:
>  pdfluatex

I much favor this solution, because it allows the continued use of
the domain as well as the foundry project, and most of the other
proposals were a bit too short for my taste  :-)

Taco

From taco at elvenkind.com  Thu Sep 15 12:52:27 2005
From: taco at elvenkind.com (Taco Hoekwater)
Date: Thu Sep 15 12:54:32 2005
Subject: [Dev-luatex] FWD: Subversion Repository
Message-ID: <4329526B.10405@elvenkind.com>



-------- Original Message --------
Subject: Re: lua
Date: Tue, 13 Sep 2005 15:37:42 +0200
From: Taco Hoekwater <taco@elvenkind.com>
To: Taco Hoekwater <taco@elvenkind.com>
CC: Hans Hagen <pragma@wxs.nl>, Hartmut Henkel <hartmut_henkel@gmx.de>
References: <4325FF95.2080808@wxs.nl> 
<Pine.LNX.4.61.0509130030060.5488@hahepc1.hahe> 
<4326075F.9030301@wxs.nl> <43267768.1020409@elvenkind.com> 
<43268242.5010306@wxs.nl> <4326878E.6070300@elvenkind.com> 
<432692BB.7070806@elvenkind.com>


Hi,

Ok, I've committed what is essentially

   * pdftex 1.30.3 (from sarovar)
   * the src directory from the lua5.1-alpha release (lua.org)
   * lua.ch / luastuff.c (our sources)

The build system is just like pdftex, and it 'works for me'.

Also, I've added Hans to the project.

Main project page:

   https://foundry.supelec.fr/projects/luatex/

Cheers, Taco


Taco Hoekwater wrote:
> Hi again,
> 
> The project is approved already :-)
> 
> If you both register as users, then I can add you to the project.
> 
>     https://foundry.supelec.fr/
> 
> 
> Taco Hoekwater wrote:
> 
>>
>> I've requested a project at supelec. I assume Fabrice will approve
>> that in a day or so, and then I will upload sources there (based
>> on the "standalone" pdfetex from sarovar).
> 
> 

From hartmut_henkel at gmx.de  Thu Sep 15 23:56:40 2005
From: hartmut_henkel at gmx.de (Hartmut Henkel)
Date: Thu Sep 15 23:56:45 2005
Subject: [Dev-luatex] pdfliteral after text/rules
Message-ID: <Pine.LNX.4.61.0509152333010.6142@hahepc1.hahe>

Hi,

here ist the problem, that the "page" mode of \pdfliteral and \latelua
does not by itself guarantee, that the result goes relative to the lower
left corner (the PDF origin):


\nopagenumbers
\pdfcompresslevel=0

X\latelua{
  x={};y={};
  c=72/72.27/65536;
  x[1]=pdf.geth()*c; y[1]=pdf.getv()*c
}
\input tufte
X\latelua page{
  x[2]=pdf.geth()*c; y[2]=pdf.getv()*c
}

\hrule

\latelua page{
tex.print(x[1], " ", y[1],
  " m ", x[2], " ", y[2], " l S")
}

\input tufte
\bye


The above example works as intended only, if you remove the \hrule.
Reason is, that for setting a rule, a transform "cm" is done away from
the origin, then the rule is placed, but there is no transforms back to
the origin. The next placements are done after a transform relative to
the placement point of the rule...

Text is always typeset with the transform matrix "cm" set to the origin,
and inside the BT...ET group the Td operator does the local transform.

There seems to be currently no \pdfliteral (or \latelua) mode that
guarantees positioning relative to the PDF origin. But positioning
relative to the origin would be nice to have since we now have the
pdf.geth/v() lua functions. Else one would have to think what was the
state (text or rule?) just before using \pdfliteral page...

To solve this ambiguity, i have tried the attached patch, which puts any
rule into a qQ group and does "cm" transforms inside this group. So the
rules are handled like text, which is also grouped (inside BT...ET).

That means, that the global working reference point is (hopefully :)
always (?) at the origin. With the rule.ch patch the above example works
apparently ok. This also means, that when using \pdfliteral page, one
gets stuff placed at the origin, and still without transform (which
should be ok). This would spare to invent yet another \pdfliteral mode.

No idea how general it is. And wonder, how backward-compatible? We would
need to check also \pdfrefximage...

Just for discussion...

Regards, Hartmut


P.S. Let's see how the attachment is handled. Never tried this before.
-------------- next part --------------
%$Id: rule.ch,v 1.3 2005/09/15 21:31:40 hahe Exp hahe $
% rule in a group
%***********************************************************************

@x 15882
@p procedure pdf_set_origin; {set the origin to |cur_h|, |cur_v|}
begin
    if (abs(cur_h - pdf_origin_h) >= min_bp_val) or
        (abs(cur_v - pdf_origin_v) >= min_bp_val) then begin
        pdf_print("1 0 0 1 ");
        pdf_print_bp(cur_h - pdf_origin_h);
        pdf_origin_h := pdf_origin_h + scaled_out;
        pdf_out(" ");
        pdf_print_bp(pdf_origin_v - cur_v);
        pdf_origin_v := pdf_origin_v - scaled_out;
        pdf_print_ln(" cm");
    end;
    pdf_h := pdf_origin_h;
    pdf_last_h := pdf_origin_h;
    pdf_v := pdf_origin_v;
    pdf_last_v := pdf_origin_v;
end;
@y
@p procedure pdf_set_origin; {set the origin to |cur_h|, |cur_v|}
begin
    if (abs(cur_h - pdf_origin_h) >= min_bp_val) or
        (abs(cur_v - pdf_origin_v) >= min_bp_val) then begin
        pdf_print("1 0 0 1 ");
        pdf_print_bp(cur_h - pdf_origin_h);
        pdf_origin_h := pdf_origin_h + scaled_out;
        pdf_out(" ");
        pdf_print_bp(pdf_origin_v - cur_v);
        pdf_origin_v := pdf_origin_v - scaled_out;
        pdf_print_ln(" cm");
    end;
    pdf_h := pdf_origin_h;
    pdf_last_h := pdf_origin_h;
    pdf_v := pdf_origin_v;
    pdf_last_v := pdf_origin_v;
end;

@
@p procedure pdf_set_origin_temp; {set the origin to |cur_h|, |cur_v| inside group}
var h_bp, v_bp: scaled; {current position (bp system)}
begin
    if (abs(cur_h - pdf_origin_h) >= min_bp_val) or
        (abs(cur_v - pdf_origin_v) >= min_bp_val) then begin
        pdf_print("1 0 0 1 ");
        pdf_print_bp(cur_h - pdf_origin_h);
        pdf_out(" ");
        pdf_print_bp(pdf_origin_v - cur_v);
        pdf_print_ln(" cm");
    end;
end;
@z

%***********************************************************************

@x 16045
procedure pdf_set_rule(x, y, w, h: scaled); {draw a rule}
begin
    pdf_end_text;
    pdf_set_origin;
    if h <= one_bp then begin
        pdf_print_ln("q");
        pdf_print_ln("[]0 d");
        pdf_print_ln("0 J");
        pdf_print_bp(h); pdf_print_ln(" w");
        pdf_print("0 "); pdf_print_bp((h + 1)/2); pdf_print_ln(" m");
        pdf_print_bp(w); pdf_print(" "); pdf_print_bp((h + 1)/2);
        pdf_print_ln(" l");
        pdf_print_ln("S");
        pdf_print_ln("Q");
    end
    else if w <= one_bp then begin
        pdf_print_ln("q");
        pdf_print_ln("[]0 d");
        pdf_print_ln("0 J");
        pdf_print_bp(w); pdf_print_ln(" w");
        pdf_print_bp((w + 1)/2); pdf_print_ln(" 0 m");
        pdf_print_bp((w + 1)/2); pdf_print(" "); pdf_print_bp(h);
        pdf_print_ln(" l");
        pdf_print_ln("S");
        pdf_print_ln("Q");
    end
    else begin
        pdf_print_bp(pdf_x(x)); pdf_out(" ");
        pdf_print_bp(pdf_y(y)); pdf_out(" ");
        pdf_print_bp(w); pdf_out(" ");
        pdf_print_bp(h); pdf_print_ln(" re f");
    end;
end;

@y
procedure pdf_set_rule(x, y, w, h: scaled); {draw a rule}
var temp_cur_h, temp_cur_v: scaled;
begin
    pdf_end_text;
    pdf_print_ln("q");
    pdf_set_origin_temp;
    if h <= one_bp then begin
        pdf_print("[]0 d 0 J ");
        pdf_print_bp(h); pdf_print_ln(" w");
        pdf_print("0 "); pdf_print_bp((h + 1)/2); pdf_print(" m ");
        pdf_print_bp(w); pdf_print(" "); pdf_print_bp((h + 1)/2);
        pdf_print_ln(" l S");
    end
    else if w <= one_bp then begin
        pdf_print("[]0 d 0 J ");
        pdf_print_bp(w); pdf_print_ln(" w");
        pdf_print_bp((w + 1)/2); pdf_print(" 0 m ");
        pdf_print_bp((w + 1)/2); pdf_print(" "); pdf_print_bp(h);
        pdf_print_ln(" l S");
    end
    else begin
        pdf_print_bp(0); pdf_out(" ");
        pdf_print_bp(0); pdf_out(" ");
        pdf_print_bp(w); pdf_out(" ");
        pdf_print_bp(h); pdf_print_ln(" re f");
    end;
    pdf_print_ln("Q");
end;
@z

%***********************************************************************
From pragma at wxs.nl  Fri Sep 16 18:13:48 2005
From: pragma at wxs.nl (Hans Hagen)
Date: Fri Sep 16 18:13:44 2005
Subject: [Dev-luatex] lua keyword { } 
Message-ID: <432AEF3C.6070407@wxs.nl>

Hi,

So far we have

\lua     {...} : expanded, result of tex.print is inserted with catcodes 
11/12
\lua otr {...} : delayed expansion (in otr), only pdf.print is  used, 
tex.print is ignored

currently we need to use \scantokens to process the result of tex.print 
in a texie way (current catcode regime). So, in addition we can have:

\lua tex {...} : expanded, result of tex.print is fed into internal 
scantokens

This saves passing args around.

we also need:

\luatexversion   (currently 0.1.5)
\luaversion      (currently 5.0.2)


Hans

-----------------------------------------------------------------
                                          Hans Hagen | PRAGMA ADE
              Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | fax: 038 477 53 74 | www.pragma-ade.com
                                             | www.pragma-pod.nl
-----------------------------------------------------------------

From taco at elvenkind.com  Fri Sep 16 19:41:43 2005
From: taco at elvenkind.com (Taco Hoekwater)
Date: Fri Sep 16 19:43:52 2005
Subject: [Dev-luatex] lua keyword { }
In-Reply-To: <432AEF3C.6070407@wxs.nl>
References: <432AEF3C.6070407@wxs.nl>
Message-ID: <432B03D7.1030704@elvenkind.com>


Hi Hans,

Hans Hagen wrote:
> Hi,
> 
> So far we have
> 
> \lua     {...} : expanded, result of tex.print is inserted with catcodes 
> 11/12
> \lua otr {...} : delayed expansion (in otr), only pdf.print is  used, 
> tex.print is ignored

I'm still not completely sure this will work out.  Having multiple
primitives without keywords is definately easier to work with.

> currently we need to use \scantokens to process the result of tex.print 
> in a texie way (current catcode regime). So, in addition we can have:
> 
> \lua tex {...} : expanded, result of tex.print is fed into internal 
> scantokens

Sure, no problem.

> This saves passing args around.

But beware, you may end up being forced to create extra macros
because you cannot skip over the actual keyword "tex"  using
\expandafters.

> we also need:
> 
> \luatexversion   (currently 0.1.5)

This is "whatever version we want to use, right?". I'd like to use
this number instead of the pdftex/etex version string in the banner
(the 1.30.3-2.2 part), and use pdfluatex as executable name. Is that
acceptable ? (I'd like to 'flatten' the existing change files, as I
proposed on the pdftex list a month or so ago).

> \luaversion      (currently 5.0.2)

It seems the Lua we use right now has version

   #define LUA_VERSION        "Lua 5.1 (alpha)"

and also

   #define LUA_VERSION_NUM 501

but that is never used.

I assume that the version will become 510 soon. Anyway, you can
get the lua version string from inside \lua, as _VERSION, so
there is not really a need for a separate primitive.

Let's not forget  the primitive \luaesc, btw.

Greetings,

Taco




From pragma at wxs.nl  Fri Sep 16 19:50:12 2005
From: pragma at wxs.nl (Hans Hagen)
Date: Fri Sep 16 19:50:15 2005
Subject: [Dev-luatex] lua keyword { }
In-Reply-To: <432B03D7.1030704@elvenkind.com>
References: <432AEF3C.6070407@wxs.nl> <432B03D7.1030704@elvenkind.com>
Message-ID: <432B05D4.4040303@wxs.nl>

Taco Hoekwater wrote:

>
> But beware, you may end up being forced to create extra macros
> because you cannot skip over the actual keyword "tex"  using
> \expandafters.

ah, indeed, so let's go for multiple primitives then

>> we also need:
>>
>> \luatexversion   (currently 0.1.5)
>
>
> This is "whatever version we want to use, right?". I'd like to use
> this number instead of the pdftex/etex version string in the banner
> (the 1.30.3-2.2 part), and use pdfluatex as executable name. Is that
> acceptable ? (I'd like to 'flatten' the existing change files, as I
> proposed on the pdftex list a month or so ago).

ok

>> \luaversion      (currently 5.0.2)
>
this was what my command line version reported; looks like i need to 
update -)

> It seems the Lua we use right now has version
>
>   #define LUA_VERSION        "Lua 5.1 (alpha)"
>
> and also
>
>   #define LUA_VERSION_NUM 501
>
> but that is never used.
>
> I assume that the version will become 510 soon. Anyway, you can
> get the lua version string from inside \lua, as _VERSION, so
> there is not really a need for a separate primitive.

ah, indeed

> Let's not forget  the primitive \luaesc, btw.

indeed

and maybe also 

tex.def("whatever","...")
tex.edef("whatever","...")

so that we can play with the hash 

Hans 
Hans 

-----------------------------------------------------------------
                                          Hans Hagen | PRAGMA ADE
              Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | fax: 038 477 53 74 | www.pragma-ade.com
                                             | www.pragma-pod.nl
-----------------------------------------------------------------

From pragma at wxs.nl  Fri Sep 16 19:55:09 2005
From: pragma at wxs.nl (Hans Hagen)
Date: Fri Sep 16 19:55:06 2005
Subject: [Dev-luatex] lua keyword { }
In-Reply-To: <432B03D7.1030704@elvenkind.com>
References: <432AEF3C.6070407@wxs.nl> <432B03D7.1030704@elvenkind.com>
Message-ID: <432B06FD.4050707@wxs.nl>

Hi,

concerning the hash ...

i'd like to do the equivalent of:

tex.def("\\", "\string\\")

or, to avoid messing aroudn with parameters tex.set

of course the previous def should be something

tex.set("\string\\", "\string\string\string\\") 

but anyhow, it would permit defining macros in a non interfering way. 

For that we need two hooks: 

\everybeforelua 
\everyafterlua 



Hans 



-----------------------------------------------------------------
                                          Hans Hagen | PRAGMA ADE
              Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | fax: 038 477 53 74 | www.pragma-ade.com
                                             | www.pragma-pod.nl
-----------------------------------------------------------------

From taco at elvenkind.com  Sun Sep 18 09:13:40 2005
From: taco at elvenkind.com (Taco Hoekwater)
Date: Sun Sep 18 09:15:53 2005
Subject: [Dev-luatex] lua keyword { }
In-Reply-To: <432B06FD.4050707@wxs.nl>
References: <432AEF3C.6070407@wxs.nl> <432B03D7.1030704@elvenkind.com>
	<432B06FD.4050707@wxs.nl>
Message-ID: <432D13A4.208@elvenkind.com>

Hans Hagen wrote:
> Hi,
> 
> concerning the hash ...
> 
> i'd like to do the equivalent of:
> 
> tex.def("\\", "\string\\")

> or, to avoid messing aroudn with parameters tex.set
> 
> of course the previous def should be something
> 
> tex.set("\string\\", "\string\string\string\\")
> but anyhow, it would permit defining macros in a non interfering way.
> For that we need two hooks:
> \everybeforelua \everyafterlua

I'm a bit confused by this. Can you post a non-trivial example
of what you want to achieve?

Taco
From pragma at wxs.nl  Sun Sep 18 19:25:52 2005
From: pragma at wxs.nl (Hans Hagen)
Date: Sun Sep 18 19:25:52 2005
Subject: [Dev-luatex] lua keyword { }
In-Reply-To: <432D13A4.208@elvenkind.com>
References: <432AEF3C.6070407@wxs.nl> <432B03D7.1030704@elvenkind.com>
	<432B06FD.4050707@wxs.nl> <432D13A4.208@elvenkind.com>
Message-ID: <432DA320.6020201@wxs.nl>

Taco Hoekwater wrote:

> Hans Hagen wrote:
>
>> Hi,
>>
>> concerning the hash ...
>>
>> i'd like to do the equivalent of:
>>
>> tex.def("\\", "\string\\")
>
>
>> or, to avoid messing aroudn with parameters tex.set
>>
>> of course the previous def should be something
>>
>> tex.set("\string\\", "\string\string\string\\")
>> but anyhow, it would permit defining macros in a non interfering way.
>> For that we need two hooks:
>> \everybeforelua \everyafterlua
>
>
> I'm a bit confused by this. Can you post a non-trivial example
> of what you want to achieve?

\def\whatever{one}

lua { tex.set("whatever","two") }

\whatever -> two 



-----------------------------------------------------------------
                                          Hans Hagen | PRAGMA ADE
              Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | fax: 038 477 53 74 | www.pragma-ade.com
                                             | www.pragma-pod.nl
-----------------------------------------------------------------

From pragma at wxs.nl  Sun Sep 18 19:31:38 2005
From: pragma at wxs.nl (Hans Hagen)
Date: Sun Sep 18 19:31:30 2005
Subject: [Dev-luatex] lua keyword { }
In-Reply-To: <432D13A4.208@elvenkind.com>
References: <432AEF3C.6070407@wxs.nl> <432B03D7.1030704@elvenkind.com>
	<432B06FD.4050707@wxs.nl> <432D13A4.208@elvenkind.com>
Message-ID: <432DA47A.6060203@wxs.nl>

Taco Hoekwater wrote:

>> tex.set("\string\\", "\string\string\string\\")
>> but anyhow, it would permit defining macros in a non interfering way.
>> For that we need two hooks:
>> \everybeforelua \everyafterlua
>
>
> I'm a bit confused by this. Can you post a non-trivial example
> of what you want to achieve?

something: 

\newtoks\luabefore
\newtoks\luaafter

\def\mylua#1%
  {\the\luabefore
   \lua {#1}%
   \the\luaafter}

this one pick up the #1 (slows down) contary to a luabefore|after 
mechanism. 

This will permit us to push/pop meanings if macros and permit: 

\luabefore{\bgroup \def\\{\string\\}}
\luaafter {\egroup} 

\lua {tex.print(\\hbox{blabla}")} 

instead of 

\lua {tex.print(\string\\hbox{blabla}")} 

Hans 




-----------------------------------------------------------------
                                          Hans Hagen | PRAGMA ADE
              Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | fax: 038 477 53 74 | www.pragma-ade.com
                                             | www.pragma-pod.nl
-----------------------------------------------------------------

From skoupy at inf.ethz.ch  Tue Sep 20 11:58:08 2005
From: skoupy at inf.ethz.ch (Karel =?iso-8859-1?Q?Skoup=FD?=)
Date: Tue Sep 20 11:58:06 2005
Subject: [Dev-luatex] plugin for external formatting
Message-ID: <20050920095801.GA23823@inf.ethz.ch>

Hi all,

as Hans has already mentioned, my concern with luatex is to have some
interface/protocol for formatting the TeX stuff externally.

Without going to details now, I'm interested in alternative algorithms for
formatting not only paragraphs, but the whole stream. For TUG 2005 I have
written a prototype which doesn't use any TeX code at all (it just
parasities on ADvi code for getting some metric information and showing the
results). For long time I planned to make a whole new system from scratch,
but for several reasons, that was reconsidered and Hans proposed a way
(plugin mechanism for external engine), how to cooperate with TeX, so TeX
could benefit from the new algorithm and I can concentrate on the core
stuff.

So basically I need a stream of (character) boxes, glues, penalties, ...
(is there a simple unambiguous notion for all that?) in a preprocessed
form (I don't care about input and macro handling) plus some parameters
(standard paragraph breaking parameters and the new special ones) and I
will return a stream of fixed boxes.

'I' will often mean 'the engine' depending on the context :-)

In the first stage, I won't need lua (or any changes to TeX) at all. I
plan to use \showlists for my input stream and to generate a standard
TeX input file for reading the result back. Of course, it won't be so
simple, there will be some macro programming and trickery, which will
make the whole thing complicated, fragile, unreliable, and inefficient for
real use. Therefore some hooks from the actively developed TeX will be
probably useful for making the cooperation of TeX and the external
engine smooth. It might use lua or not, we will see, in any case I would
like to keep the plugin support generic and (complete but) minimal.

I will now list the aspects of the communications between TeX and the
engine which I have thought of so far. I will be glad if you can just think
about it for the moment and give me some feedback if you will.

* single paragraph stuff

I need:
(1) complete representation of all the stuff which is to be returned formatted
(2) sizes of all the objects which are involved in formatting
(3) properties which influence the formatting (breakable, discardable, ...)

It seems that the standard output of \showlists (or \showbox) will mostly do.
(1) is fulfilled I guess (the returned input needs to be only slightly
modified to fit TeX).

(2) is little bit tricky, because for the characters I get only an id of
the font. So I will need to know the exact reference to a real font to get
the metrics information. This can be learned by eg. \show\tenrm. But of
course it is not know in advance what fonts are used in the paragraph, so
either all fonts can be listed at the beginning -- but where to get the list of
all font definitions, and the definitions can actually change in the middle
of the paragraph -- or I can make a first pass, collect the font ids and
ask for them in the second pass. It will be bit tricky and won't be
reliable due to redefinitions (I can also change the current id using \let
and lose the old id (still used in the log), right?), so it will be OK for
experimenting but for a real version, I will need a better support from
TeX.

(3) is implicit, right?

* stream of paragraphs

I can need even the whole chapter, because I want to treat
- shapes and layouts, which are relative to page and not to a particular
  paragraph
- pagination, floats placement

For the basic experimenting I can redefine \par to something like
\hfil\break\indent but it will restrict all kinds of things which can
happen between the paragraphs (in vertical mode). Of course, the whole
thing will never be compatible to TeX, because TeX expect after \par that
the last paragraph was formatted and placed on the vertical list. So it
will be responsibility of the user/macro-programmer to bear the
consequences of using the alternative mechanism. Nevertheless, the
consequences should be as small as possible.

So for the prototyping I can redefine \par or perhaps I can store the whole
paragraphs in infinite hboxes (redefining \hsize?) or maybe I can use some
\specials for tagging, but for the production version, this will be a very
tricky part. Not so much for the engine, but mainly on the TeX side. It
should be of a great concern for people who would want to use the new
algorithms in their systems (Hans?), (after those ideas are first tested by
a prototype :-).

* passing the parameters specific to the new algorithms

- layouts, shapes
- maybe others, like weights for resolving paragraph contra page breaking

This will be a new thing so I hope that there is no compatibility burden.

* hyphenation

It will be a lot of additional work, but I think that I should handle it
locally. There are two reasons:

(1) the protocol for failing and getting the list with new discretionaries 
(TeX's 2nd pass) for every individual paragraph would be extremely
complicated, in the end it might be more difficult than handling it locally.

(2) TeX's hyphenation mechanism is IMHO one of the crappiest parts of TeX.
I mean the way how the (non)ligatures are screwed up for discretionaries
which are not used in the end. So if it is handled locally, it will be IMO
simpler and more correct. There are also some research results concerning
hyphenation, which are not implemented in TeX, because it would be too
complicated.

At the first stage, I'll omit the hyphenation completelly.

At the moment, I don't remember anything else. I'm looking forward for your
feedback.

--ksk
From taco at elvenkind.com  Tue Sep 20 13:01:23 2005
From: taco at elvenkind.com (Taco Hoekwater)
Date: Tue Sep 20 13:03:42 2005
Subject: [Dev-luatex] plugin for external formatting
In-Reply-To: <20050920095801.GA23823@inf.ethz.ch>
References: <20050920095801.GA23823@inf.ethz.ch>
Message-ID: <432FEC03.2090506@elvenkind.com>


Hi Karel,

Karel Skoup? wrote:
> Hi all,
> 
> as Hans has already mentioned, my concern with luatex is to have some
> interface/protocol for formatting the TeX stuff externally.

>   .. [snip] ...

> At the moment, I don't remember anything else. I'm looking forward for your
> feedback.

It will take some time before I fully understand your post, but I want
to bring up something that Hans and I have talked about recently, namely
the addition of 'nodelist registers' analogous to \toks registers.

The idea was to have registers and read/write syntax to allow things
like this (rough ideas, api may change yet):

   \list0=\unhbox0            % now \list0 contains a node list
   \list1={Hello world!}      % now \list1 also contains a node list
   \list2={\hsize=12in }      % error: only node-building allowed

   \write16{\the\list0 }      % like \showlists, but using a fully
                              % restorable read syntax

   \hsize=2in \the\list0 \par % typeset the node list

   \noindent hello world!
   \list0=\lastlist           % gobbles the node list from this par
                              % before anything is done to it.

Cheers,

Taco


From pragma at wxs.nl  Tue Sep 20 16:03:08 2005
From: pragma at wxs.nl (Hans Hagen)
Date: Tue Sep 20 16:03:32 2005
Subject: [Dev-luatex] plugin for external formatting
In-Reply-To: <20050920095801.GA23823@inf.ethz.ch>
References: <20050920095801.GA23823@inf.ethz.ch>
Message-ID: <4330169C.5060503@wxs.nl>

Karel Skoup wrote:

>* single paragraph stuff
>
>I need:
>(1) complete representation of all the stuff which is to be returned formatted
>(2) sizes of all the objects which are involved in formatting
>(3) properties which influence the formatting (breakable, discardable, ...)
>  
>
if this paragraph crosses a page, you may need to know the available 
room as well, so things like pagegoal and pagetotal also need to be 
communicated (maybe also left/right page state if the shape is page 
dependent i.e. inner or outer margin bound)

>It seems that the standard output of \showlists (or \showbox) will mostly do.
>(1) is fulfilled I guess (the returned input needs to be only slightly
>modified to fit TeX).
>  
>
it will probably do for the first prototype; i can imagine that you 
implement several strategies,

- simple paragraph, on page
- more boundary conditions
- possible page crossing

etc

>(2) is little bit tricky, because for the characters I get only an id of
>the font. So I will need to know the exact reference to a real font to get
>the metrics information. This can be learned by eg. \show\tenrm. But of
>course it is not know in advance what fonts are used in the paragraph, so
>either all fonts can be listed at the beginning -- but where to get the list of
>all font definitions, and the definitions can actually change in the middle
>of the paragraph -- or I can make a first pass, collect the font ids and
>ask for them in the second pass. It will be bit tricky and won't be
>reliable due to redefinitions (I can also change the current id using \let
>and lose the old id (still used in the log), right?), so it will be OK for
>experimenting but for a real version, I will need a better support from
>TeX.
>  
>
Why not resolve that info on forehand? Since the order does not change, 
I can imagine passing chars as some kind of special charbox (wd,dp.ht + 
ref) and when reading back, the ref can be used to insert the char node 
again; we don't need to save bytes -)

>(3) is implicit, right?
>
>  
>
is hyphenation known at that time (if i got it right, tex only looks at 
places where breakpoint smake sense, so you don't get all possible 
hyphenation points, unless we let tex do a pre break run with a zero 
hsize so that we get 'm all

>* stream of paragraphs
>
>I can need even the whole chapter, because I want to treat
>- shapes and layouts, which are relative to page and not to a particular
>  paragraph
>- pagination, floats placement
>  
>
let's talk of chunks instead of chapters and moving objects instead of 
floats -)

this is not easy, so that will be a stepwise refinement of the specs; 
something like a sequence of master shapes (normally rectangular text 
areas), frozen forbidden areas (anchored on pages) and movable 
forbidden/reserved areas (afterwards they may get content overlayed); we 
need some kind of 'special' mechanism where certain places in the 
constructed list can get postprocessed/things attached etc

>For the basic experimenting I can redefine \par to something like
>\hfil\break\indent but it will restrict all kinds of things which can
>happen between the paragraphs (in vertical mode). Of course, the whole
>thing will never be compatible to TeX, because TeX expect after \par that
>the last paragraph was formatted and placed on the vertical list. So it
>will be responsibility of the user/macro-programmer to bear the
>consequences of using the alternative mechanism. Nevertheless, the
>consequences should be as small as possible.
>  
>
redefining par will mess up a lot of things

>So for the prototyping I can redefine \par or perhaps I can store the whole
>paragraphs in infinite hboxes (redefining \hsize?) or maybe I can use some
>\specials for tagging, but for the production version, this will be a very
>tricky part. Not so much for the engine, but mainly on the TeX side. It
>should be of a great concern for people who would want to use the new
>algorithms in their systems (Hans?), (after those ideas are first tested by
>a prototype :-).
>  
>
see taco's mail, we should built a list writer

>* passing the parameters specific to the new algorithms
>
>- layouts, shapes
>- maybe others, like weights for resolving paragraph contra page breaking
>
>This will be a new thing so I hope that there is no compatibility burden.
>
>* hyphenation
>  
>
indeed in the end this is needed

>It will be a lot of additional work, but I think that I should handle it
>locally. There are two reasons:
>
>(1) the protocol for failing and getting the list with new discretionaries 
>(TeX's 2nd pass) for every individual paragraph would be extremely
>complicated, in the end it might be more difficult than handling it locally.
>  
>
indeed messing around with tex's list is painful (reconstructing, 
ligature mess, etc); i can even imagine that you implement it in such a 
way that we can use it as alternative for the existing one (basically 
the simple paragraph variant)

>(2) TeX's hyphenation mechanism is IMHO one of the crappiest parts of TeX.
>I mean the way how the (non)ligatures are screwed up for discretionaries
>which are not used in the end. So if it is handled locally, it will be IMO
>  
>
well, it works for english, which was the objective; DEK would 
rightfully react with: then why did nobody adapt it, replace it, etc -)

>simpler and more correct. There are also some research results concerning
>hyphenation, which are not implemented in TeX, because it would be too
>complicated.
>
>  
>
right, we need to add things like compound word hyphenation, dictionary 
support (in order to handle words that don't need the ligatures, etc)

>At the first stage, I'll omit the hyphenation completelly.
>  
>
or maybe some poor mans alternative: let tex give the list with all 
points and remove them when needed (ok, we lost kerning in the process) 
but it may look better that no hyphenation at all -)

Hans

-----------------------------------------------------------------
                                          Hans Hagen | PRAGMA ADE
              Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | fax: 038 477 53 74 | www.pragma-ade.com
                                             | www.pragma-pod.nl
-----------------------------------------------------------------

From pragma at wxs.nl  Tue Sep 20 16:23:00 2005
From: pragma at wxs.nl (Hans Hagen)
Date: Tue Sep 20 16:23:22 2005
Subject: [Dev-luatex] plugin for external formatting
In-Reply-To: <432FEC03.2090506@elvenkind.com>
References: <20050920095801.GA23823@inf.ethz.ch>
	<432FEC03.2090506@elvenkind.com>
Message-ID: <43301B44.5040304@wxs.nl>

Taco Hoekwater wrote:

> The idea was to have registers and read/write syntax to allow things
> like this (rough ideas, api may change yet):
>
>   \list0=\unhbox0            % now \list0 contains a node list
>   \list1={Hello world!}      % now \list1 also contains a node list
>   \list2={\hsize=12in }      % error: only node-building allowed
>
>   \write16{\the\list0 }      % like \showlists, but using a fully
>                              % restorable read syntax
>
>   \hsize=2in \the\list0 \par % typeset the node list
>
>   \noindent hello world!
>   \list0=\lastlist           % gobbles the node list from this par
>                              % before anything is done to it.

How complex is it to implement this?

Hans 

-----------------------------------------------------------------
                                          Hans Hagen | PRAGMA ADE
              Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | fax: 038 477 53 74 | www.pragma-ade.com
                                             | www.pragma-pod.nl
-----------------------------------------------------------------

From taco at elvenkind.com  Tue Sep 20 18:39:57 2005
From: taco at elvenkind.com (Taco Hoekwater)
Date: Tue Sep 20 18:42:16 2005
Subject: [Dev-luatex] plugin for external formatting
In-Reply-To: <43301B44.5040304@wxs.nl>
References: <20050920095801.GA23823@inf.ethz.ch>
	<432FEC03.2090506@elvenkind.com> <43301B44.5040304@wxs.nl>
Message-ID: <43303B5D.8020500@elvenkind.com>

Hans Hagen wrote:
> 
> 
> How complex is it to implement this?

It should not be very complicated (not deadsimple either), but
until today this was not even in the top-ten of my todo list ;-)

Taco
From skoupy at inf.ethz.ch  Tue Sep 20 22:59:52 2005
From: skoupy at inf.ethz.ch (Karel =?iso-8859-1?Q?Skoup=FD?=)
Date: Tue Sep 20 22:59:49 2005
Subject: [Dev-luatex] plugin for external formatting
In-Reply-To: <43301B44.5040304@wxs.nl> <4330169C.5060503@wxs.nl>
	<432FEC03.2090506@elvenkind.com>
References: <20050920095801.GA23823@inf.ethz.ch>
	<432FEC03.2090506@elvenkind.com> <43301B44.5040304@wxs.nl>
	<20050920095801.GA23823@inf.ethz.ch> <4330169C.5060503@wxs.nl>
	<20050920095801.GA23823@inf.ethz.ch>
	<432FEC03.2090506@elvenkind.com>
Message-ID: <20050920205951.GA24450@inf.ethz.ch>

On Tue, 20. Sep 2005, 13.01.23 13:01:23, Taco Hoekwater wrote:
> >At the moment, I don't remember anything else. I'm looking forward for your
> >feedback.
> 
> It will take some time before I fully understand your post, but I want
> to bring up something that Hans and I have talked about recently, namely
> the addition of 'nodelist registers' analogous to \toks registers.

That sounds all great.

> The idea was to have registers and read/write syntax to allow things
> like this (rough ideas, api may change yet):
> 
>   \list0=\unhbox0            % now \list0 contains a node list
>   \list1={Hello world!}      % now \list1 also contains a node list
>   \list2={\hsize=12in }      % error: only node-building allowed
> 
>   \write16{\the\list0 }      % like \showlists, but using a fully
>                              % restorable read syntax

Be careful about the redefinitions of the fonts in the middle of the
list. It can be either forbidden or reproduced  in the read.

For me the fully restorable read syntax is very important (can I get all
the information from standard \showlists now?). I also need all the
context information (font definitions, some parameters). It can be
passed as an extra chunk, if we figure out some protocol. But maybe it
can be also all inlined (see the char dimensions bellow), then it won't
be a restorable read syntax (there will be too much), but maybe we can
have \export16\list0 which dumps really everything. I don't mind filtering
out the extras when preparing my output (TeX's input).

>   \hsize=2in \the\list0 \par % typeset the node list

So \the\list0 will expand to tokens (consistent with \write), right? 
It won't just insert the list on the currently active list (would be
inconsistent with \write), right?

>   \noindent hello world!
>   \list0=\lastlist           % gobbles the node list from this par
>                              % before anything is done to it.

On Tue, 20. Sep 2005, 16.03.08 16:03:08, Hans Hagen wrote:
> >* single paragraph stuff
> >
> >I need:
> >(1) complete representation of all the stuff which is to be returned 
> >formatted
> >(2) sizes of all the objects which are involved in formatting
> >(3) properties which influence the formatting (breakable, discardable, ...)
> > 
> >
> if this paragraph crosses a page, you may need to know the available 
> room as well, so things like pagegoal and pagetotal also need to be 
> communicated (maybe also left/right page state if the shape is page 
> dependent i.e. inner or outer margin bound)

Sure, that's the multiple paragraph (stream) stuff. It will be the
really tricky part, not so much for me, but in TeX, the whole model must
be generalized/extended. It's not yet very clear to anybody, or is it?
I think it's a real research topic.

> >It seems that the standard output of \showlists (or \showbox) will mostly 
> >do.
> >(1) is fulfilled I guess (the returned input needs to be only slightly
> >modified to fit TeX).
> > 
> >
> it will probably do for the first prototype; i can imagine that you 
> implement several strategies,
> 
> - simple paragraph, on page

OK, but that won't bring much, just some funny shapes.

> - more boundary conditions
> - possible page crossing

Not only page crossing, but also column/shape/container crossing ...
The problem is that we are used to \parshape, which just specifies
something for certain lines in the current paragraph. But if we want to
introduce real page layouts, then the shapes are not relative to the
paragraphs any more. It will be a matter of formatting where a
particular paragraph starts in the layout.

> >(2) is little bit tricky, because for the characters I get only an id of
> >the font. So I will need to know the exact reference to a real font to get
> >the metrics information. This can be learned by eg. \show\tenrm. But of
> >course it is not know in advance what fonts are used in the paragraph, so
> >either all fonts can be listed at the beginning -- but where to get the 
> >list of
> >all font definitions, and the definitions can actually change in the middle
> >of the paragraph -- or I can make a first pass, collect the font ids and
> >ask for them in the second pass. It will be bit tricky and won't be
> >reliable due to redefinitions (I can also change the current id using \let
> >and lose the old id (still used in the log), right?), so it will be OK for
> >experimenting but for a real version, I will need a better support from
> >TeX.
> > 
> >
> Why not resolve that info on forehand? Since the order does not change, 
> I can imagine passing chars as some kind of special charbox (wd,dp.ht + 
> ref) and when reading back, the ref can be used to insert the char node 
> again; we don't need to save bytes -)

Sure, that would be great. Then I won't have to access metric files at
all. But should I wait for that? I wanted to start with the \showlists
output for prototyping. Well, I'll see how fast will I progress. Maybe,
that you'll be faster :-).

But concerning the metric files, if I want to treat hyphenation locally,
then I also need the kerning and ligature programs. In TeX it is done
too early (and then it is taken apart and (wrongly) reconstructed during
hyphenation pass). I want to do ligatures and kernings on demand,
basically after hyphenation (it's not that simple, but anyway).

> >(3) is implicit, right?
> >
> > 
> >
> is hyphenation known at that time (if i got it right, tex only looks at 
> places where breakpoint smake sense, so you don't get all possible 

NO. It screws up everything, not only taken or potential breaks, but
even the potential hyphenation points which are never considered a
break. It is also known too late, in the middle of the (atomic)
paragraph breaking process.

> hyphenation points, unless we let tex do a pre break run with a zero 
> hsize so that we get 'm all

No, no, it's much more stupid than you think. TeX first builds the
horizontal list with all kernings and ligatures, taking {} (in
dif{}ferent) into account. Then it tries the first breaking pass with the
\pretolerance. If that fails, then it takes the whole list, tries to
hyphenate *all* words in the lists, inserts the explicit
\discretionaries to *every* potential hyphen and reconstructs the
kernings and ligatures for the segments between the \discretionaries,
loosing all ligature preventions and yielding potentially incorrect
ligatures and kernings for words which are actually not hyphenated.
Then it tries the second (and maybe third pass), but it looses the
originally built list forever. The whole breaking is an atomic operation
(happening at \par), you can't do anything between the passes.

Taco, is that correct, or am I too TeX unfriendly?

> >* stream of paragraphs
> >
> >I can need even the whole chapter, because I want to treat
> >- shapes and layouts, which are relative to page and not to a particular
> > paragraph
> >- pagination, floats placement
> > 
> >
> let's talk of chunks instead of chapters and moving objects instead of 
> floats -)

Maybe we should make a whole new glossary, for example 'node' is quite
OK for everything in the list (char, box, glue, penalty, ...), but 'list'
is so ambiguous, there should be something more specific (maybe 'node
list'). TeX itself doesn't give clear names (classes) for those objects.
I had to make them names in NTS (to name the classes), maybe we can look
into it.

> this is not easy, so that will be a stepwise refinement of the specs; 

Exactly, we have touched it above.

> something like a sequence of master shapes (normally rectangular text 
> areas), frozen forbidden areas (anchored on pages) and movable 
> forbidden/reserved areas (afterwards they may get content overlayed); we 
> need some kind of 'special' mechanism where certain places in the 
> constructed list can get postprocessed/things attached etc

Yes.

> >For the basic experimenting I can redefine \par to something like
> >\hfil\break\indent but it will restrict all kinds of things which can
> >happen between the paragraphs (in vertical mode). Of course, the whole
> >thing will never be compatible to TeX, because TeX expect after \par that
> >the last paragraph was formatted and placed on the vertical list. So it
> >will be responsibility of the user/macro-programmer to bear the
> >consequences of using the alternative mechanism. Nevertheless, the
> >consequences should be as small as possible.
> > 
> >
> redefining par will mess up a lot of things

Sure, but I need something now for the prototyping and then some robust
support from luatex for the production.

> >* hyphenation
> > 
> >
> indeed in the end this is needed
> 
> >It will be a lot of additional work, but I think that I should handle it
> >locally. There are two reasons:
> >
> >(1) the protocol for failing and getting the list with new discretionaries 
> >(TeX's 2nd pass) for every individual paragraph would be extremely
> >complicated, in the end it might be more difficult than handling it 
> >locally.
> > 
> >
> indeed messing around with tex's list is painful (reconstructing, 
> ligature mess, etc); i can even imagine that you implement it in such a 
> way that we can use it as alternative for the existing one (basically 
> the simple paragraph variant)

Yes, that's my intention.

> >(2) TeX's hyphenation mechanism is IMHO one of the crappiest parts of TeX.
> >I mean the way how the (non)ligatures are screwed up for discretionaries
> >which are not used in the end. So if it is handled locally, it will be IMO
> > 
> well, it works for english, which was the objective; DEK would 
> rightfully react with: then why did nobody adapt it, replace it, etc -)

High time, huh?

It works for English (does it really always ?), because it is simple,
right? I don't know, whether it is a real problem in any other language
in practice. I just know the code and I think that it is incorrect,
inconsistent and illogical.

> >simpler and more correct. There are also some research results concerning
> >hyphenation, which are not implemented in TeX, because it would be too
> >complicated.
> >
> right, we need to add things like compound word hyphenation, dictionary 
> support (in order to handle words that don't need the ligatures, etc)

OK.

> >At the first stage, I'll omit the hyphenation completelly.
> > 
> or maybe some poor mans alternative: let tex give the list with all 
> points and remove them when needed (ok, we lost kerning in the process) 
> but it may look better that no hyphenation at all -)

Might be still more work that doing the right thing.

On Tue, 20. Sep 2005, 18.39.57 18:39:57, Taco Hoekwater wrote:
> Hans Hagen wrote:
> >
> >How complex is it to implement this?
> 
> It should not be very complicated (not deadsimple either), but
> until today this was not even in the top-ten of my todo list ;-)

TeX works with the node lists all the time, it shouldn't be so difficult
to make another kind of register to keep them. Well, everything can turn
tricky inside TeX code. In NTS, it would be trivial ;-).

--ksk
From pragma at wxs.nl  Wed Sep 21 10:52:08 2005
From: pragma at wxs.nl (Hans Hagen)
Date: Wed Sep 21 10:52:28 2005
Subject: [Dev-luatex] plugin for external formatting
In-Reply-To: <20050920205951.GA24450@inf.ethz.ch>
References: <20050920095801.GA23823@inf.ethz.ch>
	<432FEC03.2090506@elvenkind.com> <43301B44.5040304@wxs.nl>
	<20050920095801.GA23823@inf.ethz.ch> <4330169C.5060503@wxs.nl>
	<20050920095801.GA23823@inf.ethz.ch>
	<432FEC03.2090506@elvenkind.com>
	<20050920205951.GA24450@inf.ethz.ch>
Message-ID: <43311F38.6060703@wxs.nl>

Karel Skoup wrote:

>>  \hsize=2in \the\list0 \par % typeset the node list
>>    
>>
>
>So \the\list0 will expand to tokens (consistent with \write), right? 
>It won't just insert the list on the currently active list (would be
>inconsistent with \write), right?
>  
>
indeed

btw, we have the same situation with lua: 
\lua{tex.print("\string\\relax")} results in just the word \relax being 
typeset so in order to get it texed we nee to fee din into \scantokens

so, i can imagine that there is something \scanlist\expandafter{\the\toks0}

>Sure, that's the multiple paragraph (stream) stuff. It will be the
>really tricky part, not so much for me, but in TeX, the whole model must
>be generalized/extended. It's not yet very clear to anybody, or is it?
>I think it's a real research topic.
>  
>
indeed, stepwise refinement (start small -)

>OK, but that won't bring much, just some funny shapes.
>  
>
sure, but on the other hand, it can be used to 'replace' the current par 
builder by a more advanced (e.g. hyphenation) one, imagine that we have:

\paroutput
  {write list to file (or pipe)
   call plugin in one-paragraph mode
   read list from file (or pipe)}
  
that way we can replace the current par builder, because by default it's 
something equivalent to:

\paroutput{\scanlist\expandafter{\the\list255}}

i wonder how hard this is to implement, you and taco should know -)

>>- more boundary conditions
>>- possible page crossing
>>    
>>
>
>Not only page crossing, but also column/shape/container crossing ...
>The problem is that we are used to \parshape, which just specifies
>something for certain lines in the current paragraph. But if we want to
>introduce real page layouts, then the shapes are not relative to the
>paragraphs any more. It will be a matter of formatting where a
>particular paragraph starts in the layout.
>
>  
>
it's a combination:

- a main gutter shape (can be colums or whatever)
- shapes bound to places on the gutter
- shapes bound to specific places in the stream
- shapes that may float (within boundary condition)

>Sure, that would be great. Then I won't have to access metric files at
>all. But should I wait for that? I wanted to start with the \showlists
>output for prototyping. Well, I'll see how fast will I progress. Maybe,
>that you'll be faster :-).
>  
>
ok, i know you don't like messing around with the tex source, but i can 
imagine that this showlist stuff is doable, so if you want, you can 
provide patches to the web source; we're working with a branch of pdftex 
anyway;

>But concerning the metric files, if I want to treat hyphenation locally,
>then I also need the kerning and ligature programs. In TeX it is done
>too early (and then it is taken apart and (wrongly) reconstructed during
>hyphenation pass). I want to do ligatures and kernings on demand,
>basically after hyphenation (it's not that simple, but anyway).
>  
>
how about a font daemon, that one could cache/access font files; we need 
to go open type anyway so maybe such a deamon can be built on top of 
existing (non tex) libraries (port 31415)

>NO. It screws up everything, not only taken or potential breaks, but
>even the potential hyphenation points which are never considered a
>break. It is also known too late, in the middle of the (atomic)
>paragraph breaking process.
>  
>
ok, so that's a dead end

>  
>
>>hyphenation points, unless we let tex do a pre break run with a zero 
>>hsize so that we get 'm all
>>    
>>
>
>No, no, it's much more stupid than you think. TeX first builds the
>horizontal list with all kernings and ligatures, taking {} (in
>dif{}ferent) into account. Then it tries the first breaking pass with the
>\pretolerance. If that fails, then it takes the whole list, tries to
>hyphenate *all* words in the lists, inserts the explicit
>\discretionaries to *every* potential hyphen and reconstructs the
>kernings and ligatures for the segments between the \discretionaries,
>loosing all ligature preventions and yielding potentially incorrect
>ligatures and kernings for words which are actually not hyphenated.
>Then it tries the second (and maybe third pass), but it looses the
>originally built list forever. The whole breaking is an atomic operation
>(happening at \par), you can't do anything between the passes.
>
>Taco, is that correct, or am I too TeX unfriendly?
>  
>
-)

that's indeed too hard-coded for our purpose, so, next to a font daemon, 
we need a hyphenation daemon

>Maybe we should make a whole new glossary, for example 'node' is quite
>OK for everything in the list (char, box, glue, penalty, ...), but 'list'
>is so ambiguous, there should be something more specific (maybe 'node
>list'). TeX itself doesn't give clear names (classes) for those objects.
>I had to make them names in NTS (to name the classes), maybe we can look
>into it.
>
>  
>
good idea; we indeed need to define proper names and descriptions; can 
you make a proposal for that based on your nts experiences?

>>well, it works for english, which was the objective; DEK would 
>>rightfully react with: then why did nobody adapt it, replace it, etc -)
>>    
>>
>
>High time, huh?
>
>It works for English (does it really always ?), because it is simple,
>right? I don't know, whether it is a real problem in any other language
>in practice. I just know the code and I think that it is incorrect,
>inconsistent and illogical.
>  
>
my impression is that tehnumber of missed/wrong cases for english is so 
small that it falls within the 'no problem to correct it manually' 
criteria; languages with compound words, accented characters etc hav 
ehigher demands


Hans

-----------------------------------------------------------------
                                          Hans Hagen | PRAGMA ADE
              Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | fax: 038 477 53 74 | www.pragma-ade.com
                                             | www.pragma-pod.nl
-----------------------------------------------------------------

From taco at elvenkind.com  Wed Sep 21 10:59:33 2005
From: taco at elvenkind.com (Taco Hoekwater)
Date: Wed Sep 21 10:59:29 2005
Subject: [Dev-luatex] plugin for external formatting
In-Reply-To: <20050920205951.GA24450@inf.ethz.ch>
References: <20050920095801.GA23823@inf.ethz.ch>	<432FEC03.2090506@elvenkind.com>
	<43301B44.5040304@wxs.nl>	<20050920095801.GA23823@inf.ethz.ch>
	<4330169C.5060503@wxs.nl>	<20050920095801.GA23823@inf.ethz.ch>	<432FEC03.2090506@elvenkind.com>
	<20050920205951.GA24450@inf.ethz.ch>
Message-ID: <433120F5.20906@elvenkind.com>



Karel Skoup? wrote:
> 
> Be careful about the redefinitions of the fonts in the middle of the
> list. It can be either forbidden or reproduced  in the read.

> For me the fully restorable read syntax is very important (can I get all
  [...]

I believe all extra parameters had better be in-line, for optimal
flexibility. As much as possible, as least:  some information is
irretrievably lost in current TeX.

Quite a lot can be solved by adding a new read syntax for character
and language nodes, one that does not depend on font and language
id numbers. It'll be rather verbose and a tad slow, that is the
price you pay for extra flexibility.

>>  \hsize=2in \the\list0 \par % typeset the node list
> 
> So \the\list0 will expand to tokens (consistent with \write), right? 
> It won't just insert the list on the currently active list (would be
> inconsistent with \write), right?

Yes. I was aiming to be consistent with other uses of \the
(easier that way). For direct insertion, something like \unlist0
would be needed (analogous to hbox operation).

> But concerning the metric files, if I want to treat hyphenation locally,
> then I also need the kerning and ligature programs. In TeX it is done
> too early (and then it is taken apart and (wrongly) reconstructed during
> hyphenation pass). I want to do ligatures and kernings on demand,
> basically after hyphenation (it's not that simple, but anyway).

In current TeX, it is not done too early: ligkerns can influence which
line breaks are chosen, so the ligkern programs have to be applied
first thing.

Only the manner in which it is done is not quite as general as should
have been, resulting in the (sometimes) incorrect reconstruction of
ligatures.

>>is hyphenation known at that time (if i got it right, tex only looks at 
>>places where breakpoint smake sense, so you don't get all possible 
> 
> NO. It screws up everything, not only taken or potential breaks, but
> even the potential hyphenation points which are never considered a
> break. 

It does all potential hyphenation points, but that is still a subset
of all hyphenation points: absolutely impossible points are ignored
(like in the middle of the first line). At least, that's what Knuth's
web comments say, and note rhat is not a feature of the algorithm,
only an optimization.


> ..[]...
> Taco, is that correct, or am I too TeX unfriendly?

Perhaps just a little, but you have a valid case ;-)

> It works for English (does it really always ?), because it is simple,

Considering how strange the code is, it works fairly well for a
surprising number of languages.

> right? I don't know, whether it is a real problem in any other language
> in practice. I just know the code and I think that it is incorrect,
> inconsistent and illogical.

It is also near-impossible to fix while maintaining compatibility,
which is probably why no-one has seriously attempted to clean up
the code, up-til-now.

Greetings,

Taco


From pragma at wxs.nl  Wed Sep 21 11:17:23 2005
From: pragma at wxs.nl (Hans Hagen)
Date: Wed Sep 21 11:17:43 2005
Subject: [Dev-luatex] plugin for external formatting
In-Reply-To: <433120F5.20906@elvenkind.com>
References: <20050920095801.GA23823@inf.ethz.ch>
	<432FEC03.2090506@elvenkind.com> <43301B44.5040304@wxs.nl>
	<20050920095801.GA23823@inf.ethz.ch> <4330169C.5060503@wxs.nl>
	<20050920095801.GA23823@inf.ethz.ch>
	<432FEC03.2090506@elvenkind.com>
	<20050920205951.GA24450@inf.ethz.ch> <433120F5.20906@elvenkind.com>
Message-ID: <43312523.3090605@wxs.nl>

Taco Hoekwater wrote:

>
>>> is hyphenation known at that time (if i got it right, tex only looks 
>>> at places where breakpoint smake sense, so you don't get all possible 
>>
>>
>> NO. It screws up everything, not only taken or potential breaks, but
>> even the potential hyphenation points which are never considered a
>> break. 
>
>
> It does all potential hyphenation points, but that is still a subset
> of all hyphenation points: absolutely impossible points are ignored
> (like in the middle of the first line). At least, that's what Knuth's
> web comments say, and note rhat is not a feature of the algorithm,
> only an optimization.
>
so what happens if you remove the optimizations (forget about 100% 
compatibility)

>
> It is also near-impossible to fix while maintaining compatibility,
> which is probably why no-one has seriously attempted to clean up
> the code, up-til-now.

but we don't care much about that part of compatibility, do we? 

Hans 


-----------------------------------------------------------------
                                          Hans Hagen | PRAGMA ADE
              Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | fax: 038 477 53 74 | www.pragma-ade.com
                                             | www.pragma-pod.nl
-----------------------------------------------------------------

From taco at elvenkind.com  Wed Sep 21 11:18:09 2005
From: taco at elvenkind.com (Taco Hoekwater)
Date: Wed Sep 21 11:18:05 2005
Subject: [Dev-luatex] pdfliteral after text/rules
In-Reply-To: <Pine.LNX.4.61.0509152333010.6142@hahepc1.hahe>
References: <Pine.LNX.4.61.0509152333010.6142@hahepc1.hahe>
Message-ID: <43312551.9090801@elvenkind.com>


Shall I just apply this patch to the CVS version?

Taco

Hartmut Henkel wrote:
> To solve this ambiguity, i have tried the attached patch, which puts any
> rule into a qQ group and does "cm" transforms inside this group. So the
> rules are handled like text, which is also grouped (inside BT...ET).
From taco at elvenkind.com  Wed Sep 21 11:26:53 2005
From: taco at elvenkind.com (Taco Hoekwater)
Date: Wed Sep 21 11:26:50 2005
Subject: [Dev-luatex] plugin for external formatting
In-Reply-To: <43312523.3090605@wxs.nl>
References: <20050920095801.GA23823@inf.ethz.ch>
	<432FEC03.2090506@elvenkind.com> <43301B44.5040304@wxs.nl>
	<20050920095801.GA23823@inf.ethz.ch> <4330169C.5060503@wxs.nl>
	<20050920095801.GA23823@inf.ethz.ch>
	<432FEC03.2090506@elvenkind.com>
	<20050920205951.GA24450@inf.ethz.ch>
	<433120F5.20906@elvenkind.com> <43312523.3090605@wxs.nl>
Message-ID: <4331275D.8070306@elvenkind.com>



Hans Hagen wrote:
> so what happens if you remove the optimizations (forget about 100% 
> compatibility)

Probably (hopefully) nothing except some bloat in the data structure,
but I won't take bets on that.

>>
>> It is also near-impossible to fix while maintaining compatibility,
>> which is probably why no-one has seriously attempted to clean up
>> the code, up-til-now.
> 
> 
> but we don't care much about that part of compatibility, do we?

Nah. (but it was a big issue for etex, nts, and pdftex-in-dvi mode)

Taco
From pragma at wxs.nl  Wed Sep 21 11:50:47 2005
From: pragma at wxs.nl (Hans Hagen)
Date: Wed Sep 21 11:50:39 2005
Subject: [Dev-luatex] pdfliteral after text/rules
In-Reply-To: <43312551.9090801@elvenkind.com>
References: <Pine.LNX.4.61.0509152333010.6142@hahepc1.hahe>
	<43312551.9090801@elvenkind.com>
Message-ID: <43312CF7.3010801@wxs.nl>

Taco Hoekwater wrote:

>
> Shall I just apply this patch to the CVS version?

sure

Hans 

-----------------------------------------------------------------
                                          Hans Hagen | PRAGMA ADE
              Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | fax: 038 477 53 74 | www.pragma-ade.com
                                             | www.pragma-pod.nl
-----------------------------------------------------------------

From hanthethanh at gmail.com  Wed Sep 21 15:25:50 2005
From: hanthethanh at gmail.com (Thanh Han The)
Date: Wed Sep 21 15:25:55 2005
Subject: [Dev-luatex] plugin for external formatting
Message-ID: <74f506dc0509210625233579ce@mail.gmail.com>

Hi,

this is a long thread and too many things are discussed at
the same time so I will need some time to read and
understand what is going on.

My first thought is that some small modifications to
\showlist and \showbox will help a lot. It's easy to write
additional info like dimensions of each item in the list, or
in case of characters the filename of a tfm with fontsize
(or we may write the dimensions of each char as Hans
suggested, but this is an overkill IMHO).

My feeling is that we need to work out the specification and
format of the `` node list'' first. In the first step, I
would prefer to have only node-specific things, eg only what
comes out after a box construction. I also got a similar
request: to provide a primitive that writes out the content
of a box and another primitive to re-construct that box back
from the output. We can start with this and make further
extensions later on.

At the moment I cannot see clearly what is needed, but I am
willing to write some extensions so that we can experiment with
to see what is really needed and perhaps change what have been done.

Thanh


On Tue, Sep 20, 2005 at 11:58:08AM +0200, Karel Skoupy wrote:
> Hi all,
>
> as Hans has already mentioned, my concern with luatex is to have some
> interface/protocol for formatting the TeX stuff externally.
>
> Without going to details now, I'm interested in alternative algorithms for
> formatting not only paragraphs, but the whole stream. For TUG 2005 I have
> written a prototype which doesn't use any TeX code at all (it just
> parasities on ADvi code for getting some metric information and showing the
> results). For long time I planned to make a whole new system from scratch,
> but for several reasons, that was reconsidered and Hans proposed a way
> (plugin mechanism for external engine), how to cooperate with TeX, so TeX
> could benefit from the new algorithm and I can concentrate on the core
> stuff.
>
> So basically I need a stream of (character) boxes, glues, penalties, ...
> (is there a simple unambiguous notion for all that?) in a preprocessed
> form (I don't care about input and macro handling) plus some parameters
> (standard paragraph breaking parameters and the new special ones) and I
> will return a stream of fixed boxes.
>
> 'I' will often mean 'the engine' depending on the context :-)
>
> In the first stage, I won't need lua (or any changes to TeX) at all. I
> plan to use \showlists for my input stream and to generate a standard
> TeX input file for reading the result back. Of course, it won't be so
> simple, there will be some macro programming and trickery, which will
> make the whole thing complicated, fragile, unreliable, and inefficient for
> real use. Therefore some hooks from the actively developed TeX will be
> probably useful for making the cooperation of TeX and the external
> engine smooth. It might use lua or not, we will see, in any case I would
> like to keep the plugin support generic and (complete but) minimal.
>
> I will now list the aspects of the communications between TeX and the
> engine which I have thought of so far. I will be glad if you can just think
> about it for the moment and give me some feedback if you will.
>
> * single paragraph stuff
>
> I need:
> (1) complete representation of all the stuff which is to be returned formatted
> (2) sizes of all the objects which are involved in formatting
> (3) properties which influence the formatting (breakable, discardable, ...)
>
> It seems that the standard output of \showlists (or \showbox) will mostly do.
> (1) is fulfilled I guess (the returned input needs to be only slightly
> modified to fit TeX).
>
> (2) is little bit tricky, because for the characters I get only an id of
> the font. So I will need to know the exact reference to a real font to get
> the metrics information. This can be learned by eg. \show\tenrm. But of
> course it is not know in advance what fonts are used in the paragraph, so
> either all fonts can be listed at the beginning -- but where to get the list of
> all font definitions, and the definitions can actually change in the middle
> of the paragraph -- or I can make a first pass, collect the font ids and
> ask for them in the second pass. It will be bit tricky and won't be
> reliable due to redefinitions (I can also change the current id using \let
> and lose the old id (still used in the log), right?), so it will be OK for
> experimenting but for a real version, I will need a better support from
> TeX.
>
> (3) is implicit, right?
>
> * stream of paragraphs
>
> I can need even the whole chapter, because I want to treat
> - shapes and layouts, which are relative to page and not to a particular
>   paragraph
> - pagination, floats placement
>
> For the basic experimenting I can redefine \par to something like
> \hfil\break\indent but it will restrict all kinds of things which can
> happen between the paragraphs (in vertical mode). Of course, the whole
> thing will never be compatible to TeX, because TeX expect after \par that
> the last paragraph was formatted and placed on the vertical list. So it
> will be responsibility of the user/macro-programmer to bear the
> consequences of using the alternative mechanism. Nevertheless, the
> consequences should be as small as possible.
>
> So for the prototyping I can redefine \par or perhaps I can store the whole
> paragraphs in infinite hboxes (redefining \hsize?) or maybe I can use some
> \specials for tagging, but for the production version, this will be a very
> tricky part. Not so much for the engine, but mainly on the TeX side. It
> should be of a great concern for people who would want to use the new
> algorithms in their systems (Hans?), (after those ideas are first tested by
> a prototype :-).
>
> * passing the parameters specific to the new algorithms
>
> - layouts, shapes
> - maybe others, like weights for resolving paragraph contra page breaking
>
> This will be a new thing so I hope that there is no compatibility burden.
>
> * hyphenation
>
> It will be a lot of additional work, but I think that I should handle it
> locally. There are two reasons:
>
> (1) the protocol for failing and getting the list with new discretionaries
> (TeX's 2nd pass) for every individual paragraph would be extremely
> complicated, in the end it might be more difficult than handling it locally.
>
> (2) TeX's hyphenation mechanism is IMHO one of the crappiest parts of TeX.
> I mean the way how the (non)ligatures are screwed up for discretionaries
> which are not used in the end. So if it is handled locally, it will be IMO
> simpler and more correct. There are also some research results concerning
> hyphenation, which are not implemented in TeX, because it would be too
> complicated.
>
> At the first stage, I'll omit the hyphenation completelly.
>
> At the moment, I don't remember anything else. I'm looking forward for your
> feedback.
>
> --ksk
> _______________________________________________
> Dev-luatex mailing list
> Dev-luatex@ntg.nl
> http://www.ntg.nl/mailman/listinfo/dev-luatex
>
From hartmut_henkel at gmx.de  Wed Sep 21 22:30:02 2005
From: hartmut_henkel at gmx.de (Hartmut Henkel)
Date: Wed Sep 21 22:30:08 2005
Subject: [Dev-luatex] pdfliteral after text/rules
In-Reply-To: <43312CF7.3010801@wxs.nl>
References: <Pine.LNX.4.61.0509152333010.6142@hahepc1.hahe>
	<43312551.9090801@elvenkind.com> <43312CF7.3010801@wxs.nl>
Message-ID: <Pine.LNX.4.61.0509212221570.4131@hahepc1.hahe>

On Wed, 21 Sep 2005, Hans Hagen wrote:

> Taco Hoekwater wrote:
>
> > Shall I just apply this patch to the CVS version?
>
> sure

yes, talked about it already with Thanh. Should be ok. But i was
reluctant, as there should be an inofficial pdftex version first which
Hans can power-crash-test on his complicated graphics and transforms. I
had forgotten that -- Hey! -- that inofficial version is pdfluatex :-)

Please take the attached patch, just one code line is simplified.

And thanks a lot, Taco!

Regards, Hartmut
-------------- next part --------------
%$Id: rule.ch,v 1.4 2005/09/17 19:57:25 hahe Exp hahe $
% rule in a group
%***********************************************************************

@x 15882
@p procedure pdf_set_origin; {set the origin to |cur_h|, |cur_v|}
begin
    if (abs(cur_h - pdf_origin_h) >= min_bp_val) or
        (abs(cur_v - pdf_origin_v) >= min_bp_val) then begin
        pdf_print("1 0 0 1 ");
        pdf_print_bp(cur_h - pdf_origin_h);
        pdf_origin_h := pdf_origin_h + scaled_out;
        pdf_out(" ");
        pdf_print_bp(pdf_origin_v - cur_v);
        pdf_origin_v := pdf_origin_v - scaled_out;
        pdf_print_ln(" cm");
    end;
    pdf_h := pdf_origin_h;
    pdf_last_h := pdf_origin_h;
    pdf_v := pdf_origin_v;
    pdf_last_v := pdf_origin_v;
end;
@y
@p procedure pdf_set_origin; {set the origin to |cur_h|, |cur_v|}
begin
    if (abs(cur_h - pdf_origin_h) >= min_bp_val) or
        (abs(cur_v - pdf_origin_v) >= min_bp_val) then begin
        pdf_print("1 0 0 1 ");
        pdf_print_bp(cur_h - pdf_origin_h);
        pdf_origin_h := pdf_origin_h + scaled_out;
        pdf_out(" ");
        pdf_print_bp(pdf_origin_v - cur_v);
        pdf_origin_v := pdf_origin_v - scaled_out;
        pdf_print_ln(" cm");
    end;
    pdf_h := pdf_origin_h;
    pdf_last_h := pdf_origin_h;
    pdf_v := pdf_origin_v;
    pdf_last_v := pdf_origin_v;
end;

@
@p procedure pdf_set_origin_temp; {set the origin to |cur_h|, |cur_v| inside group}
var h_bp, v_bp: scaled; {current position (bp system)}
begin
    if (abs(cur_h - pdf_origin_h) >= min_bp_val) or
        (abs(cur_v - pdf_origin_v) >= min_bp_val) then begin
        pdf_print("1 0 0 1 ");
        pdf_print_bp(cur_h - pdf_origin_h);
        pdf_out(" ");
        pdf_print_bp(pdf_origin_v - cur_v);
        pdf_print_ln(" cm");
    end;
end;
@z

%***********************************************************************

@x 16045
procedure pdf_set_rule(x, y, w, h: scaled); {draw a rule}
begin
    pdf_end_text;
    pdf_set_origin;
    if h <= one_bp then begin
        pdf_print_ln("q");
        pdf_print_ln("[]0 d");
        pdf_print_ln("0 J");
        pdf_print_bp(h); pdf_print_ln(" w");
        pdf_print("0 "); pdf_print_bp((h + 1)/2); pdf_print_ln(" m");
        pdf_print_bp(w); pdf_print(" "); pdf_print_bp((h + 1)/2);
        pdf_print_ln(" l");
        pdf_print_ln("S");
        pdf_print_ln("Q");
    end
    else if w <= one_bp then begin
        pdf_print_ln("q");
        pdf_print_ln("[]0 d");
        pdf_print_ln("0 J");
        pdf_print_bp(w); pdf_print_ln(" w");
        pdf_print_bp((w + 1)/2); pdf_print_ln(" 0 m");
        pdf_print_bp((w + 1)/2); pdf_print(" "); pdf_print_bp(h);
        pdf_print_ln(" l");
        pdf_print_ln("S");
        pdf_print_ln("Q");
    end
    else begin
        pdf_print_bp(pdf_x(x)); pdf_out(" ");
        pdf_print_bp(pdf_y(y)); pdf_out(" ");
        pdf_print_bp(w); pdf_out(" ");
        pdf_print_bp(h); pdf_print_ln(" re f");
    end;
end;

@y
procedure pdf_set_rule(x, y, w, h: scaled); {draw a rule}
var temp_cur_h, temp_cur_v: scaled;
begin
    pdf_end_text;
    pdf_print_ln("q");
    pdf_set_origin_temp;
    if h <= one_bp then begin
        pdf_print("[]0 d 0 J ");
        pdf_print_bp(h); pdf_print_ln(" w");
        pdf_print("0 "); pdf_print_bp((h + 1)/2); pdf_print(" m ");
        pdf_print_bp(w); pdf_print(" "); pdf_print_bp((h + 1)/2);
        pdf_print_ln(" l S");
    end
    else if w <= one_bp then begin
        pdf_print("[]0 d 0 J ");
        pdf_print_bp(w); pdf_print_ln(" w");
        pdf_print_bp((w + 1)/2); pdf_print(" 0 m ");
        pdf_print_bp((w + 1)/2); pdf_print(" "); pdf_print_bp(h);
        pdf_print_ln(" l S");
    end
    else begin
        pdf_print_("0 0 ");
        pdf_print_bp(w); pdf_out(" ");
        pdf_print_bp(h); pdf_print_ln(" re f");
    end;
    pdf_print_ln("Q");
end;
@z

%***********************************************************************
From pragma at wxs.nl  Thu Sep 22 09:02:43 2005
From: pragma at wxs.nl (Hans Hagen)
Date: Thu Sep 22 09:02:33 2005
Subject: [Dev-luatex] plugin for external formatting
In-Reply-To: <74f506dc0509210625233579ce@mail.gmail.com>
References: <74f506dc0509210625233579ce@mail.gmail.com>
Message-ID: <43325713.6040006@wxs.nl>

Thanh Han The wrote:

>My feeling is that we need to work out the specification and
>format of the `` node list'' first. In the first step, I
>would prefer to have only node-specific things, eg only what
>comes out after a box construction. I also got a similar
>request: to provide a primitive that writes out the content
>of a box and another primitive to re-construct that box back
>from the output. We can start with this and make further
>extensions later on.
>
>At the moment I cannot see clearly what is needed, but I am
>willing to write some extensions so that we can experiment with
>to see what is really needed and perhaps change what have been done.
>  
>
i'd say ... go ahead, so that we get a picture; at least we then hav ea starting point for karl's work 

Hans 

-----------------------------------------------------------------
                                          Hans Hagen | PRAGMA ADE
              Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | fax: 038 477 53 74 | www.pragma-ade.com
                                             | www.pragma-pod.nl
-----------------------------------------------------------------

From taco at elvenkind.com  Thu Sep 22 10:18:22 2005
From: taco at elvenkind.com (Taco Hoekwater)
Date: Thu Sep 22 10:18:18 2005
Subject: [Dev-luatex] pdfliteral after text/rules
In-Reply-To: <Pine.LNX.4.61.0509212221570.4131@hahepc1.hahe>
References: <Pine.LNX.4.61.0509152333010.6142@hahepc1.hahe>
	<43312551.9090801@elvenkind.com> <43312CF7.3010801@wxs.nl>
	<Pine.LNX.4.61.0509212221570.4131@hahepc1.hahe>
Message-ID: <433268CE.2050106@elvenkind.com>



Hartmut Henkel wrote:
>>>Shall I just apply this patch to the CVS version?
>>
>>sure
> 
> 
> yes, talked about it already with Thanh. Should be ok. But i was
> reluctant, as there should be an inofficial pdftex version first which
> Hans can power-crash-test on his complicated graphics and transforms. I
> had forgotten that -- Hey! -- that inofficial version is pdfluatex :-)

Applied and committed. I've also changed the banner a bit, it now says:

   This is pdfLuaTeXk, Version 3.141592-0.1.0-2.2 (Web2C 7.5.5)

it is not much yet, but it helps me keep my executables apart.
That reminds me, do we want/need a pdfluatex' that is not e-TeX,
as it is currently with the 'pdftex/pdfetex' twins, or is one
executable enough? (My vote goes to a single exe).


Taco
From pragma at wxs.nl  Thu Sep 22 17:23:52 2005
From: pragma at wxs.nl (Hans Hagen)
Date: Thu Sep 22 17:23:43 2005
Subject: [Dev-luatex] pdfliteral after text/rules
In-Reply-To: <433268CE.2050106@elvenkind.com>
References: <Pine.LNX.4.61.0509152333010.6142@hahepc1.hahe>
	<43312551.9090801@elvenkind.com> <43312CF7.3010801@wxs.nl>
	<Pine.LNX.4.61.0509212221570.4131@hahepc1.hahe>
	<433268CE.2050106@elvenkind.com>
Message-ID: <4332CC88.5090809@wxs.nl>

Taco Hoekwater wrote:

>
>
> it is not much yet, but it helps me keep my executables apart.
> That reminds me, do we want/need a pdfluatex' that is not e-TeX,
> as it is currently with the 'pdftex/pdfetex' twins, or is one
> executable enough? (My vote goes to a single exe).

good! i assume that the pool file is also named as such 

Hans 
 

-----------------------------------------------------------------
                                          Hans Hagen | PRAGMA ADE
              Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | fax: 038 477 53 74 | www.pragma-ade.com
                                             | www.pragma-pod.nl
-----------------------------------------------------------------

From hanthethanh at gmail.com  Fri Sep 23 22:01:51 2005
From: hanthethanh at gmail.com (Thanh Han The)
Date: Fri Sep 23 22:31:23 2005
Subject: [Dev-luatex] plugin for external formatting
Message-ID: <74f506dc05092313012b2043b6@mail.gmail.com>

On Thu, Sep 22, 2005 at 09:02:43AM +0200, Hans Hagen wrote:
> Thanh Han The wrote:
>
> >My feeling is that we need to work out the specification and
> >format of the `` node list'' first. In the first step, I
> >would prefer to have only node-specific things, eg only what
> >comes out after a box construction. I also got a similar
> >request: to provide a primitive that writes out the content
> >of a box and another primitive to re-construct that box back
> >from the output. We can start with this and make further
> >extensions later on.
> >
> >At the moment I cannot see clearly what is needed, but I am
> >willing to write some extensions so that we can experiment with
> >to see what is really needed and perhaps change what have been done.
> >
> >
> i'd say ... go ahead, so that we get a picture; at least we then hav ea
> starting point for karl's work

err -- we need to work out how the node list will be output
and input back first. I am still waiting for Karel's
opinion.

Thanh
From skoupy at inf.ethz.ch  Sun Sep 25 06:22:48 2005
From: skoupy at inf.ethz.ch (Karel =?iso-8859-1?Q?Skoup=FD?=)
Date: Sun Sep 25 06:21:58 2005
Subject: [Dev-luatex] plugin for external formatting
In-Reply-To: <43325713.6040006@wxs.nl>
	<74f506dc0509210625233579ce@mail.gmail.com>
	<4331275D.8070306@elvenkind.com> <43312523.3090605@wxs.nl>
	<433120F5.20906@elvenkind.com> <43311F38.6060703@wxs.nl>
References: <433120F5.20906@elvenkind.com> <20050920095801.GA23823@inf.ethz.ch>
	<432FEC03.2090506@elvenkind.com> <43301B44.5040304@wxs.nl>
	<20050920095801.GA23823@inf.ethz.ch> <4330169C.5060503@wxs.nl>
	<20050920095801.GA23823@inf.ethz.ch>
	<432FEC03.2090506@elvenkind.com>
	<20050920205951.GA24450@inf.ethz.ch> <43311F38.6060703@wxs.nl>
Message-ID: <20050925042246.GA31177@inf.ethz.ch>

Hi all,

On Wed, 21. Sep 2005, 10.52.08 10:52:08, Hans Hagen wrote:
> >OK, but that won't bring much, just some funny shapes.
> > 
> >
> sure, but on the other hand, it can be used to 'replace' the current par 
> builder by a more advanced (e.g. hyphenation) one, imagine that we have:
> 
> \paroutput
>  {write list to file (or pipe)
>   call plugin in one-paragraph mode
>   read list from file (or pipe)}
>  
> that way we can replace the current par builder, because by default it's 
> something equivalent to:
> 
> \paroutput{\scanlist\expandafter{\the\list255}}

Sorry, I don't understand this very well. \list# is what we want to
have, right? And \scanlist is a primitive of eTeX? I'm not used to it,
but I believe that the way how \scanlist works is the best fitting the
TeX macro programming. Where can I see any examples to understand it
better?

Then, \paroutput should be analogous to \output, right?  Then
\scanlist\expandafter{\the\list255} would just put the paragraph on the
current list, right? But where is the paragraph broken by the default
algorithm? If it is before activating \paroutput, then it is too late to
rebreak (some information is lost and it would be wasting of processor
anyway) so it can be only afterwards, but how would it recognize whether
the list needs braking by the default breaker or not?

Anyway, \output and ending a paragraph are not analogous because \output
is asynchronous and \par is synchronous (\paroutput would be activated
by \par?). Or do you think that \paroutput should be just for one line
when considering a break (that would be terribly complicated).

Sorry, I'm confused, but maybe I just take this line too seriously :-)

> 
> i wonder how hard this is to implement, you and taco should know -)

Of course that handling just one paragraph externally must by much
easier than handling several ones, especially because nothing
substantial in TeX model must be changed (one atomic operation would be
replaced by another one on the same data).

But for my research it has almost no value, I really need to work with
whole chunks and layout chains if I want to achieve anything
interesting.

> >Not only page crossing, but also column/shape/container crossing ...
> >The problem is that we are used to \parshape, which just specifies
> >something for certain lines in the current paragraph. But if we want to
> >introduce real page layouts, then the shapes are not relative to the
> >paragraphs any more. It will be a matter of formatting where a
> >particular paragraph starts in the layout.
> >
> > 
> >
> it's a combination:
> 
> - a main gutter shape (can be colums or whatever)
> - shapes bound to places on the gutter
> - shapes bound to specific places in the stream
> - shapes that may float (within boundary condition)

That's right.

> >But concerning the metric files, if I want to treat hyphenation locally,
> >then I also need the kerning and ligature programs. In TeX it is done
> >too early (and then it is taken apart and (wrongly) reconstructed during
> >hyphenation pass). I want to do ligatures and kernings on demand,
> >basically after hyphenation (it's not that simple, but anyway).
> > 
> >
> how about a font daemon, that one could cache/access font files; we need 
> to go open type anyway so maybe such a deamon can be built on top of 
> existing (non tex) libraries (port 31415)

A real daemon or a C library linked to the application (like kpathsea)?
Well, there should be a library which provides simple interface to a
client in any case, that library can (optionally) communicate with a
daemon, that is how the client-daemon usually work.

> -)
> 
> that's indeed too hard-coded for our purpose, so, next to a font daemon, 
> we need a hyphenation daemon

I would start with a generic interface providing fonts and hyphenation.
If it accesses the files or communicates with a daemon is an internal
matter of the module implementing the interface.

> >Maybe we should make a whole new glossary, for example 'node' is quite
> >OK for everything in the list (char, box, glue, penalty, ...), but 'list'
> >is so ambiguous, there should be something more specific (maybe 'node
> >list'). TeX itself doesn't give clear names (classes) for those objects.
> >I had to make them names in NTS (to name the classes), maybe we can look
> >into it.
> >
> good idea; we indeed need to define proper names and descriptions; can 
> you make a proposal for that based on your nts experiences?

Well the whole problem is, that there are no properly defined
data structures with unique type names in TeX (just some all-purpose
data structures and macros which one must extremely careful with). Then 
there is no explicit need for unique names of different data types.
So in NTS, I had to make names for types which are no explicit types in
TeX.

The two most outstanding examples are:
* NodeList (nothing new, just the 'node' is always explicit)
* Builder (currently built vertical/horizontal/... list)

> >It works for English (does it really always ?), because it is simple,
> >right? I don't know, whether it is a real problem in any other language
> >in practice. I just know the code and I think that it is incorrect,
> >inconsistent and illogical.
> > 
> >
> my impression is that tehnumber of missed/wrong cases for english is so 
> small that it falls within the 'no problem to correct it manually' 
> criteria; languages with compound words, accented characters etc hav 
> ehigher demands

Its maybe not a real problem in practice but it was the biggest pain to
reimplement in NTS. It could be actually easier to do it in the 'right
way'. So if I have to do it next time I don't want to repeat the same
annoyance.

On Wed, 21. Sep 2005, 10.59.33 10:59:33, Taco Hoekwater wrote:
> >For me the fully restorable read syntax is very important (can I get all
>  [...]
> 
> I believe all extra parameters had better be in-line, for optimal
> flexibility. As much as possible, as least:  some information is
> irretrievably lost in current TeX.
>
> Quite a lot can be solved by adding a new read syntax for character
> and language nodes, one that does not depend on font and language
> id numbers. It'll be rather verbose and a tad slow, that is the
> price you pay for extra flexibility.

Well, inline is convenient to import but might be an overkill if there
is a lot of info (like font file name and 'at size') for each character.
That can be saved by using references, i.e. outputting a table first and
then referencing the ids from the table. For scanning it's not much more
work but for writing it requires a pass which collects the table from
the references in the data first.

> >But concerning the metric files, if I want to treat hyphenation locally,
> >then I also need the kerning and ligature programs. In TeX it is done
> >too early (and then it is taken apart and (wrongly) reconstructed during
> >hyphenation pass). I want to do ligatures and kernings on demand,
> >basically after hyphenation (it's not that simple, but anyway).
> 
> In current TeX, it is not done too early: ligkerns can influence which
> line breaks are chosen, so the ligkern programs have to be applied
> first thing.

Yes, I know, I wrote that it's not that simple. IMO the ligkerns
should be considered many times but the final modification of the data
should be late. I would postpone it until output and ask dynamically
(with maybe some caching) each time it is needed (getting sizes, ...).
This approach would need to represent ligature prevention ({}) explicitly
as a node.

> >NO. It screws up everything, not only taken or potential breaks, but
> >even the potential hyphenation points which are never considered a
> >break. 
> 
> It does all potential hyphenation points, but that is still a subset
> of all hyphenation points: absolutely impossible points are ignored
> (like in the middle of the first line). At least, that's what Knuth's
> web comments say, and note rhat is not a feature of the algorithm,
> only an optimization.

I forgot about the first line, but is there anything else?

> Perhaps just a little, but you have a valid case ;-)

Well, we can stop it here and make a unique thread if it is ever needed.

> >right? I don't know, whether it is a real problem in any other language
> >in practice. I just know the code and I think that it is incorrect,
> >inconsistent and illogical.
> 
> It is also near-impossible to fix while maintaining compatibility,
> which is probably why no-one has seriously attempted to clean up
> the code, up-til-now.

Sure, I originally wanted to do it in the 'right way' in NTS, but then I
realized that was impossible while keeping compatibility and it was a
real pain to reimplement it.

On Wed, 21. Sep 2005, 11.26.53 11:26:53, Taco Hoekwater wrote:
> Hans Hagen wrote:
> >so what happens if you remove the optimizations (forget about 100% 
> >compatibility)
> 
> Probably (hopefully) nothing except some bloat in the data structure,
> but I won't take bets on that.

But the only optimization is not changing the ligkerns in the first line
of the paragraph while hyphenating, right? Then removing that would be
even worse, but the difference is so small, anyway; this optimization is
really not a problem.

> >>It is also near-impossible to fix while maintaining compatibility,
> >>which is probably why no-one has seriously attempted to clean up
> >>the code, up-til-now.
> >
> >
> >but we don't care much about that part of compatibility, do we?
> 
> Nah. (but it was a big issue for etex, nts, and pdftex-in-dvi mode)

Exactly, it was a nightmare for me.

On Wed, 21. Sep 2005, 06.25.50 06:25:50, Thanh Han The wrote:
> My first thought is that some small modifications to
> \showlist and \showbox will help a lot. It's easy to write
> additional info like dimensions of each item in the list, or
> in case of characters the filename of a tfm with fontsize
> (or we may write the dimensions of each char as Hans
> suggested, but this is an overkill IMHO).

If I get the dimensions of characters explicitly, then I don't need to
access/know the metric files. But this changes if I want to handle
the hyphenation locally (which seems like the only way). Then I need
also the ligkerns so I would either also need them explicitly (I mean
the ligkern programs) -- that would be quite complicated to export (and
import) -- or I would need to access the metric files anyway.

Therefore the explicit char dimensions seems like a temporary solution
only and I don't think it's worth doing.

> My feeling is that we need to work out the specification and
> format of the `` node list'' first. In the first step, I
> would prefer to have only node-specific things, eg only what
> comes out after a box construction. I also got a similar
> request: to provide a primitive that writes out the content
> of a box and another primitive to re-construct that box back
> from the output. We can start with this and make further
> extensions later on.

Well, I think that the \showlists output contains everything except
the reliable font id (and the language id?) and it is parseable. Well,
the syntax could be slightly changed to make it more compatible with the
input syntax (or maybe it can be really written in the input syntax) or
to be better parseable by a plugin but the information carried by the
syntax is the real matter.

If I have all referenced fonts explicitly defined at the beginning (with
maybe some renaming of the font ids when conflicts arise (can it happen?))
then I'm happy.

So with the current syntax it would be something like:

\tenrm=select font cmr10.
\twelveit=select font cmti10 at 12.0pt.
\hbox(6.94444+1.94444)x435.9297, glue set 318.73502fil
.\hbox(0.0+0.0)x0.0
.\tenrm F
.\kern-0.83334
.\tenrm r
.\tenrm e
.\tenrm e
.\tenrm -
.\discretionary
.\tenrm s
.\tenrm h
.\tenrm a
.\tenrm p
.\kern0.27779
.\tenrm e
.\glue 3.33333 plus 1.66666 minus 1.11111
.\twelveit t
.\twelveit e
.\twelveit x
.\twelveit t

or in the input syntax:

\font\tenrm=cmr10 at 10.0pt
\font\twelveit=cmti10 at 12.0pt
\hbox to 435.9297pt {%
 \hbox{}%
 \tenrm
 F\kern -0.83334pt r{}e{}e%
[...]
 .\twelveit
 t{}e{}x{}t%

It seems that the input syntax would have to prevent the normal ligkern
building, that would be quite awkward.

So maybe some customary syntax in between.
 
> At the moment I cannot see clearly what is needed, but I am
> willing to write some extensions so that we can experiment with
> to see what is really needed and perhaps change what have been done.

I can even play myself and then send a patch (as was suggested). I only
need to install the right sources, I'll be grateful for pointing me to
them and telling me any building tricks if needed.

Best regards to all,

--ksk
From pragma at wxs.nl  Sun Sep 25 20:28:10 2005
From: pragma at wxs.nl (Hans Hagen)
Date: Sun Sep 25 20:28:27 2005
Subject: [Dev-luatex] plugin for external formatting
In-Reply-To: <20050925042246.GA31177@inf.ethz.ch>
References: <433120F5.20906@elvenkind.com> <20050920095801.GA23823@inf.ethz.ch>
	<432FEC03.2090506@elvenkind.com> <43301B44.5040304@wxs.nl>
	<20050920095801.GA23823@inf.ethz.ch> <4330169C.5060503@wxs.nl>
	<20050920095801.GA23823@inf.ethz.ch>
	<432FEC03.2090506@elvenkind.com>
	<20050920205951.GA24450@inf.ethz.ch> <43311F38.6060703@wxs.nl>
	<20050925042246.GA31177@inf.ethz.ch>
Message-ID: <4336EC3A.2010302@wxs.nl>

Karel Skoup wrote:

>Hi all,
>
>On Wed, 21. Sep 2005, 10.52.08 10:52:08, Hans Hagen wrote:
>  
>
>>>OK, but that won't bring much, just some funny shapes.
>>>
>>>
>>>      
>>>
>>sure, but on the other hand, it can be used to 'replace' the current par 
>>builder by a more advanced (e.g. hyphenation) one, imagine that we have:
>>
>>\paroutput
>> {write list to file (or pipe)
>>  call plugin in one-paragraph mode
>>  read list from file (or pipe)}
>> 
>>that way we can replace the current par builder, because by default it's 
>>something equivalent to:
>>
>>\paroutput{\scanlist\expandafter{\the\list255}}
>>    
>>
>
>Sorry, I don't understand this very well. \list# is what we want to
>have, right? And \scanlist is a primitive of eTeX? I'm not used to it,
>but I believe that the way how \scanlist works is the best fitting the
>TeX macro programming. Where can I see any examples to understand it
>better?
>  
>
no, both 'list' things are what taco described as 'to do' (there is a 
scantokens in etex but it's kind of broken)

 in the example above (cf tacos' previous mail):

\the\list<number>      : serializes a list
\scanlist{general text}  : ' compiles' serialized list

the main idea i wanted to introduce was the concept of a paragraph 
output routine

concerning \scantokens (etex) .. this is a different animal,

  \def\pqr{pqr} \edef\abc{def \string\pqr}

now \abc is a sequence of just letters

  \scantokens\expandafter{\abc}

this gives "def pqr" because the string'd \pqr is tokenized again

>Then, \paroutput should be analogous to \output, right?  Then
>\scanlist\expandafter{\the\list255} would just put the paragraph on the
>  
>
indeed

>current list, right? But where is the paragraph broken by the default
>algorithm? If it is before activating \paroutput, then it is too late to
>rebreak (some information is lost and it would be wasting of processor
>anyway) so it can be only afterwards, but how would it recognize whether
>the list needs braking by the default breaker or not?
>  
>
this is still open ... maybe we should keep a copy of the original 
input, i don't know how complex that is, but the list *before* it gets 
broken, the raw data that enters the par builder, so maybe we should have

\parmode=0   : current behaviour
\parmode=1   : current behaviour but stop at par building, save list in 
list255
\parmode=2  : current behaviour but do par building, save list in list255

so, with parmode=1, \the\list255 would provide you the raw list, unbroken

>Anyway, \output and ending a paragraph are not analogous because \output
>is asynchronous and \par is synchronous (\paroutput would be activated
>by \par?). Or do you think that \paroutput should be just for one line
>when considering a break (that would be terribly complicated).
>  
>
no, just a way to grab a paragraph and feed it to an external process 
(or to handle it in tex, whatever that means since the only thing in tex 
that we then can do it \the\list -)

>Sorry, I'm confused, but maybe I just take this line too seriously :-)
>  
>
right but it's no problem since we need to explore the idea

>>i wonder how hard this is to implement, you and taco should know -)
>>    
>>
>
>Of course that handling just one paragraph externally must by much
>easier than handling several ones, especially because nothing
>substantial in TeX model must be changed (one atomic operation would be
>replaced by another one on the same data).
>
>But for my research it has almost no value, I really need to work with
>whole chunks and layout chains if I want to achieve anything
>interesting.
>  
>
i know, but if we have the 'simple one paragraph' one, we can already do 
a lot of experiments; the next step would be to define a higher level 
things (not a paragraph but a sequence of areas to fill etc etc)

>  
>
>>>Not only page crossing, but also column/shape/container crossing ...
>>>The problem is that we are used to \parshape, which just specifies
>>>something for certain lines in the current paragraph. But if we want to
>>>introduce real page layouts, then the shapes are not relative to the
>>>paragraphs any more. It will be a matter of formatting where a
>>>particular paragraph starts in the layout.
>>>
>>>
>>>
>>>      
>>>
>>it's a combination:
>>
>>- a main gutter shape (can be colums or whatever)
>>- shapes bound to places on the gutter
>>- shapes bound to specific places in the stream
>>- shapes that may float (within boundary condition)
>>    
>>
>
>That's right.
>
>  
>
>>>But concerning the metric files, if I want to treat hyphenation locally,
>>>then I also need the kerning and ligature programs. In TeX it is done
>>>too early (and then it is taken apart and (wrongly) reconstructed during
>>>hyphenation pass). I want to do ligatures and kernings on demand,
>>>basically after hyphenation (it's not that simple, but anyway).
>>>
>>>
>>>      
>>>
>>how about a font daemon, that one could cache/access font files; we need 
>>to go open type anyway so maybe such a deamon can be built on top of 
>>existing (non tex) libraries (port 31415)
>>    
>>
>
>A real daemon or a C library linked to the application (like kpathsea)?
>Well, there should be a library which provides simple interface to a
>client in any case, that library can (optionally) communicate with a
>daemon, that is how the client-daemon usually work.
>
>  
>
>>-)
>>
>>that's indeed too hard-coded for our purpose, so, next to a font daemon, 
>>we need a hyphenation daemon
>>    
>>
>
>I would start with a generic interface providing fonts and hyphenation.
>If it accesses the files or communicates with a daemon is an internal
>matter of the module implementing the interface.
>
>  
>
ok

>>>Maybe we should make a whole new glossary, for example 'node' is quite
>>>OK for everything in the list (char, box, glue, penalty, ...), but 'list'
>>>is so ambiguous, there should be something more specific (maybe 'node
>>>list'). TeX itself doesn't give clear names (classes) for those objects.
>>>I had to make them names in NTS (to name the classes), maybe we can look
>>>into it.
>>>
>>>      
>>>
>>good idea; we indeed need to define proper names and descriptions; can 
>>you make a proposal for that based on your nts experiences?
>>    
>>
>
>Well the whole problem is, that there are no properly defined
>data structures with unique type names in TeX (just some all-purpose
>data structures and macros which one must extremely careful with). Then 
>there is no explicit need for unique names of different data types.
>So in NTS, I had to make names for types which are no explicit types in
>TeX.
>
>The two most outstanding examples are:
>* NodeList (nothing new, just the 'node' is always explicit)
>* Builder (currently built vertical/horizontal/... list)
>
>  
>
it's probably the builder that needs to get an alternative; something 
parlists and/or shapelists and since it then spawns the task to the 
plugin .. well, the plugin will have its own data structures, so from 
that perspective we can keep tex's node list (input for plugin) as well 
as  vertical and horizontal lists (output of plugin) and forget about 
the rest


>>>It works for English (does it really always ?), because it is simple,
>>>right? I don't know, whether it is a real problem in any other language
>>>in practice. I just know the code and I think that it is incorrect,
>>>inconsistent and illogical.
>>>
>>>
>>>      
>>>
>>my impression is that tehnumber of missed/wrong cases for english is so 
>>small that it falls within the 'no problem to correct it manually' 
>>criteria; languages with compound words, accented characters etc hav 
>>ehigher demands
>>    
>>
>
>Its maybe not a real problem in practice but it was the biggest pain to
>reimplement in NTS. It could be actually easier to do it in the 'right
>way'. So if I have to do it next time I don't want to repeat the same
>annoyance.
>
>On Wed, 21. Sep 2005, 10.59.33 10:59:33, Taco Hoekwater wrote:
>  
>
>>>For me the fully restorable read syntax is very important (can I get all
>>>      
>>>
>> [...]
>>
>>I believe all extra parameters had better be in-line, for optimal
>>flexibility. As much as possible, as least:  some information is
>>irretrievably lost in current TeX.
>>
>>Quite a lot can be solved by adding a new read syntax for character
>>and language nodes, one that does not depend on font and language
>>id numbers. It'll be rather verbose and a tad slow, that is the
>>price you pay for extra flexibility.
>>    
>>
>
>Well, inline is convenient to import but might be an overkill if there
>is a lot of info (like font file name and 'at size') for each character.
>That can be saved by using references, i.e. outputting a table first and
>then referencing the ids from the table. For scanning it's not much more
>work but for writing it requires a pass which collects the table from
>the references in the data first.
>  
>
indeed. some reference is needed; it also makes scanning the result more 
efficient since the refs are already known then

>  
>
>>>But concerning the metric files, if I want to treat hyphenation locally,
>>>then I also need the kerning and ligature programs. In TeX it is done
>>>too early (and then it is taken apart and (wrongly) reconstructed during
>>>hyphenation pass). I want to do ligatures and kernings on demand,
>>>basically after hyphenation (it's not that simple, but anyway).
>>>      
>>>
>>In current TeX, it is not done too early: ligkerns can influence which
>>line breaks are chosen, so the ligkern programs have to be applied
>>first thing.
>>    
>>
>
>Yes, I know, I wrote that it's not that simple. IMO the ligkerns
>should be considered many times but the final modification of the data
>should be late. I would postpone it until output and ask dynamically
>(with maybe some caching) each time it is needed (getting sizes, ...).
>This approach would need to represent ligature prevention ({}) explicitly
>as a node.
>
>  
>
a new kind of node indeed

>>>NO. It screws up everything, not only taken or potential breaks, but
>>>even the potential hyphenation points which are never considered a
>>>break. 
>>>      
>>>
>>It does all potential hyphenation points, but that is still a subset
>>of all hyphenation points: absolutely impossible points are ignored
>>(like in the middle of the first line). At least, that's what Knuth's
>>web comments say, and note rhat is not a feature of the algorithm,
>>only an optimization.
>>    
>>
>
>I forgot about the first line, but is there anything else?
>
>  
>
>>Perhaps just a little, but you have a valid case ;-)
>>    
>>
>
>Well, we can stop it here and make a unique thread if it is ever needed.
>
>  
>
>>>right? I don't know, whether it is a real problem in any other language
>>>in practice. I just know the code and I think that it is incorrect,
>>>inconsistent and illogical.
>>>      
>>>
>>It is also near-impossible to fix while maintaining compatibility,
>>which is probably why no-one has seriously attempted to clean up
>>the code, up-til-now.
>>    
>>
>
>Sure, I originally wanted to do it in the 'right way' in NTS, but then I
>realized that was impossible while keeping compatibility and it was a
>real pain to reimplement it.
>
>On Wed, 21. Sep 2005, 11.26.53 11:26:53, Taco Hoekwater wrote:
>  
>
>>Hans Hagen wrote:
>>    
>>
>>>so what happens if you remove the optimizations (forget about 100% 
>>>compatibility)
>>>      
>>>
>>Probably (hopefully) nothing except some bloat in the data structure,
>>but I won't take bets on that.
>>    
>>
>
>But the only optimization is not changing the ligkerns in the first line
>of the paragraph while hyphenating, right? Then removing that would be
>even worse, but the difference is so small, anyway; this optimization is
>really not a problem.
>
>  
>
>>>>It is also near-impossible to fix while maintaining compatibility,
>>>>which is probably why no-one has seriously attempted to clean up
>>>>the code, up-til-now.
>>>>        
>>>>
>>>but we don't care much about that part of compatibility, do we?
>>>      
>>>
>>Nah. (but it was a big issue for etex, nts, and pdftex-in-dvi mode)
>>    
>>
>
>Exactly, it was a nightmare for me.
>
>On Wed, 21. Sep 2005, 06.25.50 06:25:50, Thanh Han The wrote:
>  
>
>>My first thought is that some small modifications to
>>\showlist and \showbox will help a lot. It's easy to write
>>additional info like dimensions of each item in the list, or
>>in case of characters the filename of a tfm with fontsize
>>(or we may write the dimensions of each char as Hans
>>suggested, but this is an overkill IMHO).
>>    
>>
>
>If I get the dimensions of characters explicitly, then I don't need to
>access/know the metric files. But this changes if I want to handle
>the hyphenation locally (which seems like the only way). Then I need
>also the ligkerns so I would either also need them explicitly (I mean
>the ligkern programs) -- that would be quite complicated to export (and
>import) -- or I would need to access the metric files anyway.
>  
>
is it really a program or just a list of char combinations representing 
ligs

>Therefore the explicit char dimensions seems like a temporary solution
>only and I don't think it's worth doing.
>
>  
>
>>My feeling is that we need to work out the specification and
>>format of the `` node list'' first. In the first step, I
>>would prefer to have only node-specific things, eg only what
>>comes out after a box construction. I also got a similar
>>request: to provide a primitive that writes out the content
>>of a box and another primitive to re-construct that box back
>>from the output. We can start with this and make further
>>extensions later on.
>>    
>>
>
>Well, I think that the \showlists output contains everything except
>the reliable font id (and the language id?) and it is parseable. Well,
>the syntax could be slightly changed to make it more compatible with the
>input syntax (or maybe it can be really written in the input syntax) or
>to be better parseable by a plugin but the information carried by the
>syntax is the real matter.
>
>If I have all referenced fonts explicitly defined at the beginning (with
>maybe some renaming of the font ids when conflicts arise (can it happen?))
>then I'm happy.
>
>So with the current syntax it would be something like:
>
>\tenrm=select font cmr10.
>\twelveit=select font cmti10 at 12.0pt.
>\hbox(6.94444+1.94444)x435.9297, glue set 318.73502fil
>.\hbox(0.0+0.0)x0.0
>.\tenrm F
>.\kern-0.83334
>.\tenrm r
>.\tenrm e
>.\tenrm e
>.\tenrm -
>.\discretionary
>.\tenrm s
>.\tenrm h
>.\tenrm a
>.\tenrm p
>.\kern0.27779
>.\tenrm e
>.\glue 3.33333 plus 1.66666 minus 1.11111
>.\twelveit t
>.\twelveit e
>.\twelveit x
>.\twelveit t
>
>or in the input syntax:
>
>\font\tenrm=cmr10 at 10.0pt
>\font\twelveit=cmti10 at 12.0pt
>\hbox to 435.9297pt {%
> \hbox{}%
> \tenrm
> F\kern -0.83334pt r{}e{}e%
>[...]
> .\twelveit
> t{}e{}x{}t%
>
>It seems that the input syntax would have to prevent the normal ligkern
>building, that would be quite awkward.
>
>  
>
you mean

.\twelveit t
.\nolig 
.\twelveit e
.\nolig 
.\twelveit x
.\nolig 
.\twelveit t

>So maybe some customary syntax in between.
> 
>  
>
>>At the moment I cannot see clearly what is needed, but I am
>>willing to write some extensions so that we can experiment with
>>to see what is really needed and perhaps change what have been done.
>>    
>>
>
>I can even play myself and then send a patch (as was suggested). I only
>need to install the right sources, I'll be grateful for pointing me to
>them and telling me any building tricks if needed.
>  
>
Hans 

-----------------------------------------------------------------
                                          Hans Hagen | PRAGMA ADE
              Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | fax: 038 477 53 74 | www.pragma-ade.com
                                             | www.pragma-pod.nl
-----------------------------------------------------------------

From skoupy at inf.ethz.ch  Thu Sep 29 13:13:04 2005
From: skoupy at inf.ethz.ch (Karel =?iso-8859-1?Q?Skoup=FD?=)
Date: Thu Sep 29 13:11:26 2005
Subject: [Dev-luatex] Karel's presentation on TUG 2005
Message-ID: <20050929111303.GB14422@inf.ethz.ch>

Hi All,

reacting to Thanh's request, I put my TUG 2005 presentation on
http://www.inf.ethz.ch/personal/kaskoupy/slides/FreeShapeTextFormatting.pdf

I doubt that there can be anything useful understood just from those
slides. I should still write a proper paper in next few days, that
should be much more clear and complete, you can safely wait for that.

I'll also send you the actual prototype with the instructions how to
get it running, hopefully tonight.

Regards,

--ksk
