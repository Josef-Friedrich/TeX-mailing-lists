From root at aanhet.net  Thu Mar  1 22:22:21 2007
From: root at aanhet.net (Cron Daemon)
Date: Thu,  1 Mar 2007 22:22:21 +0100 (CET)
Subject: [Dev-luatex] Cron <luatex@server> /home/luatex/luatex-svn
Message-ID: <20070301212221.A9C6B28000BA@server.aanhet.net>

U  luatex/src/texk/web2c/luatexdir/luatex.web
 U  luatex/src/texk/web2c/luatexdir/font/dofont.c
 U  luatex/src/texk/web2c/luatexdir/font/vfpacket.c
 U  luatex/src/texk/web2c/luatexdir/font/luafont.c
 U  luatex/src/texk/web2c/luatexdir/font/vfovf.c
 Checked out revision 338.

From root at aanhet.net  Fri Mar  2 16:22:29 2007
From: root at aanhet.net (Cron Daemon)
Date: Fri,  2 Mar 2007 16:22:29 +0100 (CET)
Subject: [Dev-luatex] Cron <luatex@server> /home/luatex/luatex-svn
Message-ID: <20070302152229.6C924280009E@server.aanhet.net>

U  luatex/build.sh.cross
 U  luatex/build.sh.linux
 D  luatex/src/texk/web2c/man
 U  luatex/src/texk/web2c/luatexdir/luatex.mk
 U  luatex/src/texk/web2c/luatexdir/luatex.web
 U  luatex/src/texk/web2c/luatexdir/font/ttfotf.c
 U  luatex/src/texk/web2c/luatexdir/luatex.defines
 U  luatex/build.sh
 Checked out revision 343.

From taco at elvenkind.com  Fri Mar  2 17:32:29 2007
From: taco at elvenkind.com (Taco Hoekwater)
Date: Fri, 02 Mar 2007 17:32:29 +0100
Subject: [Dev-luatex] Snapshot 20070302
Message-ID: <45E8519D.2010702@elvenkind.com>

Hi all,

After two weeks of code cleanup, here is a new snapshot. Most
changes are invisible, but there are some new things and quite
a few noteworthy bugfixes.

* The 'snapshot version' banner is now calculated dynamically
   at build time. This aids in figuring out what binary people
   are actually running, but it can possibly break the build on
   systems that do not have a `date` command.

* The do_vf() function that checks for virtual font existance
   is now run immediately after the font definition instead of
   being postponed until characters are output.

* The 'define_font' callback interface has changed a little.
   It is now:
     retval = function (name,size,fontid)

   where fontid is the internal font number of the font that
   is currently being defined, and retval can be either a table
   (as before) or a different, previously defined fontid. This is
   useful if a previous definition can be reused instead of
   creating a whole new font structure.

* The internal font data structure has been redone. Glyph index
   inside a font is now handled by a sparse array, so that use
   of e.g. 0xFB01 (fi-ligature) no longer creates a 64000+ entries
   character array.

* The internal cache-ing of font metric information is turned
   off completely, because it was based on the assumption that
   name + size were a unique identifier for a font. This can no
   longer be guaranteed.

* word boundary processing now works OK again, thanks to the
   introduction of two virtual characters in the font table
   definition. Besides the normal numeric entries in the
   f.characters table, there can now also be two string keys:
   "left_boundary" and "right_boundary". The  ligatures and kerns
   of the 'left_boundary' character are used for the pre-word
   boundary processing, ligatures and kerns between characters
   and 'right_boundary' are used for the post-word processing.

* Lua font table references are no longer cached by the
   executable ,in order to preserve memory. (the only downside
   is that font.fonts[] access is now slower because of the need
   to recreate the lua table).

* There are other some small changes to the font table formats.
   Please see the manual for details.

* A 'real' font can now still have virtual characters if they
   are loaded via lua. Just set the 'commands' section and/or
   the 'fonts' array to your liking, and it should work out.

   If you have created no 'fonts' array at all, then the default
   font (indentifier '1')  is the current font, so that you
   can create virtual duplicates of already existing characters.

   Note: this does not work the other way. There can not be
   'real' characters in a virtual font!

* Truetype-based opentype fonts no longer require Acrobat 7
   t(hey are now written out as if they are normal truetype).

* A lua init script can now set 'texconfig.formatname' and/or
   'texconfig.jobname'. If ther is no file or format specified
   on the commandline, then, if, one of those keys is present,
   that key will be used instead of simply quitting with an
   error.

* Placement of boxes and rules in right-to-left mode is debugged,
   and now seems to work ok.

* Virtual font loading is debugged.

* Some memory leaks are resolved

* HZ font expansion should work ok again, but is not tested.

* a few of the warning during opentype loading have been removed
   because the problems are rather harmless and turned out to be
   triggered by almost every font.


Happy TeXing,

Taco


-----

Downloading and installation details:

If you go to

       https://foundry.supelec.fr/frs/?group_id=10

you will see that there are three new released files:

* luatex-snapshot-20070302.tar.bz2
       This is the source tree.

* luatex-snapshot-20070302-win32.zip
       A cross-compiled (mingw) windows binary. This is a web2c
       based binary, so it needs a texmf.cnf file (It will NOT
       work if you have only miktex installed).

* luatex-snapshot-20070302-linux-i386.tar.bz2
       An intel 32 linux binary (2.6.17)



From preining at logic.at  Fri Mar  2 21:44:19 2007
From: preining at logic.at (Norbert Preining)
Date: Fri, 2 Mar 2007 21:44:19 +0100
Subject: [Dev-luatex] Snapshot 20070302
In-Reply-To: <45E8519D.2010702@elvenkind.com>
References: <45E8519D.2010702@elvenkind.com>
Message-ID: <20070302204419.GA28577@gamma.logic.tuwien.ac.at>

On Fre, 02 M?r 2007, Taco Hoekwater wrote:
> * luatex-snapshot-20070302.tar.bz2

Debian packages as usual ...

Best wishes

Norbert

-------------------------------------------------------------------------------
Dr. Norbert Preining <preining at logic.at>                    Universit? di Siena
Debian Developer <preining at debian.org>                         Debian TeX Group
gpg DSA: 0x09C5B094      fp: 14DF 2E6C 0307 BE6D AD76  A9C0 D2BF 4AA3 09C5 B094
-------------------------------------------------------------------------------
FARNHAM (n.)
The feeling you get about four o'clock in the afternoon when you
haven't got enough done.
			--- Douglas Adams, The Meaning of Liff

From root at aanhet.net  Fri Mar  2 22:22:28 2007
From: root at aanhet.net (Cron Daemon)
Date: Fri,  2 Mar 2007 22:22:28 +0100 (CET)
Subject: [Dev-luatex] Cron <luatex@server> /home/luatex/luatex-svn
Message-ID: <20070302212228.76DCE280011C@server.aanhet.net>

U  luatex/src/texk/web2c/luatexdir/lua/luatex.c
 U  luatex/src/texk/web2c/luatexdir/font/luafont.c
 U  luatex/manual/luatexref-t.tex
 U  luatex/manual/luatexref-t.pdf
 Checked out revision 346.

From root at aanhet.net  Sun Mar  4 12:22:26 2007
From: root at aanhet.net (Cron Daemon)
Date: Sun,  4 Mar 2007 12:22:26 +0100 (CET)
Subject: [Dev-luatex] Cron <luatex@server> /home/luatex/luatex-svn
Message-ID: <20070304112226.8ECD22800095@server.aanhet.net>

U  luatex/src/texk/web2c/luatexdir/ptexlib.h
 U  luatex/src/texk/web2c/luatexdir/font/writet3.c
 U  luatex/src/texk/web2c/luatexdir/font/psread.c
 U  luatex/src/texk/web2c/luatexdir/font/writefont.c
 U  luatex/src/texk/web2c/luatexdir/font/fvfonts.c
 U  luatex/src/texk/web2c/luatexdir/font/texfont.h
 Checked out revision 349.

From taco at elvenkind.com  Mon Mar  5 10:06:15 2007
From: taco at elvenkind.com (Taco Hoekwater)
Date: Mon, 05 Mar 2007 10:06:15 +0100
Subject: [Dev-luatex] OpenType subsetting (in progress)
Message-ID: <45EBDD87.1050102@elvenkind.com>

Hi,

Just letting you know I just checked in some preliminary code to
do (optional) subsetting of OpenType (non-CID) CFF fonts.

Documents now display OK in acrobat 7, but nowhere else, because
there is no charset information included yet.

Cheers, taco





From root at aanhet.net  Mon Mar  5 12:22:23 2007
From: root at aanhet.net (Cron Daemon)
Date: Mon,  5 Mar 2007 12:22:23 +0100 (CET)
Subject: [Dev-luatex] Cron <luatex@server> /home/luatex/luatex-svn
Message-ID: <20070305112223.06ED0280009B@server.aanhet.net>

U  luatex/build.sh.cross
 U  luatex/build.sh.linux
 U  luatex/src/texk/web2c/luatexdir/Makefile.in
 U  luatex/src/texk/web2c/luatexdir/luatex.web
 A  luatex/src/texk/web2c/luatexdir/font/writecff.c
 A  luatex/src/texk/web2c/luatexdir/font/writetype0.c
 A  luatex/src/texk/web2c/luatexdir/font/writecff.h
 U  luatex/src/texk/web2c/luatexdir/font/writettf.c
 U  luatex/src/texk/web2c/luatexdir/font/writettf.h
 U  luatex/src/texk/web2c/luatexdir/font/writefont.c
 U  luatex/src/texk/web2c/luatexdir/font/texfont.c
 U  luatex/src/texk/web2c/luatexdir/luatex.defines
 U  luatex/build.sh
 Checked out revision 352.

From root at aanhet.net  Tue Mar  6 12:22:22 2007
From: root at aanhet.net (Cron Daemon)
Date: Tue,  6 Mar 2007 12:22:22 +0100 (CET)
Subject: [Dev-luatex] Cron <luatex@server> /home/luatex/luatex-svn
Message-ID: <20070306112222.D7F082800214@server.aanhet.net>

U  luatex/src/texk/web2c/luatexdir/font/writecff.c
 Checked out revision 353.

From root at aanhet.net  Tue Mar  6 22:22:23 2007
From: root at aanhet.net (Cron Daemon)
Date: Tue,  6 Mar 2007 22:22:23 +0100 (CET)
Subject: [Dev-luatex] Cron <luatex@server> /home/luatex/luatex-svn
Message-ID: <20070306212223.74C2628000FE@server.aanhet.net>

U  luatex/src/texk/web2c/luatexdir/font/writecff.c
 U  luatex/src/texk/web2c/luatexdir/font/texfont.c
 Checked out revision 354.

From root at aanhet.net  Wed Mar  7 12:22:27 2007
From: root at aanhet.net (Cron Daemon)
Date: Wed,  7 Mar 2007 12:22:27 +0100 (CET)
Subject: [Dev-luatex] Cron <luatex@server> /home/luatex/luatex-svn
Message-ID: <20070307112227.D8FC4280010E@server.aanhet.net>

U  luatex/src/texk/web2c/luatexdir/luatex.web
 Checked out revision 355.

From taco at elvenkind.com  Wed Mar  7 12:31:43 2007
From: taco at elvenkind.com (Taco Hoekwater)
Date: Wed, 07 Mar 2007 12:31:43 +0100
Subject: [Dev-luatex]  Snapshot 20070307
Message-ID: <45EEA29F.60803@elvenkind.com>

Hi all,

I decided to do a snapshot now instead of waiting for friday,
because I want to start concentrating on something else besides
font support issues.

What's new:

* Non-CID PostScript-based Opentype fonts are now combined over
   the entire document, and properly subsetted. The code is
   borrowed from xdvipdfmx with some minor adjustments

   Adding support for CID-keyed OpenType fonts would not be hard
   but at the moment I lack example input (and incentive).

* A small extension to the virtual fonts structure: you can use

     f.fonts[1] = { 'id' = 38}

   to do a backreference to a previously defined font. This saves quite
   a few computations

* There was a bug in the handling of \leaders in the output whereby
   it's width was taken to be twice what it should be while writing
   to the PDF, fixed now.

* The font inclusion code is cleaned up a bit by Hartmut.

* Some compilation problems were fixed.

* There is (quite a bit of) debugging information printed out when
   OTPs are in use, because I am tracking down a bug reported by Idris.

   The input of each and every OTP step is shown on the terminal in
   a line line this:

     [57902][1568][58423][1568][58408][1568][58921]

   those are the decimal values of ocp i/o characters. If you don't
   need them, don't worry about it.


Happy TeXing,

Taco


-----

Downloading and installation details:

If you go to

        https://foundry.supelec.fr/frs/?group_id=10

you will see that there are three new released files:

* luatex-snapshot-20070307.tar.bz2
        This is the source tree.

* luatex-snapshot-20070307-win32.zip
        A cross-compiled (mingw) windows binary. This is a web2c
        based binary, so it needs a texmf.cnf file (It will NOT
        work if you have only miktex installed).

* luatex-snapshot-20070307-linux-i386.tar.bz2
        An intel 32 linux binary (2.6.17)

From root at aanhet.net  Wed Mar  7 16:22:23 2007
From: root at aanhet.net (Cron Daemon)
Date: Wed,  7 Mar 2007 16:22:23 +0100 (CET)
Subject: [Dev-luatex] Cron <luatex@server> /home/luatex/luatex-svn
Message-ID: <20070307152223.62A0F280009D@server.aanhet.net>

U  luatex/src/texk/web2c/luatexdir/luatex.web
 U  luatex/src/texk/web2c/luatexdir/font/writefont.c
 U  luatex/src/texk/web2c/luatexdir/font/texfont.c
 U  luatex/manual/luatexref-t.tex
 U  luatex/manual/luatexref-t.pdf
 Checked out revision 357.

From root at aanhet.net  Thu Mar  8 22:22:23 2007
From: root at aanhet.net (Cron Daemon)
Date: Thu,  8 Mar 2007 22:22:23 +0100 (CET)
Subject: [Dev-luatex] Cron <luatex@server> /home/luatex/luatex-svn
Message-ID: <20070308212223.9E60028000EE@server.aanhet.net>

U  luatex/src/texk/web2c/luatexdir/Makefile.in
 U  luatex/src/texk/web2c/luatexdir/luatex.web
 U  luatex/src/texk/web2c/luatexdir/lua/lcallbacklib.c
 A  luatex/src/texk/web2c/luatexdir/lua/luatoken.c
 U  luatex/src/texk/web2c/luatexdir/luatex.defines
 Checked out revision 358.

From taco at elvenkind.com  Fri Mar  9 18:51:46 2007
From: taco at elvenkind.com (Taco Hoekwater)
Date: Fri, 09 Mar 2007 18:51:46 +0100
Subject: [Dev-luatex]  Snapshot 20070309
Message-ID: <45F19EB2.6020309@elvenkind.com>

Hi all,

I just released a snapshot with a fun (but not yet complete)
new feature you may want to play with.

What's new:

* The OCP debug information is removed again.

* There is a new callback that I am quite excited about myself:
   'token_filter'.


A bit of text from the reference manual:
--------------------
This callback allows you to change the modify any lexical token that
enters the \type{main_control} function before \LUATEX\ executes the
associated command.

Note: not all tokens can be intercepted yet, only those that are `seen'
by \LUATEX's main control function.  Supplemental tokens like the bodies
of macro definitions and the right-hand side of register assignments
are not seen. For now, this is intentional.

\startfunctioncall
      function (table <token>)
         return table <token>
      end
\stopfunctioncall

Calling convention for this callback is bit more complicated then for
most other callbacks.  Initially, lua function will be called with the
next token from \type{get_next()} as argument, represented as a small
lua table.  The function should either return a lua table representing
a valid to-be-processed token, or something else like nil or an empty
table.

If your lua function does not return a table representing a valid
token, it will be immediately called again with yet another token
from \type{get_next()} as argument, until it eventually does return
a useful token.

But if the function does return a usable token, then that token will
be processed by \LUATEX. Afterwards, the function will be called
again, but now without an argument. This is repeated until it stops
returning tokens.  Then processing reverts back to the other branch.

The point behind that roundabout calling convention is that it
allows the lua function to buffer tokens for various uses. That in
turn makes it possible to do some really advanced things like
replacing OTPs.

Now about that table. The table that the function will receive
contains four fields:

\starttabulate[|l|i|p|]
\NC Key     \NC  type    \NC                Explanation \NC\FR
\NC cmd     \NC  string \NC A representation of  \LUATEX's internal
                             command code\NC\NR
\NC chr     \NC  number \NC The command code modifier\NC\NR
\NC cs      \NC  string \NC If the token came from a csname, this
                             is  that csname\NC\NR
\NC mod     \NC character \NC A single character string representing
the current processing mode. One of {\bf v}ertical, {\bf h}orizontal,
display {\bf m}ath, {\bf n}o, internal {\bf V}ertical, 
            restricted {\bf H}orizontal, or inline {\bf M}ath mode.\NC\LR
\stoptabulate

If you modify the table before returning it, then it is wise to return 
either a (\type{cmd}, \type{chr}) pair, or a \type{cs} string.  That is
because if both options are present, the pair has precedence and the
string is ignored. On the return table, {\bf mod} is ignored always.
--------------

I have no long example code yet and it is not as complete as one
would want it to be because it is not intercepting everything that
comes in, only the bits that are triggered by the main control
loop.

I decided to do a fast snapshot release for two reasons:

* It is one of the easier extensions to get started with if you want
   to learn a bit about lua programming

* I would welcome feedback on the token interface, because it will
   be needed in other places as well, soon. I am still not sure
   whether converting the command to/from strings is worth it, for
   example. And maybe it would be less confusing if you could return
   a list of tokens instead of being called repeatedly?

Here is the trivial example to get you started:

    \directlua0{
      callback.register('token_filter', function (t) return t end)
    }

Happy TeXing,

Taco


-----

Downloading and installation details:

If you go to

        https://foundry.supelec.fr/frs/?group_id=10

you will see that there are three new released files:

* luatex-snapshot-20070309.tar.bz2
        This is the source tree.

* luatex-snapshot-20070309-win32.zip
        A cross-compiled (mingw) windows binary. This is a web2c
        based binary, so it needs a texmf.cnf file (It will NOT
        work if you have only miktex installed).

* luatex-snapshot-20070309-linux-i386.tar.bz2
        An intel 32 linux binary (2.6.17)


From root at aanhet.net  Fri Mar  9 22:22:25 2007
From: root at aanhet.net (Cron Daemon)
Date: Fri,  9 Mar 2007 22:22:25 +0100 (CET)
Subject: [Dev-luatex] Cron <luatex@server> /home/luatex/luatex-svn
Message-ID: <20070309212225.266B328000E5@server.aanhet.net>

U  luatex/src/texk/web2c/luatexdir/utils.c
 U  luatex/src/texk/web2c/luatexdir/luatex.web
 U  luatex/src/texk/web2c/luatexdir/lua/luatoken.c
 U  luatex/manual/luatexref-t.tex
 U  luatex/manual/luatexref-t.pdf
 Checked out revision 363.

From root at aanhet.net  Wed Mar 14 22:22:35 2007
From: root at aanhet.net (Cron Daemon)
Date: Wed, 14 Mar 2007 22:22:35 +0100 (CET)
Subject: [Dev-luatex] Cron <luatex@server> /home/luatex/luatex-svn
Message-ID: <20070314212235.466A728000ED@server.aanhet.net>

U  luatex/src/texk/web2c/luatexdir/utils.c
 U  luatex/src/texk/web2c/luatexdir/luatex.web
 U  luatex/src/texk/web2c/luatexdir/lua/lcallbacklib.c
 U  luatex/src/texk/web2c/luatexdir/lua/luatoken.c
 U  luatex/src/texk/web2c/luatexdir/lua/ltexlib.c
 U  luatex/src/texk/web2c/luatexdir/luatex-api.h
 U  luatex/src/texk/web2c/luatexdir/luatex.defines
 Checked out revision 366.

From root at aanhet.net  Thu Mar 15 16:22:23 2007
From: root at aanhet.net (Cron Daemon)
Date: Thu, 15 Mar 2007 16:22:23 +0100 (CET)
Subject: [Dev-luatex] Cron <luatex@server> /home/luatex/luatex-svn
Message-ID: <20070315152223.8112D280009D@server.aanhet.net>

U  luatex/src/texk/web2c/luatexdir/utils.c
 U  luatex/src/texk/web2c/luatexdir/Makefile.in
 U  luatex/src/texk/web2c/luatexdir/luatex.web
 U  luatex/src/texk/web2c/luatexdir/lua/ltexlib.c
 A  luatex/src/texk/web2c/luatexdir/lua/ltokenlib.c
 U  luatex/src/texk/web2c/luatexdir/lua/luainit.c
 U  luatex/src/texk/web2c/luatexdir/lua/luastuff.c
 U  luatex/src/texk/web2c/luatexdir/font/ttflua.c
 U  luatex/manual/luatexref-t.tex
 Checked out revision 368.

From root at aanhet.net  Thu Mar 15 22:22:23 2007
From: root at aanhet.net (Cron Daemon)
Date: Thu, 15 Mar 2007 22:22:23 +0100 (CET)
Subject: [Dev-luatex] Cron <luatex@server> /home/luatex/luatex-svn
Message-ID: <20070315212223.3644928000B9@server.aanhet.net>

U  luatex/src/texk/web2c/luatexdir/luatex.web
 U  luatex/src/texk/web2c/luatexdir/font/luafont.c
 U  luatex/src/texk/web2c/luatexdir/font/writefont.c
 U  luatex/src/texk/web2c/luatexdir/font/vfovf.c
 U  luatex/src/texk/web2c/luatexdir/font/texfont.c
 U  luatex/src/texk/web2c/luatexdir/font/texfont.h
 U  luatex/src/texk/web2c/luatexdir/luatex.defines
 Checked out revision 372.

From root at aanhet.net  Fri Mar 16 22:22:25 2007
From: root at aanhet.net (Cron Daemon)
Date: Fri, 16 Mar 2007 22:22:25 +0100 (CET)
Subject: [Dev-luatex] Cron <luatex@server> /home/luatex/luatex-svn
Message-ID: <20070316212225.6FB1028001F5@server.aanhet.net>

U  luatex/src/libs/lua51/Makefile
 U  luatex/src/texk/web2c/luatexdir/lua/lcallbacklib.c
 U  luatex/src/texk/web2c/luatexdir/lua/luatoken.c
 U  luatex/src/texk/web2c/luatexdir/lua/ltexlib.c
 U  luatex/src/texk/web2c/luatexdir/lua/ltokenlib.c
 U  luatex/src/texk/web2c/luatexdir/font/ttflua.c
 U  luatex/src/texk/web2c/luatexdir/font/writecff.c
 U  luatex/src/texk/web2c/luatexdir/font/dofont.c
 U  luatex/src/texk/web2c/luatexdir/font/luafont.c
 U  luatex/src/texk/web2c/luatexdir/font/texfont.c
 Checked out revision 374.

From preining at logic.at  Tue Mar 20 13:25:47 2007
From: preining at logic.at (Norbert Preining)
Date: Tue, 20 Mar 2007 13:25:47 +0100
Subject: [Dev-luatex] Snapshot 20070309
In-Reply-To: <45F19EB2.6020309@elvenkind.com>
References: <45F19EB2.6020309@elvenkind.com>
Message-ID: <20070320122547.GA19832@gamma.logic.tuwien.ac.at>

Hi all!

On Fre, 09 M?r 2007, Taco Hoekwater wrote:
> * luatex-snapshot-20070309.tar.bz2

Debian packages at the usual place. I was a bit late due to being in the
mountains for some time ...

Best wishes

Norbert

-------------------------------------------------------------------------------
Dr. Norbert Preining <preining at logic.at>                    Universit? di Siena
Debian Developer <preining at debian.org>                         Debian TeX Group
gpg DSA: 0x09C5B094      fp: 14DF 2E6C 0307 BE6D AD76  A9C0 D2BF 4AA3 09C5 B094
-------------------------------------------------------------------------------
BLITTERLESS
The little slivers of bamboo picked off a cane chair by a nervous
guest which litter the carpet beneath and tell the chair's owner that
the whole piece of furniture is about to uncoil terribly and slowly
until it resembles a giant pencil sharpening.
			--- Douglas Adams, The Meaning of Liff

From root at aanhet.net  Tue Mar 20 16:22:25 2007
From: root at aanhet.net (Cron Daemon)
Date: Tue, 20 Mar 2007 16:22:25 +0100 (CET)
Subject: [Dev-luatex] Cron <luatex@server> /home/luatex/luatex-svn
Message-ID: <20070320152225.D77D7280017C@server.aanhet.net>

U  luatex/src/texk/web2c/luatexdir/lua/luatoken.c
 U  luatex/src/texk/web2c/luatexdir/font/writecff.c
 Checked out revision 376.

From taco at elvenkind.com  Thu Mar 22 10:25:08 2007
From: taco at elvenkind.com (Taco Hoekwater)
Date: Thu, 22 Mar 2007 10:25:08 +0100
Subject: [Dev-luatex]   Snapshot 20070322
Message-ID: <46024B74.3020103@elvenkind.com>

Hi all,

Over the past week, I have been far too busy with the ConTeXt
conference (this weekend) to get much work done, but there is
a snapshot release available nevertheless.


What's new:

* I have changed the token_filter callback quite rigorously,
   mostly because of speed issues. The raw speed of trivial
   lua token handling is now only about 20 times slower than
   the native handling. Not bad at all, considering it has to move
   between interpreted and compiled code for each and every
   token. If you do not run the token filter inside \output,
   the effective run speed difference should not be much more
   than a factor 1.5.

   Two big differences: you have to call token.get_next()
   yourself, and the token table is now a three-item array
   instead of a five-key hash. The minimal example changes to

   \directlua0{
     callback.register('token_filter', function ()
       return token.get_next()
       end)
   }

   more details are in the manual.

* I've fixed a few bugs in the handling of Opentype TTF, and added
   a new key in the font definition table:

      f.encodingbytes = (1|2)

   The default is 2 for opentype and truetype format, 1 otherwise.
   Later on, it will become possible to have a type1 font in 2-byte
   (CID) encoding or a truetype font in traditional encoding (1-byte),
   but I have not covered all cases yet.


Next up: Idris found a big problem with inline RL-LR switching in
PDF mode that I have to fix, TrueType-based (OpenType) subsetting,
and node creation callbacks.

Happy TeXing,

Taco


-----

Downloading and installation details:

If you go to

         https://foundry.supelec.fr/frs/?group_id=10

you will see that there are three new released files:

* luatex-snapshot-200703022.tar.bz2
         This is the source tree.

* luatex-snapshot-20070322-win32.zip
         A cross-compiled (mingw) windows binary. This is a web2c
         based binary, so it needs a texmf.cnf file (It will NOT
         work if you have only miktex installed).

* luatex-snapshot-20070322-linux-i386.tar.bz2
         An intel 32 linux binary (very new gcc/libc)


From preining at logic.at  Thu Mar 22 15:02:52 2007
From: preining at logic.at (Norbert Preining)
Date: Thu, 22 Mar 2007 15:02:52 +0100
Subject: [Dev-luatex] Wishlist item: Please set $engine ...
Message-ID: <20070322140252.GD6845@gamma.logic.tuwien.ac.at>

Hi all!

Can luatex please set the 
	$engine
variable? Current TeX Live 2007 fmtutil puts the formats into
	web2c/$engine/
so the luatex.fmt end up in 
	web2c/luatex/luatex.fmt
but the search path expands to:
	!!/var/lib/texmf/web2c/unset
because $engine is unset.

Can we change this? Or are there reasons *not* to do this?

Best wishes

Norbert

-------------------------------------------------------------------------------
Dr. Norbert Preining <preining at logic.at>                    Universit? di Siena
Debian Developer <preining at debian.org>                         Debian TeX Group
gpg DSA: 0x09C5B094      fp: 14DF 2E6C 0307 BE6D AD76  A9C0 D2BF 4AA3 09C5 B094
-------------------------------------------------------------------------------
FLODIGARRY (n. Scots)
An ankle-length gabardine or oilskin tarpaulin worn by deep-sea
herring fishermen in Arbroath and publicans in Glasgow.
			--- Douglas Adams, The Meaning of Liff

From preining at logic.at  Thu Mar 22 15:32:59 2007
From: preining at logic.at (Norbert Preining)
Date: Thu, 22 Mar 2007 15:32:59 +0100
Subject: [Dev-luatex] Snapshot 20070322
In-Reply-To: <46024B74.3020103@elvenkind.com>
References: <46024B74.3020103@elvenkind.com>
Message-ID: <20070322143259.GE6845@gamma.logic.tuwien.ac.at>

On Don, 22 M?r 2007, Taco Hoekwater wrote:
> * luatex-snapshot-200703022.tar.bz2

Debian packages are as usual in 
	deb http://www.tug.org/texlive/Debian/ luatex/
	deb-src http://www.tug.org/texlive/Debian/ luatex/

Furthermore, I have uploaded the package to Debian/unstable. It will
linger in the NEW queue for quite some time, though.

Best wishes

Norbert

-------------------------------------------------------------------------------
Dr. Norbert Preining <preining at logic.at>                    Universit? di Siena
Debian Developer <preining at debian.org>                         Debian TeX Group
gpg DSA: 0x09C5B094      fp: 14DF 2E6C 0307 BE6D AD76  A9C0 D2BF 4AA3 09C5 B094
-------------------------------------------------------------------------------
BEREPPER
The irrevocable and sturdy fart released in the presence of royalty,
which sounds quite like a small motorbike passing by (but not enough
to be confused with one).
			--- Douglas Adams, The Meaning of Liff

From preining at logic.at  Thu Mar 22 15:34:24 2007
From: preining at logic.at (Norbert Preining)
Date: Thu, 22 Mar 2007 15:34:24 +0100
Subject: [Dev-luatex] man page for luatex
Message-ID: <20070322143424.GF6845@gamma.logic.tuwien.ac.at>

Hi all!

Not that I am a great man page writer, but I wanted to have one for
Debian, so here it is, if you want to include it, improve it...

Best wishes

Norbert

-------------------------------------------------------------------------------
Dr. Norbert Preining <preining at logic.at>                    Universit? di Siena
Debian Developer <preining at debian.org>                         Debian TeX Group
gpg DSA: 0x09C5B094      fp: 14DF 2E6C 0307 BE6D AD76  A9C0 D2BF 4AA3 09C5 B094
-------------------------------------------------------------------------------
LOWESTOFT (n.)
(a) The balls of wool which collect on nice new sweaters. (b) The
correct name for 'navel fluff'.
			--- Douglas Adams, The Meaning of Liff
-------------- next part --------------
.TH "LUATEX" "1" "2007.03.22" "Norbert Preining" "TeX"
.SH "NAME"
luatex, luatexlua \- An extended version of pdfTeX using Lua as an embedded scripting language
.SH "SYNOPSIS"
luatex \-\-lua=FILE [OPTION]... [TEXNAME[.tex]] [COMMANDS]

luatex \-\-lua=FILE [OPTION]... \FIRST\-LINE

luatex \-\-lua=FILE [OPTION]... &FMT ARGS
.SH "DESCRIPTION"
Run luaTeX on TEXNAME, usually creating TEXNAME.pdf. Any remaining COMMANDS are processed as luaTeX input, after TEXNAME is read.

Alternatively, if the first non\-option argument begins with a backslash, interpret all non\-option arguments as a line of luaTeX input.

Alternatively, if the first non\-option argument begins with a &, the next word is taken as the FMT to read, overriding all else. Any remaining arguments are processed as above.

If no arguments or options are specified, prompt for input.

If called as luatexlua it acts as lua interpreter.
.SH "OPTIONS"
This version of luatex understands the following command line options.
.TP 
\fB\-\-lua=FILE\fR      the lua initialization file
.TP 
\fB\-\-luaonly\fR       run a lua file, then exit
.TP 
\fB\-\-safer\fR         disable some easily exploitable lua commands
.TP 
\fB\-\-fmt=FORMAT\fR    load the format file FORMAT
.TP 
\fB\-\-ini\fR           be initex, for dumping formats
.TP 
\fB\-\-help\fR          display this help and exit
.TP 
\fB\-\-version\fR       output version information and exit
.SH "SEE ALSO"
.BR pdftex (1),
.BR etex (1),
.BR aleph (1),
.BR lua (1).
.\"=====================================================================
.SH "AUTHORS"
The primary authors of luatex are Hartmut Henkel, Taco
Hoekwater, and Hans Hagen, with help from Martin Schr\[:o]der,
Karel Skoupy, and Han The Thanh.
This man page was written by Norbert Preining for the
Debian Operating System.

From dak at gnu.org  Mon Mar 26 11:36:07 2007
From: dak at gnu.org (David Kastrup)
Date: Mon, 26 Mar 2007 11:36:07 +0200
Subject: [Dev-luatex] Utf-8 too dominant?
Message-ID: <86k5x4s5x4.fsf@lola.quinscape.zz>


Hi,

I just tried doing
luatex -ini latex.ltx

with a freshly checked out LuaTeX.  The result is
This is luaTeX, Version 3.141592-snapshot-2007032611 (Web2C 7.5.6) (INITEX)
(/usr/local/texlive/2007/texmf-dist/tex/latex/base/latex.ltx
(/usr/local/texlive/2007/texmf-dist/tex/latex/base/texsys.cfg)
./texsys.aux found


\@currdir set to: ./.


Assuming \openin and \input 
have the same search path.


Defining UNIX/DOS style filename parser.

catcodes, registers, compatibility for TeX 2,  parameters,
LaTeX2e <2005/12/01>
hacks, control, par, spacing, files, font encodings, lengths,
====================================

Local config file fonttext.cfg used

====================================
(/usr/local/texlive/2007/texmf-dist/tex/cslatex/base/fonttext.cfg
(/usr/local/texlive/2007/texmf-dist/tex/latex/base/omlenc.def)
(/usr/local/texlive/2007/texmf-dist/tex/latex/base/t1enc.def)
(/usr/local/texlive/2007/texmf-dist/tex/latex/base/ot1enc.def)
(/usr/local/texlive/2007/texmf-dist/tex/latex/cslatex/il2enc.def)
(/usr/local/texlive/2007/texmf-dist/tex/latex/base/omsenc.def)
(/usr/local/texlive/2007/texmf-dist/tex/latex/base/t1cmr.fd)
(/usr/local/texlive/2007/texmf-dist/tex/latex/base/ot1cmr.fd)
(/usr/local/texlive/2007/texmf-dist/tex/latex/cslatex/il2cmr.fd)
(/usr/local/texlive/2007/texmf-dist/tex/latex/base/ot1cmss.fd)
(/usr/local/texlive/2007/texmf-dist/tex/latex/base/ot1cmtt.fd))
====================================

Local config file fontmath.cfg used

====================================
(/usr/local/texlive/2007/texmf-dist/tex/latex/base/fontmath.cfg
(/usr/local/texlive/2007/texmf-dist/tex/latex/base/fontmath.ltx
=== Don't modify this file, use a .cfg file instead ===

(/usr/local/texlive/2007/texmf-dist/tex/latex/base/omlcmm.fd)
(/usr/local/texlive/2007/texmf-dist/tex/latex/base/omscmsy.fd)
(/usr/local/texlive/2007/texmf-dist/tex/latex/base/omxcmex.fd)
(/usr/local/texlive/2007/texmf-dist/tex/latex/base/ucmr.fd)))
====================================

Local config file preload.cfg used

=====================================
(/usr/local/texlive/2007/texmf/tex/generic/config/preload.cfg
(/usr/local/texlive/2007/texmf-dist/tex/latex/base/preload.ltx)) page nos.,
x-ref, environments, center, verbatim, math definitions, boxes, title,
sectioning, contents, floats, footnotes, index, bibliography, output,
! Buffer contains an invalid utf-8 sequence.
l.7804   \lccode`\
                  ?=`\i    % dotted I
? 
! Pool contains an invalid utf-8 sequence
.
l.7804   \lccode`\?
                   =`\i    % dotted I
? 
! Buffer contains an invalid utf-8 sequence.
l.7805   \uccode`\
                  ?=`\^^9d % dotted I
? 
! Pool contains an invalid utf-8 sequence
.
l.7805   \uccode`\?
                   =`\^^9d % dotted I
? 
! Buffer contains an invalid utf-8 sequence.
l.7805   \uccode`\?=`\
                      ? % dotted I
? 
! Pool contains an invalid utf-8 sequence

[...]

Now the sequences in question are:

\ifnum\inputlineno=\m at ne\else
  \lccode`\^^9d=`\i    % dotted I
  \uccode`\^^9d=`\^^9d % dotted I
  \lccode`\^^9e=`\^^9e % d-bar
  \uccode`\^^9e=`\^^d0 % d-bar
\fi

In short: the buffer does not contain any illegal utf-8 sequence at
all!  latex.ltx consists _solely_ of ASCII characters in the range
0-127.  Instead, LuaTeX barfs on "\^^9d" and similar ASCII
_transliterations_ of characters which happen to be legal _characters_
in Unicode (though not legal _bytes_ in utf-8).

(/usr/local/texlive/2007/texmf-dist/tex/generic/xu-hyphen/xu-bahyph.tex
! Text line contains an invalid utf-8 sequence.
l.17   \lccode`\
                ?=0
? 
! Text line contains an invalid utf-8 sequence.
l.20     \ifnum\lccode`\
                        ?=0 % if bahyph.tex didn't change this,
? 

Again, the input file is purely ASCII, in this case
\begingroup

\expandafter\ifx\csname XeTeXrevision\endcsname\relax
\else

  % The standard bahyph.tex is plain ASCII, so directly readable;
  % but we want to add patterns for n-tilde (^^f1), as generated by
  % bahyph.sh if the "latin1" option is given.
  % However, if a "latin1" version of bahyph was already present,
  % these would be duplicate patterns.
  % We'll watch the \lccode of ^^f1 so as to detect this.
  \lccode`\^^f1=0
  \let\PATTERNS=\patterns
  \def\patterns{%
    \ifnum\lccode`\^^f1=0 % if bahyph.tex didn't change this,
      \lccode`\^^f1=`\^^f1 % then we can load the extra patterns here
      \PATTERNS{1^^f1a 1^^f1e 1^^f1o 1^^f1i 1^^f1u}%
    \fi
    \PATTERNS
  }

\fi


So we have error messages about "pool", "buffer" and "text line"
containing invalid utf-8 sequences, when the input actually is just
ASCII.

-- 
David Kastrup

From arthur.reutenauer at normalesup.org  Tue Mar 27 11:26:34 2007
From: arthur.reutenauer at normalesup.org (Arthur Reutenauer)
Date: Tue, 27 Mar 2007 11:26:34 +0200
Subject: [Dev-luatex] Utf-8 too dominant?
In-Reply-To: <86k5x4s5x4.fsf@lola.quinscape.zz>
References: <86k5x4s5x4.fsf@lola.quinscape.zz>
Message-ID: <20070327092634.GA11467@clipper.ens.fr>

> Instead, LuaTeX barfs on "\^^9d" and similar ASCII _transliterations_
> of characters which happen to be legal _characters_ in Unicode (though
> not legal _bytes_ in utf-8).

  Good spot, I already noticed there was many problems with latex but I
thought it was mainly due to pattern files (and I gave up very early on
LaTeX in LuaTeX anyway). I suppose the ^^ notation should yield a UTF-8
encoded sequence and not an individual byte (XeTeX indeed is perfectly
happy with it).

From taco at elvenkind.com  Tue Mar 27 11:58:28 2007
From: taco at elvenkind.com (Taco Hoekwater)
Date: Tue, 27 Mar 2007 11:58:28 +0200
Subject: [Dev-luatex] Utf-8 too dominant?
In-Reply-To: <20070327092634.GA11467@clipper.ens.fr>
References: <86k5x4s5x4.fsf@lola.quinscape.zz>
	<20070327092634.GA11467@clipper.ens.fr>
Message-ID: <4608EAC4.3090204@elvenkind.com>



Arthur Reutenauer wrote:
>> Instead, LuaTeX barfs on "\^^9d" and similar ASCII _transliterations_
>> of characters which happen to be legal _characters_ in Unicode (though
>> not legal _bytes_ in utf-8).
> 
>   Good spot, I already noticed there was many problems with latex but I
> thought it was mainly due to pattern files (and I gave up very early on
> LaTeX in LuaTeX anyway). I suppose the ^^ notation should yield a UTF-8
> encoded sequence and not an individual byte (XeTeX indeed is perfectly
> happy with it).

It worked before, so I probably messed up something along the way.
It is safe to assume there will be a fix in the next snapshot.

Taco

From root at aanhet.net  Tue Mar 27 12:22:22 2007
From: root at aanhet.net (Cron Daemon)
Date: Tue, 27 Mar 2007 12:22:22 +0200 (CEST)
Subject: [Dev-luatex] Cron <luatex@server> /home/luatex/luatex-svn
Message-ID: <20070327102222.BA61D2800170@server.aanhet.net>

U  luatex/src/texk/web2c/luatexdir/luatex.web
 U  luatex/src/texk/web2c/luatexdir/lua/ltokenlib.c
 Checked out revision 377.

From dak at gnu.org  Tue Mar 27 12:36:23 2007
From: dak at gnu.org (David Kastrup)
Date: Tue, 27 Mar 2007 12:36:23 +0200
Subject: [Dev-luatex] Utf-8 too dominant?
In-Reply-To: <4608EAC4.3090204@elvenkind.com> (Taco Hoekwater's message of
	"Tue\, 27 Mar 2007 11\:58\:28 +0200")
References: <86k5x4s5x4.fsf@lola.quinscape.zz>
	<20070327092634.GA11467@clipper.ens.fr>
	<4608EAC4.3090204@elvenkind.com>
Message-ID: <86k5x3otw8.fsf@lola.quinscape.zz>

Taco Hoekwater <taco at elvenkind.com> writes:

> Arthur Reutenauer wrote:
>>> Instead, LuaTeX barfs on "\^^9d" and similar ASCII _transliterations_
>>> of characters which happen to be legal _characters_ in Unicode (though
>>> not legal _bytes_ in utf-8).
>>
>>   Good spot, I already noticed there was many problems with latex but I
>> thought it was mainly due to pattern files (and I gave up very early on
>> LaTeX in LuaTeX anyway). I suppose the ^^ notation should yield a UTF-8
>> encoded sequence and not an individual byte (XeTeX indeed is perfectly
>> happy with it).
>
> It worked before, so I probably messed up something along the way.
> It is safe to assume there will be a fix in the next snapshot.

Anyway: I think it is a safe assumption that LuaTeX should be able to
deal with current versions of LaTeX (I think it would be a mistake to
have to rely on lambda).

So the kind of utf-8 support (OTP or something) used for Omega needs
to be somewhat optional.

I don't have any clue about the current implementation, but the amount
of error messages I got suggests there are several areas involved.

Here is my take on what would constitute a sane environment (some of
that probably is already implemented in XeTeX) in my opinion:

Single characters: encoded in unicode (UCS-21 or similar).

Input line buffer: array of single characters.  Characters are created
from input by using the input coding system of the file (basically one
of 8-bit, utf-8, at some later point of time possibly also things like
utf-16-le or utf-16-be).

LaTeX would be fixed to "transparent" at first.  Which would make it
work like before.  However, one would want to eventually add something
like an utf8l input encoding in order to have it behave more sanely.

String space: utf-8 encoded.  This is probably incompatible with
previous code, but saves space.

Log and console output: switchable utf-8 or 8-bit, probably depending
on locale and/or inherited from the mode of the current input file.
In "8-bit" mode, obviously all characters with a code point above 256
need to get output as ^^^^abcd or ^^^^^^01abcd or similar.

Write streams: similar.  It might be possible to generally write
utf-8, but then it might be a good idea to add a byte order mark at
the start of files so that \input on such files will flip the coding
system appropriately.

I really need to take a look at XeTeX.

-- 
David Kastrup

From taco at elvenkind.com  Tue Mar 27 12:55:17 2007
From: taco at elvenkind.com (Taco Hoekwater)
Date: Tue, 27 Mar 2007 12:55:17 +0200
Subject: [Dev-luatex] Utf-8 too dominant?
In-Reply-To: <86k5x3otw8.fsf@lola.quinscape.zz>
References: <86k5x4s5x4.fsf@lola.quinscape.zz>	<20070327092634.GA11467@clipper.ens.fr>	<4608EAC4.3090204@elvenkind.com>
	<86k5x3otw8.fsf@lola.quinscape.zz>
Message-ID: <4608F815.80404@elvenkind.com>

David Kastrup wrote:
> 
> So the kind of utf-8 support (OTP or something) used for Omega needs
> to be somewhat optional.

No, the error is simply a bug. All I/O characters that are visible to
the bare engine is, and will be, utf-8 encoded. If you want to do bare
bytes, you have to preprocess them in lua.

Taco

From dak at gnu.org  Tue Mar 27 13:06:49 2007
From: dak at gnu.org (David Kastrup)
Date: Tue, 27 Mar 2007 13:06:49 +0200
Subject: [Dev-luatex] Utf-8 too dominant?
In-Reply-To: <4608F815.80404@elvenkind.com> (Taco Hoekwater's message of "Tue\,
	27 Mar 2007 12\:55\:17 +0200")
References: <86k5x4s5x4.fsf@lola.quinscape.zz>
	<20070327092634.GA11467@clipper.ens.fr>
	<4608EAC4.3090204@elvenkind.com> <86k5x3otw8.fsf@lola.quinscape.zz>
	<4608F815.80404@elvenkind.com>
Message-ID: <86fy7roshi.fsf@lola.quinscape.zz>

Taco Hoekwater <taco at elvenkind.com> writes:

> David Kastrup wrote:
>>
>> So the kind of utf-8 support (OTP or something) used for Omega needs
>> to be somewhat optional.
>
> No, the error is simply a bug. All I/O characters that are visible to
> the bare engine is, and will be, utf-8 encoded.

What is "the bare engine"?  From the TeX side, one sees Unicode
characters.

> If you want to do bare bytes, you have to preprocess them in lua.

How do you interpret input bytes that don't form valid utf-8
sequences?  As long as they are preserved in some recognizable manner,
it should be possible to do this sort of reverse conversion to the
original bytes, but it certainly does not sound like it would make for
attractive speed.

-- 
David Kastrup

From taco at elvenkind.com  Tue Mar 27 13:21:04 2007
From: taco at elvenkind.com (Taco Hoekwater)
Date: Tue, 27 Mar 2007 13:21:04 +0200
Subject: [Dev-luatex] Utf-8 too dominant?
In-Reply-To: <86fy7roshi.fsf@lola.quinscape.zz>
References: <86k5x4s5x4.fsf@lola.quinscape.zz>	<20070327092634.GA11467@clipper.ens.fr>	<4608EAC4.3090204@elvenkind.com>
	<86k5x3otw8.fsf@lola.quinscape.zz>	<4608F815.80404@elvenkind.com>
	<86fy7roshi.fsf@lola.quinscape.zz>
Message-ID: <4608FE20.2080503@elvenkind.com>

David Kastrup wrote:
> Taco Hoekwater <taco at elvenkind.com> writes:
> 
>> David Kastrup wrote:
>>> So the kind of utf-8 support (OTP or something) used for Omega needs
>>> to be somewhat optional.
>> No, the error is simply a bug. All I/O characters that are visible to
>> the bare engine is, and will be, utf-8 encoded.
> 
> What is "the bare engine"?  From the TeX side, one sees Unicode
> characters.

The bare engine is the compiled executable code. Filtering and
reencoding can be done using lua scripts, and those are interpreted
(i.e. runtime). This is discussed in the reference manual, so if
you have not looked at that yet, please do so before replying to
this message.

If you believe it is possible to support arbitrary 8-bit encodings
while supporting utf-8 properly at the same time feel free to donate
the pascal web/C code to do so. I am not willing to spend time on
that myself, considering we have a scripting language builtin that
is ideally suited to take care of this problem.

Supporting utf-8 properly means: no need to have active \catcode-s
for >128, but allow utf-8 sequences to be treated as a single
character everywhere (for example in messaging, to be used inside
\csnames, and as argument to \catcode c.s.), and also remove the
need for port-dependant things like tcx files and -8bit.

Best wishes,

Taco

From pragma at wxs.nl  Tue Mar 27 15:24:59 2007
From: pragma at wxs.nl (Hans Hagen)
Date: Tue, 27 Mar 2007 15:24:59 +0200
Subject: [Dev-luatex] Utf-8 too dominant?
In-Reply-To: <86fy7roshi.fsf@lola.quinscape.zz>
References: <86k5x4s5x4.fsf@lola.quinscape.zz>
	<20070327092634.GA11467@clipper.ens.fr>
	<4608EAC4.3090204@elvenkind.com> <86k5x3otw8.fsf@lola.quinscape.zz>
	<4608F815.80404@elvenkind.com> <86fy7roshi.fsf@lola.quinscape.zz>
Message-ID: <46091B2B.4090808@wxs.nl>

David Kastrup wrote:
> Taco Hoekwater <taco at elvenkind.com> writes:
>
>   
>> David Kastrup wrote:
>>     
>>> So the kind of utf-8 support (OTP or something) used for Omega needs
>>> to be somewhat optional.
>>>       
>> No, the error is simply a bug. All I/O characters that are visible to
>> the bare engine is, and will be, utf-8 encoded.
>>     
>
> What is "the bare engine"?  From the TeX side, one sees Unicode
> characters.
>
>   
>> If you want to do bare bytes, you have to preprocess them in lua.
>>     
>
> How do you interpret input bytes that don't form valid utf-8
> sequences?  As long as they are preserved in some recognizable manner,
> it should be possible to do this sort of reverse conversion to the
> original bytes, but it certainly does not sound like it would make for
> attractive speed.
>
>   
you can define a callback that will intercept each line and do whatever 
you want with the content as long as what you pipe back into tex is utf 8

the internal dataflow is utf8 and as the manual states, getting not utf 
(8 bit) out is a matter of remapping to a reserved private area in 
unicode (for instance, pdf literals may need 8 bit instead of utf, and 
that's how it's done)

this keeps luatex internally clean, but permits macro writers to do what 
they want; it's also the principle of luatex ... provide access and 
points of interception but stay as clean as possible internally

anyhow, good old tex was never 8 bit clean (at least not till recently 
and then only with natural.tcx or -8bit)

also keep in mind that macro packages need to adapt to luatex and not 
the reverse -)
Hans

-- 

-----------------------------------------------------------------
                                          Hans Hagen | PRAGMA ADE
              Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | fax: 038 477 53 74 | www.pragma-ade.com
                                             | www.pragma-pod.nl
-----------------------------------------------------------------


From David at lola.quinscape.zz  Tue Mar 27 15:25:51 2007
From: David at lola.quinscape.zz (David at lola.quinscape.zz)
Date: Tue, 27 Mar 2007 15:25:51 +0200
Subject: [Dev-luatex] token_filter semantics (was:  Utf-8 too dominant?)
In-Reply-To: <4608FE20.2080503@elvenkind.com> (Taco Hoekwater's message of
	"Tue\, 27 Mar 2007 13\:21\:04 +0200")
References: <86k5x4s5x4.fsf@lola.quinscape.zz>
	<20070327092634.GA11467@clipper.ens.fr>
	<4608EAC4.3090204@elvenkind.com> <86k5x3otw8.fsf@lola.quinscape.zz>
	<4608F815.80404@elvenkind.com> <86fy7roshi.fsf@lola.quinscape.zz>
	<4608FE20.2080503@elvenkind.com>
Message-ID: <86zm5yom1s.fsf_-_@lola.quinscape.zz>

Taco Hoekwater <taco at elvenkind.com> writes:

> [...] This is discussed in the reference manual, so if you have not
> looked at that yet, please do so before replying to this message.

Dangerous advice since this gives me ideas...

Here is something I find worth giving a different API:

    \subsubsection{\callback{token_filter}}

    This callback allows you to change the fetch and preprocess any
    lexical token that enters \LUATEX, before \LUATEX\ executes or expands
    the associated command.

    \startfunctioncall
         function ()
            return table <token>
         end
    \stopfunctioncall

    The calling convention for this callback is bit more complicated then
    for most other callbacks.  The function should either return a lua
    table representing a valid to-be-processed token or tokenlist, or
    something else like nil or an empty table.

    If your lua function does not return a table representing a valid
    token, it will be immediately called again, until it eventually does
    return a useful token or tokenlist (or until you reset the callback
    value to nil). See the description of \callbacklib{token} for some
    handy functions to be used in conjunction with this callback.

    If your function returns a single usable token, then that token will
    be processed by \LUATEX\ immediately. If the function returns a token
    list (a table consisting of a list of consecutive token tables), then
    that list will be pushed to the input stack as completely new token
    list level, with it's token type set to `inserted'. In either case,
    the returned token(s) will not be fed back into the callback function.

I think that I would like to propose a much more luatic solution:

If token_filter is set, it is called with one argument
\verb|get_next|, the function originally supposed to get the next
token.

token_filter should then call this function as often as it needs to
(possibly zero times) and return one token to the caller.

If you need to readahead and buffer tokens (like when simulating
OTPs), the easiest way to do this is using something like the
following for the filter function:

coroutine.wrap(function(get_token)
  while true
    local token1 = get_token()
    if token1.cmd != "^" then
      get_token = coroutine.yield(token1)
    else
      local token2 = get_token()
      if token2.cmd != "^" then
        coroutine.yield(token1)
        get_token = coroutine.yield(token2)
      else
        local token3 = get_token()
        if token3.cmd ... then
          get_token = coroutine.yield(something)
        else
          coroutine.yield(token1)
          coroutine.yield(token2)
          get_token = coroutine.yield(token3)
        end
      end
    end
  end
end)

Ok, the code itself is nonsensically, but it should illustrate the
working principle: if the filtering is not 1:1, one can use a
coroutine for analysing the input, buffering and producing the tokens.
This approach also has the advantage that one can stack filter
functions easily.

The existing interface makes that much harder: I actually have no good
idea how one would go about it.

One problem with this approach is that the lookahead kept internally
within a coroutine will get lost when one switches the filter function
out (not that the current approach fares better here).  One solution
might be to pass an artificial "EOF" token to the filter function as
the last act before removing it from token_filter, and accepting a
list of lookahead tokens as the return value.

-- 
David Kastrup

From David.Kastrup at QuinScape.de  Tue Mar 27 15:35:21 2007
From: David.Kastrup at QuinScape.de (David Kastrup)
Date: Tue, 27 Mar 2007 15:35:21 +0200
Subject: [Dev-luatex] token_filter semantics
In-Reply-To: <86zm5yom1s.fsf_-_@lola.quinscape.zz> (David@lola.quinscape.zz's
	message of "Tue\, 27 Mar 2007 15\:25\:51 +0200")
References: <86k5x4s5x4.fsf@lola.quinscape.zz>
	<20070327092634.GA11467@clipper.ens.fr>
	<4608EAC4.3090204@elvenkind.com> <86k5x3otw8.fsf@lola.quinscape.zz>
	<4608F815.80404@elvenkind.com> <86fy7roshi.fsf@lola.quinscape.zz>
	<4608FE20.2080503@elvenkind.com> <86zm5yom1s.fsf_-_@lola.quinscape.zz>
Message-ID: <86r6raolly.fsf@lola.quinscape.zz>

David at lola.quinscape.zz, "Kastrup <David.Kastrup"@QuinScape.de writes:

Sorry, I managed to mangle the From header completely.  No idea why
this passed through.  Please remove the mess and just reply to the
list when replying to that last mail.  I can repost it if people would
prefer that.

-- 
David Kastrup

From pragma at wxs.nl  Tue Mar 27 16:20:59 2007
From: pragma at wxs.nl (Hans Hagen)
Date: Tue, 27 Mar 2007 16:20:59 +0200
Subject: [Dev-luatex] token_filter semantics
In-Reply-To: <86zm5yom1s.fsf_-_@lola.quinscape.zz>
References: <86k5x4s5x4.fsf@lola.quinscape.zz>
	<20070327092634.GA11467@clipper.ens.fr>
	<4608EAC4.3090204@elvenkind.com> <86k5x3otw8.fsf@lola.quinscape.zz>
	<4608F815.80404@elvenkind.com> <86fy7roshi.fsf@lola.quinscape.zz>
	<4608FE20.2080503@elvenkind.com>
	<86zm5yom1s.fsf_-_@lola.quinscape.zz>
Message-ID: <4609284B.1050408@wxs.nl>

David at lola.quinscape.zz wrote:
> Taco Hoekwater <taco at elvenkind.com> writes:
>
>   
>> [...] This is discussed in the reference manual, so if you have not
>> looked at that yet, please do so before replying to this message.
>>     
>
> Dangerous advice since this gives me ideas...
>
> Here is something I find worth giving a different API:
>
>     \subsubsection{\callback{token_filter}}
>
>     This callback allows you to change the fetch and preprocess any
>     lexical token that enters \LUATEX, before \LUATEX\ executes or expands
>     the associated command.
>
>     \startfunctioncall
>          function ()
>             return table <token>
>          end
>     \stopfunctioncall
>
>     The calling convention for this callback is bit more complicated then
>     for most other callbacks.  The function should either return a lua
>     table representing a valid to-be-processed token or tokenlist, or
>     something else like nil or an empty table.
>
>     If your lua function does not return a table representing a valid
>     token, it will be immediately called again, until it eventually does
>     return a useful token or tokenlist (or until you reset the callback
>     value to nil). See the description of \callbacklib{token} for some
>     handy functions to be used in conjunction with this callback.
>
>     If your function returns a single usable token, then that token will
>     be processed by \LUATEX\ immediately. If the function returns a token
>     list (a table consisting of a list of consecutive token tables), then
>     that list will be pushed to the input stack as completely new token
>     list level, with it's token type set to `inserted'. In either case,
>     the returned token(s) will not be fed back into the callback function.
>
> I think that I would like to propose a much more luatic solution:
>
> If token_filter is set, it is called with one argument
> \verb|get_next|, the function originally supposed to get the next
> token.
>
> token_filter should then call this function as often as it needs to
> (possibly zero times) and return one token to the caller.
>
> If you need to readahead and buffer tokens (like when simulating
> OTPs), the easiest way to do this is using something like the
> following for the filter function:
>
> coroutine.wrap(function(get_token)
>   while true
>     local token1 = get_token()
>     if token1.cmd != "^" then
>       get_token = coroutine.yield(token1)
>     else
>       local token2 = get_token()
>       if token2.cmd != "^" then
>         coroutine.yield(token1)
>         get_token = coroutine.yield(token2)
>       else
>         local token3 = get_token()
>         if token3.cmd ... then
>           get_token = coroutine.yield(something)
>         else
>           coroutine.yield(token1)
>           coroutine.yield(token2)
>           get_token = coroutine.yield(token3)
>         end
>       end
>     end
>   end
> end)
>
> Ok, the code itself is nonsensically, but it should illustrate the
> working principle: if the filtering is not 1:1, one can use a
> coroutine for analysing the input, buffering and producing the tokens.
> This approach also has the advantage that one can stack filter
> functions easily.
>
> The existing interface makes that much harder: I actually have no good
> idea how one would go about it.
>
> One problem with this approach is that the lookahead kept internally
> within a coroutine will get lost when one switches the filter function
> out (not that the current approach fares better here).  One solution
> might be to pass an artificial "EOF" token to the filter function as
> the last act before removing it from token_filter, and accepting a
> list of lookahead tokens as the return value.
>
>   
the problem is that this is real slow which renders it rather unusable, 
even the current implementation is already on the edge of acceptable

why do you want to handle the ^'s?

you can do that using the input line callback

Hans

-- 

-----------------------------------------------------------------
                                          Hans Hagen | PRAGMA ADE
              Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | fax: 038 477 53 74 | www.pragma-ade.com
                                             | www.pragma-pod.nl
-----------------------------------------------------------------


From dak at gnu.org  Tue Mar 27 16:49:10 2007
From: dak at gnu.org (David Kastrup)
Date: Tue, 27 Mar 2007 16:49:10 +0200
Subject: [Dev-luatex] token_filter semantics
In-Reply-To: <86zm5yom1s.fsf_-_@lola.quinscape.zz> (David@lola.quinscape.zz's
	message of "Tue\, 27 Mar 2007 15\:25\:51 +0200")
References: <86k5x4s5x4.fsf@lola.quinscape.zz>
	<20070327092634.GA11467@clipper.ens.fr>
	<4608EAC4.3090204@elvenkind.com> <86k5x3otw8.fsf@lola.quinscape.zz>
	<4608F815.80404@elvenkind.com> <86fy7roshi.fsf@lola.quinscape.zz>
	<4608FE20.2080503@elvenkind.com> <86zm5yom1s.fsf_-_@lola.quinscape.zz>
Message-ID: <868xdioi6x.fsf@lola.quinscape.zz>


I wrote:

> coroutine.wrap(function(get_token)
>   while true
>     local token1 = get_token()
>     if token1.cmd != "^" then
>       get_token = coroutine.yield(token1)
>     else
>       local token2 = get_token()
>       if token2.cmd != "^" then
>         coroutine.yield(token1)
>         get_token = coroutine.yield(token2)
>       else
>         local token3 = get_token()
>         if token3.cmd ... then
>           get_token = coroutine.yield(something)
>         else
>           coroutine.yield(token1)
>           coroutine.yield(token2)
>           get_token = coroutine.yield(token3)
>         end
>       end
>     end
>   end
> end)
>
> One problem with this approach is that the lookahead kept internally
> within a coroutine will get lost when one switches the filter function
> out (not that the current approach fares better here).  One solution
> might be to pass an artificial "EOF" token to the filter function as
> the last act before removing it from token_filter, and accepting a
> list of lookahead tokens as the return value.

About that lookahead and phasing the filter routine out: more
consistent would probably be the following: when there is no longer
input for the filter routine, pass it nil as input routine.  Once it
bleeds out nil, it is finished.

So we get:

coroutine.wrap(function(get_token)
  while get_token != nil
    local token1 = get_token()
    if token1.cmd != "^" then
      get_token = coroutine.yield(token1)
    else
      local token2 = get_token()
      if token2.cmd != "^" then
        coroutine.yield(token1)
        get_token = coroutine.yield(token2)
      else
        local token3 = get_token()
        if token3.cmd ... then
          get_token = coroutine.yield(something)
        else
          coroutine.yield(token1)
          coroutine.yield(token2)
          get_token = coroutine.yield(token3)
        end
      end
    end
  end
  return nil
end)

Managing multiple filter functions will still be some work, probably
requiring the use of a suitable helper function.  But basically, I
find this sort of interface more natural than the current token_filter
semantics.

-- 
David Kastrup

From dak at gnu.org  Tue Mar 27 16:58:39 2007
From: dak at gnu.org (David Kastrup)
Date: Tue, 27 Mar 2007 16:58:39 +0200
Subject: [Dev-luatex] token_filter semantics
In-Reply-To: <4609284B.1050408@wxs.nl> (Hans Hagen's message of "Tue\,
	27 Mar 2007 16\:20\:59 +0200")
References: <86k5x4s5x4.fsf@lola.quinscape.zz>
	<20070327092634.GA11467@clipper.ens.fr>
	<4608EAC4.3090204@elvenkind.com> <86k5x3otw8.fsf@lola.quinscape.zz>
	<4608F815.80404@elvenkind.com> <86fy7roshi.fsf@lola.quinscape.zz>
	<4608FE20.2080503@elvenkind.com> <86zm5yom1s.fsf_-_@lola.quinscape.zz>
	<4609284B.1050408@wxs.nl>
Message-ID: <864po6ohr4.fsf@lola.quinscape.zz>

Hans Hagen <pragma at wxs.nl> writes:

> the problem is that this is real slow which renders it rather
> unusable, even the current implementation is already on the edge of
> acceptable
>
> why do you want to handle the ^'s?
>
> you can do that using the input line callback

That was just a stupid example of some text transformation in order to
illustrate how one could do this sort of thing with the proposed
changed token_filter semantics.  I certainly would not want to do
anything like that for actually handling "^^".  It was just an example
for a less than trivial task solved using token_filter: I find the
current semantics of that hook to be quite contorted.

Can you think of a particular task implemented using the current
token_filter semantics that would become noticeably slower using the
simpler semantics I proposed, namely calling token_filter when a token
is expected and giving it as an argument a routine to call for
fetching a token to transform?

I don't see a task that can be implemented better (faster or easier)
with the current semantics than with the proposed simplified
semantics.

Could you give an example?

-- 
David Kastrup

From taco at elvenkind.com  Tue Mar 27 17:35:19 2007
From: taco at elvenkind.com (Taco Hoekwater)
Date: Tue, 27 Mar 2007 17:35:19 +0200
Subject: [Dev-luatex] token_filter semantics
In-Reply-To: <4609284B.1050408@wxs.nl>
References: <86k5x4s5x4.fsf@lola.quinscape.zz>	<20070327092634.GA11467@clipper.ens.fr>	<4608EAC4.3090204@elvenkind.com>
	<86k5x3otw8.fsf@lola.quinscape.zz>	<4608F815.80404@elvenkind.com>
	<86fy7roshi.fsf@lola.quinscape.zz>	<4608FE20.2080503@elvenkind.com>	<86zm5yom1s.fsf_-_@lola.quinscape.zz>
	<4609284B.1050408@wxs.nl>
Message-ID: <460939B7.3070008@elvenkind.com>



Hans Hagen wrote:
>>
>>
>>
>> If you need to readahead and buffer tokens (like when simulating
>> OTPs), the easiest way to do this is using something like the
>> following for the filter function:


If you need to read ahead for tokens, just run token.get_next()
in a loop that stores tokens in a local table until you are happy.
Then return that table after processing it. There is no need
to return to the TeX control loop before that.

Best, Taco

From arthur.reutenauer at normalesup.org  Wed Mar 28 21:55:42 2007
From: arthur.reutenauer at normalesup.org (Arthur Reutenauer)
Date: Wed, 28 Mar 2007 21:55:42 +0200
Subject: [Dev-luatex] Snapshot 20070322
In-Reply-To: <20070322143259.GE6845@gamma.logic.tuwien.ac.at>
References: <46024B74.3020103@elvenkind.com>
	<20070322143259.GE6845@gamma.logic.tuwien.ac.at>
Message-ID: <20070328195542.GA30359@clipper.ens.fr>

> Debian packages are as usual in 
> 	deb http://www.tug.org/texlive/Debian/ luatex/
> 	deb-src http://www.tug.org/texlive/Debian/ luatex/

  I realized it could be useful to make my binaries available as well
(Mac OS X Intel and Sparc Solaris), so here they are:

	http://arthur.reutenauer.eu/luatex/binaries/

  Unlike Norbert, I really only deliver the raw binaries without any
packaging, so people interested in downloading them will have to figure
out a way of making them fit in their installation.

  For Mac OS X, I compiled on an Intel processor and I don't know how to
make ?universal? binaries yet so it'll only work on Intel. And as far as
Solaris is concerned, I haven't built the latest snapshot because it
requires a little bit of tweaking.

	Arthur

From arthur.reutenauer at normalesup.org  Fri Mar 30 19:32:34 2007
From: arthur.reutenauer at normalesup.org (Arthur Reutenauer)
Date: Fri, 30 Mar 2007 19:32:34 +0200
Subject: [Dev-luatex] Snapshot 20070322
In-Reply-To: <20070328195542.GA30359@clipper.ens.fr>
References: <46024B74.3020103@elvenkind.com>
	<20070322143259.GE6845@gamma.logic.tuwien.ac.at>
	<20070328195542.GA30359@clipper.ens.fr>
Message-ID: <20070330173234.GA23449@clipper.ens.fr>

>   I realized it could be useful to make my binaries available as well
> (Mac OS X Intel and Sparc Solaris)

  Thanks to Taco, this now available on the G-forge repository at
supelec.fr (https://foundry.supelec.fr/frs/?group_id=10), so no need to
check my unreliable server.

  For people who have access to a Sun machine, it would be great if you
could test my binary, since there is a strange bug and I would like for
other people to test it as well (I already experienced on two different
machines under Solaris 9).

	Arthur

From root at aanhet.net  Fri Mar 30 22:22:29 2007
From: root at aanhet.net (Cron Daemon)
Date: Fri, 30 Mar 2007 22:22:29 +0200 (CEST)
Subject: [Dev-luatex] Cron <luatex@server> /home/luatex/luatex-svn
Message-ID: <20070330202229.2E1A328000ED@server.aanhet.net>

U  luatex/src/texk/kpathsea/c-memstr.h
 U  luatex/src/texk/kpathsea/texmf.in
 U  luatex/src/texk/web2c/luatexdir/luatex.web
 U  luatex/src/texk/web2c/luatexdir/lua/luastuff.c
 U  luatex/src/texk/web2c/luatexdir/font/ttflua.c
 Checked out revision 382.

