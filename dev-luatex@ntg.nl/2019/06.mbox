From tex at 2krueger.de  Sat Jun  1 00:40:07 2019
From: tex at 2krueger.de (Marcel Fabian =?utf-8?Q?Kr=C3=BCger?=)
Date: Sat, 1 Jun 2019 00:40:07 +0200
Subject: [Dev-luatex] [PATCH] Respect find_{output,write}_file result
In-Reply-To: <CAG5iGsBRmVVZqfU1xrBEAQxCHHS0sMMwKNRJxLRawxZT9OP+Mw@mail.gmail.com>
References: <20190526195028.6245-1-tex@2krueger.de>
 <f9c39780-e542-4642-3524-0872f0fa75a1@xs4all.nl>
 <CAG5iGsBRmVVZqfU1xrBEAQxCHHS0sMMwKNRJxLRawxZT9OP+Mw@mail.gmail.com>
Message-ID: <20190531224007.guiug7t5pydbovlm@yoga>

On Mon, May 27, 2019 at 09:38:18AM +0200, luigi scarso wrote:
> 
> [...]
> 
> applied in experimental
> 

Thanks.

I still think ->R would make more sense than ->S though, because at
least for find_write_file the documentation explicitly allows returning nil
"if the file cannot be found", which I understand as "if no place for the file
is found", so the message "callback should return a string, not: nil" seems at
least misleading.

Best regards,
Marcel


From j.hagen at xs4all.nl  Sat Jun  1 10:34:37 2019
From: j.hagen at xs4all.nl (Hans Hagen)
Date: Sat, 1 Jun 2019 10:34:37 +0200
Subject: [Dev-luatex] [PATCH] Respect find_{output,write}_file result
In-Reply-To: <20190531224007.guiug7t5pydbovlm@yoga>
References: <20190526195028.6245-1-tex@2krueger.de>
 <f9c39780-e542-4642-3524-0872f0fa75a1@xs4all.nl>
 <CAG5iGsBRmVVZqfU1xrBEAQxCHHS0sMMwKNRJxLRawxZT9OP+Mw@mail.gmail.com>
 <20190531224007.guiug7t5pydbovlm@yoga>
Message-ID: <bb588178-6974-ca1b-b7fc-fd7e88d2c30c@xs4all.nl>

On 6/1/2019 12:40 AM, Marcel Fabian KrÃ¼ger wrote:
> On Mon, May 27, 2019 at 09:38:18AM +0200, luigi scarso wrote:
>>
>> [...]
>>
>> applied in experimental
>>
> 
> Thanks.
> 
> I still think ->R would make more sense than ->S though, because at
> least for find_write_file the documentation explicitly allows returning nil
> "if the file cannot be found", which I understand as "if no place for the file
> is found", so the message "callback should return a string, not: nil" seems at
> least misleading.
Here I already have R indeed as it is consistent with the other ones; 
there's another place too. I was pondering some other adaption but will 
postpone that and submit the two R patches.

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From luigi.scarso at gmail.com  Sat Jun  1 13:39:57 2019
From: luigi.scarso at gmail.com (luigi scarso)
Date: Sat, 1 Jun 2019 13:39:57 +0200
Subject: [Dev-luatex] [PATCH] Respect find_{output,write}_file result
In-Reply-To: <bb588178-6974-ca1b-b7fc-fd7e88d2c30c@xs4all.nl>
References: <20190526195028.6245-1-tex@2krueger.de>
 <f9c39780-e542-4642-3524-0872f0fa75a1@xs4all.nl>
 <CAG5iGsBRmVVZqfU1xrBEAQxCHHS0sMMwKNRJxLRawxZT9OP+Mw@mail.gmail.com>
 <20190531224007.guiug7t5pydbovlm@yoga>
 <bb588178-6974-ca1b-b7fc-fd7e88d2c30c@xs4all.nl>
Message-ID: <CAG5iGsCU8sSsNrvLLn9ckOo7-43eVcSxaRwbEVvSVrwwWeb8Kg@mail.gmail.com>

On Sat, Jun 1, 2019 at 10:34 AM Hans Hagen <j.hagen at xs4all.nl> wrote:

> On 6/1/2019 12:40 AM, Marcel Fabian KrÃ¼ger wrote:
> > On Mon, May 27, 2019 at 09:38:18AM +0200, luigi scarso wrote:
> >>
> >> [...]
> >>
> >> applied in experimental
> >>
> >
> > Thanks.
> >
> > I still think ->R would make more sense than ->S though, because at
> > least for find_write_file the documentation explicitly allows returning
> nil
> > "if the file cannot be found", which I understand as "if no place for
> the file
> > is found", so the message "callback should return a string, not: nil"
> seems at
> > least misleading.
> Here I already have R indeed as it is consistent with the other ones;
> there's another place too. I was pondering some other adaption but will
> postpone that and submit the two R patches.



applied in  r7151.

--
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20190601/2a66b82e/attachment.html>

From sjors at sjorsgielen.nl  Mon Jun 10 13:25:50 2019
From: sjors at sjorsgielen.nl (Sjors Gielen)
Date: Mon, 10 Jun 2019 13:25:50 +0200
Subject: [Dev-luatex] On \maxdimen in LuaTeX
Message-ID: <CAPXQAKuKdKRR16pa4VwNTBHv_3yPm_5ah1AOR=txnxnxCZf3uQ@mail.gmail.com>

Hi all,

According to the TeX in Practice book, "the largest dimension value that
can be represented in a TeX program is 16383.99999pt. This value is
assigned to a dimension register \maxdimen [...]." This is a tiny bit
smaller than 2^14 pt. As a layman TeX user, my naive guess is that in the
compiler, floating point dimension registers probably use int32_t or some
other fixed-length type, and the compiler implements its own floating point
arithmetics. Either way, whenever an overflow is going to happen, the
compiler prints a "! Dimension too large" error.

This error also occurs when using LuaTeX. My gut feeling is that the
current limit of (almost) 16384 pt is perhaps mostly historic; could it
nowadays be loosened somehow? Perhaps the dimension calculations are
already in Lua and the error is there for legacy reasons, or perhaps the
calculations are still in C and if int32_t is indeed used, int64_t could
conceivably raise the max dimensions to hundreds of kilometers, more than
anyone would accidentally reach.

Looking forward to hearing your thoughts.

Best,
Sjors Gielen

P.S.: The discussion I am hoping to invoke is theoretical, but for
background, my motivation comes from the use of the 'mdframed' package to
split a large frame over many pages. Our automated testing system creates
mdframed environments containing test steps and their outcomes; we have
apparently crossed some new amount of steps where the virtual vbox size
goes over \maxdimen before the vbox is split over multiple pages. If the
error is ignored, the generated PDF looks fine. We can also end the
mdframed environment every N steps and immediately start a new one, which
is an acceptable workaround but I'm a bit unsatisfied that it's necessary.
Perhaps this is better considered a bug in mdframed than in the typesetting
engine, but I still find the theoretical question behind \maxdimen
interesting, hence this e-mail.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20190610/e067843f/attachment.html>

From j.hagen at xs4all.nl  Tue Jun 11 18:22:58 2019
From: j.hagen at xs4all.nl (Hans Hagen)
Date: Tue, 11 Jun 2019 18:22:58 +0200
Subject: [Dev-luatex] On \maxdimen in LuaTeX
In-Reply-To: <CAPXQAKuKdKRR16pa4VwNTBHv_3yPm_5ah1AOR=txnxnxCZf3uQ@mail.gmail.com>
References: <CAPXQAKuKdKRR16pa4VwNTBHv_3yPm_5ah1AOR=txnxnxCZf3uQ@mail.gmail.com>
Message-ID: <f662cef5-ef78-1c3b-9f2e-135374514f48@xs4all.nl>

On 6/10/2019 1:25 PM, Sjors Gielen wrote:
> Hi all,
> 
> According to the TeX in Practice book, "the largest dimension value that 
> can be represented in a TeX program is 16383.99999pt. This value is 
> assigned to a dimension register \maxdimen [...]." This is a tiny bit 
> smaller than 2^14 pt. As a layman TeX user, my naive guess is that in 
> the compiler, floating point dimension registers probably use int32_t or 
> some other fixed-length type, and the compiler implements its own 
> floating point arithmetics. Either way, whenever an overflow is going to 
> happen, the compiler prints a "! Dimension too large" error.
> 
> This error also occurs when using LuaTeX. My gut feeling is that the 
> current limit of (almost) 16384 pt is perhaps mostly historic; could it 
> nowadays be loosened somehow? Perhaps the dimension calculations are 
> already in Lua and the error is there for legacy reasons, or perhaps the 
> calculations are still in C and if int32_t is indeed used, int64_t could 
> conceivably raise the max dimensions to hundreds of kilometers, more 
> than anyone would accidentally reach.
> 
> Looking forward to hearing your thoughts.

changing a 'scaled' to 64 bit has lots of implications like changing the 
node memory properties (multiplying mem), all kind now int's becoming 
longs and therefore also quite some instability for a while

when you use \dimexpr valuesx can be larger till the result is known

actually you can create a box larger than maxdimen and split off bits 
because tex doesn't always check

so: very unlikely to change

> Best,
> Sjors Gielen
> 
> P.S.: The discussion I am hoping to invoke is theoretical, but for 
> background, my motivation comes from the use of the 'mdframed' package 
> to split a large frame over many pages. Our automated testing system 
> creates mdframed environments containing test steps and their outcomes; 
> we have apparently crossed some new amount of steps where the virtual 
> vbox size goes over \maxdimen before the vbox is split over multiple 
> pages. If the error is ignored, the generated PDF looks fine. We can 
> also end the mdframed environment every N steps and immediately start a 
> new one, which is an acceptable workaround but I'm a bit unsatisfied 
> that it's necessary. Perhaps this is better considered a bug in mdframed 
> than in the typesetting engine, but I still find the theoretical 
> question behind \maxdimen interesting, hence this e-mail.
> 
> _______________________________________________
> dev-luatex mailing list
> dev-luatex at ntg.nl
> https://mailman.ntg.nl/mailman/listinfo/dev-luatex
> 


-- 

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From luigi.scarso at gmail.com  Tue Jun 18 20:48:41 2019
From: luigi.scarso at gmail.com (luigi scarso)
Date: Tue, 18 Jun 2019 20:48:41 +0200
Subject: [Dev-luatex] luatex and harfbuzz 2.5.1
Message-ID: <CAG5iGsA=brP5cTXFWJ4nB_0jKoJfw0A0YHhSp9NDZY=914X7WA@mail.gmail.com>

In experimental there is now
luatex 1.11.0 with harfbuzz 2.5.1
It follows from the development of harftex by K. Hosny.
Please note that the code is
1) in experimental
2) marked as work in progress
so  it can stay as is, it can be changed , it can be removed completely.


We have relaxed the constrain "only C" so a recent C++ is required;
but we keep the contrain on the size the must be "small"  ---
the current size of the binary is around 8M so still good.

Feedbacks are welcome: it would be nice to have it in texlive 2020
modulo that constrains are satisfied.

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20190618/ca38e2e3/attachment.html>

From patrick at gundla.ch  Tue Jun 18 21:22:50 2019
From: patrick at gundla.ch (Patrick Gundlach)
Date: Tue, 18 Jun 2019 21:22:50 +0200
Subject: [Dev-luatex] luatex and harfbuzz 2.5.1
In-Reply-To: <CAG5iGsA=brP5cTXFWJ4nB_0jKoJfw0A0YHhSp9NDZY=914X7WA@mail.gmail.com>
References: <CAG5iGsA=brP5cTXFWJ4nB_0jKoJfw0A0YHhSp9NDZY=914X7WA@mail.gmail.com>
Message-ID: <84BCF0ED-ECEC-4C93-B442-F8E2E261042F@gundla.ch>

Hi Luigi,

this sounds really great!

Is there some documentation available how to access harfbuzz from Lua (jit) / FFI?

Patrick



From luigi.scarso at gmail.com  Tue Jun 18 22:45:18 2019
From: luigi.scarso at gmail.com (luigi scarso)
Date: Tue, 18 Jun 2019 22:45:18 +0200
Subject: [Dev-luatex] [luatex]  luatex and harfbuzz 2.5.1
In-Reply-To: <84BCF0ED-ECEC-4C93-B442-F8E2E261042F@gundla.ch>
References: <CAG5iGsA=brP5cTXFWJ4nB_0jKoJfw0A0YHhSp9NDZY=914X7WA@mail.gmail.com>
 <84BCF0ED-ECEC-4C93-B442-F8E2E261042F@gundla.ch>
Message-ID: <CAG5iGsCJeY_QX_x7aw5sQytiTHedUqoDBAVYsTnj9U0BHz_n+A@mail.gmail.com>

On Tue, Jun 18, 2019 at 9:23 PM Patrick Gundlach <patrick at gundla.ch> wrote:

> Hi Luigi,
>
> this sounds really great!
>
> Is there some documentation available how to access harfbuzz from Lua
> (jit) / FFI?
>
> Patrick
>
>
Well, look at
luatexdir/luaharfbuzz
I have also used
https://github.com/khaledhosny/harf
to check
%% test2-latex.tex
\documentclass{article}
\usepackage{fontspec}
\newfontfamily\deva[Script=Devanagari]{NotoSansDevanagari-Regular.ttf}
\newfontfamily\beng[Script=Bengali]{NotoSansBengali-Regular.ttf}
\newfontfamily\guru[Script=Gurmukhi]{NotoSansGurmukhi-Regular.ttf}
\newfontfamily\gujr[Script=Gujarati]{NotoSansGujarati-Regular.ttf}
\newfontfamily\orya[Script=Oriya]{NotoSansOriya-Regular.ttf}
\newfontfamily\taml[Script=Tamil]{NotoSansTamil-Regular.ttf}
\newfontfamily\telu[Script=Telugu]{NotoSansTelugu-Regular.ttf}
\newfontfamily\knda[Script=Kannada]{NotoSansKannada-Regular.ttf}
\newfontfamily\mlym[Script=Malayalam]{NotoSansMalayalam-Regular.ttf}
\newfontfamily\sinh[Script=Sinhala]{NotoSansSinhala-Regular.ttf}

\begin{document}
{\deva à¤à¥à¤°à¤°à¥à¤à¤¿} % krarki
{\beng à¦à§à¦°à¦°à§à¦à¦¿} % krarki
{\guru à¨à©à¨°à¨°à©à¨à¨¿} % krarki
{\gujr àªà«àª°àª°à«àªàª¿} % krarki
{\orya à¬à­à¬°à¬°à­à¬à¬¿} % krarki
{\taml à®à¯} % ko
{\telu à°à±à°°à°°à±à°à°¿} % krarki
{\knda à²à³à²°à²°à³à²à²¿} % krarki
{\mlym à´àµà´°à´°àµà´à´¿} % krarki
{\sinh à¶à·} % ke
\end{document}

from
https://tex.stackexchange.com/questions/454031/examples-for-broken-rendering-of-scripts-in-lualatex

I have renamed luatex 1.11.0 luatex-hb, build the lualatex format
 luatex-hb --ini '\input lualatex\dump
and run
 luatex-hb -fmt=lualatex.fmt  test2-latex.tex
(assuming texlive 2019,  all files & format in the same folder and of
course that you are able to compile from svn)

Seems to work. Well, it did it last time, not time to check it now,  busy
in other stuffs....

A few words on this task.
I have done it very  hurriedly (from commits luatex/branches/luatex-hb  one
can see  30 May 2019  15 Jun 2019 )
Even if  7 years ago I have done a lua binding to hb by swig and already  I
known the  work done by
https://github.com/tatzetwerk/luatex-harfbuzz
 harftex, put simply,  was more easy to manage in 2 days.
The idea was  to check if was possible to keep the binary small and use
the  hb module on demand.
I dont know if it will possible to meet the constrains,
but with ffi  there is always an alternative (well there is if luaffi works
on every platforms, which is currently one of my big todo.. )

Harftex is a different project from luatex:
even if currently they  share several files,
harftex is free to modify the core of luatex to adapt it to harftex,
possibly reaching the size of xetex (~24M).
So, different projects, at the moment they share some code & some (not all)
patches:
luatex with hb is not a replacement of harftex (at least because at this
moment I dont know if hb will stay  in luatex).


-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20190618/444fc20d/attachment.html>

From luigi.scarso at gmail.com  Tue Jun 18 23:21:17 2019
From: luigi.scarso at gmail.com (luigi scarso)
Date: Tue, 18 Jun 2019 23:21:17 +0200
Subject: [Dev-luatex] [luatex] luatex and harfbuzz 2.5.1
In-Reply-To: <zw4k1aunu5d9.dlg@nililand.de>
References: <CAG5iGsA=brP5cTXFWJ4nB_0jKoJfw0A0YHhSp9NDZY=914X7WA@mail.gmail.com>
 <84BCF0ED-ECEC-4C93-B442-F8E2E261042F@gundla.ch>
 <CAG5iGsCJeY_QX_x7aw5sQytiTHedUqoDBAVYsTnj9U0BHz_n+A@mail.gmail.com>
 <zw4k1aunu5d9.dlg@nililand.de>
Message-ID: <CAG5iGsBHsR-nd89KY==ter5nAXyUaPdF5XaAT4ziNtDzGOO_2A@mail.gmail.com>

On Tue, Jun 18, 2019 at 11:17 PM Ulrike Fischer <luatex at nililand.de> wrote:

> Am Tue, 18 Jun 2019 22:45:18 +0200 schrieb luigi scarso:
>
> >> Is there some documentation available how to access harfbuzz from Lua
> >> (jit) / FFI?
> >>
> >> Patrick
> >>
> >>
> > Well, look at
> > luatexdir/luaharfbuzz
> > I have also used
> > https://github.com/khaledhosny/harf
> > to check
> > %% test2-latex.tex
> > \documentclass{article}
> > \usepackage{fontspec}
> > \newfontfamily\deva[Script=Devanagari]{NotoSansDevanagari-Regular.ttf}
>
> After I understood that the format is currently only found if it is
> in the current folder I could test it.
>

sure


> Like with harftex you have to use harfload and activate the harf
> mode to get the right output.
>
>
ok, so you want all ....

\pdfvariable suppressoptionalinfo \numexpr1+32+64+128+512\relax
\pdfvariable compresslevel 0
\pdfvariable objcompresslevel 0

\documentclass{article}

\usepackage{harfload}
\usepackage{setspace}
\usepackage{fontspec}
\usepackage{graphicx}

\defaultfontfeatures{RawFeature={mode=harf}}

\newfontfamily\deva[Script=Devanagari]{NotoSansDevanagari-Regular.ttf}
\newfontfamily\beng[Script=Bengali]{NotoSansBengali-Regular.ttf}
\newfontfamily\guru[Script=Gurmukhi]{NotoSansGurmukhi-Regular.ttf}
\newfontfamily\gujr[Script=Gujarati]{NotoSansGujarati-Regular.ttf}
\newfontfamily\orya[Script=Oriya]{NotoSansOriya-Regular.ttf}
\newfontfamily\taml[Script=Tamil]{NotoSansTamil-Regular.ttf}
\newfontfamily\telu[Script=Telugu]{NotoSansTelugu-Regular.ttf}
\newfontfamily\knda[Script=Kannada]{NotoSansKannada-Regular.ttf}
\newfontfamily\mlym[Script=Malayalam]{NotoSansMalayalam-Regular.ttf}
\newfontfamily\Sinh[Script=Sinhala]{NotoSansSinhala-Regular.ttf}


\begin{document}
luatex with Harfbuzz:

{\deva à¤à¥à¤°à¤°à¥à¤à¤¿} % krarki
{\beng à¦à§à¦°à¦°à§à¦à¦¿} % krarki
{\guru à¨à©à¨°à¨°à©à¨à¨¿} % krarki
{\gujr àªà«àª°àª°à«àªàª¿} % krarki
{\orya à¬à­à¬°à¬°à­à¬à¬¿} % krarki
{\taml à®à¯} % ko
{\telu à°à±à°°à°°à±à°à°¿} % krarki
{\knda à²à³à²°à²°à³à²à²¿} % krarki
{\mlym à´àµà´°à´°àµà´à´¿} % krarki
{\Sinh à¶à·} % ke

\vskip 1em

XeLaTeX:

\hbox{\hskip5pt\includegraphics[width=8.5cm]{b0miX.png}}

\end{document}

copy the image from
https://i.stack.imgur.com/b0miX.png

(note \Sinh  vs \sinh)


-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20190618/fda7bde8/attachment-0001.html>

From preining at logic.at  Wed Jun 19 01:38:59 2019
From: preining at logic.at (Norbert Preining)
Date: Wed, 19 Jun 2019 08:38:59 +0900
Subject: [Dev-luatex] [luatex] luatex and harfbuzz 2.5.1
In-Reply-To: <CAG5iGsA=brP5cTXFWJ4nB_0jKoJfw0A0YHhSp9NDZY=914X7WA@mail.gmail.com>
References: <CAG5iGsA=brP5cTXFWJ4nB_0jKoJfw0A0YHhSp9NDZY=914X7WA@mail.gmail.com>
Message-ID: <20190618233859.lj2dsu6miwh2afdm@bulldog.preining.info>

Hi Luigi,

On Tue, 18 Jun 2019, luigi scarso wrote:
> luatex 1.11.0 with harfbuzz 2.5.1

Good to hear.

> It follows from the development of harftex by K. Hosny.

What is the relation to harftex? Why did you originally reject Khaleds
proposal and now put it into experimental?

We have harftex now in tlcontrib, and it would be nice if you could
clear up all this back and forth, thanks.

Best

Norbert

--
PREINING Norbert                               http://www.preining.info
Accelia Inc. + IFMGA ProGuide + TU Wien + JAIST + TeX Live + Debian Dev
GPG: 0x860CDC13   fp: F7D8 A928 26E3 16A1 9FA0 ACF0 6CAC A448 860C DC13

From luigi.scarso at gmail.com  Wed Jun 19 03:35:09 2019
From: luigi.scarso at gmail.com (luigi scarso)
Date: Wed, 19 Jun 2019 03:35:09 +0200
Subject: [Dev-luatex] [luatex] luatex and harfbuzz 2.5.1
In-Reply-To: <20190618233859.lj2dsu6miwh2afdm@bulldog.preining.info>
References: <CAG5iGsA=brP5cTXFWJ4nB_0jKoJfw0A0YHhSp9NDZY=914X7WA@mail.gmail.com>
 <20190618233859.lj2dsu6miwh2afdm@bulldog.preining.info>
Message-ID: <CAG5iGsDYpDtEFeOuMSo2VeJo0KmGGLpqJjQCN7bkRc5-xgQh3g@mail.gmail.com>

On Wed, Jun 19, 2019 at 1:39 AM Norbert Preining <preining at logic.at> wrote:

> Hi Luigi,
>
> On Tue, 18 Jun 2019, luigi scarso wrote:
>
> > It follows from the development of harftex by K. Hosny.
>
> What is the relation to harftex?
>
>
The original proposal was done on Sat, Feb 9, 9:02 PM and
1)   luatex was  practically frozen ;
2)  the  size of the exe jumped from 8M to 24M
3)  introduced the C++ dependency
4)  was not clear the interactions  with the core of luatex

Having a couple of days , I have tried the integration and
1)  with harfbuzz  the size of luatex is still around 8M
2) the C++ dependency is accepted
3)  there is no modification to the core luatex

It seems to work (but see prev. emails).


> We have harftex now in tlcontrib,


I don't know of /manage anything in tlcontrib,  but  having  harftex in
texlive is not a problem for me
 (again see prev emails).


-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20190619/18e1d199/attachment.html>

From tex at 2krueger.de  Thu Jun 27 13:52:21 2019
From: tex at 2krueger.de (Marcel Fabian =?utf-8?Q?Kr=C3=BCger?=)
Date: Thu, 27 Jun 2019 13:52:21 +0200
Subject: [Dev-luatex] linebreak_filter
Message-ID: <20190627115221.b5hjj6xuynrdn6go@yoga>

Hi everyone,

in current LuaTeX versions, the result of `linebreak` filter is ignored
and instead it is always treated as if no node has been returned (so the
internal linebreak algorithm is applied). A minimal example:


\directlua{
callback.register("linebreak_filter", function(nodes)
  return node.hpack(nodes)
end)
}
Some very very very very very very very very very very very very very
very very very very very very very very very very very very very very
very very very very very very very very very very very very very very
very very very very very very very very very very very very very very
very very very very very very very very very very very very very very
very very very long paragraph.
\bye

You would expect the whole paragraph to be set in a single line, but
normal paragraph breaking is applies instead. This is caused by a change
in revision 6686 from Mar 29 2018 "experimental) possible fix for for lua
stack issue + consistent error handling (HH)". There in the function
lua_linebreak_callback, the change

         return ret;
     }
+    lua_settop(Luas, s_top);
     p = lua_touserdata(Luas, -1);
     if (p != NULL) {
         a = nodelist_from_lua(Luas);
         try_couple_nodes(*new_head,a);
         ret = 1;
     }
-    lua_settop(Luas, s_top);
     return ret;

has been applied. I am not sure what kind of stack issue this was
supposed to fix, but as a side effect this moves the check for the node
return value after `lua_settop`, so the return value is already removed
from the stack when the test is done. So it is ignored.

Best regards,
Marcel KrÃ¼ger

From luigi.scarso at gmail.com  Thu Jun 27 14:51:27 2019
From: luigi.scarso at gmail.com (luigi scarso)
Date: Thu, 27 Jun 2019 14:51:27 +0200
Subject: [Dev-luatex] linebreak_filter
In-Reply-To: <20190627115221.b5hjj6xuynrdn6go@yoga>
References: <20190627115221.b5hjj6xuynrdn6go@yoga>
Message-ID: <CAG5iGsAHs-Z2CdMZHv=TF8_=eOAz+O5-0=AhFwzhGYrrkdM7+g@mail.gmail.com>

On Thu, Jun 27, 2019 at 2:01 PM Marcel Fabian KrÃ¼ger <tex at 2krueger.de>
wrote:

> Hi everyone,
>
> in current LuaTeX versions, the result of `linebreak` filter is ignored
> and instead it is always treated as if no node has been returned (so the
> internal linebreak algorithm is applied). A minimal example:
>
>
> \directlua{
> callback.register("linebreak_filter", function(nodes)
>   return node.hpack(nodes)
> end)
> }
> Some very very very very very very very very very very very very very
> very very very very very very very very very very very very very very
> very very very very very very very very very very very very very very
> very very very very very very very very very very very very very very
> very very very very very very very very very very very very very very
> very very very long paragraph.
> \bye
>
> You would expect the whole paragraph to be set in a single line, but
> normal paragraph breaking is applies instead. This is caused by a change
> in revision 6686 from Mar 29 2018 "experimental) possible fix for for lua
> stack issue + consistent error handling (HH)". There in the function
> lua_linebreak_callback, the change
>
>          return ret;
>      }
> +    lua_settop(Luas, s_top);
>      p = lua_touserdata(Luas, -1);
>      if (p != NULL) {
>          a = nodelist_from_lua(Luas);
>          try_couple_nodes(*new_head,a);
>          ret = 1;
>      }
> -    lua_settop(Luas, s_top);
>      return ret;
>
> has been applied. I am not sure what kind of stack issue this was
> supposed to fix, but as a side effect this moves the check for the node
> return value after `lua_settop`, so the return value is already removed
> from the stack when the test is done. So it is ignored.
>


ok, thank you for the report.

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20190627/a161c094/attachment.html>

From news3 at nililand.de  Thu Jun 27 15:56:36 2019
From: news3 at nililand.de (Ulrike Fischer)
Date: Thu, 27 Jun 2019 15:56:36 +0200
Subject: [Dev-luatex] assertion error with experimental lualatex 1.11
Message-ID: <1cb20gy53trso$.dlg@nililand.de>


\documentclass{article}
\usepackage{luatexja}

\begin{document}
abc
\end{document} 

breaks down with luatex 1.11 with an assertion error :
https://i.stack.imgur.com/c8Rcj.png

I'm using the version from 23.6. from w32tex.org. 
Development id: 7167


-- 
Ulrike Fischer 
https://www.troubleshooting-tex.de/


From luigi.scarso at gmail.com  Thu Jun 27 16:21:41 2019
From: luigi.scarso at gmail.com (luigi scarso)
Date: Thu, 27 Jun 2019 16:21:41 +0200
Subject: [Dev-luatex] assertion error with experimental lualatex 1.11
In-Reply-To: <1cb20gy53trso$.dlg@nililand.de>
References: <1cb20gy53trso$.dlg@nililand.de>
Message-ID: <CAG5iGsDcumqSwySN3yT0uC0JiH4-T711=Q2VVUG2=HZQk2UXWg@mail.gmail.com>

On Thu, Jun 27, 2019 at 4:16 PM Ulrike Fischer <news3 at nililand.de> wrote:

>
> \documentclass{article}
> \usepackage{luatexja}
>
> \begin{document}
> abc
> \end{document}
>
> breaks down with luatex 1.11 with an assertion error :
> https://i.stack.imgur.com/c8Rcj.png
>
> I'm using the version from 23.6. from w32tex.org.
> Development id: 7167
>
>
ok.

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20190627/8c57b8df/attachment.html>

From luigi.scarso at gmail.com  Thu Jun 27 16:36:02 2019
From: luigi.scarso at gmail.com (luigi scarso)
Date: Thu, 27 Jun 2019 16:36:02 +0200
Subject: [Dev-luatex] assertion error with experimental lualatex 1.11
In-Reply-To: <1cb20gy53trso$.dlg@nililand.de>
References: <1cb20gy53trso$.dlg@nililand.de>
Message-ID: <CAG5iGsCWZevo-P-V7D6CPvax+SiyKF2v3LDX_WcqYyHHdUGoCw@mail.gmail.com>

On Thu, Jun 27, 2019 at 4:16 PM Ulrike Fischer <news3 at nililand.de> wrote:

>
> \documentclass{article}
> \usepackage{luatexja}
>
> \begin{document}
> abc
> \end{document}
>
> breaks down with luatex 1.11 with an assertion error :
> https://i.stack.imgur.com/c8Rcj.png
>
>
confirmed under linux <https://mailman.ntg.nl/mailman/listinfo/dev-luatex>
lualatex: ../../../source/texk/web2c/luatexdir/tex/texmath.c:2623:
after_math: Assertion `varmem[(0+5+5+5+5+5+5+2+2+2)].hh.v.RH!=null' failed.


-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20190627/6d02ea6a/attachment.html>

From news3 at nililand.de  Sat Jun 29 23:30:29 2019
From: news3 at nililand.de (Ulrike Fischer)
Date: Sat, 29 Jun 2019 23:30:29 +0200
Subject: [Dev-luatex] assertion error with experimental lualatex 1.11
References: <1cb20gy53trso$.dlg@nililand.de>
 <CAG5iGsCWZevo-P-V7D6CPvax+SiyKF2v3LDX_WcqYyHHdUGoCw@mail.gmail.com>
Message-ID: <1ftwx6a3thhx5$.dlg@nililand.de>

Am Thu, 27 Jun 2019 16:36:02 +0200 schrieb luigi scarso:

> On Thu, Jun 27, 2019 at 4:16 PM Ulrike Fischer <news3 at nililand.de> wrote:
> 
>>
>> \documentclass{article}
>> \usepackage{luatexja}
>>
>> \begin{document}
>> abc
>> \end{document}
>>
>> breaks down with luatex 1.11 with an assertion error :
>> https://i.stack.imgur.com/c8Rcj.png
>>
>>
> confirmed under linux <https://mailman.ntg.nl/mailman/listinfo/dev-luatex>
> lualatex: ../../../source/texk/web2c/luatexdir/tex/texmath.c:2623:
> after_math: Assertion `varmem[(0+5+5+5+5+5+5+2+2+2)].hh.v.RH!=null' failed.

After a big debugging I reduced the error to this plain tex example:

$\directlua{}$
\bye

The assertion error appears as soon as one use \directlua inside
math. 


-- 
Ulrike Fischer 
https://www.troubleshooting-tex.de/


From luigi.scarso at gmail.com  Sat Jun 29 23:56:13 2019
From: luigi.scarso at gmail.com (luigi scarso)
Date: Sat, 29 Jun 2019 23:56:13 +0200
Subject: [Dev-luatex] assertion error with experimental lualatex 1.11
In-Reply-To: <1ftwx6a3thhx5$.dlg@nililand.de>
References: <1cb20gy53trso$.dlg@nililand.de>
 <CAG5iGsCWZevo-P-V7D6CPvax+SiyKF2v3LDX_WcqYyHHdUGoCw@mail.gmail.com>
 <1ftwx6a3thhx5$.dlg@nililand.de>
Message-ID: <CAG5iGsCWbEb8k19PEbsmOY=68p5cFgQEsZMoNau6tcLR2TtBUg@mail.gmail.com>

On Sat, Jun 29, 2019 at 11:30 PM Ulrike Fischer <news3 at nililand.de> wrote:

> Am Thu, 27 Jun 2019 16:36:02 +0200 schrieb luigi scarso:
>
> > On Thu, Jun 27, 2019 at 4:16 PM Ulrike Fischer <news3 at nililand.de>
> wrote:
> >
> >>
> >> \documentclass{article}
> >> \usepackage{luatexja}
> >>
> >> \begin{document}
> >> abc
> >> \end{document}
> >>
> >> breaks down with luatex 1.11 with an assertion error :
> >> https://i.stack.imgur.com/c8Rcj.png
> >>
> >>
> > confirmed under linux <
> https://mailman.ntg.nl/mailman/listinfo/dev-luatex>
> > lualatex: ../../../source/texk/web2c/luatexdir/tex/texmath.c:2623:
> > after_math: Assertion `varmem[(0+5+5+5+5+5+5+2+2+2)].hh.v.RH!=null'
> failed.
>
> After a big debugging I reduced the error to this plain tex example:
>
> $\directlua{}$
> \bye
>
> The assertion error appears as soon as one use \directlua inside
> math.
>
>
>
ok, thank you.


-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20190629/8b1b9555/attachment.html>

From news3 at nililand.de  Sun Jun 30 00:34:24 2019
From: news3 at nililand.de (Ulrike Fischer)
Date: Sun, 30 Jun 2019 00:34:24 +0200
Subject: [Dev-luatex] luatex 1.11: bfchar entry empty in mode=harf
Message-ID: <zm6r2yf3pytg.dlg@nililand.de>

When I load a font in harf mode the bfchar entry is empty:

\pdfvariable compresslevel0
\pdfvariable objcompresslevel0
\documentclass{article}
\usepackage{harfload} %is actually in my format ...
\begin{document}
\font\test={texgyreheros:mode=harf;}
abcÃ¤Ã¼Ã¶
\end{document}

gives in the pdf

/CMapName /TeX-Identity-GXAFXV-LMRoman10-Regular def
/CMapType 2 def
1 begincodespacerange
<0000> <FFFF>
endcodespacerange
0 beginbfrange
endbfrange
0 beginbfchar
endbfchar


With harftex or an older luatex I get:

1 beginbfchar
<0052> <0031>
endbfchar

What's going on here?

-- 
Ulrike Fischer 
https://www.troubleshooting-tex.de/


From luigi.scarso at gmail.com  Sun Jun 30 11:05:50 2019
From: luigi.scarso at gmail.com (luigi scarso)
Date: Sun, 30 Jun 2019 11:05:50 +0200
Subject: [Dev-luatex] linebreak_filter
In-Reply-To: <20190627115221.b5hjj6xuynrdn6go@yoga>
References: <20190627115221.b5hjj6xuynrdn6go@yoga>
Message-ID: <CAG5iGsA_qGRbxzopG9cmbVWVeQ8GhX=zj1uv4cqDfmqUZSvr0g@mail.gmail.com>

On Thu, Jun 27, 2019 at 2:01 PM Marcel Fabian KrÃ¼ger <tex at 2krueger.de>
wrote:

> Hi everyone,
>
> in current LuaTeX versions, the result of `linebreak` filter is ignored
> and instead it is always treated as if no node has been returned (so the
> internal linebreak algorithm is applied). A minimal example:
>
>
> \directlua{
> callback.register("linebreak_filter", function(nodes)
>   return node.hpack(nodes)
> end)
> }
> Some very very very very very very very very very very very very very
> very very very very very very very very very very very very very very
> very very very very very very very very very very very very very very
> very very very very very very very very very very very very very very
> very very very very very very very very very very very very very very
> very very very long paragraph.
> \bye
>
> You would expect the whole paragraph to be set in a single line, but
> normal paragraph breaking is applies instead. This is caused by a change
> in revision 6686 from Mar 29 2018 "experimental) possible fix for for lua
> stack issue + consistent error handling (HH)". There in the function
> lua_linebreak_callback, the change
>
>          return ret;
>      }
> +    lua_settop(Luas, s_top);
>      p = lua_touserdata(Luas, -1);
>      if (p != NULL) {
>          a = nodelist_from_lua(Luas);
>          try_couple_nodes(*new_head,a);
>          ret = 1;
>      }
> -    lua_settop(Luas, s_top);
>      return ret;
>
> has been applied. I am not sure what kind of stack issue this was
> supposed to fix, but as a side effect this moves the check for the node
> return value after `lua_settop`, so the return value is already removed
> from the stack when the test is done. So it is ignored.
>

hm, I will try reverting the code to see when the stack issue appears.


-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20190630/b47f21ec/attachment.html>

From dr.khaled.hosny at gmail.com  Sun Jun 30 23:09:21 2019
From: dr.khaled.hosny at gmail.com (Khaled Hosny)
Date: Sun, 30 Jun 2019 23:09:21 +0200
Subject: [Dev-luatex] luatex 1.11: bfchar entry empty in mode=harf
In-Reply-To: <zm6r2yf3pytg.dlg@nililand.de>
References: <zm6r2yf3pytg.dlg@nililand.de>
Message-ID: <CAKgnQDT_WZTS96kRMW5Y+udCQiQ0Y8PDfFeOY6CZDeEfXUERcQ@mail.gmail.com>

On Sun, Jun 30, 2019 at 12:34 AM Ulrike Fischer <news3 at nililand.de> wrote:
> With harftex or an older luatex I get:
>
> 1 beginbfchar
> <0052> <0031>
> endbfchar

By older luatex I assume luatex with non-harf mode?

> What's going on here?

The Lua code for harf mode uses a new callback in HarfTeX to set the
glyphs tounicode values, because the existing mechanisms in luatex are
too slow
for the way I do it. I set tounicode based on shaping output, so need
to be done incrementally after loading the font, while luaotfload does
it by analyzing the fonts cmap and GSUB tables and can set them at
once while loading the font.

Regards,
Khaled

From news3 at nililand.de  Sun Jun 30 23:29:34 2019
From: news3 at nililand.de (Ulrike Fischer)
Date: Sun, 30 Jun 2019 23:29:34 +0200
Subject: [Dev-luatex] luatex 1.11: bfchar entry empty in mode=harf
References: <zm6r2yf3pytg.dlg@nililand.de>
 <CAKgnQDT_WZTS96kRMW5Y+udCQiQ0Y8PDfFeOY6CZDeEfXUERcQ@mail.gmail.com>
Message-ID: <13qiq73p749qq.dlg@nililand.de>

Am Sun, 30 Jun 2019 23:09:21 +0200 schrieb Khaled Hosny:

> On Sun, Jun 30, 2019 at 12:34 AM Ulrike Fischer <news3 at nililand.de> wrote:
>> With harftex or an older luatex I get:
>>
>> 1 beginbfchar
>> <0052> <0031>
>> endbfchar
> 
> By older luatex I assume luatex with non-harf mode?
> 
>> What's going on here?
> 
> The Lua code for harf mode uses a new callback in HarfTeX to set the
> glyphs tounicode values, because the existing mechanisms in luatex are
> too slow
> for the way I do it. I set tounicode based on shaping output, so need
> to be done incrementally after loading the font, while luaotfload does
> it by analyzing the fonts cmap and GSUB tables and can set them at
> once while loading the font.

hm. The interesting thing is that it works with luatex 1.11 if I
load harf-luaotfload in the document, it only fails if I load it in
\everyjob through a setting in a local lualatex.ini I used to build
the format. Why is this? 



-- 
Ulrike Fischer 
https://www.troubleshooting-tex.de/


From dr.khaled.hosny at gmail.com  Sun Jun 30 23:51:49 2019
From: dr.khaled.hosny at gmail.com (Khaled Hosny)
Date: Sun, 30 Jun 2019 23:51:49 +0200
Subject: [Dev-luatex] luatex 1.11: bfchar entry empty in mode=harf
In-Reply-To: <13qiq73p749qq.dlg@nililand.de>
References: <zm6r2yf3pytg.dlg@nililand.de>
 <CAKgnQDT_WZTS96kRMW5Y+udCQiQ0Y8PDfFeOY6CZDeEfXUERcQ@mail.gmail.com>
 <13qiq73p749qq.dlg@nililand.de>
Message-ID: <CAKgnQDRR+OBCLdDpWuqs9QvMoxkqmwk7YfOrDyYKiPNgvzpzig@mail.gmail.com>

On Sun, Jun 30, 2019 at 11:29 PM Ulrike Fischer <news3 at nililand.de> wrote:
>
> Am Sun, 30 Jun 2019 23:09:21 +0200 schrieb Khaled Hosny:
>
> > On Sun, Jun 30, 2019 at 12:34 AM Ulrike Fischer <news3 at nililand.de> wrote:
> >> With harftex or an older luatex I get:
> >>
> >> 1 beginbfchar
> >> <0052> <0031>
> >> endbfchar
> >
> > By older luatex I assume luatex with non-harf mode?
> >
> >> What's going on here?
> >
> > The Lua code for harf mode uses a new callback in HarfTeX to set the
> > glyphs tounicode values, because the existing mechanisms in luatex are
> > too slow
> > for the way I do it. I set tounicode based on shaping output, so need
> > to be done incrementally after loading the font, while luaotfload does
> > it by analyzing the fonts cmap and GSUB tables and can set them at
> > once while loading the font.
>
> hm. The interesting thing is that it works with luatex 1.11 if I
> load harf-luaotfload in the document, it only fails if I load it in
> \everyjob through a setting in a local lualatex.ini I used to build
> the format. Why is this?

If you are seeing non-empty tounicodes then most likely the font is
not processed in harf mode, the only way I set them is through a
callback that is missing from luatex.

Regards,
Khaled

