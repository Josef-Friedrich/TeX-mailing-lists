From arthur.reutenauer at normalesup.org  Fri Mar  1 14:14:36 2019
From: arthur.reutenauer at normalesup.org (Arthur Reutenauer)
Date: Fri, 1 Mar 2019 14:14:36 +0100
Subject: [Dev-luatex] lualatex (incorrectly) replaces em dashes with
 hyphens
In-Reply-To: <a55a6826-8897-fe1d-899a-99a69981a19d@latex-project.org>
References: <20190221215702.GA14726@kline-galago>
 <1453600214.20190223211951@nililand.de>
 <20190227045605.GA2049@kline-desktop>
 <20190228104537.GB1963@macbook.localdomain>
 <a55a6826-8897-fe1d-899a-99a69981a19d@latex-project.org>
Message-ID: <20190301131436.ivwv4dbkf2dxgk6i@phare.normalesup.org>

On Thu, Feb 28, 2019 at 11:57:01AM +0100, Frank Mittelbach wrote:
> true, but it is also correct that in the last 3 decades essentially any font
> usable with TeX (well LaTeX) had the ligatures, so the statement in the TeX
> book that --- is the way to get an emdash was/is true with virtually all
> fonts in use in pdftex. So it is not just a quirk of CM fonts, it is largely
> a feature of the ecosystem (or was in the days of Type 1 fonts) and as such
> it is a pity imho if it becomes a breaking change when processing a document
> with a unicode engine.

  But the engines didnât change at all in that respect: the actual
change that XeTeX and LuaTeX brought is that all of a sudden it became
possible to use many more fonts than before, most of which didnât have
the ligatures that TeX users had come to expect.

	Arthur

From arthur.reutenauer at normalesup.org  Fri Mar  1 14:15:30 2019
From: arthur.reutenauer at normalesup.org (Arthur Reutenauer)
Date: Fri, 1 Mar 2019 14:15:30 +0100
Subject: [Dev-luatex] lualatex (incorrectly) replaces em dashes with
 hyphens
In-Reply-To: <20190228214648.GA17784@kline-desktop>
References: <20190221215702.GA14726@kline-galago>
 <1453600214.20190223211951@nililand.de>
 <20190227045605.GA2049@kline-desktop>
 <20190228104537.GB1963@macbook.localdomain>
 <1278660816.20190228133139@nililand.de>
 <20190228214648.GA17784@kline-desktop>
Message-ID: <20190301131530.jjumht3tbocv6ugt@phare.normalesup.org>

On Thu, Feb 28, 2019 at 01:46:48PM -0800, Matt Kline wrote:
> 1. It seems reasonable to expect Unicode-aware engines (luatex and xetex)
>    to make this substitution, especially with the Ligatures=TeX option given
>    to fontspec. (Isn't this the entire point of that option?)

  The point is for users to have the option, not necessarily that it
should be on by default.

	Arthur

From news3 at nililand.de  Fri Mar  1 15:59:54 2019
From: news3 at nililand.de (Ulrike Fischer)
Date: Fri, 1 Mar 2019 15:59:54 +0100
Subject: [Dev-luatex] lualatex (incorrectly) replaces em dashes with
 hyphens
References: <20190221215702.GA14726@kline-galago>
 <1453600214.20190223211951@nililand.de> <20190227045605.GA2049@kline-desktop>
 <20190228104537.GB1963@macbook.localdomain>
 <1278660816.20190228133139@nililand.de>
 <20190228214648.GA17784@kline-desktop>
 <20190301131530.jjumht3tbocv6ugt@phare.normalesup.org>
Message-ID: <1r7a6ecve76py.dlg@nililand.de>

Am Fri, 1 Mar 2019 14:15:30 +0100 schrieb Arthur Reutenauer:

>> 1. It seems reasonable to expect Unicode-aware engines (luatex and xetex)
>>    to make this substitution, especially with the Ligatures=TeX option given
>>    to fontspec. (Isn't this the entire point of that option?)
> 
>   The point is for users to have the option, not necessarily that it
> should be on by default.

There are millions of tex-documents, bib-files and other tex related
files around all using -- and --- to get an endash and an emdash.
Why should we setup defaults that breaks this input as soon as
people try to convert a document to use xelatex or lualatex? Which
user would say that it is an improvement that an input which
previously gave an endash now prints --?  Do you want to answer all
the questions on tex.sx about how to activate the tlig again?


 
-- 
Ulrike Fischer 
https://www.troubleshooting-tex.de/


From arthur.reutenauer at normalesup.org  Fri Mar  1 17:19:50 2019
From: arthur.reutenauer at normalesup.org (Arthur Reutenauer)
Date: Fri, 1 Mar 2019 17:19:50 +0100
Subject: [Dev-luatex] lualatex (incorrectly) replaces em dashes with
 hyphens
In-Reply-To: <1r7a6ecve76py.dlg@nililand.de>
References: <20190221215702.GA14726@kline-galago>
 <1453600214.20190223211951@nililand.de>
 <20190227045605.GA2049@kline-desktop>
 <20190228104537.GB1963@macbook.localdomain>
 <1278660816.20190228133139@nililand.de>
 <20190228214648.GA17784@kline-desktop>
 <20190301131530.jjumht3tbocv6ugt@phare.normalesup.org>
 <1r7a6ecve76py.dlg@nililand.de>
Message-ID: <20190301161950.gd4mbwwnndgb4chk@phare.normalesup.org>

	Ulrike,

On Fri, Mar 01, 2019 at 03:59:54PM +0100, Ulrike Fischer wrote:
> Why should we setup defaults that breaks this input as soon as
> people try to convert a document to use xelatex or lualatex?

  You write âweâ, as if this had been a conscious decision by a group of
people.  But you must know, as well as I do, that no such thing ever
happened.  At the very best one single person made some half-hearted
decision at some point, when developing the engine, the format, or the
package.

>                                                              Which
> user would say that it is an improvement that an input which
> previously gave an endash now prints --?

  If you think you can speak on behalf of users, please go ahead.  Iâm
the vice president of the TeX Users Group and wouldnât ever presume to
wager what users would say.  Most of what we do is based on blind
guesses.

>                                           Do you want to answer all
> the questions on tex.sx about how to activate the tlig again?

  No.  By the way I canât, because I donât answer these questions in the
first place :-)

	Best,

		Arthur

From news3 at nililand.de  Fri Mar  1 19:00:47 2019
From: news3 at nililand.de (Ulrike Fischer)
Date: Fri, 1 Mar 2019 19:00:47 +0100
Subject: [Dev-luatex] lualatex (incorrectly) replaces em dashes with
 hyphens
References: <20190221215702.GA14726@kline-galago>
 <1453600214.20190223211951@nililand.de> <20190227045605.GA2049@kline-desktop>
 <20190228104537.GB1963@macbook.localdomain>
 <1278660816.20190228133139@nililand.de>
 <20190228214648.GA17784@kline-desktop>
 <20190301131530.jjumht3tbocv6ugt@phare.normalesup.org>
 <1r7a6ecve76py.dlg@nililand.de>
 <20190301161950.gd4mbwwnndgb4chk@phare.normalesup.org>
Message-ID: <28d82u68mmug.dlg@nililand.de>

Am Fri, 1 Mar 2019 17:19:50 +0100 schrieb Arthur Reutenauer:

>> Why should we setup defaults that breaks this input as soon as
>> people try to convert a document to use xelatex or lualatex?
> 
> You write âweâ, as if this had been a conscious decision by a group of
> people.  

Sure it was. 

Code like \def\UnicodeFontTeXLigatures{+tlig;}
doesn't get added by accident to the latex format. Also 
I was even part of some of the discussion. 

>> Which user would say that it is an improvement that an input
>> which previously gave an endash now prints --?

 
> If you think you can speak on behalf of users, please go ahead.  Iâm
> the vice president of the TeX Users Group and wouldnât ever presume to
> wager what users would say. Most of what we do is based on blind
> guesses.

Well I have to wager what users would say. As member of the latex
team and as maintainer of luaotfload I have to decide things. We
can't leave the question which defaults should go in the format in
some sort of SchrÃ¶dingers cat state. But I'm quite confident that my
decisions are better than blind guesses. I have really a lot
experience with users and documents of all kind. 


-- 
Ulrike Fischer 
https://www.troubleshooting-tex.de/


From arthur.reutenauer at normalesup.org  Fri Mar  1 19:15:50 2019
From: arthur.reutenauer at normalesup.org (Arthur Reutenauer)
Date: Fri, 1 Mar 2019 19:15:50 +0100
Subject: [Dev-luatex] lualatex (incorrectly) replaces em dashes with
 hyphens
In-Reply-To: <28d82u68mmug.dlg@nililand.de>
References: <20190221215702.GA14726@kline-galago>
 <1453600214.20190223211951@nililand.de>
 <20190227045605.GA2049@kline-desktop>
 <20190228104537.GB1963@macbook.localdomain>
 <1278660816.20190228133139@nililand.de>
 <20190228214648.GA17784@kline-desktop>
 <20190301131530.jjumht3tbocv6ugt@phare.normalesup.org>
 <1r7a6ecve76py.dlg@nililand.de>
 <20190301161950.gd4mbwwnndgb4chk@phare.normalesup.org>
 <28d82u68mmug.dlg@nililand.de>
Message-ID: <20190301181550.gyn4iz2nydwx7xyl@phare.normalesup.org>

On Fri, Mar 01, 2019 at 07:00:47PM +0100, Ulrike Fischer wrote:
> Code like \def\UnicodeFontTeXLigatures{+tlig;}
> doesn't get added by accident to the latex format. Also 
> I was even part of some of the discussion. 

  Then what are you complaining about?  The format is behaving exactly
as you expect it to be.  You have the power to change it, and youâre
confident that you made the right decision on behalf of users.

	Arthur

From news3 at nililand.de  Sat Mar  2 13:18:43 2019
From: news3 at nililand.de (Ulrike Fischer)
Date: Sat, 2 Mar 2019 13:18:43 +0100
Subject: [Dev-luatex] objcompresslevel doesn't work correctly with pdf 2.0
Message-ID: <nx91kj3ua9lc$.dlg@nililand.de>

When setting the pdf version so 2.0 (by using the not really
documented variable majorversion) I get a warning that
objcompresslevel needs a minorversion >4:

\pdfvariable majorversion 2
\pdfvariable minorversion 0
\pdfvariable objcompresslevel=1

blb

\bye

This is LuaTeX, Version 1.10.0 (TeX Live 2019/W32TeX)
(format=luatex 2019.3.1)  2 MAR 2019 13:13
 restricted system commands enabled.
**test-utf8.tex
(./test-utf8.tex
warning  (pdf backend): objcompresslevel > 0 requires minorversion >
4


-- 
Ulrike Fischer 
https://www.troubleshooting-tex.de/


From lstonys at vtex.lt  Thu Mar  7 10:53:07 2019
From: lstonys at vtex.lt (Linas Stonys)
Date: Thu, 7 Mar 2019 11:53:07 +0200
Subject: [Dev-luatex] win32 luatex synctex broken
Message-ID: <5480d546-a02c-9846-7f57-1a013fbd19ef@vtex.lt>

Hi,
dvilualatex (from version 1.7 up till 1.10) synctex in win32 is not 
working properly. In linux works fine. And I tried dvilualatex 1.10 from 
win64 (ctan) works normally too.

There is a lot of 0 coordinates in synctex file. Example from 
natnotes.tex file:

dvilualatex 1.10 (win32):
x1,183:15690374,0
x1,183:16564182,0

dvilualatex 1.10 (win64):
x1,183:15690374,4810340
x1,183:16564182,4810340

Could it be fixed?
Or maybe there is a luatex 1.7 (win32 or win64) somewhere with working 
synctex?

Thanks in advance
Linas

From luigi.scarso at gmail.com  Thu Mar  7 11:21:01 2019
From: luigi.scarso at gmail.com (luigi scarso)
Date: Thu, 7 Mar 2019 11:21:01 +0100
Subject: [Dev-luatex] win32 luatex synctex broken
In-Reply-To: <5480d546-a02c-9846-7f57-1a013fbd19ef@vtex.lt>
References: <5480d546-a02c-9846-7f57-1a013fbd19ef@vtex.lt>
Message-ID: <CAG5iGsAXe6_nb0AK4978UxGH2guyfGX8=hduk7r3t_1ozc586Q@mail.gmail.com>

On Thu, Mar 7, 2019 at 10:53 AM Linas Stonys <lstonys at vtex.lt> wrote:

> Hi,
> dvilualatex (from version 1.7 up till 1.10) synctex in win32 is not
> working properly. In linux works fine. And I tried dvilualatex 1.10 from
> win64 (ctan) works normally too.
>
> There is a lot of 0 coordinates in synctex file. Example from
> natnotes.tex file:
>

which  natnotes.tex ?
In texlive I see
Master/texmf-dist/doc/latex/natbib/natnotes.tex
Master/texmf-dist/doc/latex/aastex/natnotes.tex



-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20190307/524a8b8d/attachment.html>

From lstonys at vtex.lt  Thu Mar  7 11:27:08 2019
From: lstonys at vtex.lt (Linas Stonys)
Date: Thu, 7 Mar 2019 12:27:08 +0200
Subject: [Dev-luatex] win32 luatex synctex broken
In-Reply-To: <CAG5iGsAXe6_nb0AK4978UxGH2guyfGX8=hduk7r3t_1ozc586Q@mail.gmail.com>
References: <5480d546-a02c-9846-7f57-1a013fbd19ef@vtex.lt>
 <CAG5iGsAXe6_nb0AK4978UxGH2guyfGX8=hduk7r3t_1ozc586Q@mail.gmail.com>
Message-ID: <5f540c40-59d2-8fcf-d130-8a62e0559751@vtex.lt>

The one from natbib
Master/texmf-dist/doc/latex/natbib/natnotes.tex

But I've tested with many files and the result was the same.



> whichÂ  natnotes.tex ?
> In texlive I see
> Master/texmf-dist/doc/latex/natbib/natnotes.tex
> Master/texmf-dist/doc/latex/aastex/natnotes.tex
> 

From luigi.scarso at gmail.com  Thu Mar  7 11:32:21 2019
From: luigi.scarso at gmail.com (luigi scarso)
Date: Thu, 7 Mar 2019 11:32:21 +0100
Subject: [Dev-luatex] win32 luatex synctex broken
In-Reply-To: <5f540c40-59d2-8fcf-d130-8a62e0559751@vtex.lt>
References: <5480d546-a02c-9846-7f57-1a013fbd19ef@vtex.lt>
 <CAG5iGsAXe6_nb0AK4978UxGH2guyfGX8=hduk7r3t_1ozc586Q@mail.gmail.com>
 <5f540c40-59d2-8fcf-d130-8a62e0559751@vtex.lt>
Message-ID: <CAG5iGsBty=M_eBKkd7p0L37ZEvMOyqcdApDXTa+i+jgWScAcYw@mail.gmail.com>

On Thu, Mar 7, 2019 at 11:27 AM Linas Stonys <lstonys at vtex.lt> wrote:

> The one from natbib
> Master/texmf-dist/doc/latex/natbib/natnotes.tex
>
>
ok, and how do you exactly run the file ?


-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20190307/6d4d181e/attachment.html>

From lstonys at vtex.lt  Thu Mar  7 11:47:04 2019
From: lstonys at vtex.lt (Linas Stonys)
Date: Thu, 7 Mar 2019 12:47:04 +0200
Subject: [Dev-luatex] win32 luatex synctex broken
In-Reply-To: <CAG5iGsBty=M_eBKkd7p0L37ZEvMOyqcdApDXTa+i+jgWScAcYw@mail.gmail.com>
References: <5480d546-a02c-9846-7f57-1a013fbd19ef@vtex.lt>
 <CAG5iGsAXe6_nb0AK4978UxGH2guyfGX8=hduk7r3t_1ozc586Q@mail.gmail.com>
 <5f540c40-59d2-8fcf-d130-8a62e0559751@vtex.lt>
 <CAG5iGsBty=M_eBKkd7p0L37ZEvMOyqcdApDXTa+i+jgWScAcYw@mail.gmail.com>
Message-ID: <a07f2af3-7ffc-bd40-6a5f-5583d0ea305a@vtex.lt>


dvilualatex --synctex=-1 natnotes.tex

Sorry, forgot to say that I added
\usepackage[T1]{fontenc} that I could view that DVI file


\NeedsTeXFormat{LaTeX2e}
\def\DescribesFile#1 [#2 #3 #4]
   {\def\filename{#1}\def\filedate{#2}\def\fileversion{#3}}
\DescribesFile{natbib}
         [2010/09/13 8.31b (PWD, AO)]
\documentclass{article}
\usepackage[T1]{fontenc}          % <---------- here
....




> 
> 
> ok, and how do you exactly run the file ?
> 
> 
> -- 
> luigi

From news3 at nililand.de  Thu Mar 14 11:06:12 2019
From: news3 at nililand.de (Ulrike Fischer)
Date: Thu, 14 Mar 2019 11:06:12 +0100
Subject: [Dev-luatex] change in pdfliteral  logging
Message-ID: <1g6chea817e39.dlg@nililand.de>

In the following example (which doesn't give a valid pdf, it is only
for demo) the logging has changed between texlive 2018 and 2019:

In texlive 2018 the log said:

...\pdfliteral page"/Artifact /BMC"

In texlive 2019 I now get

...\pdfliteral page <lua data reference 770>

This sadly means that my testsuites are no longer really meaningful.

Is there a way to get the old behaviour back? Or to somehow add the
content of the "<lua data reference 770>" to the log?



\tracingoutput 1 
\showboxbreadth \maxdimen 
\showboxdepth \maxdimen
\tracingonline 1

\setbox0\hbox{a}

\directlua{
for n in node.traverse(tex.box[0].list) do
  local bdcnode = node.new("whatsit","pdf_literal")
        bdcnode.data = "/Artifact /BMC"
        bdcnode.mode=1
        tex.box[0].list =
node.insert_before(tex.box[0].list,n,bdcnode)
end
}
\box0

\bye



-- 
Ulrike Fischer 
http://www.troubleshooting-tex.de/


From luigi.scarso at gmail.com  Thu Mar 14 11:35:51 2019
From: luigi.scarso at gmail.com (luigi scarso)
Date: Thu, 14 Mar 2019 11:35:51 +0100
Subject: [Dev-luatex] change in pdfliteral logging
In-Reply-To: <1g6chea817e39.dlg@nililand.de>
References: <1g6chea817e39.dlg@nililand.de>
Message-ID: <CAG5iGsBqGra_xuu1z9m6BE_mwXJX3HD7=VUg4jCbopv4d7KhzQ@mail.gmail.com>

On Thu, Mar 14, 2019 at 11:06 AM Ulrike Fischer <news3 at nililand.de> wrote:

> In the following example (which doesn't give a valid pdf, it is only
> for demo) the logging has changed between texlive 2018 and 2019:
>
> In texlive 2018 the log said:
>
> ...\pdfliteral page"/Artifact /BMC"
>
> In texlive 2019 I now get
>
> ...\pdfliteral page <lua data reference 770>
>
> This sadly means that my testsuites are no longer really meaningful.
>
> Is there a way to get the old behaviour back? Or to somehow add the
> content of the "<lua data reference 770>" to the log?
>
>
hm, it's there from
LuaTeX 1.08 2018-08-28


-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20190314/72d3746b/attachment.html>

From lstonys at vtex.lt  Thu Mar 21 13:03:10 2019
From: lstonys at vtex.lt (Linas Stonys)
Date: Thu, 21 Mar 2019 14:03:10 +0200
Subject: [Dev-luatex] \mathchar feature request
Message-ID: <38851e53-c5bf-338a-c551-98cc0f589f6e@vtex.lt>

Hi,
I was tracing \mathchar created nodes in text mode and they are just a 
simple glyph nodes with subtype 256.
The problem is that there is no how to control the output changing the 
text font. It's ok if engine throws messages about missing characters in 
font. But if current font has a different character in this slot that is 
a problem.

Documentation says that this command is allowed in text mode:

""""""
The commands \mathchar, and \Umathchar and control sequences that are 
the result of \math-
chardef or \Umathchardef are also acceptable in the horizontal and 
vertical modes. In those
cases, the \textfont from the requested math family is used.
""""""

but maybe could be any other subtype assigned to the glyph node that 
these characters could be traced down and one could write some control 
functions (for example error "\mathchar is not allowed in text mode")

What do you think?

Thanks,
Linas

From tex at 2krueger.de  Thu Mar 21 13:48:23 2019
From: tex at 2krueger.de (=?UTF-8?Q?Marcel_Kr=C3=BCger?=)
Date: Thu, 21 Mar 2019 13:48:23 +0100
Subject: [Dev-luatex] \mathchar feature request
In-Reply-To: <38851e53-c5bf-338a-c551-98cc0f589f6e@vtex.lt>
References: <38851e53-c5bf-338a-c551-98cc0f589f6e@vtex.lt>
Message-ID: <169a04b9cd7.ad381f4e23488.98522291465114380@2krueger.de>

 ---- On Thu, 21 Mar 2019 13:03:10 +0100 Linas Stonys <lstonys at vtex.lt> wrote ----
 > Hi,
 > I was tracing \mathchar created nodes in text mode and they are just a 
 > simple glyph nodes with subtype 256.
 > The problem is that there is no how to control the output changing the 
 > text font. It's ok if engine throws messages about missing characters in 
 > font. But if current font has a different character in this slot that is 
 > a problem.

Hi,
I do not understand the problem about different characters in the slot:
Why would a different character in the current font cause a problem, the mathchar
will not be influenced by the current text font anyway, it uses the font set for inline math.
That font needs the right characters at the selected slots, but that should be a given.


Best regards,
Marcel KrÃ¼ger

 > [...]



From j.hagen at xs4all.nl  Thu Mar 21 13:52:46 2019
From: j.hagen at xs4all.nl (Hans Hagen)
Date: Thu, 21 Mar 2019 13:52:46 +0100
Subject: [Dev-luatex] \mathchar feature request
In-Reply-To: <38851e53-c5bf-338a-c551-98cc0f589f6e@vtex.lt>
References: <38851e53-c5bf-338a-c551-98cc0f589f6e@vtex.lt>
Message-ID: <a4411ad6-6320-6abe-fc61-57298f7865dc@xs4all.nl>

On 3/21/2019 1:03 PM, Linas Stonys wrote:
> Hi,
> I was tracing \mathchar created nodes in text mode and they are just a 
> simple glyph nodes with subtype 256.
> The problem is that there is no how to control the output changing the 
> text font. It's ok if engine throws messages about missing characters in 
> font. But if current font has a different character in this slot that is 
> a problem.
> 
> Documentation says that this command is allowed in text mode:
> 
> """"""
> The commands \mathchar, and \Umathchar and control sequences that are 
> the result of \math-
> chardef or \Umathchardef are also acceptable in the horizontal and 
> vertical modes. In those
> cases, the \textfont from the requested math family is used.
> """"""
> 
> but maybe could be any other subtype assigned to the glyph node that 
> these characters could be traced down and one could write some control 
> functions (for example error "\mathchar is not allowed in text mode")
> 
> What do you think?
subtypes already have a defined meaning

but you can consider setting an attribute in mathmode (with everymath) 
so that you can then (wherever) check if a character originates in math

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From lstonys at vtex.lt  Thu Mar 21 14:51:25 2019
From: lstonys at vtex.lt (Linas Stonys)
Date: Thu, 21 Mar 2019 15:51:25 +0200
Subject: [Dev-luatex] \mathchar feature request
In-Reply-To: <a4411ad6-6320-6abe-fc61-57298f7865dc@xs4all.nl>
References: <38851e53-c5bf-338a-c551-98cc0f589f6e@vtex.lt>
 <a4411ad6-6320-6abe-fc61-57298f7865dc@xs4all.nl>
Message-ID: <a5d721d5-acb8-789c-57eb-e9b5c786622f@vtex.lt>

the problem is that this command appears not in math mode.
Then it takes \textfont for character to output.
For example one forgot \Gamma to write as $\Gamma$ and he/she
used some packages where \Gamma appeared in pdf. But such a file comes 
to publishing system where different packages and different fonts are 
used this \Gamma will silently become some other character.

lets say \mathaccent doesn't compile in text mode but \mathchar does.

luatex sources just outputs:
void math_char_in_text(mathcodeval mval)
{
....
p = new_char(fam_fnt(mval.family_value, text_size), mval.character_value);
}

that's why I'm asking about some other subtype that I could control
such situations.

> subtypes already have a defined meaning
> 
> but you can consider setting an attribute in mathmode (with everymath) 
> so that you can then (wherever) check if a character originates in math
> 

From tex at 2krueger.de  Thu Mar 21 15:14:12 2019
From: tex at 2krueger.de (=?UTF-8?Q?Marcel_Kr=C3=BCger?=)
Date: Thu, 21 Mar 2019 15:14:12 +0100
Subject: [Dev-luatex] \mathchar feature request
In-Reply-To: <a5d721d5-acb8-789c-57eb-e9b5c786622f@vtex.lt>
References: <38851e53-c5bf-338a-c551-98cc0f589f6e@vtex.lt>
 <a4411ad6-6320-6abe-fc61-57298f7865dc@xs4all.nl>
 <a5d721d5-acb8-789c-57eb-e9b5c786622f@vtex.lt>
Message-ID: <169a09a2e63.1146a80d536084.4837954969404720915@2krueger.de>

 ---- On Thu, 21 Mar 2019 14:51:25 +0100 Linas Stonys <lstonys at vtex.lt> wrote ----
 > the problem is that this command appears not in math mode.
 > Then it takes \textfont for character to output.
 > For example one forgot \Gamma to write as $\Gamma$ and he/she
 > used some packages where \Gamma appeared in pdf. But such a file comes 
 > to publishing system where different packages and different fonts are 
 > used this \Gamma will silently become some other character.

Sorry, I think I am missing something here but I still do not see your point.
If someone forgot to write $\Gamma$ instead of \Gamma
and \Gamma is a \mathchar, then \Gamma is printed outside math mode with the
appropriate \textfont. But if he would have written $\Gamma$, basically the same thing
would have happened:
The Gamma would still be written with the same \textfont, so the same slot + the same font => The same character.
How can this silently become another character? The only difference is that there are no mathon/mathoff nodes
around it and \everymath is not called.

Is the problem that `\everymath` would have changed your math fonts but this doesn't happen for non math mode mathchars? 

 > 
 > lets say \mathaccent doesn't compile in text mode but \mathchar does.
 > 

What does \mathaccent has to do with this? Are you concerned that a \mathchar might be implemented using \mathaccent in
other packages?

 > luatex sources just outputs:
 > void math_char_in_text(mathcodeval mval)
 > {
 > ....
 > p = new_char(fam_fnt(mval.family_value, text_size), mval.character_value);
 > }
 > 
 > that's why I'm asking about some other subtype that I could control
 > such situations.

I do not think that this would be a bad idea, I just do not see why you need it in this situation.

But if this LuaTeX team does not want to implement this, you might be able to detect such characters by scanning
for glyph nodes using a math font and not being inside a mathon/mathoff pair


Best regards
Marcel KrÃ¼ger

 > 
 > > subtypes already have a defined meaning
 > > 
 > > but you can consider setting an attribute in mathmode (with everymath) 
 > > so that you can then (wherever) check if a character originates in math
 > >


From lstonys at vtex.lt  Thu Mar 21 15:54:39 2019
From: lstonys at vtex.lt (Linas Stonys)
Date: Thu, 21 Mar 2019 16:54:39 +0200
Subject: [Dev-luatex] \mathchar feature request
In-Reply-To: <169a09a2e63.1146a80d536084.4837954969404720915@2krueger.de>
References: <38851e53-c5bf-338a-c551-98cc0f589f6e@vtex.lt>
 <a4411ad6-6320-6abe-fc61-57298f7865dc@xs4all.nl>
 <a5d721d5-acb8-789c-57eb-e9b5c786622f@vtex.lt>
 <169a09a2e63.1146a80d536084.4837954969404720915@2krueger.de>
Message-ID: <62a2be1a-bb37-fee7-7337-8a0dc0352b0b@vtex.lt>

Produces three Î with lualatex TL2018.
First one is missing char.  And I can't reproduce bad example with the 
wrong symbol because it was a huge file and I can't find it now.

\documentclass{article}
\usepackage{amsfonts}

\begin{document}
\Gamma $\Gamma$
\Gamma $\Gamma$
\end{document}


On 3/21/2019 4:14 PM, Marcel KrÃ¼ger wrote:
>   ---- On Thu, 21 Mar 2019 14:51:25 +0100 Linas Stonys <lstonys at vtex.lt> wrote ----
>   > the problem is that this command appears not in math mode.
>   > Then it takes \textfont for character to output.
>   > For example one forgot \Gamma to write as $\Gamma$ and he/she
>   > used some packages where \Gamma appeared in pdf. But such a file comes
>   > to publishing system where different packages and different fonts are
>   > used this \Gamma will silently become some other character.
> 
> Sorry, I think I am missing something here but I still do not see your point.
> If someone forgot to write $\Gamma$ instead of \Gamma
> and \Gamma is a \mathchar, then \Gamma is printed outside math mode with the
> appropriate \textfont. But if he would have written $\Gamma$, basically the same thing
> would have happened:
> The Gamma would still be written with the same \textfont, so the same slot + the same font => The same character.
> How can this silently become another character? The only difference is that there are no mathon/mathoff nodes
> around it and \everymath is not called.
> 
> Is the problem that `\everymath` would have changed your math fonts but this doesn't happen for non math mode mathchars?
> 
>   >
>   > lets say \mathaccent doesn't compile in text mode but \mathchar does.
>   >
> 
> What does \mathaccent has to do with this? Are you concerned that a \mathchar might be implemented using \mathaccent in
> other packages?
> 
>   > luatex sources just outputs:
>   > void math_char_in_text(mathcodeval mval)
>   > {
>   > ....
>   > p = new_char(fam_fnt(mval.family_value, text_size), mval.character_value);
>   > }
>   >
>   > that's why I'm asking about some other subtype that I could control
>   > such situations.
> 
> I do not think that this would be a bad idea, I just do not see why you need it in this situation.
> 
> But if this LuaTeX team does not want to implement this, you might be able to detect such characters by scanning
> for glyph nodes using a math font and not being inside a mathon/mathoff pair
> 
> 
> Best regards
> Marcel KrÃ¼ger
> 
>   >
>   > > subtypes already have a defined meaning
>   > >
>   > > but you can consider setting an attribute in mathmode (with everymath)
>   > > so that you can then (wherever) check if a character originates in math
>   > >
> 
> 
> 

From frank.mittelbach at latex-project.org  Thu Mar 21 16:04:29 2019
From: frank.mittelbach at latex-project.org (Frank Mittelbach)
Date: Thu, 21 Mar 2019 16:04:29 +0100
Subject: [Dev-luatex] \mathchar feature request
In-Reply-To: <62a2be1a-bb37-fee7-7337-8a0dc0352b0b@vtex.lt>
References: <38851e53-c5bf-338a-c551-98cc0f589f6e@vtex.lt>
 <a4411ad6-6320-6abe-fc61-57298f7865dc@xs4all.nl>
 <a5d721d5-acb8-789c-57eb-e9b5c786622f@vtex.lt>
 <169a09a2e63.1146a80d536084.4837954969404720915@2krueger.de>
 <62a2be1a-bb37-fee7-7337-8a0dc0352b0b@vtex.lt>
Message-ID: <8bfab035-464d-ecfb-1cd1-a096f993d310@latex-project.org>

the reason that \mathchar and \mathchardef does not produce an error 
message when processed outside mathmode is that Don decided that this is 
a good way to store numbers and to be used in programming. If that would 
suddnely raise error this would kill a lot of lowlevel code

this is similar to other places, eg if you say \newbox\foo

and then \foo instead of \box\foo you end up with a printed symbol (no 
error message, etc.  In my opinion those optimizations can't be taken 
out of the TeX program without invalidating too much

frank

From news3 at nililand.de  Thu Mar 21 16:26:39 2019
From: news3 at nililand.de (Ulrike Fischer)
Date: Thu, 21 Mar 2019 16:26:39 +0100
Subject: [Dev-luatex] \mathchar feature request
References: <38851e53-c5bf-338a-c551-98cc0f589f6e@vtex.lt>
 <a4411ad6-6320-6abe-fc61-57298f7865dc@xs4all.nl>
 <a5d721d5-acb8-789c-57eb-e9b5c786622f@vtex.lt>
 <169a09a2e63.1146a80d536084.4837954969404720915@2krueger.de>
 <62a2be1a-bb37-fee7-7337-8a0dc0352b0b@vtex.lt>
Message-ID: <9jwiaxwlidzc.dlg@nililand.de>

Am Thu, 21 Mar 2019 16:54:39 +0200 schrieb Linas Stonys:

> First one is missing char.

> \documentclass{article}
> \usepackage{amsfonts}
> 
> \begin{document}
> \Gamma $\Gamma$
> \Gamma $\Gamma$
> \end{document}

You get a missing char here as math hasn't been setup yet. Something
like \begin{document}\setbox0\hbox{$x$} should fix this.



-- 
Ulrike Fischer 
http://www.troubleshooting-tex.de/


From news3 at nililand.de  Fri Mar 22 18:39:17 2019
From: news3 at nililand.de (Ulrike Fischer)
Date: Fri, 22 Mar 2019 18:39:17 +0100
Subject: [Dev-luatex] pdfe error / question
Message-ID: <13a5s2uqqlj1.dlg@nililand.de>

According to the documentation pdfe.status can be use to check if a
pdf has been opened. But when I try 

\directlua{
 dict=pdfe.open("testinput.pdf")
 pdfe.status(dict)}
\bye

I get an error 
(./test-utf8.tex[\directlua]:1: attempt to call a nil value (field
'status')


And how I'm supposed to extract an object reference from a
dictionary? There are commands getinteger, getstring but nothing
that looks like a "getreference".


-- 
Ulrike Fischer 
http://www.troubleshooting-tex.de/


From tex at 2krueger.de  Fri Mar 22 19:48:46 2019
From: tex at 2krueger.de (=?UTF-8?Q?Marcel_Kr=C3=BCger?=)
Date: Fri, 22 Mar 2019 19:48:46 +0100
Subject: [Dev-luatex] pdfe error / question
In-Reply-To: <13a5s2uqqlj1.dlg@nililand.de>
References: <13a5s2uqqlj1.dlg@nililand.de>
Message-ID: <169a6bbe82f.fc77c613237051.6985891819266411131@2krueger.de>

 ---- On Fri, 22 Mar 2019 18:39:17 +0100 Ulrike Fischer <news3 at nililand.de> wrote ----
 > According to the documentation pdfe.status can be use to check if a
 > pdf has been opened. But when I try 
 > 
 > \directlua{
 >  dict=pdfe.open("testinput.pdf")
 >  pdfe.status(dict)}
 > \bye
 > 
 > I get an error 
 > (./test-utf8.tex[\directlua]:1: attempt to call a nil value (field
 > 'status')
 > 

The function actually exists but it is called `getstatus` instead of `status`.

 > 
 > And how I'm supposed to extract an object reference from a
 > dictionary? There are commands getinteger, getstring but nothing
 > that looks like a "getreference".
 > 

Normally you do need to do this, just use `getdictionary` etc. and references get resolved automatically.
If you really need the reference, use getfromdictionary. In contrast to the documentation, this function also
accepts a key instead of an index. (If called with a key, the key is not returned.)
If the key points to a reference, the function returns the type 10, the reference object and the reference number
(This is also different than the documentation, which suggests that it only returns the number.)
Also getfromreference does not only return the referenced object, but also it's type.

So you get

local file = pdfe.open'main.pdf'
print('Status: ' .. pdfe.getstatus(file))
local catalog = pdfe.getcatalog(file)
local t, ref, refnum = pdfe.getfromdictionary(catalog, 'Names')
if t ~= 10 then
  error[[No reference found]]
end
print(refnum, pdfe.getfromreference(ref))
-- An easier way to get the same dictionary:
print(catalog.Names)
pdfe.close(file)

Resulting in the output (for some example main.pdf file):

Status: 0
94    8    <pdfe.dictionary 0x2d86f11>    1
<pdfe.dictionary 0x2d86f11>

meaning the file is not encrypted(0), the reference it to object number 94 which is a dictionary(8) containing 1 entry.

Do not try to print the reference object, the tostring helper is broken so it leads to a fatal Lua error. (It uses `%i`, but it would have to use `%d` to work.)


Best regards
Marcel KrÃ¼ger

 > 
 > -- 
 > Ulrike Fischer 
 > http://www.troubleshooting-tex.de/
 > 
 > _______________________________________________
 > dev-luatex mailing list
 > dev-luatex at ntg.nl
 > https://mailman.ntg.nl/mailman/listinfo/dev-luatex
 >



From news3 at nililand.de  Fri Mar 22 20:05:23 2019
From: news3 at nililand.de (Ulrike Fischer)
Date: Fri, 22 Mar 2019 20:05:23 +0100
Subject: [Dev-luatex] pdfe error / question
References: <13a5s2uqqlj1.dlg@nililand.de>
 <169a6bbe82f.fc77c613237051.6985891819266411131@2krueger.de>
Message-ID: <j8ocqeihh7v3.dlg@nililand.de>

Am Fri, 22 Mar 2019 19:48:46 +0100 schrieb Marcel KrÃ¼ger:

> 
> The function actually exists but it is called `getstatus` instead of `status`.

Ah ;-)

> 
>  > 
>  > And how I'm supposed to extract an object reference from a
>  > dictionary? There are commands getinteger, getstring but nothing
>  > that looks like a "getreference".
>  > 
> 
> Normally you do need to do this, just use `getdictionary` etc. and references get resolved automatically.
> If you really need the reference, 

Well I don't know if I need it. Actually I was trying to understand
the working library by solving a simple task: get and print the
/Rect values of all annotations on a page (so get the /Annot entry
and from its array the object numbers and then the relevant key. 

I will try later if I get it from your code.

> Do not try to print the reference object, the tostring helper is
> broken so it leads to a fatal Lua error. (It uses `%i`, but it
> would have to use `%d` to work.)
 
I already got an error involving %i, I'm glad it wasn't my fault ;-)

-- 
Ulrike Fischer 
https://www.troubleshooting-tex.de/


From tex at 2krueger.de  Sat Mar 23 17:43:25 2019
From: tex at 2krueger.de (=?UTF-8?Q?Marcel_Kr=C3=BCger?=)
Date: Sat, 23 Mar 2019 17:43:25 +0100
Subject: [Dev-luatex] pdfe error / question
In-Reply-To: <169a6bbe82f.fc77c613237051.6985891819266411131@2krueger.de>
References: <13a5s2uqqlj1.dlg@nililand.de>
 <169a6bbe82f.fc77c613237051.6985891819266411131@2krueger.de>
Message-ID: <169ab6f81b3.1200d06ce307486.3332267584951220958@2krueger.de>

 ---- On Fri, 22 Mar 2019 19:48:46 +0100 Marcel KrÃ¼ger <tex at 2krueger.de> wrote ----
 >  [...]
 > 
 > Do not try to print the reference object, the tostring helper is broken so it leads to a fatal Lua error. (It uses `%i`, but it would have to use `%d` to work.)
 > 
Hi LuaTeX team,

I noticed a change related to this in the trunk and experimental code so I just wanted to let you know that at least on my system,
 that this did not fix the problem because %i is still used instead of %d. To avoid the error, you could replace

    lua_pushfstring(L, "<pdfe.reference " "%i>", (int) p->onum);

with

    lua_pushfstring(L, "<pdfe.reference " "%d>", p->onum);


Best regards
Marcel KrÃ¼ger


From tex at 2krueger.de  Thu Mar 28 15:51:57 2019
From: tex at 2krueger.de (=?UTF-8?Q?Marcel_Kr=C3=BCger?=)
Date: Thu, 28 Mar 2019 15:51:57 +0100
Subject: [Dev-luatex] Multiple problems with tprint
Message-ID: <169c4c93f7e.c3b8234926891.4731797448679186343@2krueger.de>

Hi,

there are multiple issues memory issues in tprint:

If the buffer passed to tprint only contains of to be escaped characters, the `xmalloc(strlen(sss)*3)` is too small: The final `\0` can not be written, so this causes a write into unallocated memory.
If t_flush_buffer is called for such a buffer at the last position, there is an additional `\n` written, so `xmalloc(strlen(sss)*3+2)` is needed.

Additionally, the test `if (*buffer)` is used to test if there is something to print left. If the parameter is empty, `*buffer` is never written, so valgrind complains about `if (*buffer)` depending on uninitialized memory. Instead, `if (i)` can be used: `i` is the length of the written part of the buffer, so `i==0` iff there is nothing to write.

A related problem is with `max_print_line`:
If the point where the line should be broken falls inside the escape sequence of an escaped character,
the line limit is ignored.
This can be fixed by adding

        if (term_offset+2>=max_print_line) {
            wterm_cr();
            term_offset=0;
        }

as in `wterm_char` also in tprint above `buffer[i++] = '^';`.

A full patch fixing all three issues is attached.


Best regards
Marcel KrÃ¼ger
-------------- next part --------------
A non-text attachment was scrubbed...
Name: memorydiff.patch
Type: application/octet-stream
Size: 2077 bytes
Desc: not available
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20190328/d86d2de2/attachment.obj>

From tex at 2krueger.de  Thu Mar 28 15:57:39 2019
From: tex at 2krueger.de (=?UTF-8?Q?Marcel_Kr=C3=BCger?=)
Date: Thu, 28 Mar 2019 15:57:39 +0100
Subject: [Dev-luatex] Multiple issues with tprint
Message-ID: <169c4ce7991.12b4b90a028073.8612451397709890285@2krueger.de>

Hi,

there are multiple issues memory issues in tprint:

If the buffer passed to tprint only contains of to be escaped characters, the `xmalloc(strlen(sss)*3)` is too small: The final `\0` can not be written, so this causes a write into unallocated memory.
If t_flush_buffer is called for such a buffer at the last position, there is an additional `\n` written, so `xmalloc(strlen(sss)*3+2)` is needed.

Additionally, the test `if (*buffer)` is used to test if there is something to print left. If the parameter is empty, `*buffer` is never written, so valgrind complains about `if (*buffer)` depending on uninitialized memory. Instead, `if (i)` can be used: `i` is the length of the written part of the buffer, so `i==0` iff there is nothing to write.

A related problem is with `max_print_line`:
If the point where the line should be broken falls inside the escape sequence of an escaped character,
the line limit is ignored.
This can be fixed by adding

        if (term_offset+2>=max_print_line) {
            wterm_cr();
            term_offset=0;
        }

as in `wterm_char` also in tprint above `buffer[i++] = '^';`.

A full patch fixing all three issues is attached.


Best regards
Marcel KrÃ¼ger
-------------- next part --------------
A non-text attachment was scrubbed...
Name: memorydiff.patch
Type: application/octet-stream
Size: 2077 bytes
Desc: not available
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20190328/b77e0700/attachment.obj>

From j.hagen at xs4all.nl  Thu Mar 28 18:53:41 2019
From: j.hagen at xs4all.nl (Hans Hagen)
Date: Thu, 28 Mar 2019 18:53:41 +0100
Subject: [Dev-luatex] Multiple issues with tprint
In-Reply-To: <169c4ce7991.12b4b90a028073.8612451397709890285@2krueger.de>
References: <169c4ce7991.12b4b90a028073.8612451397709890285@2krueger.de>
Message-ID: <866f7e28-dc2f-12ea-7478-2fe8a46b1b81@xs4all.nl>

On 3/28/2019 3:57 PM, Marcel KrÃ¼ger wrote:
> Hi,
> 
> there are multiple issues memory issues in tprint:
> 
> If the buffer passed to tprint only contains of to be escaped characters, the `xmalloc(strlen(sss)*3)` is too small: The final `\0` can not be written, so this causes a write into unallocated memory.
> If t_flush_buffer is called for such a buffer at the last position, there is an additional `\n` written, so `xmalloc(strlen(sss)*3+2)` is needed.
> 
> Additionally, the test `if (*buffer)` is used to test if there is something to print left. If the parameter is empty, `*buffer` is never written, so valgrind complains about `if (*buffer)` depending on uninitialized memory. Instead, `if (i)` can be used: `i` is the length of the written part of the buffer, so `i==0` iff there is nothing to write.
> 
> A related problem is with `max_print_line`:
> If the point where the line should be broken falls inside the escape sequence of an escaped character,
> the line limit is ignored.
> This can be fixed by adding
> 
>          if (term_offset+2>=max_print_line) {
>              wterm_cr();
>              term_offset=0;
>          }
> 
> as in `wterm_char` also in tprint above `buffer[i++] = '^';`.
> 
> A full patch fixing all three issues is attached.
Can you give a plain tex example where the fault happens? Normally the 
max line length kicks in (3 chars) before such an overflow.

(btw, nothing fundamental will change in the texlive code freeze frame)

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From tex at 2krueger.de  Thu Mar 28 22:55:09 2019
From: tex at 2krueger.de (=?UTF-8?Q?Marcel_Kr=C3=BCger?=)
Date: Thu, 28 Mar 2019 22:55:09 +0100
Subject: [Dev-luatex] Multiple issues with tprint
In-Reply-To: <866f7e28-dc2f-12ea-7478-2fe8a46b1b81@xs4all.nl>
References: <169c4ce7991.12b4b90a028073.8612451397709890285@2krueger.de>
 <866f7e28-dc2f-12ea-7478-2fe8a46b1b81@xs4all.nl>
Message-ID: <169c64cb507.cc4fa77492584.6157301528109842025@2krueger.de>

 ---- On Thu, 28 Mar 2019 18:53:41 +0100 Hans Hagen <j.hagen at xs4all.nl> wrote ----
 > On 3/28/2019 3:57 PM, Marcel KrÃ¼ger wrote:
 > > Hi,
 > > 
 > > there are multiple issues memory issues in tprint:
 > > 
 > > If the buffer passed to tprint only contains of to be escaped characters, the `xmalloc(strlen(sss)*3)` is too small: The final `\0` can not be written, so this causes a write into unallocated memory.
 > > If t_flush_buffer is called for such a buffer at the last position, there is an additional `\n` written, so `xmalloc(strlen(sss)*3+2)` is needed.
 > > 
 > > Additionally, the test `if (*buffer)` is used to test if there is something to print left. If the parameter is empty, `*buffer` is never written, so valgrind complains about `if (*buffer)` depending on uninitialized memory. Instead, `if (i)` can be used: `i` is the length of the written part of the buffer, so `i==0` iff there is nothing to write.
 > > 
 > > A related problem is with `max_print_line`:
 > > If the point where the line should be broken falls inside the escape sequence of an escaped character,
 > > the line limit is ignored.
 > > This can be fixed by adding
 > > 
 > >          if (term_offset+2>=max_print_line) {
 > >              wterm_cr();
 > >              term_offset=0;
 > >          }
 > > 
 > > as in `wterm_char` also in tprint above `buffer[i++] = '^';`.
 > > 
 > > A full patch fixing all three issues is attached.
 > Can you give a plain tex example where the fault happens? Normally the 
 > max line length kicks in (3 chars) before such an overflow.

Try

\let\3\relax
\directlua{
  texio.write'\3'% Only to be escaped characters -> valgrind complains about write into unallocated memory

  texio.write_nl''

  for i=1,kpse.var_value'max_print_line'-3 do texio.write'.' end
  texio.write'\3' % Here LuaTex writes 2 and not just 1 byte after it's allocated memory area

  for i=1,kpse.var_value'max_print_line'-1 do texio.write'.' end
  texio.write'\3' % The line break would fall inside of the escape sequence -> Line limit ignored
  for i=1,2*kpse.var_value'max_print_line' do texio.write'.' end % This should normally not fit into one line
}
\bye


 > 
 > (btw, nothing fundamental will change in the texlive code freeze frame)

Right, it isn't urgent anyway, I just wanted to clean up my valgrind output...


Best regards

Marcel KrÃ¼ger 

> 
 > Hans
 > 
 > -----------------------------------------------------------------
 >                                            Hans Hagen | PRAGMA ADE
 >                Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
 >         tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
 > -----------------------------------------------------------------
 > _______________________________________________
 > dev-luatex mailing list
 > dev-luatex at ntg.nl
 > https://mailman.ntg.nl/mailman/listinfo/dev-luatex
 >


From luigi.scarso at gmail.com  Thu Mar 28 23:01:29 2019
From: luigi.scarso at gmail.com (luigi scarso)
Date: Thu, 28 Mar 2019 23:01:29 +0100
Subject: [Dev-luatex] Multiple issues with tprint
In-Reply-To: <169c64cb507.cc4fa77492584.6157301528109842025@2krueger.de>
References: <169c4ce7991.12b4b90a028073.8612451397709890285@2krueger.de>
 <866f7e28-dc2f-12ea-7478-2fe8a46b1b81@xs4all.nl>
 <169c64cb507.cc4fa77492584.6157301528109842025@2krueger.de>
Message-ID: <CAG5iGsDDqU6e72KbY=gHABZ9DLL2cddLHZ8Xqr+Hdo3nv45+6g@mail.gmail.com>

On Thu, Mar 28, 2019 at 10:55 PM Marcel KrÃ¼ger <tex at 2krueger.de> wrote:

>  ---- On Thu, 28 Mar 2019 18:53:41 +0100 Hans Hagen <j.hagen at xs4all.nl>
> wrote ----
>  > On 3/28/2019 3:57 PM, Marcel KrÃ¼ger wrote:
>  > > Hi,
>  > >
>  > > there are multiple issues memory issues in tprint:
>  > >
>  > > If the buffer passed to tprint only contains of to be escaped
> characters, the `xmalloc(strlen(sss)*3)` is too small: The final `\0` can
> not be written, so this causes a write into unallocated memory.
>  > > If t_flush_buffer is called for such a buffer at the last position,
> there is an additional `\n` written, so `xmalloc(strlen(sss)*3+2)` is
> needed.
>  > >
>  > > Additionally, the test `if (*buffer)` is used to test if there is
> something to print left. If the parameter is empty, `*buffer` is never
> written, so valgrind complains about `if (*buffer)` depending on
> uninitialized memory. Instead, `if (i)` can be used: `i` is the length of
> the written part of the buffer, so `i==0` iff there is nothing to write.
>  > >
>  > > A related problem is with `max_print_line`:
>  > > If the point where the line should be broken falls inside the escape
> sequence of an escaped character,
>  > > the line limit is ignored.
>  > > This can be fixed by adding
>  > >
>  > >          if (term_offset+2>=max_print_line) {
>  > >              wterm_cr();
>  > >              term_offset=0;
>  > >          }
>  > >
>  > > as in `wterm_char` also in tprint above `buffer[i++] = '^';`.
>  > >
>  > > A full patch fixing all three issues is attached.
>  > Can you give a plain tex example where the fault happens? Normally the
>  > max line length kicks in (3 chars) before such an overflow.
>
> Try
>
> \let\3\relax
> \directlua{
>   texio.write'\3'% Only to be escaped characters -> valgrind complains
> about write into unallocated memory
>
>   texio.write_nl''
>
>   for i=1,kpse.var_value'max_print_line'-3 do texio.write'.' end
>   texio.write'\3' % Here LuaTex writes 2 and not just 1 byte after it's
> allocated memory area
>
>   for i=1,kpse.var_value'max_print_line'-1 do texio.write'.' end
>   texio.write'\3' % The line break would fall inside of the escape
> sequence -> Line limit ignored
>   for i=1,2*kpse.var_value'max_print_line' do texio.write'.' end % This
> should normally not fit into one line
> }
> \bye
>
>
>

Ok, thank you very much for the example.



-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20190328/816898a5/attachment-0001.html>

From luigi.scarso at gmail.com  Fri Mar 29 08:13:19 2019
From: luigi.scarso at gmail.com (luigi scarso)
Date: Fri, 29 Mar 2019 08:13:19 +0100
Subject: [Dev-luatex] Multiple issues with tprint
In-Reply-To: <169c64cb507.cc4fa77492584.6157301528109842025@2krueger.de>
References: <169c4ce7991.12b4b90a028073.8612451397709890285@2krueger.de>
 <866f7e28-dc2f-12ea-7478-2fe8a46b1b81@xs4all.nl>
 <169c64cb507.cc4fa77492584.6157301528109842025@2krueger.de>
Message-ID: <CAG5iGsBxSGwwF6mXeiQu983E8VjsW1mTzGOk=tE3dQzG9cU3eg@mail.gmail.com>

On Thu, Mar 28, 2019 at 10:55 PM Marcel KrÃ¼ger <tex at 2krueger.de> wrote:

>
> \let\3\relax
> \directlua{
>   texio.write'\3'% Only to be escaped characters -> valgrind complains
> about write into unallocated memory
>
>   texio.write_nl''
>
>   for i=1,kpse.var_value'max_print_line'-3 do texio.write'.' end
>   texio.write'\3' % Here LuaTex writes 2 and not just 1 byte after it's
> allocated memory area
>
>   for i=1,kpse.var_value'max_print_line'-1 do texio.write'.' end
>   texio.write'\3' % The line break would fall inside of the escape
> sequence -> Line limit ignored
>   for i=1,2*kpse.var_value'max_print_line' do texio.write'.' end % This
> should normally not fit into one line
> }
> \bye
>
>
How do you run valgrind ? Which version  ?
Do you compile luatex with standard -O2 ?

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20190329/b0cc2c93/attachment.html>

From tex at 2krueger.de  Fri Mar 29 09:26:01 2019
From: tex at 2krueger.de (=?UTF-8?Q?Marcel_Kr=C3=BCger?=)
Date: Fri, 29 Mar 2019 09:26:01 +0100
Subject: [Dev-luatex] Multiple issues with tprint
In-Reply-To: <CAG5iGsBxSGwwF6mXeiQu983E8VjsW1mTzGOk=tE3dQzG9cU3eg@mail.gmail.com>
References: <169c4ce7991.12b4b90a028073.8612451397709890285@2krueger.de>
 <866f7e28-dc2f-12ea-7478-2fe8a46b1b81@xs4all.nl>
 <169c64cb507.cc4fa77492584.6157301528109842025@2krueger.de>
 <CAG5iGsBxSGwwF6mXeiQu983E8VjsW1mTzGOk=tE3dQzG9cU3eg@mail.gmail.com>
Message-ID: <169c88e4733.db88f88111672.2758634010135240796@2krueger.de>

 ---- On Fri, 29 Mar 2019 08:13:19 +0100 luigi scarso <luigi.scarso at gmail.com> wrote ----
 > 
 > 
 > On Thu, Mar 28, 2019 at 10:55 PM Marcel KrÃ¼ger <tex at 2krueger.de> wrote:
 > 
 > \let\3\relax
 > \directlua{
 >   texio.write'\3'% Only to be escaped characters -> valgrind complains about write into unallocated memory
 > 
 >   texio.write_nl''
 > 
 >   for i=1,kpse.var_value'max_print_line'-3 do texio.write'.' end
 >   texio.write'\3' % Here LuaTex writes 2 and not just 1 byte after it's allocated memory area
 > 
 >   for i=1,kpse.var_value'max_print_line'-1 do texio.write'.' end
 >   texio.write'\3' % The line break would fall inside of the escape sequence -> Line limit ignored
 >   for i=1,2*kpse.var_value'max_print_line' do texio.write'.' end % This should normally not fit into one line
 > }
 > \bye
 > 
 > 
 > How do you run valgrind ? Which version  ? Do you compile luatex with standard -O2 ? -- 
 > luigi
 > 

My test were done with

(Arch) Linux, Kernel 5.0.4-arch1-1-ARCH
glibc 2.28-5
valgrind-3.14.0

The tests were done with a debug build (`./build.sh --debug`) a regular build (`./build.sh` w/o further options) and the current TeXLive pretest version.


From luigi.scarso at gmail.com  Fri Mar 29 09:30:39 2019
From: luigi.scarso at gmail.com (luigi scarso)
Date: Fri, 29 Mar 2019 09:30:39 +0100
Subject: [Dev-luatex] Multiple issues with tprint
In-Reply-To: <169c88e4733.db88f88111672.2758634010135240796@2krueger.de>
References: <169c4ce7991.12b4b90a028073.8612451397709890285@2krueger.de>
 <866f7e28-dc2f-12ea-7478-2fe8a46b1b81@xs4all.nl>
 <169c64cb507.cc4fa77492584.6157301528109842025@2krueger.de>
 <CAG5iGsBxSGwwF6mXeiQu983E8VjsW1mTzGOk=tE3dQzG9cU3eg@mail.gmail.com>
 <169c88e4733.db88f88111672.2758634010135240796@2krueger.de>
Message-ID: <CAG5iGsDhjjnTpWUrW5vTN2M0hSLXyrpF2urfVoPs8jcG0cmTEA@mail.gmail.com>

On Fri, Mar 29, 2019 at 9:26 AM Marcel KrÃ¼ger <tex at 2krueger.de> wrote:

>
> My test were done with
>
> (Arch) Linux, Kernel 5.0.4-arch1-1-ARCH
> glibc 2.28-5
> valgrind-3.14.0
>
> The tests were done with a debug build (`./build.sh --debug`) a regular
> build (`./build.sh` w/o further options) and the current TeXLive pretest
> version.
>
>
Ok;  following

valgrind [valgrind-options] [your-program] [your-program-options]

 what are valgrind-options you are using ?


-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20190329/93c04cb4/attachment.html>

From tex at 2krueger.de  Fri Mar 29 10:52:45 2019
From: tex at 2krueger.de (=?UTF-8?Q?Marcel_Kr=C3=BCger?=)
Date: Fri, 29 Mar 2019 10:52:45 +0100
Subject: [Dev-luatex] Multiple issues with tprint
In-Reply-To: <CAG5iGsDhjjnTpWUrW5vTN2M0hSLXyrpF2urfVoPs8jcG0cmTEA@mail.gmail.com>
References: <169c4ce7991.12b4b90a028073.8612451397709890285@2krueger.de>
 <866f7e28-dc2f-12ea-7478-2fe8a46b1b81@xs4all.nl>
 <169c64cb507.cc4fa77492584.6157301528109842025@2krueger.de>
 <CAG5iGsBxSGwwF6mXeiQu983E8VjsW1mTzGOk=tE3dQzG9cU3eg@mail.gmail.com>
 <169c88e4733.db88f88111672.2758634010135240796@2krueger.de>
 <CAG5iGsDhjjnTpWUrW5vTN2M0hSLXyrpF2urfVoPs8jcG0cmTEA@mail.gmail.com>
Message-ID: <169c8ddb041.f201a97122906.9079880509181171071@2krueger.de>

 ---- On Fri, 29 Mar 2019 09:30:39 +0100 luigi scarso <luigi.scarso at gmail.com> wrote ----
 > 
 > 
 > On Fri, Mar 29, 2019 at 9:26 AM Marcel KrÃ¼ger <tex at 2krueger.de> wrote:
 > 
 > My test were done with
 > 
 > (Arch) Linux, Kernel 5.0.4-arch1-1-ARCH
 > glibc 2.28-5
 > valgrind-3.14.0
 > 
 > The tests were done with a debug build (`./build.sh --debug`) a regular build (`./build.sh` w/o further options) and the current TeXLive pretest version.
 > 
 > 
 > Ok;  following
 > valgrind [valgrind-options] [your-program] [your-program-options]
 >  what are valgrind-options you are using ?
 > 
 > -- 
 > luigi
 > 

Only default options:

valgrind luatex weird

for the TeX file weird.tex. I attach the full valgrind output from my system.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: valgrind.out
Type: application/octet-stream
Size: 15294 bytes
Desc: not available
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20190329/16f1c700/attachment-0001.obj>

From arfrever.fta at gmail.com  Sun Mar 31 16:50:02 2019
From: arfrever.fta at gmail.com (Arfrever Frehtes Taifersar Arahesis)
Date: Sun, 31 Mar 2019 16:50:02 +0200
Subject: [Dev-luatex] ARM_COMPLAINT
Message-ID: <201903311650.10560.Arfrever.FTA@gmail.com>

Commit https://github.com/TeX-Live/luatex/commit/db10e585f662630461e96938de1043a4c5ca2852 added
some (correct) uses of '#if ARM_COMPLIANT' and also 2 uses of '#if ARM_COMPLAINT'.

They are still present in newest version of source/texk/web2c/luatexdir/luapplib/ppload.c file:
https://github.com/TeX-Live/luatex/blob/eafe6e149e78c13abb435e5c1e06bb49aa59e414/source/texk/web2c/luatexdir/luapplib/ppload.c

Since ARM_COMPLAINT is never defined, presumably some code is now broken on ARM architectures :) .

--
Arfrever Frehtes Taifersar Arahesis

