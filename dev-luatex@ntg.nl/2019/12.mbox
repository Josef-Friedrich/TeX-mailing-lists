From amy at amyspark.me  Wed Dec  4 03:31:22 2019
From: amy at amyspark.me (L. E. Segovia)
Date: Wed, 4 Dec 2019 02:31:22 +0000
Subject: [Dev-luatex] LuaTeX 1.10.0 cannot embed properly PDFs with 4-bit
 images
Message-ID: <96f5abe4-c04c-b687-922d-b021e3a48ce3@amyspark.me>

Hello,

I would like to report that since TeX Live 2019, LuaTeX is unable to 
embed properly a certain type of image I have.
These sort of images are embedded in the PDFs generated by the tool 
"Comprobantes en lÃ­nea" of Argentina's IRS (AdministraciÃ³n Federal de 
Ingresos PÃºblicos, https://www.afip.gob.ar).

This is an example: 
https://comunadealvear.gob.ar/wp-content/uploads/2017/03/30710518803_01_0002_00000009.pdf 
(or just search online for the string "Esta AdministraciÃ³n Federal no se 
responsabiliza por los datos ingresados en el detalle de la operaciÃ³n").

Embed this file using the following snippet:

\documentclass{article}
\usepackage{luatex85}
\usepackage{incgraph}

\begin{document}
\incgraph{30710518803_01_0002_00000009.pdf}
\end{document}

Where the white-and-grey AFIP logo appears in the original, LuaTeX 
instead embeds a grey-on-grey image, probably by messing with the alpha 
channel.

I have consistently reproduced this on every update since the 2019 
release. XeLaTeX and pdfTeX do not have this issue.

Please let me know if I can be of more assistance. I hope I've posted to 
the right mailing list.

Best regards,

Leonardo

-- 
Leonardo E. Segovia
https://www.amyspark.me

From luigi.scarso at gmail.com  Wed Dec  4 09:44:56 2019
From: luigi.scarso at gmail.com (luigi scarso)
Date: Wed, 4 Dec 2019 09:44:56 +0100
Subject: [Dev-luatex] LuaTeX 1.10.0 cannot embed properly PDFs with
 4-bit images
In-Reply-To: <96f5abe4-c04c-b687-922d-b021e3a48ce3@amyspark.me>
References: <96f5abe4-c04c-b687-922d-b021e3a48ce3@amyspark.me>
Message-ID: <CAG5iGsD+uQwMgqPZb7qFQS5S=Tjq2o2RmzFXhzrg0aq6bSLuJQ@mail.gmail.com>

On Wed, Dec 4, 2019 at 9:39 AM L. E. Segovia <amy at amyspark.me> wrote:

> Hello,
>
> I would like to report that since TeX Live 2019, LuaTeX is unable to
> embed properly a certain type of image I have.
> These sort of images are embedded in the PDFs generated by the tool
> "Comprobantes en lÃ­nea" of Argentina's IRS (AdministraciÃ³n Federal de
> Ingresos PÃºblicos, https://www.afip.gob.ar).
>
> This is an example:
>
> https://comunadealvear.gob.ar/wp-content/uploads/2017/03/30710518803_01_0002_00000009.pdf
> (or just search online for the string "Esta AdministraciÃ³n Federal no se
> responsabiliza por los datos ingresados en el detalle de la operaciÃ³n").
>
> Embed this file using the following snippet:
>
> \documentclass{article}
> \usepackage{luatex85}
> \usepackage{incgraph}
>
> \begin{document}
> \incgraph{30710518803_01_0002_00000009.pdf}
> \end{document}
>
> Where the white-and-grey AFIP logo appears in the original, LuaTeX
> instead embeds a grey-on-grey image, probably by messing with the alpha
> channel.
>
> I have consistently reproduced this on every update since the 2019
> release. XeLaTeX and pdfTeX do not have this issue.
>
> Please let me know if I can be of more assistance. I hope I've posted to
> the right mailing list.
>
> Best regards,
>
> Leonardo
>
> --
> Leonardo E. Segovia
> https://www.amyspark.me



Confirmed, thank you very much for the report.
We will fix it asap.

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20191204/431486b5/attachment.html>

From j.hagen at xs4all.nl  Wed Dec  4 10:23:23 2019
From: j.hagen at xs4all.nl (Hans Hagen)
Date: Wed, 4 Dec 2019 10:23:23 +0100
Subject: [Dev-luatex] LuaTeX 1.10.0 cannot embed properly PDFs with
 4-bit images
In-Reply-To: <96f5abe4-c04c-b687-922d-b021e3a48ce3@amyspark.me>
References: <96f5abe4-c04c-b687-922d-b021e3a48ce3@amyspark.me>
Message-ID: <e3130eab-e48f-c8f2-4792-fb11c6281c32@xs4all.nl>

On 12/4/2019 3:31 AM, L. E. Segovia wrote:
> Hello,
> 
> I would like to report that since TeX Live 2019, LuaTeX is unable to 
> embed properly a certain type of image I have.
> These sort of images are embedded in the PDFs generated by the tool 
> "Comprobantes en lÃ­nea" of Argentina's IRS (AdministraciÃ³n Federal de 
> Ingresos PÃºblicos, https://www.afip.gob.ar).
> 
> This is an example: 
> https://comunadealvear.gob.ar/wp-content/uploads/2017/03/30710518803_01_0002_00000009.pdf 
> (or just search online for the string "Esta AdministraciÃ³n Federal no se 
> responsabiliza por los datos ingresados en el detalle de la operaciÃ³n").
> 
> Embed this file using the following snippet:
> 
> \documentclass{article}
> \usepackage{luatex85}
> \usepackage{incgraph}
> 
> \begin{document}
> \incgraph{30710518803_01_0002_00000009.pdf}
> \end{document}
> 
> Where the white-and-grey AFIP logo appears in the original, LuaTeX 
> instead embeds a grey-on-grey image, probably by messing with the alpha 
> channel.
> 
> I have consistently reproduced this on every update since the 2019 
> release. XeLaTeX and pdfTeX do not have this issue.
> 
> Please let me know if I can be of more assistance. I hope I've posted to 
> the right mailing list.
Either remove the encryption or set the flags so that content might be 
extracted.

acrobat shows no permissions other than printing ... so basically pdftex 
and xetex are violating this; qpdf shows

R = 3
P = -1852
User password =
extract for accessibility: not allowed
extract for any purpose: not allowed
print low resolution: allowed
print high resolution: allowed
modify document assembly: not allowed
modify forms: not allowed
modify annotations: not allowed
modify other: not allowed
modify anything: not allowed

if you remove the encryption (which of course is also illegal) then the 
document can be included

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From luigi.scarso at gmail.com  Thu Dec  5 12:00:58 2019
From: luigi.scarso at gmail.com (luigi scarso)
Date: Thu, 5 Dec 2019 12:00:58 +0100
Subject: [Dev-luatex] Request for bugfix - user defined whatsit node
In-Reply-To: <77df7c07-6f6f-06c6-db92-1a92f63f88a8@xs4all.nl>
References: <20191030165624.dlow7amx5ieay7th@yoga>
 <CAG5iGsA2i-GJPymQ98B8=jafsrzBY2wQeX9-NVkJR-+t-UHcKw@mail.gmail.com>
 <0205A46F-11E4-4DB6-B095-5B7AA3279FA4@vtex.lt>
 <77df7c07-6f6f-06c6-db92-1a92f63f88a8@xs4all.nl>
Message-ID: <CAG5iGsDo7pT_hTM+Sw-ODesJZ1ZtWBPAaCtJZJXnQS1rKWNWYg@mail.gmail.com>

On Tue, Dec 3, 2019 at 6:16 PM Hans Hagen <j.hagen at xs4all.nl> wrote:

> On 11/15/2019 12:35 PM, Sigitas Tolusis wrote:
> > Noticed two bugs.
> >
> > 1. Mised case for user defined whatsit node type 108 (âlâ Lua value)
> >      in function check_node_wrapup_core (texnodes.c:2482).
> >      Possible fix: just add the same as cases for types âsâ and âdâ.
> >      Insert line at texnodes.c:2500
> >                  case âl':
> >
> > 2. In function flush_node_wrapup_core (texnodes.c:2201) for user defined
> >      whatsit node type âlâ we have: free_user_lua(user_node_value(p)).
> >      But in luanode.c:409 free_user_lua is defined as:
> >
> > void free_user_lua(pointer p)
> > {
> >      if (user_node_value(p) != 0) {
> >          luaL_unref(Luas, LUA_REGISTRYINDEX, user_node_value(p));
> >      }
> > }
> >
> > So we have two times user_node_value and it generates segmentation fault.
> > Possible fix: free_user_lua(p); // (texnodes.c:2223)
> fixed in next luatex beta buit best test then
>
> Hans
>

Done in rev. 7233 .

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20191205/ba437ea8/attachment.html>

From amy at amyspark.me  Wed Dec  4 10:36:27 2019
From: amy at amyspark.me (L. E. Segovia)
Date: Wed, 4 Dec 2019 09:36:27 +0000
Subject: [Dev-luatex] LuaTeX 1.10.0 cannot embed properly PDFs with
 4-bit images
In-Reply-To: <e3130eab-e48f-c8f2-4792-fb11c6281c32@xs4all.nl>
References: <96f5abe4-c04c-b687-922d-b021e3a48ce3@amyspark.me>
 <e3130eab-e48f-c8f2-4792-fb11c6281c32@xs4all.nl>
Message-ID: <fac60c25-9b90-0a9a-7c6a-9cd520b7f3d3@amyspark.me>

Ghostscript as well, it's what I've been using to process my own invoices.

Best regards,

Leonardo

On 04/12/2019 09:23, Hans Hagen wrote:
> On 12/4/2019 3:31 AM, L. E. Segovia wrote:
>> Hello,
>>
>> I would like to report that since TeX Live 2019, LuaTeX is unable to 
>> embed properly a certain type of image I have.
>> These sort of images are embedded in the PDFs generated by the tool 
>> "Comprobantes en lÃ­nea" of Argentina's IRS (AdministraciÃ³n Federal de 
>> Ingresos PÃºblicos, https://www.afip.gob.ar).
>>
>> This is an example: 
>> https://comunadealvear.gob.ar/wp-content/uploads/2017/03/30710518803_01_0002_00000009.pdf 
>> (or just search online for the string "Esta AdministraciÃ³n Federal no 
>> se responsabiliza por los datos ingresados en el detalle de la 
>> operaciÃ³n").
>>
>> Embed this file using the following snippet:
>>
>> \documentclass{article}
>> \usepackage{luatex85}
>> \usepackage{incgraph}
>>
>> \begin{document}
>> \incgraph{30710518803_01_0002_00000009.pdf}
>> \end{document}
>>
>> Where the white-and-grey AFIP logo appears in the original, LuaTeX 
>> instead embeds a grey-on-grey image, probably by messing with the 
>> alpha channel.
>>
>> I have consistently reproduced this on every update since the 2019 
>> release. XeLaTeX and pdfTeX do not have this issue.
>>
>> Please let me know if I can be of more assistance. I hope I've posted 
>> to the right mailing list.
> Either remove the encryption or set the flags so that content might be 
> extracted.
> 
> acrobat shows no permissions other than printing ... so basically pdftex 
> and xetex are violating this; qpdf shows
> 
> R = 3
> P = -1852
> User password =
> extract for accessibility: not allowed
> extract for any purpose: not allowed
> print low resolution: allowed
> print high resolution: allowed
> modify document assembly: not allowed
> modify forms: not allowed
> modify annotations: not allowed
> modify other: not allowed
> modify anything: not allowed
> 
> if you remove the encryption (which of course is also illegal) then the 
> document can be included
> 
> Hans
> 
> -----------------------------------------------------------------
>  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Hans Hagen | PRAGMA ADE
>  Â Â Â Â Â Â Â Â Â Â Â Â Â  Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
>  Â Â Â Â Â Â  tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
> -----------------------------------------------------------------


-- 
Leonardo E. Segovia
https://www.amyspark.me

From luigi.scarso at gmail.com  Fri Dec  6 17:40:42 2019
From: luigi.scarso at gmail.com (luigi scarso)
Date: Fri, 6 Dec 2019 17:40:42 +0100
Subject: [Dev-luatex] LuaTeX 1.10.0 cannot embed properly PDFs with
 4-bit images
In-Reply-To: <fac60c25-9b90-0a9a-7c6a-9cd520b7f3d3@amyspark.me>
References: <96f5abe4-c04c-b687-922d-b021e3a48ce3@amyspark.me>
 <e3130eab-e48f-c8f2-4792-fb11c6281c32@xs4all.nl>
 <fac60c25-9b90-0a9a-7c6a-9cd520b7f3d3@amyspark.me>
Message-ID: <CAG5iGsCxRRJKMuaSNPmKk6QmwFJSf63QAAh4ACbhjsA+TFx07A@mail.gmail.com>

On Thu, Dec 5, 2019 at 12:03 PM L. E. Segovia <amy at amyspark.me> wrote:

> Ghostscript as well, it's what I've been using to process my own invoices.
>


It seems to be a typo in pplib, the patch is quite trivial but I have to
check again.

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20191206/243dbb2c/attachment.html>

From news3 at nililand.de  Tue Dec 10 22:21:11 2019
From: news3 at nililand.de (Ulrike Fischer)
Date: Tue, 10 Dec 2019 22:21:11 +0100
Subject: [Dev-luatex] commands with a non-letter in token.set_macro
Message-ID: <1v2douqjv5esh.dlg@nililand.de>


Commands that should be use in token.set_macro must already exist. 
But while it is easy to predefine a command like \blub it seems not 
to be possible to do it with commands consisting of a \ with a 
non-letter. 

E.g. I put this in a luatest.lua

token.set_macro("foo","\\bar\\blub\\!")

and then compile


\def\!{hallo}
\def\blub{hallo}
\directlua{require"luatest"}
\show\foo
\bye

I get:

> \foo=macro:
->\bar \blub BAD!.
l.254 \show\foo

so the \blub works, but not the \!.

How can one repair this?

-- 
Ulrike Fischer 
https://www.troubleshooting-tex.de/


From luigi.scarso at gmail.com  Wed Dec 11 00:07:00 2019
From: luigi.scarso at gmail.com (luigi scarso)
Date: Wed, 11 Dec 2019 00:07:00 +0100
Subject: [Dev-luatex] commands with a non-letter in token.set_macro
In-Reply-To: <1v2douqjv5esh.dlg@nililand.de>
References: <1v2douqjv5esh.dlg@nililand.de>
Message-ID: <CAG5iGsC9XPVExPMVM0vqRp+MwbxLNCQUpyJEWxzHL=fWP1VK2A@mail.gmail.com>

On Tue, Dec 10, 2019 at 10:36 PM Ulrike Fischer <news3 at nililand.de> wrote:

>
> Commands that should be use in token.set_macro must already exist.
> But while it is easy to predefine a command like \blub it seems not
> to be possible to do it with commands consisting of a \ with a
> non-letter.
>

perhaps

--[==[ luatest.lua ]==]
token.set_macro("foo",[==[\blub\csname !\endcsname]==])


%%test.tex
\tracingall
\def\!{[hallo!]}
\def\blub{[hallo]}
\directlua{require"luatest"}
\show\foo
\foo
\bye

(untested)

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20191211/d4638efa/attachment.html>

From tex at 2krueger.de  Thu Dec 12 14:06:13 2019
From: tex at 2krueger.de (Marcel Fabian =?utf-8?Q?Kr=C3=BCger?=)
Date: Thu, 12 Dec 2019 14:06:13 +0100
Subject: [Dev-luatex] Allow skippig the font cache in font.getfont
Message-ID: <20191212130613.dgaw27hjxk7qbjmf@yoga>

Hello,

could font.getfont get an option to always return a new font table
instead of returning the current one? While for many fonts a cached
table makes sense, sometimes it would be useful to also have access to
the ooriginal table, e.g. to see which characters are `used`, inspect
the result of `font.addcharacters` or inspect other changes which might
be applied to the underlying font from TeX.

I attached a patch implementing this by adding a `nocache` parameter to
`font.getfont`, such that `font.getfont(true, font_id)` always generates
a new table. IMO `font.getfont(font_id, true)` would look nicer, but
that wouldn't be compatible to older LuaTeX versions which always expect
the font is as last parameter.

Best regards,
Marcel
-------------- next part --------------
>From 289f7e85fd2048716f411d0730bb5787f2b56b3c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marcel=20Fabian=20Kr=C3=BCger?= <tex at 2krueger.de>
Date: Thu, 12 Dec 2019 13:52:53 +0100
Subject: [PATCH] Add `nocache` parameter for font.getfont

---
 manual/luatex-fonts.tex                      | 6 ++++--
 source/texk/web2c/luatexdir/font/luafont.c   | 6 +++---
 source/texk/web2c/luatexdir/lua/lfontlib.c   | 7 ++++---
 source/texk/web2c/luatexdir/lua/luatex-api.h | 2 +-
 4 files changed, 12 insertions(+), 9 deletions(-)

diff --git a/manual/luatex-fonts.tex b/manual/luatex-fonts.tex
index e5b6e1cb2..5eeec2034 100644
--- a/manual/luatex-fonts.tex
+++ b/manual/luatex-fonts.tex
@@ -722,13 +722,15 @@ below for the \type {font.each} iterator.
 The two metatable functions implementing the virtual array are:
 
 \startfunctioncall
-<table> f = font.getfont(<number> n)
+<table> f = font.getfont([<boolean> nocache, ]<number> n)
 font.setfont(<number> n, <table> f)
 \stopfunctioncall
 
 Note that at the moment, each access to the \type {font.fonts} or call to \type
 {font.getfont} creates a \LUA\ table for the whole font unless you cached it.
-This process can be quite slow.
+This process can be quite slow. If the optional nocache parameter is set to
+\type {true} for \type {font.getfont}, a new table will be created even if a
+cached table exists.
 
 \startfunctioncall
 <table> p = font.getparameters(<number> n)
diff --git a/source/texk/web2c/luatexdir/font/luafont.c b/source/texk/web2c/luatexdir/font/luafont.c
index 14efbf8a7..1d31847e5 100644
--- a/source/texk/web2c/luatexdir/font/luafont.c
+++ b/source/texk/web2c/luatexdir/font/luafont.c
@@ -432,11 +432,11 @@ static void write_lua_math_parameters(lua_State * L, int f)
     lua_rawset(L, -3);
 }
 
-int font_to_lua(lua_State * L, int f)
+int font_to_lua(lua_State * L, int f, boolean bypass_cache)
 {
     int k;
     charinfo *co;
-    if (font_cache_id(f) > 0) {
+    if (!bypass_cache && font_cache_id(f) > 0) {
         /*tex Fetch the table from the registry if it was saved there by |font_from_lua|. */
         lua_rawgeti(L, LUA_REGISTRYINDEX, font_cache_id(f));
         return 1;
@@ -523,7 +523,7 @@ int font_to_lua(lua_State * L, int f)
         }
     }
     lua_rawset(L, -3);
-    if (font_cache_id(f) == 0) {
+    if (!bypass_cache && font_cache_id(f) == 0) {
         /*tex Renew the cache. */
         int r;
         lua_pushvalue(L, -1);
diff --git a/source/texk/web2c/luatexdir/lua/lfontlib.c b/source/texk/web2c/luatexdir/lua/lfontlib.c
index b3ac2aa53..392f3ca77 100644
--- a/source/texk/web2c/luatexdir/lua/lfontlib.c
+++ b/source/texk/web2c/luatexdir/lua/lfontlib.c
@@ -44,7 +44,7 @@ static int font_read_tfm(lua_State * L)
             if (strlen(cnom)) {
                 internal_font_number f = get_fontid();
                 if (read_tfm_info(f, cnom, s)) {
-                    int k = font_to_lua(L, f);
+                    int k = font_to_lua(L, f, false);
                     delete_font(f);
                     return k;
                 } else {
@@ -118,7 +118,7 @@ static int tex_each_font_next(lua_State * L)
         return 1;
     } else {
         lua_pushinteger(L, i);
-        if (!font_to_lua(L, i))
+        if (!font_to_lua(L, i, false))
             lua_pushnil(L);
         return 2;
     }
@@ -250,8 +250,9 @@ static int nextfontid(lua_State * L)
 
 static int getfont(lua_State * L)
 {
+    boolean bypass_cache = lua_gettop(L) == 2 && lua_toboolean(L, -2);
     int i = luaL_checkinteger(L, -1);
-    if (i && is_valid_font(i) && font_to_lua(L, i))
+    if (i && is_valid_font(i) && font_to_lua(L, i, bypass_cache))
         return 1;
     lua_pushnil(L);
     return 1;
diff --git a/source/texk/web2c/luatexdir/lua/luatex-api.h b/source/texk/web2c/luatexdir/lua/luatex-api.h
index bebf088af..44b765f62 100644
--- a/source/texk/web2c/luatexdir/lua/luatex-api.h
+++ b/source/texk/web2c/luatexdir/lua/luatex-api.h
@@ -155,7 +155,7 @@ extern int luaopen_stats(lua_State * L);
 extern int luaopen_font(lua_State * L);
 extern int luaopen_vf(lua_State * L);
 extern int font_parameters_to_lua(lua_State * L, int f);
-extern int font_to_lua(lua_State * L, int f);
+extern int font_to_lua(lua_State * L, int f, int bypass_cache); /* third arg is boolean */
 extern int font_from_lua(lua_State * L, int f); /* return is boolean */
 extern int characters_from_lua(lua_State * L, int f); /* return is boolean */
 
-- 
2.24.1


From j.hagen at xs4all.nl  Thu Dec 12 14:17:05 2019
From: j.hagen at xs4all.nl (Hans Hagen)
Date: Thu, 12 Dec 2019 14:17:05 +0100
Subject: [Dev-luatex] Allow skippig the font cache in font.getfont
In-Reply-To: <20191212130613.dgaw27hjxk7qbjmf@yoga>
References: <20191212130613.dgaw27hjxk7qbjmf@yoga>
Message-ID: <6b98a93a-a389-60d1-6ced-a4316bf0bc82@xs4all.nl>

On 12/12/2019 2:06 PM, Marcel Fabian KrÃ¼ger wrote:
> Hello,
> 
> could font.getfont get an option to always return a new font table
> instead of returning the current one? While for many fonts a cached
> table makes sense, sometimes it would be useful to also have access to
> the ooriginal table, e.g. to see which characters are `used`, inspect
> the result of `font.addcharacters` or inspect other changes which might
> be applied to the underlying font from TeX.
> 
> I attached a patch implementing this by adding a `nocache` parameter to
> `font.getfont`, such that `font.getfont(true, font_id)` always generates
> a new table. IMO `font.getfont(font_id, true)` would look nicer, but
> that wouldn't be compatible to older LuaTeX versions which always expect
> the font is as last parameter.
For such a feature I prefer "font.getcopy(id)". I'll add it to my todo 
list.

Hans



-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

