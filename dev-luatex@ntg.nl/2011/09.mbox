From w.m.l at gmx.net  Tue Sep  6 04:22:46 2011
From: w.m.l at gmx.net (Robert)
Date: Tue, 06 Sep 2011 04:22:46 +0200
Subject: [Dev-luatex] letterspacing and (no) ligatures
In-Reply-To: <57BEF102-91CD-43B8-B083-2501371BF138@elvenkind.com>
References: <4D52DB7D.7000803@gmx.net> <4D5376DB.8000800@elvenkind.com>
	<4D53F3B7.5030100@gmx.net>
	<57BEF102-91CD-43B8-B083-2501371BF138@elvenkind.com>
Message-ID: <4E6583F6.6030201@gmx.net>

Hi Taco,

here's an old issue with \letterspacefont, which I would like to raise 
again and expand upon:

On 10.02.11 18:58, Taco Hoekwater wrote:
> On 10 feb. 2011, at 15:18, Robert<w.m.l at gmx.net>  wrote:
>> On 10.02.11 06:25, Taco Hoekwater wrote:
>>> I've created a tracker item,
[1]
>>> but I am not sure yet whether either of them is actually a bug or
>>> simply a incompatibility.
>>
>> I would call it an incompatibility bug ;-)
>>
>> As others have noted, some ligatures in letterspaced text shouldn't
>> be broken. If \letterspacefont now disables all ligatures, this is
>> no longer possible except by changing the font for each and every
>> such ligature (and even for "--", "<<" etc.). This renders
>> \letterspacefont basically useless.
>>
> That is a convincing argument, i will try to fix \letterspacefont

As has been discovered recently, \letterspacefont will not only break 
ligatures, but also small caps [2,3], and, as it turns out, will in fact 
disable all features of the base font:

\input luaotfload.sty
\font\x="Linux Libertine O:+smcp;+onum"
\x Abcd 0123 (\fontname\font)\par
\letterspacefont\y\x 100
\y Abcd 0123 (\fontname\font)\bye

Now, this would basically mean that \letterspacefont can only be used
for type1, but not for opentype fonts. Is this really intended?


[1] <http://tracker.luatex.org/view.php?id=574>
[2] 
<http://tex.stackexchange.com/questions/27555/lualatex-fontspec-and-tracking-with-microtype>
[3] 
<http://tex.stackexchange.com/questions/26141/textls-breaks-smallcaps-with-luatex>

Best,
-- 
  Robert

From pragma at wxs.nl  Tue Sep  6 10:31:10 2011
From: pragma at wxs.nl (Hans Hagen)
Date: Tue, 06 Sep 2011 10:31:10 +0200
Subject: [Dev-luatex] letterspacing and (no) ligatures
In-Reply-To: <4E6583F6.6030201@gmx.net>
References: <4D52DB7D.7000803@gmx.net> <4D5376DB.8000800@elvenkind.com>
	<4D53F3B7.5030100@gmx.net>
	<57BEF102-91CD-43B8-B083-2501371BF138@elvenkind.com>
	<4E6583F6.6030201@gmx.net>
Message-ID: <4E65DA4E.2070302@wxs.nl>

On 6-9-2011 04:22, Robert wrote:

> \input luaotfload.sty
> \font\x="Linux Libertine O:+smcp;+onum"
> \x Abcd 0123 (\fontname\font)\par
> \letterspacefont\y\x 100
> \y Abcd 0123 (\fontname\font)\bye
>
> Now, this would basically mean that \letterspacefont can only be used
> for type1, but not for opentype fonts. Is this really intended?

I'm pretty sure it has been answered before (but not sure on what lists).

I cannot test it here but you should use mode=base which will create a 
static font that is handled by tex itself as the tex machinery will copy 
the font data when you do that kind of letterspacing. The engine  is 
ignorant of anything related to the font at the lua end so one might 
loose some very specific features provided outside the engine but that's 
no big deal as letterspacing spoils the game anyway. Smallcaps and 
oldstyles normally are no problem.

(So, it's not a luatex bug.)

Hans


-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From w.m.l at gmx.net  Wed Sep  7 05:03:29 2011
From: w.m.l at gmx.net (Robert)
Date: Wed, 07 Sep 2011 05:03:29 +0200
Subject: [Dev-luatex] letterspacing and (no) ligatures
In-Reply-To: <4E65DA4E.2070302@wxs.nl>
References: <4D52DB7D.7000803@gmx.net> <4D5376DB.8000800@elvenkind.com>
	<4D53F3B7.5030100@gmx.net>
	<57BEF102-91CD-43B8-B083-2501371BF138@elvenkind.com>
	<4E6583F6.6030201@gmx.net> <4E65DA4E.2070302@wxs.nl>
Message-ID: <4E66DF01.7010305@gmx.net>

On 06.09.11 10:31, Hans Hagen wrote:
> On 6-9-2011 04:22, Robert wrote:
>> Now, this would basically mean that \letterspacefont can only be used
>> for type1, but not for opentype fonts. Is this really intended?
>
> I'm pretty sure it has been answered before (but not sure on what lists).

Ah yes, I see this has been raised on the context list.

> I cannot test it here but you should use mode=base which will create a
> static font that is handled by tex itself as the tex machinery will copy
> the font data when you do that kind of letterspacing. The engine is
> ignorant of anything related to the font at the lua end so one might
> loose some very specific features provided outside the engine but that's
> no big deal as letterspacing spoils the game anyway. Smallcaps and
> oldstyles normally are no problem.

Thanks, that works. Would you mind elaborating on the difference between 
base and node mode a bit, or could you point me to the relevant 
documentation? I'm unable to find anything more specific than that base 
mode does not support Opentype "fully" (luaotfload). But what exactly is 
not supported, what would you lose by switching from node to base mode?

Best,
-- 
  Robert

From zappathustra at free.fr  Wed Sep  7 08:15:24 2011
From: zappathustra at free.fr (Paul Isambert)
Date: Wed, 07 Sep 2011 08:15:24 +0200
Subject: [Dev-luatex] letterspacing and (no) ligatures
In-Reply-To: <4E66DF01.7010305@gmx.net>
References: <4D52DB7D.7000803@gmx.net>
	<4D5376DB.8000800@elvenkind.com>	<4D53F3B7.5030100@gmx.net>	<57BEF102-91CD-43B8-B083-2501371BF138@elvenkind.com>	<4E6583F6.6030201@gmx.net>
	<4E65DA4E.2070302@wxs.nl> <4E66DF01.7010305@gmx.net>
Message-ID: <4E670BFC.5080303@free.fr>

Le 07/09/2011 05:03, Robert a ?crit :
> On 06.09.11 10:31, Hans Hagen wrote:
>
>> I cannot test it here but you should use mode=base which will create a
>> static font that is handled by tex itself as the tex machinery will copy
>> the font data when you do that kind of letterspacing. The engine is
>> ignorant of anything related to the font at the lua end so one might
>> loose some very specific features provided outside the engine but that's
>> no big deal as letterspacing spoils the game anyway. Smallcaps and
>> oldstyles normally are no problem.
>
> Thanks, that works. Would you mind elaborating on the difference 
> between base and node mode a bit, or could you point me to the 
> relevant documentation? I'm unable to find anything more specific than 
> that base mode does not support Opentype "fully" (luaotfload). But 
> what exactly is not supported, what would you lose by switching from 
> node to base mode?

If I'm not mistaken, "base mode" implements OT features like traditional 
TeX fonts, and thus only those features supported by TeX can be used; 
for instance, simple ligatures or kerning is easily done this way, 
because those already exist for TFM fonts.

But contextual features, for instance, or even simple ligatures with 
more than two input glyphs, aren't supported this way, because TeX knows 
nothing about them; there is nothing devoted to them in the way fonts 
are organised. So you use "node mode", which boils down to inspecting 
lists of nodes before the paragraph is constructed (in one of the 
callbacks before linebreak_filter) and changing what must be changed; of 
course the traditional features can be implemented this way too.

As for the documentation, I don't think there is any!

Best,
Paul


From pragma at wxs.nl  Thu Sep  8 18:01:13 2011
From: pragma at wxs.nl (Hans Hagen)
Date: Thu, 08 Sep 2011 18:01:13 +0200
Subject: [Dev-luatex] letterspacing and (no) ligatures
In-Reply-To: <4E670BFC.5080303@free.fr>
References: <4D52DB7D.7000803@gmx.net>
	<4D5376DB.8000800@elvenkind.com>	<4D53F3B7.5030100@gmx.net>	<57BEF102-91CD-43B8-B083-2501371BF138@elvenkind.com>	<4E6583F6.6030201@gmx.net>
	<4E65DA4E.2070302@wxs.nl> <4E66DF01.7010305@gmx.net>
	<4E670BFC.5080303@free.fr>
Message-ID: <4E68E6C9.70300@wxs.nl>

On 7-9-2011 08:15, Paul Isambert wrote:

> As for the documentation, I don't think there is any!

There has been articles / presentations about the plain module (which 
serves as starting point for the latex one) as well as the usage in 
context. Recently the interface has been redone a bit so that there is a 
more clear separation between generic and non generic (read: context) 
code. At some point (i.e. when things are stable enough) I will document 
the relevant parts of the api.

But anyway, your description on the difference between node mode and 
base mode is correct. As most users will use a wrapper macro level I 
suppose that manuals that discuss such a wrapper will also discuss 
relevant keys/values (or provide some layer around it).

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From khaledhosny at eglug.org  Thu Sep 15 22:56:53 2011
From: khaledhosny at eglug.org (Khaled Hosny)
Date: Thu, 15 Sep 2011 22:56:53 +0200
Subject: [Dev-luatex] Libhyphen
Message-ID: <20110915205653.GA21585@khaled-laptop>

Hello all,

I just came across this library:
http://sourceforge.net/projects/hunspell/files/Hyphen/

Which seems to be the last iteration of libhj, and is currently used by
OpenOffice/LibreOffice. It seems to have some interesting feature over
the original hyphenation algorithm, namely support for "non-standard
hyphenation; `discretionary' character changes at hyphenation points"
and "compound word hyphenation and special rules of compound word
hyphenation of German languages and other languages with arbitrary
number of compound words." I recall reading about something related to
German hyphenation planned for luatex, so I sought this might be of some
interest here.

Regards,
 Khaled

-- 
 Khaled Hosny
 Egyptian
 Arab

From taco at elvenkind.com  Fri Sep 16 08:07:58 2011
From: taco at elvenkind.com (Taco Hoekwater)
Date: Fri, 16 Sep 2011 08:07:58 +0200
Subject: [Dev-luatex] Libhyphen
In-Reply-To: <20110915205653.GA21585@khaled-laptop>
References: <20110915205653.GA21585@khaled-laptop>
Message-ID: <4E72E7BE.8000704@elvenkind.com>

On 09/15/2011 10:56 PM, Khaled Hosny wrote:
> Hello all,
>
> I just came across this library:
> http://sourceforge.net/projects/hunspell/files/Hyphen/
>
> Which seems to be the last iteration of libhj, and is currently used by
> OpenOffice/LibreOffice. It seems to have some interesting feature over
> the original hyphenation algorithm, namely support for "non-standard
> hyphenation; `discretionary' character changes at hyphenation points"
> and "compound word hyphenation and special rules of compound word
> hyphenation of German languages and other languages with arbitrary
> number of compound words."

Hyphenation is luatex is in fact an adaptation of a (slightly earlier)
version of libhnj. At that time, it did not do compound word stuff yet,
so I have to check that out. It did then already have non-standard
hyphenation.

However, that was implemented as such an hack that I decided to
leave it out in the new luatex code, and instead opted for non-standard
hyphenation in the exceptions instead of in the patterns proper. (what
libhnj did at that time was disguising dictionary exceptions as
patterns, so the non-standard hyphenation 'pattern rules' were in fact
complete words with a single non-standard hyphenation in it somewhere.)

Considering the quality of the non-standard hyphenation support, I do
not have high expectations for the compound word extension, to be
honest.


Best wishes,
Taco

From khaledhosny at eglug.org  Fri Sep 16 10:02:09 2011
From: khaledhosny at eglug.org (Khaled Hosny)
Date: Fri, 16 Sep 2011 10:02:09 +0200
Subject: [Dev-luatex] Libhyphen
In-Reply-To: <4E72E7BE.8000704@elvenkind.com>
References: <20110915205653.GA21585@khaled-laptop>
	<4E72E7BE.8000704@elvenkind.com>
Message-ID: <20110916080209.GA1873@khaled-laptop>

On Fri, Sep 16, 2011 at 08:07:58AM +0200, Taco Hoekwater wrote:
> On 09/15/2011 10:56 PM, Khaled Hosny wrote:
> >Hello all,
> >
> >I just came across this library:
> >http://sourceforge.net/projects/hunspell/files/Hyphen/
> >
> >Which seems to be the last iteration of libhj, and is currently used by
> >OpenOffice/LibreOffice. It seems to have some interesting feature over
> >the original hyphenation algorithm, namely support for "non-standard
> >hyphenation; `discretionary' character changes at hyphenation points"
> >and "compound word hyphenation and special rules of compound word
> >hyphenation of German languages and other languages with arbitrary
> >number of compound words."
> 
> Hyphenation is luatex is in fact an adaptation of a (slightly earlier)
> version of libhnj. At that time, it did not do compound word stuff yet,
> so I have to check that out. It did then already have non-standard
> hyphenation.

I know that luatex is using libhnj, that is why I though this new
development might be of interest.

> However, that was implemented as such an hack that I decided to
> leave it out in the new luatex code, and instead opted for non-standard
> hyphenation in the exceptions instead of in the patterns proper. (what
> libhnj did at that time was disguising dictionary exceptions as
> patterns, so the non-standard hyphenation 'pattern rules' were in fact
> complete words with a single non-standard hyphenation in it somewhere.)

They have tis TUGboat paper on non-standard hyphenation, I'm not sure if
it is the old libhnj thing, it is all gibberish to me :)
http://sourceforge.net/projects/hunspell/files/Hyphen/documentation/tb87nemeth.pdf

Regards,
 Khaled

-- 
 Khaled Hosny
 Egyptian
 Arab

From w.m.l at gmx.net  Sun Sep 18 04:26:36 2011
From: w.m.l at gmx.net (Robert)
Date: Sun, 18 Sep 2011 04:26:36 +0200
Subject: [Dev-luatex] letterspacing and (no) ligatures
In-Reply-To: <4E670BFC.5080303@free.fr>
References: <4D52DB7D.7000803@gmx.net>
	<4D5376DB.8000800@elvenkind.com>	<4D53F3B7.5030100@gmx.net>	<57BEF102-91CD-43B8-B083-2501371BF138@elvenkind.com>	<4E6583F6.6030201@gmx.net>
	<4E65DA4E.2070302@wxs.nl> <4E66DF01.7010305@gmx.net>
	<4E670BFC.5080303@free.fr>
Message-ID: <4E7556DC.5000300@gmx.net>

On 07.09.11 08:15, Paul Isambert wrote:
> Le 07/09/2011 05:03, Robert a ?crit :
>> On 06.09.11 10:31, Hans Hagen wrote:
>>
>>> I cannot test it here but you should use mode=base which will create a
>>> static font that is handled by tex itself as the tex machinery will copy
>>> the font data when you do that kind of letterspacing. The engine is
>>> ignorant of anything related to the font at the lua end so one might
>>> loose some very specific features provided outside the engine but that's
>>> no big deal as letterspacing spoils the game anyway. Smallcaps and
>>> oldstyles normally are no problem.
>>
>> Thanks, that works. Would you mind elaborating on the difference
>> between base and node mode a bit, or could you point me to the
>> relevant documentation? I'm unable to find anything more specific than
>> that base mode does not support Opentype "fully" (luaotfload). But
>> what exactly is not supported, what would you lose by switching from
>> node to base mode?
>
> If I'm not mistaken, "base mode" implements OT features like traditional
> TeX fonts, and thus only those features supported by TeX can be used;
> for instance, simple ligatures or kerning is easily done this way,
> because those already exist for TFM fonts.
>
> But contextual features, for instance, or even simple ligatures with
> more than two input glyphs, aren't supported this way, because TeX knows
> nothing about them; there is nothing devoted to them in the way fonts
> are organised. So you use "node mode", which boils down to inspecting
> lists of nodes before the paragraph is constructed (in one of the
> callbacks before linebreak_filter) and changing what must be changed; of
> course the traditional features can be implemented this way too.

Thanks for the information. I will tell users then to use base mode, for 
the time being.

Probably not surprising, but just for the record (and I guess this won't 
change, either): The same loss of font features as with \letterspacefont 
also happens with \pdfcopyfonts.

Regards,
-- 
  Robert

From mailing_list at arcor.de  Wed Sep 21 01:00:08 2011
From: mailing_list at arcor.de (Stephan Hennig)
Date: Wed, 21 Sep 2011 01:00:08 +0200
Subject: [Dev-luatex] Libhyphen
In-Reply-To: <4E72E7BE.8000704@elvenkind.com>
References: <20110915205653.GA21585@khaled-laptop>
	<4E72E7BE.8000704@elvenkind.com>
Message-ID: <4E791AF8.3030403@arcor.de>

schrieb Taco Hoekwater:
> On 09/15/2011 10:56 PM, Khaled Hosny wrote:
>>
>> I just came across this library:
>> http://sourceforge.net/projects/hunspell/files/Hyphen/
>
> Hyphenation is luatex is in fact an adaptation of a (slightly
> earlier) version of libhnj. At that time, it did not do compound word
> stuff yet, so I have to check that out. It did then already have
> non-standard hyphenation.
> 
> However, that was implemented as such an hack that I decided to leave
> it out in the new luatex code, and instead opted for non-standard 
> hyphenation in the exceptions instead of in the patterns proper.
> (what libhnj did at that time was disguising dictionary exceptions
> as patterns, so the non-standard hyphenation 'pattern rules' were in
> fact complete words with a single non-standard hyphenation in it
> somewhere.)

As Taco already pointed out libhnj mixes-up regular patterns and
non-standard hyphenation patterns.  I sent a proposal about compound
word hyphenation to Taco a while ago that clearly separates patterns
with different semantics.

In this context, different semantics means different hyphenation
penalties.  That is, provide different sets of hyphenation patterns for
all needed hyphenation penalties, i.e, patterns

  * for compound word hyphenation,
  * for prefix and suffix hyphenation,
  * for suppressing aesthetically unpleasant hyphenations,
  * etc.

For the German language, I think even more than five different penalty
classes could be desirable.  All these sets of patterns can be applied
to a word in parallel and the penalties are chosen according to which
pattern set matches a spot.

The same pattern approach can be used to handle non-standard
hyphenation, ligaturing, round-s recognition, etc.  (I think there are
use-cases in Arabic script as well.)

I don't know what Taco's current plan is, though.  The corresponding
tracker item reads "multi-pass hyphenation",
<URL:http://tracker.luatex.org/view.php?id=168>, whereas my proposal is
about applying patterns in parallel rather than in multiple passes.

Best regards,
Stephan Hennig

From khaledhosny at eglug.org  Wed Sep 21 11:25:31 2011
From: khaledhosny at eglug.org (Khaled Hosny)
Date: Wed, 21 Sep 2011 11:25:31 +0200
Subject: [Dev-luatex] Libhyphen
In-Reply-To: <4E791AF8.3030403@arcor.de>
References: <20110915205653.GA21585@khaled-laptop>
	<4E72E7BE.8000704@elvenkind.com> <4E791AF8.3030403@arcor.de>
Message-ID: <20110921092531.GA1950@khaled-laptop>

On Wed, Sep 21, 2011 at 01:00:08AM +0200, Stephan Hennig wrote:
> schrieb Taco Hoekwater:
> > On 09/15/2011 10:56 PM, Khaled Hosny wrote:
> >>
> >> I just came across this library:
> >> http://sourceforge.net/projects/hunspell/files/Hyphen/
> >
> > Hyphenation is luatex is in fact an adaptation of a (slightly
> > earlier) version of libhnj. At that time, it did not do compound word
> > stuff yet, so I have to check that out. It did then already have
> > non-standard hyphenation.
> > 
> > However, that was implemented as such an hack that I decided to leave
> > it out in the new luatex code, and instead opted for non-standard 
> > hyphenation in the exceptions instead of in the patterns proper.
> > (what libhnj did at that time was disguising dictionary exceptions
> > as patterns, so the non-standard hyphenation 'pattern rules' were in
> > fact complete words with a single non-standard hyphenation in it
> > somewhere.)
> 
> As Taco already pointed out libhnj mixes-up regular patterns and
> non-standard hyphenation patterns.  I sent a proposal about compound
> word hyphenation to Taco a while ago that clearly separates patterns
> with different semantics.
> 
> In this context, different semantics means different hyphenation
> penalties.  That is, provide different sets of hyphenation patterns for
> all needed hyphenation penalties, i.e, patterns
> 
>   * for compound word hyphenation,
>   * for prefix and suffix hyphenation,
>   * for suppressing aesthetically unpleasant hyphenations,
>   * etc.
> 
> For the German language, I think even more than five different penalty
> classes could be desirable.  All these sets of patterns can be applied
> to a word in parallel and the penalties are chosen according to which
> pattern set matches a spot.
> 
> The same pattern approach can be used to handle non-standard
> hyphenation, ligaturing, round-s recognition, etc.  (I think there are
> use-cases in Arabic script as well.)
> 
> I don't know what Taco's current plan is, though.  The corresponding
> tracker item reads "multi-pass hyphenation",
> <URL:http://tracker.luatex.org/view.php?id=168>, whereas my proposal is
> about applying patterns in parallel rather than in multiple passes.

I've to admit this is all Greek to me :) (the only language written in
Arabic script that accepts hyphenation is Uyghur, and that is for the
new, Chinese-imposed orthography). I just thought re-using existing code
and patterns might be of interest, but I can't judge the quality of
either of them.

Regards,
 Khaled

-- 
 Khaled Hosny
 Egyptian
 Arab

From mailing_list at arcor.de  Wed Sep 21 18:22:18 2011
From: mailing_list at arcor.de (Stephan Hennig)
Date: Wed, 21 Sep 2011 18:22:18 +0200
Subject: [Dev-luatex] Libhyphen
In-Reply-To: <20110921092531.GA1950@khaled-laptop>
References: <20110915205653.GA21585@khaled-laptop>
	<4E72E7BE.8000704@elvenkind.com> <4E791AF8.3030403@arcor.de>
	<20110921092531.GA1950@khaled-laptop>
Message-ID: <4E7A0F3A.1060404@arcor.de>

schrieb Khaled Hosny:
> On Wed, Sep 21, 2011 at 01:00:08AM +0200, Stephan Hennig wrote:
>> 
>> The same pattern approach can be used to handle non-standard
>> hyphenation, ligaturing, round-s recognition, etc.  (I think there are
>> use-cases in Arabic script as well.)
> 
> I've to admit this is all Greek to me :) (the only language written in
> Arabic script that accepts hyphenation is Uyghur, and that is for the
> new, Chinese-imposed orthography).

I didn't mean hyphenation in Arabic script.  In Latin black letter
script there are two different glyphs for the small letter s -- the long
? and the usual round s.  Most keyboards don't provide a key for the ?,
so source documents usually make use of the round s only.  To put an ?
at the respective places in the typeset document, the traditional way is
to mark-up those places with s+ or s: (different black letter fonts and
support packages use different conventions).

Now, automatically applying glyph substitution at the correct places
within a character stream /without/ mark-up is pretty much the same
problem as finding hyphenation positions within a character stream
without mark-up.  The same holds for applying non-standard hyphenation
without mark-up or applying ligatures at the correct places only without
mark-up.  Currently, TeX inserts ligatures based on a greedy rule, which
produces many false positives in languages with compound words.

For Arabic script, I referred to glyph substitution.  But I don't know
enough about Arabic script to explain further. :)

Best regards,
Stephan Hennig

From khaledhosny at eglug.org  Wed Sep 21 18:59:43 2011
From: khaledhosny at eglug.org (Khaled Hosny)
Date: Wed, 21 Sep 2011 18:59:43 +0200
Subject: [Dev-luatex] Libhyphen
In-Reply-To: <4E7A0F3A.1060404@arcor.de>
References: <20110915205653.GA21585@khaled-laptop>
	<4E72E7BE.8000704@elvenkind.com> <4E791AF8.3030403@arcor.de>
	<20110921092531.GA1950@khaled-laptop> <4E7A0F3A.1060404@arcor.de>
Message-ID: <20110921165942.GA5399@khaled-laptop>

On Wed, Sep 21, 2011 at 06:22:18PM +0200, Stephan Hennig wrote:
> For Arabic script, I referred to glyph substitution.  But I don't know
> enough about Arabic script to explain further. :)

Arabic handling in luatex (or rather luatex based packages) is done by
OpenType layout features processed by lua code, no engine techniques are
involved.

Regards,
 Khaled

-- 
 Khaled Hosny
 Egyptian
 Arab

From mailing_list at arcor.de  Thu Sep 22 19:29:38 2011
From: mailing_list at arcor.de (Stephan Hennig)
Date: Thu, 22 Sep 2011 19:29:38 +0200
Subject: [Dev-luatex] Libhyphen
In-Reply-To: <20110921165942.GA5399@khaled-laptop>
References: <20110915205653.GA21585@khaled-laptop>
	<4E72E7BE.8000704@elvenkind.com> <4E791AF8.3030403@arcor.de>
	<20110921092531.GA1950@khaled-laptop> <4E7A0F3A.1060404@arcor.de>
	<20110921165942.GA5399@khaled-laptop>
Message-ID: <4E7B7082.7090009@arcor.de>

schrieb Khaled Hosny:
> On Wed, Sep 21, 2011 at 06:22:18PM +0200, Stephan Hennig wrote:
>> For Arabic script, I referred to glyph substitution.  But I don't know
>> enough about Arabic script to explain further. :)
> 
> Arabic handling in luatex (or rather luatex based packages) is done by
> OpenType layout features processed by lua code, no engine techniques are
> involved.

Didn't I warn you, I don't know much about Arabic script? :)  What
OpenType features are there that are used in Arabic script?  Is OpenType
powerful enough to solve all script related typesetting problems in
Arabic typography?  Lucky you!

Best regards,
Stephan Hennig

From mailing_list at arcor.de  Thu Sep 22 23:57:16 2011
From: mailing_list at arcor.de (Stephan Hennig)
Date: Thu, 22 Sep 2011 23:57:16 +0200
Subject: [Dev-luatex] Libhyphen
In-Reply-To: <4E7B7082.7090009@arcor.de>
References: <20110915205653.GA21585@khaled-laptop>
	<4E72E7BE.8000704@elvenkind.com> <4E791AF8.3030403@arcor.de>
	<20110921092531.GA1950@khaled-laptop> <4E7A0F3A.1060404@arcor.de>
	<20110921165942.GA5399@khaled-laptop> <4E7B7082.7090009@arcor.de>
Message-ID: <4E7BAF3C.6010208@arcor.de>

schrieb Stephan Hennig:
> schrieb Khaled Hosny:
>> 
>> Arabic handling in luatex (or rather luatex based packages) is done by
>> OpenType layout features processed by lua code, no engine techniques are
>> involved.
> 
> Is OpenType powerful enough to solve all script related typesetting
> problems in Arabic typography?

OK, I've read a (very) little bit about typesetting Arabic script and
found in <URL:http://en.wikipedia.org/wiki/Complex_script>

> Context-sensitive shaping (ligatures), where a character may change 
> its shape, dependent on its location and/or the surrounding 
> characters. For example, a character in Arabic script can have as
> many as four different shape-forms, depending on context.

As far as I know, OpenType uses (more or less) simple rules rather than
patterns for contextual features (I may be wrong with that).  Does that
mean, glyph substitution in Arabic script can be managed by rules only?

Best regards,
Stephan Hennig

From khaledhosny at eglug.org  Sat Sep 24 15:43:41 2011
From: khaledhosny at eglug.org (Khaled Hosny)
Date: Sat, 24 Sep 2011 15:43:41 +0200
Subject: [Dev-luatex] Libhyphen
In-Reply-To: <4E7BAF3C.6010208@arcor.de>
References: <20110915205653.GA21585@khaled-laptop>
	<4E72E7BE.8000704@elvenkind.com> <4E791AF8.3030403@arcor.de>
	<20110921092531.GA1950@khaled-laptop> <4E7A0F3A.1060404@arcor.de>
	<20110921165942.GA5399@khaled-laptop> <4E7B7082.7090009@arcor.de>
	<4E7BAF3C.6010208@arcor.de>
Message-ID: <20110924134341.GD2412@khaled-laptop>

On Thu, Sep 22, 2011 at 11:57:16PM +0200, Stephan Hennig wrote:
> schrieb Stephan Hennig:
> > schrieb Khaled Hosny:
> >> 
> >> Arabic handling in luatex (or rather luatex based packages) is done by
> >> OpenType layout features processed by lua code, no engine techniques are
> >> involved.
> > 
> > Is OpenType powerful enough to solve all script related typesetting
> > problems in Arabic typography?
> 
> OK, I've read a (very) little bit about typesetting Arabic script and
> found in <URL:http://en.wikipedia.org/wiki/Complex_script>
> 
> > Context-sensitive shaping (ligatures), where a character may change 
> > its shape, dependent on its location and/or the surrounding 
> > characters. For example, a character in Arabic script can have as
> > many as four different shape-forms, depending on context.
> 
> As far as I know, OpenType uses (more or less) simple rules rather than
> patterns for contextual features (I may be wrong with that).  Does that
> mean, glyph substitution in Arabic script can be managed by rules only?

OpenType is a mix of both; there are basic features where the font
provides simple substitution lists and the OpenType engine (in our case
entirely written in lua) have to do contextual analysis using predefined
algorithms to decide where and when to apply those features e.g.
initial, medial, final and isolated forms in Arabic. But there is also
contextual features with more complex rules in which the font embeds all
the knowledge about the context in which features are applied, and this
is used for less straight forward cases where the context are font
dependant rather than defined by script orthography.

Regards,
 Khaled

-- 
 Khaled Hosny
 Egyptian
 Arab

From khaledhosny at eglug.org  Sat Sep 24 15:46:18 2011
From: khaledhosny at eglug.org (Khaled Hosny)
Date: Sat, 24 Sep 2011 15:46:18 +0200
Subject: [Dev-luatex] Libhyphen
In-Reply-To: <4E7B7082.7090009@arcor.de>
References: <20110915205653.GA21585@khaled-laptop>
	<4E72E7BE.8000704@elvenkind.com> <4E791AF8.3030403@arcor.de>
	<20110921092531.GA1950@khaled-laptop> <4E7A0F3A.1060404@arcor.de>
	<20110921165942.GA5399@khaled-laptop> <4E7B7082.7090009@arcor.de>
Message-ID: <20110924134618.GE2412@khaled-laptop>

On Thu, Sep 22, 2011 at 07:29:38PM +0200, Stephan Hennig wrote:
> schrieb Khaled Hosny:
> > On Wed, Sep 21, 2011 at 06:22:18PM +0200, Stephan Hennig wrote:
> >> For Arabic script, I referred to glyph substitution.  But I don't know
> >> enough about Arabic script to explain further. :)
> > 
> > Arabic handling in luatex (or rather luatex based packages) is done by
> > OpenType layout features processed by lua code, no engine techniques are
> > involved.
> 
> Didn't I warn you, I don't know much about Arabic script? :)  What
> OpenType features are there that are used in Arabic script?  Is OpenType
> powerful enough to solve all script related typesetting problems in
> Arabic typography?  Lucky you!

More or less, and there are fonts addressing fairly complex problems
implemented in OpenType. Of course it does not solve everything, but it
has fairly generic mechanisms to address the vast majority of Arabic
typographic issues.

Regards,
 Khaled

-- 
 Khaled Hosny
 Egyptian
 Arab

From mailing_list at arcor.de  Sun Sep 25 15:47:38 2011
From: mailing_list at arcor.de (Stephan Hennig)
Date: Sun, 25 Sep 2011 15:47:38 +0200
Subject: [Dev-luatex] Libhyphen
In-Reply-To: <20110924134341.GD2412@khaled-laptop>
References: <20110915205653.GA21585@khaled-laptop>
	<4E72E7BE.8000704@elvenkind.com> <4E791AF8.3030403@arcor.de>
	<20110921092531.GA1950@khaled-laptop> <4E7A0F3A.1060404@arcor.de>
	<20110921165942.GA5399@khaled-laptop>
	<4E7B7082.7090009@arcor.de> <4E7BAF3C.6010208@arcor.de>
	<20110924134341.GD2412@khaled-laptop>
Message-ID: <4E7F30FA.6090201@arcor.de>

schrieb Khaled Hosny:

> But there is also contextual features with more complex rules in
> which the font embeds all the knowledge about the context in which
> features are applied, and this is used for less straight forward
> cases where the context are font dependant rather than defined by
> script orthography.

Thank you for the explanation!  Any buzz words regarding these
techniques I can throw into a search engine?

Best regards,
Stephan Hennig

From khaledhosny at eglug.org  Sun Sep 25 16:13:39 2011
From: khaledhosny at eglug.org (Khaled Hosny)
Date: Sun, 25 Sep 2011 16:13:39 +0200
Subject: [Dev-luatex] Libhyphen
In-Reply-To: <4E7F30FA.6090201@arcor.de>
References: <20110915205653.GA21585@khaled-laptop>
	<4E72E7BE.8000704@elvenkind.com> <4E791AF8.3030403@arcor.de>
	<20110921092531.GA1950@khaled-laptop> <4E7A0F3A.1060404@arcor.de>
	<20110921165942.GA5399@khaled-laptop> <4E7B7082.7090009@arcor.de>
	<4E7BAF3C.6010208@arcor.de> <20110924134341.GD2412@khaled-laptop>
	<4E7F30FA.6090201@arcor.de>
Message-ID: <20110925141339.GA12031@khaled-laptop>

On Sun, Sep 25, 2011 at 03:47:38PM +0200, Stephan Hennig wrote:
> schrieb Khaled Hosny:
> 
> > But there is also contextual features with more complex rules in
> > which the font embeds all the knowledge about the context in which
> > features are applied, and this is used for less straight forward
> > cases where the context are font dependant rather than defined by
> > script orthography.
> 
> Thank you for the explanation!  Any buzz words regarding these
> techniques I can throw into a search engine?

OpenType contextual substitution and reverse chaining contextual
substitution.

Regards,
 Khaled

-- 
 Khaled Hosny
 Egyptian
 Arab

