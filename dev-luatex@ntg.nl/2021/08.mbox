From luigi.scarso at gmail.com  Mon Aug  2 17:55:18 2021
From: luigi.scarso at gmail.com (luigi scarso)
Date: Mon, 2 Aug 2021 17:55:18 +0200
Subject: [Dev-luatex] LuaTeX doesn't discard empty paragraphs when
 textdir is used
In-Reply-To: <20210802155233.xc6g7zf56ls5mbrp@beeblebrox>
References: <20210621145436.ek3h2qlghjfk2heh@beeblebrox>
 <CAG5iGsAf8-=4q1kB6VLHdPZ9BCdjbg0mxxBj_qCt2UsmxT6dLQ@mail.gmail.com>
 <20210802155233.xc6g7zf56ls5mbrp@beeblebrox>
Message-ID: <CAG5iGsA5iMCMb-0R-99TkzSygeOidfxXfE-S+8Q7bgUO08iYSw@mail.gmail.com>

On Mon, Aug 2, 2021 at 5:52 PM Marcel Fabian KrÃ¼ger <tex at 2krueger.de> wrote:

> On Thu, Jul 29, 2021 at 09:54:20AM +0200, luigi scarso wrote:
> > On Mon, Jun 21, 2021 at 5:03 PM Marcel KrÃ¼ger <tex at 2krueger.de> wrote:
> >
> > > Hi,
> > >
> > > consider the following plain LuaTeX document:
> > >
> > > \textdir TRT
> > > \noindent\par
> > > \bye
> > >
> > > without the `\textdir TRT` line or with `\textdir TLT`, this would lead
> > > to "warning  (pdf backend): no pages of output.", but with the non
> > > default "\textdir", it creates an empty (except for the page number)
> page
> > > instead.
> > >
> > > This can be avoided by setting \pardir too:
> > >
> > > \textdir TRT\pardir TRT
> > > \noindent\par
> > > \bye
> > >
> > > again produces no output, but adding a group around it reintroduces the
> > > issue:
> > >
> > > \begingroup
> > > \textdir TRT\pardir TRT
> > > \noindent\par
> > > \endgroup
> > > \bye
> > >
> > > leads to an empty page.
> > >
> > > Of course similar things happen not only for otherwise empty documents:
> > > Instead of empty paragraphs disappearing, they add empty lines.
> > >
> > > Together, this is not only inconsistent with other engines which always
> > > discard empty paragraphs, but also leads to hard to predict behavior
> > > (especially for users who are not familiar with the implementation of
> > > LuaTeX's directional system), so I think it would be great if LuaTeX
> > > could always remove such empty paragraphs.
> > >
> > >
> > (sorry for the delay)
> > Do you have  a patch to propose  ?
>
> I attached a patch which adds a \emptyparmode parameter with three
> possible states:
>
>   - 0: Never ignore empty paragraphs. Not sure if this is useful, but it
>     seemed like an obvious thing to add.
>   - 1: The default: A paragraph is empty is it contains at most one
>     node. This is the old behavior.
>   - 2: A paragraph is empty if it only contains local_par and dir nodes.
>     This is what I would consider the expected behavior.
>
> Best regards,
> Marcel
>

Thank you !
-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20210802/5ac26464/attachment.htm>

From tex at 2krueger.de  Mon Aug  2 17:52:33 2021
From: tex at 2krueger.de (Marcel Fabian =?utf-8?Q?Kr=C3=BCger?=)
Date: Mon, 2 Aug 2021 17:52:33 +0200
Subject: [Dev-luatex] LuaTeX doesn't discard empty paragraphs when
 textdir is used
In-Reply-To: <CAG5iGsAf8-=4q1kB6VLHdPZ9BCdjbg0mxxBj_qCt2UsmxT6dLQ@mail.gmail.com>
References: <20210621145436.ek3h2qlghjfk2heh@beeblebrox>
 <CAG5iGsAf8-=4q1kB6VLHdPZ9BCdjbg0mxxBj_qCt2UsmxT6dLQ@mail.gmail.com>
Message-ID: <20210802155233.xc6g7zf56ls5mbrp@beeblebrox>

On Thu, Jul 29, 2021 at 09:54:20AM +0200, luigi scarso wrote:
> On Mon, Jun 21, 2021 at 5:03 PM Marcel KrÃ¼ger <tex at 2krueger.de> wrote:
> 
> > Hi,
> >
> > consider the following plain LuaTeX document:
> >
> > \textdir TRT
> > \noindent\par
> > \bye
> >
> > without the `\textdir TRT` line or with `\textdir TLT`, this would lead
> > to "warning  (pdf backend): no pages of output.", but with the non
> > default "\textdir", it creates an empty (except for the page number) page
> > instead.
> >
> > This can be avoided by setting \pardir too:
> >
> > \textdir TRT\pardir TRT
> > \noindent\par
> > \bye
> >
> > again produces no output, but adding a group around it reintroduces the
> > issue:
> >
> > \begingroup
> > \textdir TRT\pardir TRT
> > \noindent\par
> > \endgroup
> > \bye
> >
> > leads to an empty page.
> >
> > Of course similar things happen not only for otherwise empty documents:
> > Instead of empty paragraphs disappearing, they add empty lines.
> >
> > Together, this is not only inconsistent with other engines which always
> > discard empty paragraphs, but also leads to hard to predict behavior
> > (especially for users who are not familiar with the implementation of
> > LuaTeX's directional system), so I think it would be great if LuaTeX
> > could always remove such empty paragraphs.
> >
> >
> (sorry for the delay)
> Do you have  a patch to propose  ?

I attached a patch which adds a \emptyparmode parameter with three
possible states:

  - 0: Never ignore empty paragraphs. Not sure if this is useful, but it
    seemed like an obvious thing to add.
  - 1: The default: A paragraph is empty is it contains at most one
    node. This is the old behavior.
  - 2: A paragraph is empty if it only contains local_par and dir nodes.
    This is what I would consider the expected behavior.

Best regards,
Marcel
-------------- next part --------------
>From 959ea0d0ae5a9a8d96dc5ec0a5c65a5912be3f39 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marcel=20Fabian=20Kr=C3=BCger?= <tex at 2krueger.de>
Date: Mon, 2 Aug 2021 17:43:00 +0200
Subject: [PATCH 2/2] Add parameter to control which paragraphs are empty

---
 source/texk/web2c/luatexdir/tex/commands.c    |  1 +
 source/texk/web2c/luatexdir/tex/equivalents.h |  4 ++-
 source/texk/web2c/luatexdir/tex/maincontrol.c | 34 +++++++++++++++++--
 3 files changed, 35 insertions(+), 4 deletions(-)

diff --git a/source/texk/web2c/luatexdir/tex/commands.c b/source/texk/web2c/luatexdir/tex/commands.c
index 576306b35..48c95800f 100644
--- a/source/texk/web2c/luatexdir/tex/commands.c
+++ b/source/texk/web2c/luatexdir/tex/commands.c
@@ -178,6 +178,7 @@ void initialize_commands(void)
     primitive_luatex("glyphdimensionsmode", assign_int_cmd, int_base + glyph_dimensions_code, int_base);
     primitive_luatex("mathdefaultsmode", assign_int_cmd, int_base + math_defaults_mode_code, int_base);
     primitive_luatex("discretionaryligaturemode", assign_int_cmd, int_base + discretionary_ligature_mode_code, int_base);
+    primitive_luatex("emptyparmode", assign_int_cmd, int_base + empty_par_mode_code, int_base);
 
     /*tex
 
diff --git a/source/texk/web2c/luatexdir/tex/equivalents.h b/source/texk/web2c/luatexdir/tex/equivalents.h
index 459c2cb01..8d4718183 100644
--- a/source/texk/web2c/luatexdir/tex/equivalents.h
+++ b/source/texk/web2c/luatexdir/tex/equivalents.h
@@ -311,8 +311,9 @@ the |number_regs| \.{\\dimen} registers.
 #  define glyph_dimensions_code 118
 #  define math_defaults_mode_code 119                                   /* > 0 : latex preferences */
 #  define discretionary_ligature_mode_code 120
+#  define empty_par_mode_code 121
 
-#  define math_option_code 121
+#  define math_option_code 122
 
 #  define mathoption_int_base_code (math_option_code+1)                 /* one reserve */
 #  define mathoption_int_last_code (mathoption_int_base_code+8)
@@ -807,6 +808,7 @@ extern halfword last_cs_name;
 #define compound_hyphen_mode_par           int_par(compound_hyphen_mode_code)
 #define break_after_dir_mode_par           int_par(break_after_dir_mode_code)
 #define exception_penalty_par              int_par(exception_penalty_code)
+#define empty_par_mode_par                 int_par(empty_par_mode_code)
 
 #define cur_lang_par                       int_par(cur_lang_code)
 #define cur_font_par                       equiv(cur_font_loc)
diff --git a/source/texk/web2c/luatexdir/tex/maincontrol.c b/source/texk/web2c/luatexdir/tex/maincontrol.c
index 22f601ba2..bfec24294 100644
--- a/source/texk/web2c/luatexdir/tex/maincontrol.c
+++ b/source/texk/web2c/luatexdir/tex/maincontrol.c
@@ -1876,10 +1876,37 @@ displays.
 void end_graf(int line_break_context)
 {
     if (mode == hmode) {
-        if ((head == tail) || (vlink(head) == tail)) {
-            if (vlink(head) == tail)
-                flush_node(vlink(head));
+        boolean ignore;
+        if (empty_par_mode_par <= 0)
+            ignore = false;
+        else if (empty_par_mode_par == 1)
+            ignore = head == tail || vlink(head) == tail;
+        else {
+            ignore = true;
+            if (head != tail) {
+                halfword cur = head;
+                do {
+                    cur = vlink(cur);
+                    halfword t = type(cur);
+                    if (t != local_par_node && t != dir_node) {
+                        ignore = false;
+                        break;
+                    }
+                } while(cur != tail);
+            }
+        }
+        if (ignore) {
             /*tex |null| paragraphs are ignored, all contain a |local_paragraph| node */
+            if (head != tail) {
+                halfword cur = vlink(head);
+                while (true) {
+                    halfword next = vlink(cur);
+                    flush_node(cur);
+                    if (cur == tail)
+                        break;
+                    cur = next;
+                }
+            }
             pop_nest();
         } else {
             line_break(false, line_break_context);
@@ -4231,6 +4258,7 @@ void initialize(void)
         px_dimen_par = one_bp;
         math_eqno_gap_step_par = 1000 ;
         math_flatten_mode_par = 1; /* ord */
+        empty_par_mode_par = 1;
         cs_text(frozen_protection) = maketexstring("inaccessible");
         format_ident = maketexstring(" (INITEX)");
         cs_text(end_write) = maketexstring("endwrite");
-- 
2.32.0

-------------- next part --------------
>From 959ea0d0ae5a9a8d96dc5ec0a5c65a5912be3f39 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marcel=20Fabian=20Kr=C3=BCger?= <tex at 2krueger.de>
Date: Mon, 2 Aug 2021 17:43:00 +0200
Subject: [PATCH 2/2] Add parameter to control which paragraphs are empty

---
 source/texk/web2c/luatexdir/tex/commands.c    |  1 +
 source/texk/web2c/luatexdir/tex/equivalents.h |  4 ++-
 source/texk/web2c/luatexdir/tex/maincontrol.c | 34 +++++++++++++++++--
 3 files changed, 35 insertions(+), 4 deletions(-)

diff --git a/source/texk/web2c/luatexdir/tex/commands.c b/source/texk/web2c/luatexdir/tex/commands.c
index 576306b35..48c95800f 100644
--- a/source/texk/web2c/luatexdir/tex/commands.c
+++ b/source/texk/web2c/luatexdir/tex/commands.c
@@ -178,6 +178,7 @@ void initialize_commands(void)
     primitive_luatex("glyphdimensionsmode", assign_int_cmd, int_base + glyph_dimensions_code, int_base);
     primitive_luatex("mathdefaultsmode", assign_int_cmd, int_base + math_defaults_mode_code, int_base);
     primitive_luatex("discretionaryligaturemode", assign_int_cmd, int_base + discretionary_ligature_mode_code, int_base);
+    primitive_luatex("emptyparmode", assign_int_cmd, int_base + empty_par_mode_code, int_base);
 
     /*tex
 
diff --git a/source/texk/web2c/luatexdir/tex/equivalents.h b/source/texk/web2c/luatexdir/tex/equivalents.h
index 459c2cb01..8d4718183 100644
--- a/source/texk/web2c/luatexdir/tex/equivalents.h
+++ b/source/texk/web2c/luatexdir/tex/equivalents.h
@@ -311,8 +311,9 @@ the |number_regs| \.{\\dimen} registers.
 #  define glyph_dimensions_code 118
 #  define math_defaults_mode_code 119                                   /* > 0 : latex preferences */
 #  define discretionary_ligature_mode_code 120
+#  define empty_par_mode_code 121
 
-#  define math_option_code 121
+#  define math_option_code 122
 
 #  define mathoption_int_base_code (math_option_code+1)                 /* one reserve */
 #  define mathoption_int_last_code (mathoption_int_base_code+8)
@@ -807,6 +808,7 @@ extern halfword last_cs_name;
 #define compound_hyphen_mode_par           int_par(compound_hyphen_mode_code)
 #define break_after_dir_mode_par           int_par(break_after_dir_mode_code)
 #define exception_penalty_par              int_par(exception_penalty_code)
+#define empty_par_mode_par                 int_par(empty_par_mode_code)
 
 #define cur_lang_par                       int_par(cur_lang_code)
 #define cur_font_par                       equiv(cur_font_loc)
diff --git a/source/texk/web2c/luatexdir/tex/maincontrol.c b/source/texk/web2c/luatexdir/tex/maincontrol.c
index 22f601ba2..bfec24294 100644
--- a/source/texk/web2c/luatexdir/tex/maincontrol.c
+++ b/source/texk/web2c/luatexdir/tex/maincontrol.c
@@ -1876,10 +1876,37 @@ displays.
 void end_graf(int line_break_context)
 {
     if (mode == hmode) {
-        if ((head == tail) || (vlink(head) == tail)) {
-            if (vlink(head) == tail)
-                flush_node(vlink(head));
+        boolean ignore;
+        if (empty_par_mode_par <= 0)
+            ignore = false;
+        else if (empty_par_mode_par == 1)
+            ignore = head == tail || vlink(head) == tail;
+        else {
+            ignore = true;
+            if (head != tail) {
+                halfword cur = head;
+                do {
+                    cur = vlink(cur);
+                    halfword t = type(cur);
+                    if (t != local_par_node && t != dir_node) {
+                        ignore = false;
+                        break;
+                    }
+                } while(cur != tail);
+            }
+        }
+        if (ignore) {
             /*tex |null| paragraphs are ignored, all contain a |local_paragraph| node */
+            if (head != tail) {
+                halfword cur = vlink(head);
+                while (true) {
+                    halfword next = vlink(cur);
+                    flush_node(cur);
+                    if (cur == tail)
+                        break;
+                    cur = next;
+                }
+            }
             pop_nest();
         } else {
             line_break(false, line_break_context);
@@ -4231,6 +4258,7 @@ void initialize(void)
         px_dimen_par = one_bp;
         math_eqno_gap_step_par = 1000 ;
         math_flatten_mode_par = 1; /* ord */
+        empty_par_mode_par = 1;
         cs_text(frozen_protection) = maketexstring("inaccessible");
         format_ident = maketexstring(" (INITEX)");
         cs_text(end_write) = maketexstring("endwrite");
-- 
2.32.0


From tex at 2krueger.de  Mon Aug  2 18:54:27 2021
From: tex at 2krueger.de (Marcel Fabian =?utf-8?Q?Kr=C3=BCger?=)
Date: Mon, 2 Aug 2021 18:54:27 +0200
Subject: [Dev-luatex] LuaTeX doesn't discard empty paragraphs when
 textdir is used
In-Reply-To: <CAG5iGsA5iMCMb-0R-99TkzSygeOidfxXfE-S+8Q7bgUO08iYSw@mail.gmail.com>
References: <20210621145436.ek3h2qlghjfk2heh@beeblebrox>
 <CAG5iGsAf8-=4q1kB6VLHdPZ9BCdjbg0mxxBj_qCt2UsmxT6dLQ@mail.gmail.com>
 <20210802155233.xc6g7zf56ls5mbrp@beeblebrox>
 <CAG5iGsA5iMCMb-0R-99TkzSygeOidfxXfE-S+8Q7bgUO08iYSw@mail.gmail.com>
Message-ID: <20210802165427.cbi4xfqbiws2hr6s@beeblebrox>

On Mon, Aug 02, 2021 at 05:55:18PM +0200, luigi scarso wrote:
> On Mon, Aug 2, 2021 at 5:52 PM Marcel Fabian KrÃ¼ger <tex at 2krueger.de> wrote:
> > I attached a patch which adds a \emptyparmode parameter with three
> > possible states:
> >
> >   - 0: Never ignore empty paragraphs. Not sure if this is useful, but it
> >     seemed like an obvious thing to add.
> >   - 1: The default: A paragraph is empty is it contains at most one
> >     node. This is the old behavior.
> >   - 2: A paragraph is empty if it only contains local_par and dir nodes.
> >     This is what I would consider the expected behavior.
> >
> > Best regards,
> > Marcel
> >

I just noticed that my repo wasn't up-to-date, so here is the patch
again after resolving a conflict with the partoken change.

Marcel
-------------- next part --------------
>From 732e61176ddf85430777b042f99106daa7587de1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marcel=20Fabian=20Kr=C3=BCger?= <tex at 2krueger.de>
Date: Mon, 2 Aug 2021 17:43:00 +0200
Subject: [PATCH 2/2] Add parameter to control which paragraphs are empty

---
 source/texk/web2c/luatexdir/tex/commands.c    |  1 +
 source/texk/web2c/luatexdir/tex/equivalents.h |  4 ++-
 source/texk/web2c/luatexdir/tex/maincontrol.c | 34 +++++++++++++++++--
 3 files changed, 35 insertions(+), 4 deletions(-)

diff --git a/source/texk/web2c/luatexdir/tex/commands.c b/source/texk/web2c/luatexdir/tex/commands.c
index e9c0ad888..e68325f9e 100644
--- a/source/texk/web2c/luatexdir/tex/commands.c
+++ b/source/texk/web2c/luatexdir/tex/commands.c
@@ -179,6 +179,7 @@ void initialize_commands(void)
     primitive_luatex("mathdefaultsmode", assign_int_cmd, int_base + math_defaults_mode_code, int_base);
     primitive_luatex("discretionaryligaturemode", assign_int_cmd, int_base + discretionary_ligature_mode_code, int_base);
     primitive_etex("partokencontext", assign_int_cmd, int_base + partoken_context_code, int_base);
+    primitive_luatex("emptyparmode", assign_int_cmd, int_base + empty_par_mode_code, int_base);
 
     /*tex
 
diff --git a/source/texk/web2c/luatexdir/tex/equivalents.h b/source/texk/web2c/luatexdir/tex/equivalents.h
index 8f6dc2f73..964756c0e 100644
--- a/source/texk/web2c/luatexdir/tex/equivalents.h
+++ b/source/texk/web2c/luatexdir/tex/equivalents.h
@@ -312,8 +312,9 @@ the |number_regs| \.{\\dimen} registers.
 #  define math_defaults_mode_code 119                                   /* > 0 : latex preferences */
 #  define discretionary_ligature_mode_code 120
 #  define partoken_context_code 121
+#  define empty_par_mode_code 122
 
-#  define math_option_code 122
+#  define math_option_code 123
 
 #  define mathoption_int_base_code (math_option_code+1)                 /* one reserve */
 #  define mathoption_int_last_code (mathoption_int_base_code+8)
@@ -808,6 +809,7 @@ extern halfword last_cs_name;
 #define compound_hyphen_mode_par           int_par(compound_hyphen_mode_code)
 #define break_after_dir_mode_par           int_par(break_after_dir_mode_code)
 #define exception_penalty_par              int_par(exception_penalty_code)
+#define empty_par_mode_par                 int_par(empty_par_mode_code)
 
 #define cur_lang_par                       int_par(cur_lang_code)
 #define cur_font_par                       equiv(cur_font_loc)
diff --git a/source/texk/web2c/luatexdir/tex/maincontrol.c b/source/texk/web2c/luatexdir/tex/maincontrol.c
index 52109e628..47eb95cf8 100644
--- a/source/texk/web2c/luatexdir/tex/maincontrol.c
+++ b/source/texk/web2c/luatexdir/tex/maincontrol.c
@@ -1945,10 +1945,37 @@ displays.
 void end_graf(int line_break_context)
 {
     if (mode == hmode) {
-        if ((head == tail) || (vlink(head) == tail)) {
-            if (vlink(head) == tail)
-                flush_node(vlink(head));
+        boolean ignore;
+        if (empty_par_mode_par <= 0)
+            ignore = false;
+        else if (empty_par_mode_par == 1)
+            ignore = head == tail || vlink(head) == tail;
+        else {
+            ignore = true;
+            if (head != tail) {
+                halfword cur = head;
+                do {
+                    cur = vlink(cur);
+                    halfword t = type(cur);
+                    if (t != local_par_node && t != dir_node) {
+                        ignore = false;
+                        break;
+                    }
+                } while(cur != tail);
+            }
+        }
+        if (ignore) {
             /*tex |null| paragraphs are ignored, all contain a |local_paragraph| node */
+            if (head != tail) {
+                halfword cur = vlink(head);
+                while (true) {
+                    halfword next = vlink(cur);
+                    flush_node(cur);
+                    if (cur == tail)
+                        break;
+                    cur = next;
+                }
+            }
             pop_nest();
         } else {
             line_break(false, line_break_context);
@@ -4300,6 +4327,7 @@ void initialize(void)
         px_dimen_par = one_bp;
         math_eqno_gap_step_par = 1000 ;
         math_flatten_mode_par = 1; /* ord */
+        empty_par_mode_par = 1;
         cs_text(frozen_protection) = maketexstring("inaccessible");
         format_ident = maketexstring(" (INITEX)");
         cs_text(end_write) = maketexstring("endwrite");
-- 
2.32.0

-------------- next part --------------
>From 732e61176ddf85430777b042f99106daa7587de1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marcel=20Fabian=20Kr=C3=BCger?= <tex at 2krueger.de>
Date: Mon, 2 Aug 2021 17:43:00 +0200
Subject: [PATCH 2/2] Add parameter to control which paragraphs are empty

---
 source/texk/web2c/luatexdir/tex/commands.c    |  1 +
 source/texk/web2c/luatexdir/tex/equivalents.h |  4 ++-
 source/texk/web2c/luatexdir/tex/maincontrol.c | 34 +++++++++++++++++--
 3 files changed, 35 insertions(+), 4 deletions(-)

diff --git a/source/texk/web2c/luatexdir/tex/commands.c b/source/texk/web2c/luatexdir/tex/commands.c
index e9c0ad888..e68325f9e 100644
--- a/source/texk/web2c/luatexdir/tex/commands.c
+++ b/source/texk/web2c/luatexdir/tex/commands.c
@@ -179,6 +179,7 @@ void initialize_commands(void)
     primitive_luatex("mathdefaultsmode", assign_int_cmd, int_base + math_defaults_mode_code, int_base);
     primitive_luatex("discretionaryligaturemode", assign_int_cmd, int_base + discretionary_ligature_mode_code, int_base);
     primitive_etex("partokencontext", assign_int_cmd, int_base + partoken_context_code, int_base);
+    primitive_luatex("emptyparmode", assign_int_cmd, int_base + empty_par_mode_code, int_base);
 
     /*tex
 
diff --git a/source/texk/web2c/luatexdir/tex/equivalents.h b/source/texk/web2c/luatexdir/tex/equivalents.h
index 8f6dc2f73..964756c0e 100644
--- a/source/texk/web2c/luatexdir/tex/equivalents.h
+++ b/source/texk/web2c/luatexdir/tex/equivalents.h
@@ -312,8 +312,9 @@ the |number_regs| \.{\\dimen} registers.
 #  define math_defaults_mode_code 119                                   /* > 0 : latex preferences */
 #  define discretionary_ligature_mode_code 120
 #  define partoken_context_code 121
+#  define empty_par_mode_code 122
 
-#  define math_option_code 122
+#  define math_option_code 123
 
 #  define mathoption_int_base_code (math_option_code+1)                 /* one reserve */
 #  define mathoption_int_last_code (mathoption_int_base_code+8)
@@ -808,6 +809,7 @@ extern halfword last_cs_name;
 #define compound_hyphen_mode_par           int_par(compound_hyphen_mode_code)
 #define break_after_dir_mode_par           int_par(break_after_dir_mode_code)
 #define exception_penalty_par              int_par(exception_penalty_code)
+#define empty_par_mode_par                 int_par(empty_par_mode_code)
 
 #define cur_lang_par                       int_par(cur_lang_code)
 #define cur_font_par                       equiv(cur_font_loc)
diff --git a/source/texk/web2c/luatexdir/tex/maincontrol.c b/source/texk/web2c/luatexdir/tex/maincontrol.c
index 52109e628..47eb95cf8 100644
--- a/source/texk/web2c/luatexdir/tex/maincontrol.c
+++ b/source/texk/web2c/luatexdir/tex/maincontrol.c
@@ -1945,10 +1945,37 @@ displays.
 void end_graf(int line_break_context)
 {
     if (mode == hmode) {
-        if ((head == tail) || (vlink(head) == tail)) {
-            if (vlink(head) == tail)
-                flush_node(vlink(head));
+        boolean ignore;
+        if (empty_par_mode_par <= 0)
+            ignore = false;
+        else if (empty_par_mode_par == 1)
+            ignore = head == tail || vlink(head) == tail;
+        else {
+            ignore = true;
+            if (head != tail) {
+                halfword cur = head;
+                do {
+                    cur = vlink(cur);
+                    halfword t = type(cur);
+                    if (t != local_par_node && t != dir_node) {
+                        ignore = false;
+                        break;
+                    }
+                } while(cur != tail);
+            }
+        }
+        if (ignore) {
             /*tex |null| paragraphs are ignored, all contain a |local_paragraph| node */
+            if (head != tail) {
+                halfword cur = vlink(head);
+                while (true) {
+                    halfword next = vlink(cur);
+                    flush_node(cur);
+                    if (cur == tail)
+                        break;
+                    cur = next;
+                }
+            }
             pop_nest();
         } else {
             line_break(false, line_break_context);
@@ -4300,6 +4327,7 @@ void initialize(void)
         px_dimen_par = one_bp;
         math_eqno_gap_step_par = 1000 ;
         math_flatten_mode_par = 1; /* ord */
+        empty_par_mode_par = 1;
         cs_text(frozen_protection) = maketexstring("inaccessible");
         format_ident = maketexstring(" (INITEX)");
         cs_text(end_write) = maketexstring("endwrite");
-- 
2.32.0


From tex at 2krueger.de  Mon Aug  2 18:56:28 2021
From: tex at 2krueger.de (Marcel Fabian =?utf-8?Q?Kr=C3=BCger?=)
Date: Mon, 2 Aug 2021 18:56:28 +0200
Subject: [Dev-luatex] [PATCH] luaharfbuzz: Provide interface for variable
 fonts
Message-ID: <20210802165628.iwebq7e64nqfv6aw@beeblebrox>

Hi,

please consider the attached patch for luahbtex. It adds a Lua interface
for HarfBuzz's functions around variable fonts.

It is an adoption of recent upstream luaharfbuzz changes with additional
LuaJIT support. While corresponding busted tests are included too, the
font needed to actually run these tests has not been added to the fonts
directory since sending binary files in diffs via email is problematic
and I don't think that anyone is running these tests from the LuaTeX
repo anyway.

Best regards,
Marcel
-------------- next part --------------
>From d43d2306d14414810240c4acc6f5980400ad1c19 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marcel=20Fabian=20Kr=C3=BCger?= <tex at 2krueger.de>
Date: Mon, 2 Aug 2021 03:01:24 +0200
Subject: [PATCH 1/2] Add interface for font variations in luaharfbuzz

---
 source/texk/web2c/Makefile.in                 |  39 +++-
 source/texk/web2c/luatexdir/am/luaharfbuzz.am |   3 +-
 .../luaharfbuzz/luaharfbuzz-1.1.0-1.rockspec  |   1 +
 .../luaharfbuzz/luaharfbuzz-scm-1.rockspec    |   1 +
 .../luaharfbuzz/spec/harfbuzz_spec.lua        | 116 ++++++++++-
 .../luaharfbuzz/src/luaharfbuzz/face.c        | 195 ++++++++++++++++++
 .../luaharfbuzz/src/luaharfbuzz/font.c        |  61 ++++++
 .../luaharfbuzz/src/luaharfbuzz/luaharfbuzz.c |   3 +
 .../luaharfbuzz/src/luaharfbuzz/luaharfbuzz.h |   2 +
 .../luaharfbuzz/src/luaharfbuzz/variation.c   |  82 ++++++++
 10 files changed, 498 insertions(+), 5 deletions(-)
 create mode 100644 source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c

diff --git a/source/texk/web2c/Makefile.in b/source/texk/web2c/Makefile.in
index 0542d8baf..b3c0de885 100644
--- a/source/texk/web2c/Makefile.in
+++ b/source/texk/web2c/Makefile.in
@@ -595,7 +595,8 @@ am_libluaharfbuzz_a_OBJECTS = luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbu
 	luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-ot.$(OBJEXT) \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-script.$(OBJEXT) \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-tag.$(OBJEXT) \
-	luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-unicode.$(OBJEXT)
+	luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-unicode.$(OBJEXT) \
+	luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-variation.$(OBJEXT)
 libluaharfbuzz_a_OBJECTS = $(am_libluaharfbuzz_a_OBJECTS)
 libluahbtexspecific_a_AR = $(AR) $(ARFLAGS)
 libluahbtexspecific_a_LIBADD =
@@ -620,7 +621,8 @@ am__objects_3 = luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-blob.$
 	luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-ot.$(OBJEXT) \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-script.$(OBJEXT) \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-tag.$(OBJEXT) \
-	luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-unicode.$(OBJEXT)
+	luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-unicode.$(OBJEXT) \
+	luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-variation.$(OBJEXT)
 am_libluajitharfbuzz_a_OBJECTS = $(am__objects_3)
 libluajitharfbuzz_a_OBJECTS = $(am_libluajitharfbuzz_a_OBJECTS)
 libluajithbtexspecific_a_AR = $(AR) $(ARFLAGS)
@@ -1891,6 +1893,7 @@ am__depfiles_remade = ./$(DEPDIR)/aleph-aleph-pool.Po \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluaharfbuzz_a-script.Po \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluaharfbuzz_a-tag.Po \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluaharfbuzz_a-unicode.Po \
+	luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluaharfbuzz_a-variation.Po \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluajitharfbuzz_a-blob.Po \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluajitharfbuzz_a-buffer.Po \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluajitharfbuzz_a-class_utils.Po \
@@ -1904,6 +1907,7 @@ am__depfiles_remade = ./$(DEPDIR)/aleph-aleph-pool.Po \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluajitharfbuzz_a-script.Po \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluajitharfbuzz_a-tag.Po \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluajitharfbuzz_a-unicode.Po \
+	luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluajitharfbuzz_a-variation.Po \
 	luatexdir/luamd5/$(DEPDIR)/libluajitmisc_a-md5.Po \
 	luatexdir/luamd5/$(DEPDIR)/libluajitmisc_a-md5lib.Po \
 	luatexdir/luamd5/$(DEPDIR)/libluamisc_a-md5.Po \
@@ -4725,7 +4729,8 @@ libluaharfbuzz_a_SOURCES = \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/script.c \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/tag.c \
-	luatexdir/luaharfbuzz/src/luaharfbuzz/unicode.c
+	luatexdir/luaharfbuzz/src/luaharfbuzz/unicode.c \
+	luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c
 
 libluajitharfbuzz_a_SOURCES = $(libluaharfbuzz_a_SOURCES)
 
@@ -8728,6 +8733,20 @@ luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-unicode.obj: luatexdir/lu
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(AM_V_CC at am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libluaharfbuzz_a_CPPFLAGS) $(CPPFLAGS) $(libluaharfbuzz_a_CFLAGS) $(CFLAGS) -c -o luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-unicode.obj `if test -f 'luatexdir/luaharfbuzz/src/luaharfbuzz/unicode.c'; then $(CYGPATH_W) 'luatexdir/luaharfbuzz/src/luaharfbuzz/unicode.c'; else $(CYGPATH_W) '$(srcdir)/luatexdir/luaharfbuzz/src/luaharfbuzz/unicode.c'; fi`
 
+luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-variation.o: luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c
+ at am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libluaharfbuzz_a_CPPFLAGS) $(CPPFLAGS) $(libluaharfbuzz_a_CFLAGS) $(CFLAGS) -MT luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-variation.o -MD -MP -MF luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluaharfbuzz_a-variation.Tpo -c -o luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-variation.o `test -f 'luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c' || echo '$(srcdir)/'`luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c
+ at am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluaharfbuzz_a-variation.Tpo luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluaharfbuzz_a-variation.Po
+ at AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c' object='luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-variation.o' libtool=no @AMDEPBACKSLASH@
+ at AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+ at am__fastdepCC_FALSE@	$(AM_V_CC at am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libluaharfbuzz_a_CPPFLAGS) $(CPPFLAGS) $(libluaharfbuzz_a_CFLAGS) $(CFLAGS) -c -o luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-variation.o `test -f 'luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c' || echo '$(srcdir)/'`luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c
+
+luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-variation.obj: luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c
+ at am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libluaharfbuzz_a_CPPFLAGS) $(CPPFLAGS) $(libluaharfbuzz_a_CFLAGS) $(CFLAGS) -MT luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-variation.obj -MD -MP -MF luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluaharfbuzz_a-variation.Tpo -c -o luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-variation.obj `if test -f 'luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c'; then $(CYGPATH_W) 'luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c'; else $(CYGPATH_W) '$(srcdir)/luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c'; fi`
+ at am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluaharfbuzz_a-variation.Tpo luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluaharfbuzz_a-variation.Po
+ at AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c' object='luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-variation.obj' libtool=no @AMDEPBACKSLASH@
+ at AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+ at am__fastdepCC_FALSE@	$(AM_V_CC at am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libluaharfbuzz_a_CPPFLAGS) $(CPPFLAGS) $(libluaharfbuzz_a_CFLAGS) $(CFLAGS) -c -o luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-variation.obj `if test -f 'luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c'; then $(CYGPATH_W) 'luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c'; else $(CYGPATH_W) '$(srcdir)/luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c'; fi`
+
 libluahbtexspecific_a-utils-hb.o: utils-hb.c
 @am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libluahbtexspecific_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libluahbtexspecific_a-utils-hb.o -MD -MP -MF $(DEPDIR)/libluahbtexspecific_a-utils-hb.Tpo -c -o libluahbtexspecific_a-utils-hb.o `test -f 'utils-hb.c' || echo '$(srcdir)/'`utils-hb.c
 @am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/libluahbtexspecific_a-utils-hb.Tpo $(DEPDIR)/libluahbtexspecific_a-utils-hb.Po
@@ -8966,6 +8985,20 @@ luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-unicode.obj: luatexdir
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(AM_V_CC at am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libluajitharfbuzz_a_CPPFLAGS) $(CPPFLAGS) $(libluajitharfbuzz_a_CFLAGS) $(CFLAGS) -c -o luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-unicode.obj `if test -f 'luatexdir/luaharfbuzz/src/luaharfbuzz/unicode.c'; then $(CYGPATH_W) 'luatexdir/luaharfbuzz/src/luaharfbuzz/unicode.c'; else $(CYGPATH_W) '$(srcdir)/luatexdir/luaharfbuzz/src/luaharfbuzz/unicode.c'; fi`
 
+luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-variation.o: luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c
+ at am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libluajitharfbuzz_a_CPPFLAGS) $(CPPFLAGS) $(libluajitharfbuzz_a_CFLAGS) $(CFLAGS) -MT luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-variation.o -MD -MP -MF luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluajitharfbuzz_a-variation.Tpo -c -o luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-variation.o `test -f 'luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c' || echo '$(srcdir)/'`luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c
+ at am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluajitharfbuzz_a-variation.Tpo luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluajitharfbuzz_a-variation.Po
+ at AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c' object='luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-variation.o' libtool=no @AMDEPBACKSLASH@
+ at AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+ at am__fastdepCC_FALSE@	$(AM_V_CC at am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libluajitharfbuzz_a_CPPFLAGS) $(CPPFLAGS) $(libluajitharfbuzz_a_CFLAGS) $(CFLAGS) -c -o luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-variation.o `test -f 'luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c' || echo '$(srcdir)/'`luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c
+
+luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-variation.obj: luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c
+ at am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libluajitharfbuzz_a_CPPFLAGS) $(CPPFLAGS) $(libluajitharfbuzz_a_CFLAGS) $(CFLAGS) -MT luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-variation.obj -MD -MP -MF luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluajitharfbuzz_a-variation.Tpo -c -o luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-variation.obj `if test -f 'luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c'; then $(CYGPATH_W) 'luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c'; else $(CYGPATH_W) '$(srcdir)/luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c'; fi`
+ at am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluajitharfbuzz_a-variation.Tpo luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluajitharfbuzz_a-variation.Po
+ at AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c' object='luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-variation.obj' libtool=no @AMDEPBACKSLASH@
+ at AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+ at am__fastdepCC_FALSE@	$(AM_V_CC at am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libluajitharfbuzz_a_CPPFLAGS) $(CPPFLAGS) $(libluajitharfbuzz_a_CFLAGS) $(CFLAGS) -c -o luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-variation.obj `if test -f 'luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c'; then $(CYGPATH_W) 'luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c'; else $(CYGPATH_W) '$(srcdir)/luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c'; fi`
+
 libluajithbtexspecific_a-utils-hb.o: utils-hb.c
 @am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libluajithbtexspecific_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libluajithbtexspecific_a-utils-hb.o -MD -MP -MF $(DEPDIR)/libluajithbtexspecific_a-utils-hb.Tpo -c -o libluajithbtexspecific_a-utils-hb.o `test -f 'utils-hb.c' || echo '$(srcdir)/'`utils-hb.c
 @am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/libluajithbtexspecific_a-utils-hb.Tpo $(DEPDIR)/libluajithbtexspecific_a-utils-hb.Po
diff --git a/source/texk/web2c/luatexdir/am/luaharfbuzz.am b/source/texk/web2c/luatexdir/am/luaharfbuzz.am
index 1b6187eaa..f98dc79a0 100644
--- a/source/texk/web2c/luatexdir/am/luaharfbuzz.am
+++ b/source/texk/web2c/luatexdir/am/luaharfbuzz.am
@@ -35,7 +35,8 @@ libluaharfbuzz_a_SOURCES = \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/script.c \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/tag.c \
-	luatexdir/luaharfbuzz/src/luaharfbuzz/unicode.c
+	luatexdir/luaharfbuzz/src/luaharfbuzz/unicode.c \
+	luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c
 
 libluajitharfbuzz_a_SOURCES = $(libluaharfbuzz_a_SOURCES)
 
diff --git a/source/texk/web2c/luatexdir/luaharfbuzz/luaharfbuzz-1.1.0-1.rockspec b/source/texk/web2c/luatexdir/luaharfbuzz/luaharfbuzz-1.1.0-1.rockspec
index 17a84532b..987e9748f 100644
--- a/source/texk/web2c/luatexdir/luaharfbuzz/luaharfbuzz-1.1.0-1.rockspec
+++ b/source/texk/web2c/luatexdir/luaharfbuzz/luaharfbuzz-1.1.0-1.rockspec
@@ -31,6 +31,7 @@ build = {
       "src/luaharfbuzz/script.c",
       "src/luaharfbuzz/direction.c",
       "src/luaharfbuzz/language.c",
+      "src/luaharfbuzz/variation.c",
       "src/luaharfbuzz/class_utils.c"
       },
       libraries = {"harfbuzz"},
diff --git a/source/texk/web2c/luatexdir/luaharfbuzz/luaharfbuzz-scm-1.rockspec b/source/texk/web2c/luatexdir/luaharfbuzz/luaharfbuzz-scm-1.rockspec
index 31ae2ab4f..0f0dd8d33 100644
--- a/source/texk/web2c/luatexdir/luaharfbuzz/luaharfbuzz-scm-1.rockspec
+++ b/source/texk/web2c/luatexdir/luaharfbuzz/luaharfbuzz-scm-1.rockspec
@@ -33,6 +33,7 @@ build = {
       "src/luaharfbuzz/script.c",
       "src/luaharfbuzz/direction.c",
       "src/luaharfbuzz/language.c",
+      "src/luaharfbuzz/variation.c",
       "src/luaharfbuzz/class_utils.c"
       },
       libraries = {"harfbuzz"},
diff --git a/source/texk/web2c/luatexdir/luaharfbuzz/spec/harfbuzz_spec.lua b/source/texk/web2c/luatexdir/luaharfbuzz/spec/harfbuzz_spec.lua
index dfae07d8e..38794372f 100644
--- a/source/texk/web2c/luatexdir/luaharfbuzz/spec/harfbuzz_spec.lua
+++ b/source/texk/web2c/luatexdir/luaharfbuzz/spec/harfbuzz_spec.lua
@@ -230,6 +230,64 @@ describe("harfbuzz module", function()
       assert.True(r)
       assert.are_same(13, i)
     end)
+
+    it("can return variation axes", function()
+      local f = harfbuzz.Face.new('fonts/STIXTwoText[wght].ttf')
+
+      assert.is_same(true, f:ot_var_has_data())
+      local axes = f:ot_var_get_axis_infos()
+      assert.are_same(1, #axes)
+      assert.are_same(harfbuzz.Tag.new("wght"), axes[1].tag)
+      assert.are_same(1, axes[1].axis_index)
+      assert.are_same(400, axes[1].min_value)
+      assert.are_same(400, axes[1].default_value)
+      assert.are_same(700, axes[1].max_value)
+      assert.are_same(0, axes[1].flags)
+      assert.are_same("Weight", f:get_name(axes[1].name_id))
+    end)
+
+    it("can find variation axis", function()
+      local f = harfbuzz.Face.new('fonts/STIXTwoText[wght].ttf')
+
+      local axis = f:ot_var_find_axis_info(harfbuzz.Tag.new("wght"))
+      assert.is_not_nil(axis)
+      assert.are_same(harfbuzz.Tag.new("wght"), axis.tag)
+      assert.are_same(1, axis.axis_index)
+      assert.are_same(400, axis.min_value)
+      assert.are_same(400, axis.default_value)
+      assert.are_same(700, axis.max_value)
+      assert.are_same(0, axis.flags)
+      assert.are_same("Weight", f:get_name(axis.name_id))
+    end)
+
+    it("can return named instances", function()
+      local f = harfbuzz.Face.new('fonts/STIXTwoText[wght].ttf')
+
+      local instances = f:ot_var_named_instance_get_infos()
+      assert.are_same(4, #instances)
+      assert.are_same(3, instances[3].index)
+      assert.are_same("SemiBold", f:get_name(instances[3].subfamily_name_id))
+      assert.are_same(nil, f:get_name(instances[3].postscript_name_id))
+      assert.are_same(600, f:ot_var_named_instance_get_design_coords(3))
+    end)
+
+    it("can normalize variations", function()
+      local f = harfbuzz.Face.new('fonts/STIXTwoText[wght].ttf')
+
+      local normalized, after = f:ot_var_normalize_variations(harfbuzz.Variation.new("wght=400"))
+      assert.is_nil(after)
+      assert.are_same(0, normalized)
+
+      normalized = f:ot_var_normalize_variations(harfbuzz.Variation.new("wght=700"))
+      assert.are_same(1<<14, normalized)
+
+      normalized, after = f:ot_var_normalize_coords(700)
+      assert.is_nil(after)
+      assert.are_same(1<<14, normalized)
+
+      normalized = f:ot_var_normalize_coords(400)
+      assert.are_same(0, normalized)
+    end)
   end)
 
   describe("harfbuzz.Font", function()
@@ -318,6 +376,25 @@ describe("harfbuzz module", function()
       assert.are_same(2857,f:ot_color_glyph_get_png(2):get_length())
       assert.are_same("\137PNG",f:ot_color_glyph_get_png(2):get_data():sub(1, 4))
     end)
+
+    it("can set variations", function()
+      local f = harfbuzz.Font.new(harfbuzz.Face.new('fonts/STIXTwoText[wght].ttf'))
+
+      f:set_variations(harfbuzz.Variation.new("wght=500"))
+      local normalized, after = f:get_var_coords_normalized()
+      assert.is_nil(after)
+      assert.are_same(5174, normalized)
+
+      f:set_var_coords_design(600)
+      local normalized, after = f:get_var_coords_normalized()
+      assert.is_nil(after)
+      assert.are_same(10348, normalized)
+
+      f:set_var_coords_normalized(1<<13)
+      local normalized, after = f:get_var_coords_normalized()
+      assert.is_nil(after)
+      assert.are_same(1<<13, normalized)
+    end)
   end)
 
   describe("harfbuzz.Feature", function()
@@ -339,7 +416,6 @@ describe("harfbuzz module", function()
 
     it("has visible fields", function()
       local f = harfbuzz.Feature.new('-kern')
-      print(getmetatable(f).__index)
       assert.are_equal(tostring(f.tag), 'kern')
       assert.are_equal(f.value, 0)
       assert.are_equal(f.start, nil)
@@ -362,6 +438,44 @@ describe("harfbuzz module", function()
     end)
   end)
 
+  describe("harfbuzz.Variation", function()
+    it("can be initialised with a valid variation string", function()
+      harfbuzz.Variation.new('wght=default')
+      harfbuzz.Variation.new('wght=400')
+      harfbuzz.Variation.new('wght=-20')
+    end)
+
+    it("throws an error when trying to initialise a new variation with an invalid string", function()
+       assert.are_equal(nil, harfbuzz.Variation.new(''))
+       assert.are_equal(nil, harfbuzz.Variation.new('wght'))
+    end)
+
+    it("has a valid tostring value", function()
+      local vs = 'wght=200'
+      local v = harfbuzz.Variation.new(vs)
+      assert.are_equal(vs, tostring(v))
+    end)
+
+    it("has visible fields", function()
+      local v = harfbuzz.Variation.new('wght=400')
+      assert.are_equal(tostring(v.tag), 'wght')
+      assert.are_equal(v.value, 400)
+
+      v = harfbuzz.Variation.new('slnt=-7.5')
+      assert.are_equal(tostring(v.tag), 'slnt')
+      assert.are_equal(v.value, -7.5)
+    end)
+
+    it("has editable fields", function()
+      local f = harfbuzz.Variation.new('slnt=5')
+      f.tag, f.value = harfbuzz.Tag.new"wght", 7
+      assert.are_equal(tostring(f), "wght=7")
+
+      f.tag, f.value = harfbuzz.Tag.new"hght", 0
+      assert.are_equal(tostring(f), "hght=0")
+    end)
+  end)
+
   describe("harfbuzz.Tag", function()
     it("can be initialised with a valid tag string", function()
       harfbuzz.Tag.new('Zyyy')
diff --git a/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/face.c b/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/face.c
index 5538c7045..45296e045 100644
--- a/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/face.c
+++ b/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/face.c
@@ -1,5 +1,20 @@
 #include "luaharfbuzz.h"
 
+#ifdef LuajitTeX
+
+static int lua_absindex (lua_State *L, int i) {
+  if (i < 0 && i > LUA_REGISTRYINDEX)
+    i += lua_gettop(L) + 1;
+  return i;
+}
+static void lua_seti (lua_State *L, int index, lua_Integer i) {
+  index = lua_absindex(L, index);
+  lua_pushinteger(L, i);
+  lua_insert(L, -2);
+  lua_settable(L, index);
+}
+#endif
+
 /* Size of static arrays we use to avoid heap allocating memory when reading
  * data from HarfBuzz. */
 #define STATIC_ARRAY_SIZE 128
@@ -423,6 +438,179 @@ static int face_ot_color_glyph_get_svg(lua_State *L) {
   return 1;
 }
 
+static int face_var_has_data(lua_State *L) {
+  Face *f = (Face *)luaL_checkudata(L, 1, "harfbuzz.Face");
+
+  lua_pushboolean(L, hb_ot_var_has_data(*f));
+  return 1;
+}
+
+static int push_axis_info(lua_State *L, const hb_ot_var_axis_info_t *info) {
+  lua_createtable(L, 0, 7);
+
+  lua_pushinteger(L, info->axis_index + 1);
+  lua_setfield(L, -2, "axis_index");
+
+  Tag *tp = (Tag *)lua_newuserdata(L, sizeof(*tp));
+  luaL_getmetatable(L, "harfbuzz.Tag");
+  lua_setmetatable(L, -2);
+  *tp = info->tag;
+  lua_setfield(L, -2, "tag");
+
+  lua_pushinteger(L, info->name_id);
+  lua_setfield(L, -2, "name_id");
+
+  lua_pushinteger(L, info->flags);
+  lua_setfield(L, -2, "flags");
+
+  lua_pushnumber(L, info->min_value);
+  lua_setfield(L, -2, "min_value");
+
+  lua_pushnumber(L, info->default_value);
+  lua_setfield(L, -2, "default_value");
+
+  lua_pushnumber(L, info->max_value);
+  lua_setfield(L, -2, "max_value");
+
+  return 1;
+}
+
+static int face_var_find_axis_info(lua_State *L) {
+  Face *face = (Face *)luaL_checkudata(L, 1, "harfbuzz.Face");
+  Tag *tag = (Tag *)luaL_checkudata(L, 2, "harfbuzz.Tag");
+  hb_ot_var_axis_info_t axis_info;
+
+  if (hb_ot_var_find_axis_info(*face, *tag, &axis_info))
+    push_axis_info(L, &axis_info);
+  else
+    lua_pushnil(L);
+  return 1;
+}
+
+static int face_var_get_axis_infos(lua_State *L) {
+  Face *face = (Face *)luaL_checkudata(L, 1, "harfbuzz.Face");
+  lua_Integer start = luaL_optinteger(L, 2, 1) - 1;
+  lua_Integer stop = luaL_optinteger(L, 2, -1);
+  if (start < -1)
+    start += hb_ot_var_get_axis_count(*face) + 1;
+  if (stop < 0)
+    stop += hb_ot_var_get_axis_count(*face) + 1;
+
+  if (start < 0 || stop - start > STATIC_ARRAY_SIZE)
+    lua_pushnil(L);
+  else if (stop <= start)
+    lua_createtable(L, 0, 0);
+  else {
+    unsigned int count = stop - start;
+    hb_ot_var_axis_info_t axis_infos[STATIC_ARRAY_SIZE];
+
+    hb_ot_var_get_axis_infos(*face, start, &count, axis_infos);
+
+    lua_createtable(L, count, 0);
+    for (int i = 0; i != count; i++) {
+      push_axis_info(L, axis_infos + i);
+      lua_seti(L, -2, i + 1);
+    }
+  }
+  return 1;
+}
+
+static int face_var_named_instance_get_infos(lua_State *L) {
+  Face *face = (Face *)luaL_checkudata(L, 1, "harfbuzz.Face");
+  lua_Integer start = luaL_optinteger(L, 2, 1) - 1;
+  lua_Integer stop = luaL_optinteger(L, 2, -1);
+
+  unsigned int total = hb_ot_var_get_named_instance_count(*face);
+
+  if (start < -1)
+    start += total + 1;
+  if (stop < 0)
+    stop += total + 1;
+  if (stop > total)
+    stop = total;
+
+  if (start < 0)
+    lua_pushnil(L);
+  else if (stop <= start)
+    lua_createtable(L, 0, 0);
+  else {
+    lua_createtable(L, stop - start, 0);
+    for (int i = start; i != stop; i++) {
+      lua_createtable(L, 0, 3);
+
+      lua_pushinteger(L, i + 1);
+      lua_setfield(L, -2, "index");
+
+      lua_pushinteger(L, hb_ot_var_named_instance_get_subfamily_name_id(*face, i));
+      lua_setfield(L, -2, "subfamily_name_id");
+
+      lua_pushinteger(L, hb_ot_var_named_instance_get_subfamily_name_id(*face, i));
+      lua_setfield(L, -2, "subfamily_name_id");
+
+      lua_pushinteger(L, hb_ot_var_named_instance_get_postscript_name_id(*face, i));
+      lua_setfield(L, -2, "postscript_name_id");
+
+      lua_seti(L, -2, i - start + 1);
+    }
+  }
+  return 1;
+}
+
+static int face_var_named_instance_get_design_coords(lua_State *L) {
+  Face *face = (Face *)luaL_checkudata(L, 1, "harfbuzz.Face");
+  lua_Integer index = luaL_checkinteger(L, 2) - 1;
+
+  float coords[STATIC_ARRAY_SIZE];
+  unsigned int count = STATIC_ARRAY_SIZE;
+  count = hb_ot_var_named_instance_get_design_coords(*face, index, &count, coords);
+
+  for (int i = 0; i != count; i++) {
+    lua_pushnumber(L, coords[i]);
+  }
+  return count;
+}
+
+static int face_var_normalize_variations(lua_State *L) {
+  Face *face = (Face *)luaL_checkudata(L, 1, "harfbuzz.Face");
+  unsigned int count = lua_gettop(L)-1;
+  if (count > STATIC_ARRAY_SIZE) {
+    return 0;
+  }
+
+  Variation variations[STATIC_ARRAY_SIZE];
+  for (unsigned int i = 0; i != count; i++)
+    variations[i] = *(Variation *)luaL_checkudata(L, i+2, "harfbuzz.Variation");
+
+  unsigned int coord_count = hb_ot_var_get_axis_count(*face);
+  int normalized[STATIC_ARRAY_SIZE];
+  hb_ot_var_normalize_variations(*face, variations, count, normalized, coord_count);
+
+  for (int i = 0; i != coord_count; i++) {
+    lua_pushinteger(L, normalized[i]);
+  }
+  return coord_count;
+}
+
+static int face_var_normalize_coords(lua_State *L) {
+  Face *face = (Face *)luaL_checkudata(L, 1, "harfbuzz.Face");
+  unsigned int count = lua_gettop(L)-1;
+  if (count > STATIC_ARRAY_SIZE) {
+    return 0;
+  }
+
+  float coords[STATIC_ARRAY_SIZE];
+  for (unsigned int i = 0; i != count; i++)
+    coords[i] = luaL_checknumber(L, i+2);
+
+  int normalized[STATIC_ARRAY_SIZE];
+  hb_ot_var_normalize_coords(*face, count, coords, normalized);
+
+  for (int i = 0; i != count; i++) {
+    lua_pushinteger(L, normalized[i]);
+  }
+  return count;
+}
+
 static int face_destroy(lua_State *L) {
   Face *f = (Face *)luaL_checkudata(L, 1, "harfbuzz.Face");
 
@@ -452,6 +640,13 @@ static const struct luaL_Reg face_methods[] = {
   { "ot_layout_find_script", face_ot_layout_find_script },
   { "ot_layout_find_language", face_ot_layout_find_language },
   { "ot_layout_find_feature", face_ot_layout_find_feature },
+  { "ot_var_has_data", face_var_has_data },
+  { "ot_var_find_axis_info", face_var_find_axis_info },
+  { "ot_var_get_axis_infos", face_var_get_axis_infos },
+  { "ot_var_named_instance_get_infos", face_var_named_instance_get_infos },
+  { "ot_var_named_instance_get_design_coords", face_var_named_instance_get_design_coords },
+  { "ot_var_normalize_variations", face_var_normalize_variations },
+  { "ot_var_normalize_coords", face_var_normalize_coords },
   { NULL, NULL }
 };
 
diff --git a/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/font.c b/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/font.c
index c60167364..2734534a2 100644
--- a/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/font.c
+++ b/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/font.c
@@ -192,6 +192,62 @@ static int font_ot_color_glyph_get_png(lua_State *L) {
   return 1;
 }
 
+static int font_set_variations(lua_State *L) {
+  Font *f = (Font *)luaL_checkudata(L, 1, "harfbuzz.Font");
+  unsigned int count = lua_gettop(L) - 1;
+  if (count > 128)
+    count = 128;
+  Variation variations[128];
+  for (int i = 0; i != count; i++)
+    variations[i] = *(Variation *)luaL_checkudata(L, i + 2, "harfbuzz.Variation");
+
+  hb_font_set_variations(*f, variations, count);
+  return 0;
+}
+
+static int font_set_var_coords_design(lua_State *L) {
+  Font *f = (Font *)luaL_checkudata(L, 1, "harfbuzz.Font");
+  unsigned int count = lua_gettop(L) - 1;
+  if (count > 128)
+    count = 128;
+  float coords[128];
+  for (int i = 0; i != count; i++)
+    coords[i] = luaL_checknumber(L, i + 2);
+
+  hb_font_set_var_coords_design(*f, coords, count);
+  return 0;
+}
+
+static int font_set_var_coords_normalized(lua_State *L) {
+  Font *f = (Font *)luaL_checkudata(L, 1, "harfbuzz.Font");
+  unsigned int count = lua_gettop(L) - 1;
+  if (count > 128)
+    count = 128;
+  int coords[128];
+  for (int i = 0; i != count; i++)
+    coords[i] = luaL_checkinteger(L, i + 2);
+
+  hb_font_set_var_coords_normalized(*f, coords, count);
+  return 0;
+}
+
+static int font_set_var_named_instance(lua_State *L) {
+  Font *f = (Font *)luaL_checkudata(L, 1, "harfbuzz.Font");
+  unsigned int instance = luaL_checkinteger(L, 2);
+
+  hb_font_set_var_named_instance(*f, instance);
+  return 0;
+}
+
+static int font_get_var_coords_normalized(lua_State *L) {
+  Font *f = (Font *)luaL_checkudata(L, 1, "harfbuzz.Font");
+  unsigned int count;
+  const int *coords = hb_font_get_var_coords_normalized(*f, &count);
+  for (int i = 0; i != count; i++)
+    lua_pushinteger(L, coords[i]);
+  return count;
+}
+
 static const struct luaL_Reg font_methods[] = {
   { "__gc", font_destroy },
   { "set_scale", font_set_scale },
@@ -205,6 +261,11 @@ static const struct luaL_Reg font_methods[] = {
   { "get_glyph_v_advance", font_get_glyph_v_advance },
   { "get_nominal_glyph", font_get_nominal_glyph },
   { "ot_color_glyph_get_png", font_ot_color_glyph_get_png },
+  { "set_variations", font_set_variations },
+  { "set_var_coords_design", font_set_var_coords_design },
+  { "set_var_coords_normalized", font_set_var_coords_normalized },
+  { "set_var_named_instance", font_set_var_named_instance },
+  { "get_var_coords_normalized", font_get_var_coords_normalized },
   { NULL, NULL }
 };
 
diff --git a/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/luaharfbuzz.c b/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/luaharfbuzz.c
index 176c552aa..8c841e563 100644
--- a/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/luaharfbuzz.c
+++ b/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/luaharfbuzz.c
@@ -103,6 +103,9 @@ int luaopen_luaharfbuzz (lua_State *L) {
   register_language(L);
   lua_setfield(L, -2, "Language");
 
+  register_variation(L);
+  lua_setfield(L, -2, "Variation");
+
   register_ot(L);
   lua_setfield(L, -2, "ot");
 
diff --git a/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/luaharfbuzz.h b/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/luaharfbuzz.h
index 60f5db9c2..4b3aea6f5 100644
--- a/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/luaharfbuzz.h
+++ b/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/luaharfbuzz.h
@@ -18,6 +18,7 @@ typedef hb_tag_t Tag;
 typedef hb_script_t Script;
 typedef hb_direction_t Direction;
 typedef hb_language_t Language;
+typedef hb_variation_t Variation;
 
 typedef struct luahb_constant_t {
   const char *name;
@@ -35,6 +36,7 @@ int register_tag(lua_State *L);
 int register_script(lua_State *L);
 int register_direction(lua_State *L);
 int register_language(lua_State *L);
+int register_variation(lua_State *L);
 int register_ot(lua_State *L);
 int register_unicode(lua_State *L);
 
diff --git a/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c b/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c
new file mode 100644
index 000000000..5683aa607
--- /dev/null
+++ b/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c
@@ -0,0 +1,82 @@
+// harfbuzz.Variation
+#include "luaharfbuzz.h"
+
+static int variation_new(lua_State *L) {
+  Variation v;
+  const char *variation = luaL_checkstring(L, 1);
+
+  if (hb_variation_from_string(variation, -1, &v)) {
+    Variation *vp = (Variation *)lua_newuserdata(L, sizeof(*vp));
+    luaL_getmetatable(L, "harfbuzz.Variation");
+    lua_setmetatable(L, -2);
+    *vp = v;
+  } else {
+    lua_pushnil(L);
+  }
+
+  return 1;
+}
+
+static int variation_to_string(lua_State *L) {
+  Variation* v = (Variation *)luaL_checkudata(L, 1, "harfbuzz.Variation");
+  char variation[128];
+
+  hb_variation_to_string(v, variation, 128);
+  lua_pushstring(L, variation);
+  return 1;
+}
+
+static const char *variation_tag_ptr;
+static const char *variation_value_ptr;
+
+static int variation_index(lua_State *L) {
+  Variation* v = (Variation *)luaL_checkudata(L, 1, "harfbuzz.Variation");
+  const char *key = lua_tostring(L, 2);
+
+  if (key == variation_tag_ptr) {
+    Tag *tag = (Tag *)lua_newuserdata(L, sizeof(*tag));
+    luaL_getmetatable(L, "harfbuzz.Tag");
+    lua_setmetatable(L, -2);
+    *tag = v->tag;
+  } else if (key == variation_value_ptr) {
+    lua_pushnumber(L, v->value);
+  } else {
+    lua_pushnil(L);
+  }
+  return 1;
+}
+
+static int variation_newindex(lua_State *L) {
+  Variation* v = (Variation *)luaL_checkudata(L, 1, "harfbuzz.Variation");
+  const char *key = lua_tostring(L, 2);
+
+  if (key == variation_tag_ptr) {
+    v->tag = *(Tag *)luaL_checkudata(L, 3, "harfbuzz.Tag");
+  } else if (key == variation_value_ptr) {
+    v->value = luaL_checknumber(L, 3);
+  }
+  return 0;
+}
+
+static const struct luaL_Reg variation_methods[] = {
+  { "__index", variation_index },
+  { "__newindex", variation_newindex },
+  { "__tostring", variation_to_string },
+  { NULL, NULL },
+};
+
+static const struct luaL_Reg variation_functions[] = {
+  { "new", variation_new },
+  { NULL,  NULL }
+};
+
+int register_variation(lua_State *L) {
+  lua_pushliteral(L, "tag");
+  variation_tag_ptr = lua_tostring(L, -1);
+  (void) luaL_ref (L, LUA_REGISTRYINDEX);
+  lua_pushliteral(L, "value");
+  variation_value_ptr = lua_tostring(L, -1);
+  (void) luaL_ref (L, LUA_REGISTRYINDEX);
+
+  return register_class(L, "harfbuzz.Variation", variation_methods, variation_functions, NULL);
+}
-- 
2.32.0

-------------- next part --------------
>From d43d2306d14414810240c4acc6f5980400ad1c19 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marcel=20Fabian=20Kr=C3=BCger?= <tex at 2krueger.de>
Date: Mon, 2 Aug 2021 03:01:24 +0200
Subject: [PATCH 1/2] Add interface for font variations in luaharfbuzz

---
 source/texk/web2c/Makefile.in                 |  39 +++-
 source/texk/web2c/luatexdir/am/luaharfbuzz.am |   3 +-
 .../luaharfbuzz/luaharfbuzz-1.1.0-1.rockspec  |   1 +
 .../luaharfbuzz/luaharfbuzz-scm-1.rockspec    |   1 +
 .../luaharfbuzz/spec/harfbuzz_spec.lua        | 116 ++++++++++-
 .../luaharfbuzz/src/luaharfbuzz/face.c        | 195 ++++++++++++++++++
 .../luaharfbuzz/src/luaharfbuzz/font.c        |  61 ++++++
 .../luaharfbuzz/src/luaharfbuzz/luaharfbuzz.c |   3 +
 .../luaharfbuzz/src/luaharfbuzz/luaharfbuzz.h |   2 +
 .../luaharfbuzz/src/luaharfbuzz/variation.c   |  82 ++++++++
 10 files changed, 498 insertions(+), 5 deletions(-)
 create mode 100644 source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c

diff --git a/source/texk/web2c/Makefile.in b/source/texk/web2c/Makefile.in
index 0542d8baf..b3c0de885 100644
--- a/source/texk/web2c/Makefile.in
+++ b/source/texk/web2c/Makefile.in
@@ -595,7 +595,8 @@ am_libluaharfbuzz_a_OBJECTS = luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbu
 	luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-ot.$(OBJEXT) \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-script.$(OBJEXT) \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-tag.$(OBJEXT) \
-	luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-unicode.$(OBJEXT)
+	luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-unicode.$(OBJEXT) \
+	luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-variation.$(OBJEXT)
 libluaharfbuzz_a_OBJECTS = $(am_libluaharfbuzz_a_OBJECTS)
 libluahbtexspecific_a_AR = $(AR) $(ARFLAGS)
 libluahbtexspecific_a_LIBADD =
@@ -620,7 +621,8 @@ am__objects_3 = luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-blob.$
 	luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-ot.$(OBJEXT) \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-script.$(OBJEXT) \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-tag.$(OBJEXT) \
-	luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-unicode.$(OBJEXT)
+	luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-unicode.$(OBJEXT) \
+	luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-variation.$(OBJEXT)
 am_libluajitharfbuzz_a_OBJECTS = $(am__objects_3)
 libluajitharfbuzz_a_OBJECTS = $(am_libluajitharfbuzz_a_OBJECTS)
 libluajithbtexspecific_a_AR = $(AR) $(ARFLAGS)
@@ -1891,6 +1893,7 @@ am__depfiles_remade = ./$(DEPDIR)/aleph-aleph-pool.Po \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluaharfbuzz_a-script.Po \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluaharfbuzz_a-tag.Po \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluaharfbuzz_a-unicode.Po \
+	luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluaharfbuzz_a-variation.Po \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluajitharfbuzz_a-blob.Po \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluajitharfbuzz_a-buffer.Po \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluajitharfbuzz_a-class_utils.Po \
@@ -1904,6 +1907,7 @@ am__depfiles_remade = ./$(DEPDIR)/aleph-aleph-pool.Po \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluajitharfbuzz_a-script.Po \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluajitharfbuzz_a-tag.Po \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluajitharfbuzz_a-unicode.Po \
+	luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluajitharfbuzz_a-variation.Po \
 	luatexdir/luamd5/$(DEPDIR)/libluajitmisc_a-md5.Po \
 	luatexdir/luamd5/$(DEPDIR)/libluajitmisc_a-md5lib.Po \
 	luatexdir/luamd5/$(DEPDIR)/libluamisc_a-md5.Po \
@@ -4725,7 +4729,8 @@ libluaharfbuzz_a_SOURCES = \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/script.c \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/tag.c \
-	luatexdir/luaharfbuzz/src/luaharfbuzz/unicode.c
+	luatexdir/luaharfbuzz/src/luaharfbuzz/unicode.c \
+	luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c
 
 libluajitharfbuzz_a_SOURCES = $(libluaharfbuzz_a_SOURCES)
 
@@ -8728,6 +8733,20 @@ luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-unicode.obj: luatexdir/lu
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(AM_V_CC at am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libluaharfbuzz_a_CPPFLAGS) $(CPPFLAGS) $(libluaharfbuzz_a_CFLAGS) $(CFLAGS) -c -o luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-unicode.obj `if test -f 'luatexdir/luaharfbuzz/src/luaharfbuzz/unicode.c'; then $(CYGPATH_W) 'luatexdir/luaharfbuzz/src/luaharfbuzz/unicode.c'; else $(CYGPATH_W) '$(srcdir)/luatexdir/luaharfbuzz/src/luaharfbuzz/unicode.c'; fi`
 
+luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-variation.o: luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c
+ at am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libluaharfbuzz_a_CPPFLAGS) $(CPPFLAGS) $(libluaharfbuzz_a_CFLAGS) $(CFLAGS) -MT luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-variation.o -MD -MP -MF luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluaharfbuzz_a-variation.Tpo -c -o luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-variation.o `test -f 'luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c' || echo '$(srcdir)/'`luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c
+ at am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluaharfbuzz_a-variation.Tpo luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluaharfbuzz_a-variation.Po
+ at AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c' object='luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-variation.o' libtool=no @AMDEPBACKSLASH@
+ at AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+ at am__fastdepCC_FALSE@	$(AM_V_CC at am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libluaharfbuzz_a_CPPFLAGS) $(CPPFLAGS) $(libluaharfbuzz_a_CFLAGS) $(CFLAGS) -c -o luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-variation.o `test -f 'luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c' || echo '$(srcdir)/'`luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c
+
+luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-variation.obj: luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c
+ at am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libluaharfbuzz_a_CPPFLAGS) $(CPPFLAGS) $(libluaharfbuzz_a_CFLAGS) $(CFLAGS) -MT luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-variation.obj -MD -MP -MF luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluaharfbuzz_a-variation.Tpo -c -o luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-variation.obj `if test -f 'luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c'; then $(CYGPATH_W) 'luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c'; else $(CYGPATH_W) '$(srcdir)/luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c'; fi`
+ at am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluaharfbuzz_a-variation.Tpo luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluaharfbuzz_a-variation.Po
+ at AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c' object='luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-variation.obj' libtool=no @AMDEPBACKSLASH@
+ at AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+ at am__fastdepCC_FALSE@	$(AM_V_CC at am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libluaharfbuzz_a_CPPFLAGS) $(CPPFLAGS) $(libluaharfbuzz_a_CFLAGS) $(CFLAGS) -c -o luatexdir/luaharfbuzz/src/luaharfbuzz/libluaharfbuzz_a-variation.obj `if test -f 'luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c'; then $(CYGPATH_W) 'luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c'; else $(CYGPATH_W) '$(srcdir)/luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c'; fi`
+
 libluahbtexspecific_a-utils-hb.o: utils-hb.c
 @am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libluahbtexspecific_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libluahbtexspecific_a-utils-hb.o -MD -MP -MF $(DEPDIR)/libluahbtexspecific_a-utils-hb.Tpo -c -o libluahbtexspecific_a-utils-hb.o `test -f 'utils-hb.c' || echo '$(srcdir)/'`utils-hb.c
 @am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/libluahbtexspecific_a-utils-hb.Tpo $(DEPDIR)/libluahbtexspecific_a-utils-hb.Po
@@ -8966,6 +8985,20 @@ luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-unicode.obj: luatexdir
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(AM_V_CC at am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libluajitharfbuzz_a_CPPFLAGS) $(CPPFLAGS) $(libluajitharfbuzz_a_CFLAGS) $(CFLAGS) -c -o luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-unicode.obj `if test -f 'luatexdir/luaharfbuzz/src/luaharfbuzz/unicode.c'; then $(CYGPATH_W) 'luatexdir/luaharfbuzz/src/luaharfbuzz/unicode.c'; else $(CYGPATH_W) '$(srcdir)/luatexdir/luaharfbuzz/src/luaharfbuzz/unicode.c'; fi`
 
+luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-variation.o: luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c
+ at am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libluajitharfbuzz_a_CPPFLAGS) $(CPPFLAGS) $(libluajitharfbuzz_a_CFLAGS) $(CFLAGS) -MT luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-variation.o -MD -MP -MF luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluajitharfbuzz_a-variation.Tpo -c -o luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-variation.o `test -f 'luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c' || echo '$(srcdir)/'`luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c
+ at am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluajitharfbuzz_a-variation.Tpo luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluajitharfbuzz_a-variation.Po
+ at AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c' object='luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-variation.o' libtool=no @AMDEPBACKSLASH@
+ at AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+ at am__fastdepCC_FALSE@	$(AM_V_CC at am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libluajitharfbuzz_a_CPPFLAGS) $(CPPFLAGS) $(libluajitharfbuzz_a_CFLAGS) $(CFLAGS) -c -o luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-variation.o `test -f 'luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c' || echo '$(srcdir)/'`luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c
+
+luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-variation.obj: luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c
+ at am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libluajitharfbuzz_a_CPPFLAGS) $(CPPFLAGS) $(libluajitharfbuzz_a_CFLAGS) $(CFLAGS) -MT luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-variation.obj -MD -MP -MF luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluajitharfbuzz_a-variation.Tpo -c -o luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-variation.obj `if test -f 'luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c'; then $(CYGPATH_W) 'luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c'; else $(CYGPATH_W) '$(srcdir)/luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c'; fi`
+ at am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluajitharfbuzz_a-variation.Tpo luatexdir/luaharfbuzz/src/luaharfbuzz/$(DEPDIR)/libluajitharfbuzz_a-variation.Po
+ at AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c' object='luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-variation.obj' libtool=no @AMDEPBACKSLASH@
+ at AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+ at am__fastdepCC_FALSE@	$(AM_V_CC at am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libluajitharfbuzz_a_CPPFLAGS) $(CPPFLAGS) $(libluajitharfbuzz_a_CFLAGS) $(CFLAGS) -c -o luatexdir/luaharfbuzz/src/luaharfbuzz/libluajitharfbuzz_a-variation.obj `if test -f 'luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c'; then $(CYGPATH_W) 'luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c'; else $(CYGPATH_W) '$(srcdir)/luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c'; fi`
+
 libluajithbtexspecific_a-utils-hb.o: utils-hb.c
 @am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libluajithbtexspecific_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libluajithbtexspecific_a-utils-hb.o -MD -MP -MF $(DEPDIR)/libluajithbtexspecific_a-utils-hb.Tpo -c -o libluajithbtexspecific_a-utils-hb.o `test -f 'utils-hb.c' || echo '$(srcdir)/'`utils-hb.c
 @am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/libluajithbtexspecific_a-utils-hb.Tpo $(DEPDIR)/libluajithbtexspecific_a-utils-hb.Po
diff --git a/source/texk/web2c/luatexdir/am/luaharfbuzz.am b/source/texk/web2c/luatexdir/am/luaharfbuzz.am
index 1b6187eaa..f98dc79a0 100644
--- a/source/texk/web2c/luatexdir/am/luaharfbuzz.am
+++ b/source/texk/web2c/luatexdir/am/luaharfbuzz.am
@@ -35,7 +35,8 @@ libluaharfbuzz_a_SOURCES = \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/script.c \
 	luatexdir/luaharfbuzz/src/luaharfbuzz/tag.c \
-	luatexdir/luaharfbuzz/src/luaharfbuzz/unicode.c
+	luatexdir/luaharfbuzz/src/luaharfbuzz/unicode.c \
+	luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c
 
 libluajitharfbuzz_a_SOURCES = $(libluaharfbuzz_a_SOURCES)
 
diff --git a/source/texk/web2c/luatexdir/luaharfbuzz/luaharfbuzz-1.1.0-1.rockspec b/source/texk/web2c/luatexdir/luaharfbuzz/luaharfbuzz-1.1.0-1.rockspec
index 17a84532b..987e9748f 100644
--- a/source/texk/web2c/luatexdir/luaharfbuzz/luaharfbuzz-1.1.0-1.rockspec
+++ b/source/texk/web2c/luatexdir/luaharfbuzz/luaharfbuzz-1.1.0-1.rockspec
@@ -31,6 +31,7 @@ build = {
       "src/luaharfbuzz/script.c",
       "src/luaharfbuzz/direction.c",
       "src/luaharfbuzz/language.c",
+      "src/luaharfbuzz/variation.c",
       "src/luaharfbuzz/class_utils.c"
       },
       libraries = {"harfbuzz"},
diff --git a/source/texk/web2c/luatexdir/luaharfbuzz/luaharfbuzz-scm-1.rockspec b/source/texk/web2c/luatexdir/luaharfbuzz/luaharfbuzz-scm-1.rockspec
index 31ae2ab4f..0f0dd8d33 100644
--- a/source/texk/web2c/luatexdir/luaharfbuzz/luaharfbuzz-scm-1.rockspec
+++ b/source/texk/web2c/luatexdir/luaharfbuzz/luaharfbuzz-scm-1.rockspec
@@ -33,6 +33,7 @@ build = {
       "src/luaharfbuzz/script.c",
       "src/luaharfbuzz/direction.c",
       "src/luaharfbuzz/language.c",
+      "src/luaharfbuzz/variation.c",
       "src/luaharfbuzz/class_utils.c"
       },
       libraries = {"harfbuzz"},
diff --git a/source/texk/web2c/luatexdir/luaharfbuzz/spec/harfbuzz_spec.lua b/source/texk/web2c/luatexdir/luaharfbuzz/spec/harfbuzz_spec.lua
index dfae07d8e..38794372f 100644
--- a/source/texk/web2c/luatexdir/luaharfbuzz/spec/harfbuzz_spec.lua
+++ b/source/texk/web2c/luatexdir/luaharfbuzz/spec/harfbuzz_spec.lua
@@ -230,6 +230,64 @@ describe("harfbuzz module", function()
       assert.True(r)
       assert.are_same(13, i)
     end)
+
+    it("can return variation axes", function()
+      local f = harfbuzz.Face.new('fonts/STIXTwoText[wght].ttf')
+
+      assert.is_same(true, f:ot_var_has_data())
+      local axes = f:ot_var_get_axis_infos()
+      assert.are_same(1, #axes)
+      assert.are_same(harfbuzz.Tag.new("wght"), axes[1].tag)
+      assert.are_same(1, axes[1].axis_index)
+      assert.are_same(400, axes[1].min_value)
+      assert.are_same(400, axes[1].default_value)
+      assert.are_same(700, axes[1].max_value)
+      assert.are_same(0, axes[1].flags)
+      assert.are_same("Weight", f:get_name(axes[1].name_id))
+    end)
+
+    it("can find variation axis", function()
+      local f = harfbuzz.Face.new('fonts/STIXTwoText[wght].ttf')
+
+      local axis = f:ot_var_find_axis_info(harfbuzz.Tag.new("wght"))
+      assert.is_not_nil(axis)
+      assert.are_same(harfbuzz.Tag.new("wght"), axis.tag)
+      assert.are_same(1, axis.axis_index)
+      assert.are_same(400, axis.min_value)
+      assert.are_same(400, axis.default_value)
+      assert.are_same(700, axis.max_value)
+      assert.are_same(0, axis.flags)
+      assert.are_same("Weight", f:get_name(axis.name_id))
+    end)
+
+    it("can return named instances", function()
+      local f = harfbuzz.Face.new('fonts/STIXTwoText[wght].ttf')
+
+      local instances = f:ot_var_named_instance_get_infos()
+      assert.are_same(4, #instances)
+      assert.are_same(3, instances[3].index)
+      assert.are_same("SemiBold", f:get_name(instances[3].subfamily_name_id))
+      assert.are_same(nil, f:get_name(instances[3].postscript_name_id))
+      assert.are_same(600, f:ot_var_named_instance_get_design_coords(3))
+    end)
+
+    it("can normalize variations", function()
+      local f = harfbuzz.Face.new('fonts/STIXTwoText[wght].ttf')
+
+      local normalized, after = f:ot_var_normalize_variations(harfbuzz.Variation.new("wght=400"))
+      assert.is_nil(after)
+      assert.are_same(0, normalized)
+
+      normalized = f:ot_var_normalize_variations(harfbuzz.Variation.new("wght=700"))
+      assert.are_same(1<<14, normalized)
+
+      normalized, after = f:ot_var_normalize_coords(700)
+      assert.is_nil(after)
+      assert.are_same(1<<14, normalized)
+
+      normalized = f:ot_var_normalize_coords(400)
+      assert.are_same(0, normalized)
+    end)
   end)
 
   describe("harfbuzz.Font", function()
@@ -318,6 +376,25 @@ describe("harfbuzz module", function()
       assert.are_same(2857,f:ot_color_glyph_get_png(2):get_length())
       assert.are_same("\137PNG",f:ot_color_glyph_get_png(2):get_data():sub(1, 4))
     end)
+
+    it("can set variations", function()
+      local f = harfbuzz.Font.new(harfbuzz.Face.new('fonts/STIXTwoText[wght].ttf'))
+
+      f:set_variations(harfbuzz.Variation.new("wght=500"))
+      local normalized, after = f:get_var_coords_normalized()
+      assert.is_nil(after)
+      assert.are_same(5174, normalized)
+
+      f:set_var_coords_design(600)
+      local normalized, after = f:get_var_coords_normalized()
+      assert.is_nil(after)
+      assert.are_same(10348, normalized)
+
+      f:set_var_coords_normalized(1<<13)
+      local normalized, after = f:get_var_coords_normalized()
+      assert.is_nil(after)
+      assert.are_same(1<<13, normalized)
+    end)
   end)
 
   describe("harfbuzz.Feature", function()
@@ -339,7 +416,6 @@ describe("harfbuzz module", function()
 
     it("has visible fields", function()
       local f = harfbuzz.Feature.new('-kern')
-      print(getmetatable(f).__index)
       assert.are_equal(tostring(f.tag), 'kern')
       assert.are_equal(f.value, 0)
       assert.are_equal(f.start, nil)
@@ -362,6 +438,44 @@ describe("harfbuzz module", function()
     end)
   end)
 
+  describe("harfbuzz.Variation", function()
+    it("can be initialised with a valid variation string", function()
+      harfbuzz.Variation.new('wght=default')
+      harfbuzz.Variation.new('wght=400')
+      harfbuzz.Variation.new('wght=-20')
+    end)
+
+    it("throws an error when trying to initialise a new variation with an invalid string", function()
+       assert.are_equal(nil, harfbuzz.Variation.new(''))
+       assert.are_equal(nil, harfbuzz.Variation.new('wght'))
+    end)
+
+    it("has a valid tostring value", function()
+      local vs = 'wght=200'
+      local v = harfbuzz.Variation.new(vs)
+      assert.are_equal(vs, tostring(v))
+    end)
+
+    it("has visible fields", function()
+      local v = harfbuzz.Variation.new('wght=400')
+      assert.are_equal(tostring(v.tag), 'wght')
+      assert.are_equal(v.value, 400)
+
+      v = harfbuzz.Variation.new('slnt=-7.5')
+      assert.are_equal(tostring(v.tag), 'slnt')
+      assert.are_equal(v.value, -7.5)
+    end)
+
+    it("has editable fields", function()
+      local f = harfbuzz.Variation.new('slnt=5')
+      f.tag, f.value = harfbuzz.Tag.new"wght", 7
+      assert.are_equal(tostring(f), "wght=7")
+
+      f.tag, f.value = harfbuzz.Tag.new"hght", 0
+      assert.are_equal(tostring(f), "hght=0")
+    end)
+  end)
+
   describe("harfbuzz.Tag", function()
     it("can be initialised with a valid tag string", function()
       harfbuzz.Tag.new('Zyyy')
diff --git a/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/face.c b/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/face.c
index 5538c7045..45296e045 100644
--- a/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/face.c
+++ b/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/face.c
@@ -1,5 +1,20 @@
 #include "luaharfbuzz.h"
 
+#ifdef LuajitTeX
+
+static int lua_absindex (lua_State *L, int i) {
+  if (i < 0 && i > LUA_REGISTRYINDEX)
+    i += lua_gettop(L) + 1;
+  return i;
+}
+static void lua_seti (lua_State *L, int index, lua_Integer i) {
+  index = lua_absindex(L, index);
+  lua_pushinteger(L, i);
+  lua_insert(L, -2);
+  lua_settable(L, index);
+}
+#endif
+
 /* Size of static arrays we use to avoid heap allocating memory when reading
  * data from HarfBuzz. */
 #define STATIC_ARRAY_SIZE 128
@@ -423,6 +438,179 @@ static int face_ot_color_glyph_get_svg(lua_State *L) {
   return 1;
 }
 
+static int face_var_has_data(lua_State *L) {
+  Face *f = (Face *)luaL_checkudata(L, 1, "harfbuzz.Face");
+
+  lua_pushboolean(L, hb_ot_var_has_data(*f));
+  return 1;
+}
+
+static int push_axis_info(lua_State *L, const hb_ot_var_axis_info_t *info) {
+  lua_createtable(L, 0, 7);
+
+  lua_pushinteger(L, info->axis_index + 1);
+  lua_setfield(L, -2, "axis_index");
+
+  Tag *tp = (Tag *)lua_newuserdata(L, sizeof(*tp));
+  luaL_getmetatable(L, "harfbuzz.Tag");
+  lua_setmetatable(L, -2);
+  *tp = info->tag;
+  lua_setfield(L, -2, "tag");
+
+  lua_pushinteger(L, info->name_id);
+  lua_setfield(L, -2, "name_id");
+
+  lua_pushinteger(L, info->flags);
+  lua_setfield(L, -2, "flags");
+
+  lua_pushnumber(L, info->min_value);
+  lua_setfield(L, -2, "min_value");
+
+  lua_pushnumber(L, info->default_value);
+  lua_setfield(L, -2, "default_value");
+
+  lua_pushnumber(L, info->max_value);
+  lua_setfield(L, -2, "max_value");
+
+  return 1;
+}
+
+static int face_var_find_axis_info(lua_State *L) {
+  Face *face = (Face *)luaL_checkudata(L, 1, "harfbuzz.Face");
+  Tag *tag = (Tag *)luaL_checkudata(L, 2, "harfbuzz.Tag");
+  hb_ot_var_axis_info_t axis_info;
+
+  if (hb_ot_var_find_axis_info(*face, *tag, &axis_info))
+    push_axis_info(L, &axis_info);
+  else
+    lua_pushnil(L);
+  return 1;
+}
+
+static int face_var_get_axis_infos(lua_State *L) {
+  Face *face = (Face *)luaL_checkudata(L, 1, "harfbuzz.Face");
+  lua_Integer start = luaL_optinteger(L, 2, 1) - 1;
+  lua_Integer stop = luaL_optinteger(L, 2, -1);
+  if (start < -1)
+    start += hb_ot_var_get_axis_count(*face) + 1;
+  if (stop < 0)
+    stop += hb_ot_var_get_axis_count(*face) + 1;
+
+  if (start < 0 || stop - start > STATIC_ARRAY_SIZE)
+    lua_pushnil(L);
+  else if (stop <= start)
+    lua_createtable(L, 0, 0);
+  else {
+    unsigned int count = stop - start;
+    hb_ot_var_axis_info_t axis_infos[STATIC_ARRAY_SIZE];
+
+    hb_ot_var_get_axis_infos(*face, start, &count, axis_infos);
+
+    lua_createtable(L, count, 0);
+    for (int i = 0; i != count; i++) {
+      push_axis_info(L, axis_infos + i);
+      lua_seti(L, -2, i + 1);
+    }
+  }
+  return 1;
+}
+
+static int face_var_named_instance_get_infos(lua_State *L) {
+  Face *face = (Face *)luaL_checkudata(L, 1, "harfbuzz.Face");
+  lua_Integer start = luaL_optinteger(L, 2, 1) - 1;
+  lua_Integer stop = luaL_optinteger(L, 2, -1);
+
+  unsigned int total = hb_ot_var_get_named_instance_count(*face);
+
+  if (start < -1)
+    start += total + 1;
+  if (stop < 0)
+    stop += total + 1;
+  if (stop > total)
+    stop = total;
+
+  if (start < 0)
+    lua_pushnil(L);
+  else if (stop <= start)
+    lua_createtable(L, 0, 0);
+  else {
+    lua_createtable(L, stop - start, 0);
+    for (int i = start; i != stop; i++) {
+      lua_createtable(L, 0, 3);
+
+      lua_pushinteger(L, i + 1);
+      lua_setfield(L, -2, "index");
+
+      lua_pushinteger(L, hb_ot_var_named_instance_get_subfamily_name_id(*face, i));
+      lua_setfield(L, -2, "subfamily_name_id");
+
+      lua_pushinteger(L, hb_ot_var_named_instance_get_subfamily_name_id(*face, i));
+      lua_setfield(L, -2, "subfamily_name_id");
+
+      lua_pushinteger(L, hb_ot_var_named_instance_get_postscript_name_id(*face, i));
+      lua_setfield(L, -2, "postscript_name_id");
+
+      lua_seti(L, -2, i - start + 1);
+    }
+  }
+  return 1;
+}
+
+static int face_var_named_instance_get_design_coords(lua_State *L) {
+  Face *face = (Face *)luaL_checkudata(L, 1, "harfbuzz.Face");
+  lua_Integer index = luaL_checkinteger(L, 2) - 1;
+
+  float coords[STATIC_ARRAY_SIZE];
+  unsigned int count = STATIC_ARRAY_SIZE;
+  count = hb_ot_var_named_instance_get_design_coords(*face, index, &count, coords);
+
+  for (int i = 0; i != count; i++) {
+    lua_pushnumber(L, coords[i]);
+  }
+  return count;
+}
+
+static int face_var_normalize_variations(lua_State *L) {
+  Face *face = (Face *)luaL_checkudata(L, 1, "harfbuzz.Face");
+  unsigned int count = lua_gettop(L)-1;
+  if (count > STATIC_ARRAY_SIZE) {
+    return 0;
+  }
+
+  Variation variations[STATIC_ARRAY_SIZE];
+  for (unsigned int i = 0; i != count; i++)
+    variations[i] = *(Variation *)luaL_checkudata(L, i+2, "harfbuzz.Variation");
+
+  unsigned int coord_count = hb_ot_var_get_axis_count(*face);
+  int normalized[STATIC_ARRAY_SIZE];
+  hb_ot_var_normalize_variations(*face, variations, count, normalized, coord_count);
+
+  for (int i = 0; i != coord_count; i++) {
+    lua_pushinteger(L, normalized[i]);
+  }
+  return coord_count;
+}
+
+static int face_var_normalize_coords(lua_State *L) {
+  Face *face = (Face *)luaL_checkudata(L, 1, "harfbuzz.Face");
+  unsigned int count = lua_gettop(L)-1;
+  if (count > STATIC_ARRAY_SIZE) {
+    return 0;
+  }
+
+  float coords[STATIC_ARRAY_SIZE];
+  for (unsigned int i = 0; i != count; i++)
+    coords[i] = luaL_checknumber(L, i+2);
+
+  int normalized[STATIC_ARRAY_SIZE];
+  hb_ot_var_normalize_coords(*face, count, coords, normalized);
+
+  for (int i = 0; i != count; i++) {
+    lua_pushinteger(L, normalized[i]);
+  }
+  return count;
+}
+
 static int face_destroy(lua_State *L) {
   Face *f = (Face *)luaL_checkudata(L, 1, "harfbuzz.Face");
 
@@ -452,6 +640,13 @@ static const struct luaL_Reg face_methods[] = {
   { "ot_layout_find_script", face_ot_layout_find_script },
   { "ot_layout_find_language", face_ot_layout_find_language },
   { "ot_layout_find_feature", face_ot_layout_find_feature },
+  { "ot_var_has_data", face_var_has_data },
+  { "ot_var_find_axis_info", face_var_find_axis_info },
+  { "ot_var_get_axis_infos", face_var_get_axis_infos },
+  { "ot_var_named_instance_get_infos", face_var_named_instance_get_infos },
+  { "ot_var_named_instance_get_design_coords", face_var_named_instance_get_design_coords },
+  { "ot_var_normalize_variations", face_var_normalize_variations },
+  { "ot_var_normalize_coords", face_var_normalize_coords },
   { NULL, NULL }
 };
 
diff --git a/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/font.c b/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/font.c
index c60167364..2734534a2 100644
--- a/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/font.c
+++ b/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/font.c
@@ -192,6 +192,62 @@ static int font_ot_color_glyph_get_png(lua_State *L) {
   return 1;
 }
 
+static int font_set_variations(lua_State *L) {
+  Font *f = (Font *)luaL_checkudata(L, 1, "harfbuzz.Font");
+  unsigned int count = lua_gettop(L) - 1;
+  if (count > 128)
+    count = 128;
+  Variation variations[128];
+  for (int i = 0; i != count; i++)
+    variations[i] = *(Variation *)luaL_checkudata(L, i + 2, "harfbuzz.Variation");
+
+  hb_font_set_variations(*f, variations, count);
+  return 0;
+}
+
+static int font_set_var_coords_design(lua_State *L) {
+  Font *f = (Font *)luaL_checkudata(L, 1, "harfbuzz.Font");
+  unsigned int count = lua_gettop(L) - 1;
+  if (count > 128)
+    count = 128;
+  float coords[128];
+  for (int i = 0; i != count; i++)
+    coords[i] = luaL_checknumber(L, i + 2);
+
+  hb_font_set_var_coords_design(*f, coords, count);
+  return 0;
+}
+
+static int font_set_var_coords_normalized(lua_State *L) {
+  Font *f = (Font *)luaL_checkudata(L, 1, "harfbuzz.Font");
+  unsigned int count = lua_gettop(L) - 1;
+  if (count > 128)
+    count = 128;
+  int coords[128];
+  for (int i = 0; i != count; i++)
+    coords[i] = luaL_checkinteger(L, i + 2);
+
+  hb_font_set_var_coords_normalized(*f, coords, count);
+  return 0;
+}
+
+static int font_set_var_named_instance(lua_State *L) {
+  Font *f = (Font *)luaL_checkudata(L, 1, "harfbuzz.Font");
+  unsigned int instance = luaL_checkinteger(L, 2);
+
+  hb_font_set_var_named_instance(*f, instance);
+  return 0;
+}
+
+static int font_get_var_coords_normalized(lua_State *L) {
+  Font *f = (Font *)luaL_checkudata(L, 1, "harfbuzz.Font");
+  unsigned int count;
+  const int *coords = hb_font_get_var_coords_normalized(*f, &count);
+  for (int i = 0; i != count; i++)
+    lua_pushinteger(L, coords[i]);
+  return count;
+}
+
 static const struct luaL_Reg font_methods[] = {
   { "__gc", font_destroy },
   { "set_scale", font_set_scale },
@@ -205,6 +261,11 @@ static const struct luaL_Reg font_methods[] = {
   { "get_glyph_v_advance", font_get_glyph_v_advance },
   { "get_nominal_glyph", font_get_nominal_glyph },
   { "ot_color_glyph_get_png", font_ot_color_glyph_get_png },
+  { "set_variations", font_set_variations },
+  { "set_var_coords_design", font_set_var_coords_design },
+  { "set_var_coords_normalized", font_set_var_coords_normalized },
+  { "set_var_named_instance", font_set_var_named_instance },
+  { "get_var_coords_normalized", font_get_var_coords_normalized },
   { NULL, NULL }
 };
 
diff --git a/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/luaharfbuzz.c b/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/luaharfbuzz.c
index 176c552aa..8c841e563 100644
--- a/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/luaharfbuzz.c
+++ b/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/luaharfbuzz.c
@@ -103,6 +103,9 @@ int luaopen_luaharfbuzz (lua_State *L) {
   register_language(L);
   lua_setfield(L, -2, "Language");
 
+  register_variation(L);
+  lua_setfield(L, -2, "Variation");
+
   register_ot(L);
   lua_setfield(L, -2, "ot");
 
diff --git a/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/luaharfbuzz.h b/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/luaharfbuzz.h
index 60f5db9c2..4b3aea6f5 100644
--- a/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/luaharfbuzz.h
+++ b/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/luaharfbuzz.h
@@ -18,6 +18,7 @@ typedef hb_tag_t Tag;
 typedef hb_script_t Script;
 typedef hb_direction_t Direction;
 typedef hb_language_t Language;
+typedef hb_variation_t Variation;
 
 typedef struct luahb_constant_t {
   const char *name;
@@ -35,6 +36,7 @@ int register_tag(lua_State *L);
 int register_script(lua_State *L);
 int register_direction(lua_State *L);
 int register_language(lua_State *L);
+int register_variation(lua_State *L);
 int register_ot(lua_State *L);
 int register_unicode(lua_State *L);
 
diff --git a/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c b/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c
new file mode 100644
index 000000000..5683aa607
--- /dev/null
+++ b/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c
@@ -0,0 +1,82 @@
+// harfbuzz.Variation
+#include "luaharfbuzz.h"
+
+static int variation_new(lua_State *L) {
+  Variation v;
+  const char *variation = luaL_checkstring(L, 1);
+
+  if (hb_variation_from_string(variation, -1, &v)) {
+    Variation *vp = (Variation *)lua_newuserdata(L, sizeof(*vp));
+    luaL_getmetatable(L, "harfbuzz.Variation");
+    lua_setmetatable(L, -2);
+    *vp = v;
+  } else {
+    lua_pushnil(L);
+  }
+
+  return 1;
+}
+
+static int variation_to_string(lua_State *L) {
+  Variation* v = (Variation *)luaL_checkudata(L, 1, "harfbuzz.Variation");
+  char variation[128];
+
+  hb_variation_to_string(v, variation, 128);
+  lua_pushstring(L, variation);
+  return 1;
+}
+
+static const char *variation_tag_ptr;
+static const char *variation_value_ptr;
+
+static int variation_index(lua_State *L) {
+  Variation* v = (Variation *)luaL_checkudata(L, 1, "harfbuzz.Variation");
+  const char *key = lua_tostring(L, 2);
+
+  if (key == variation_tag_ptr) {
+    Tag *tag = (Tag *)lua_newuserdata(L, sizeof(*tag));
+    luaL_getmetatable(L, "harfbuzz.Tag");
+    lua_setmetatable(L, -2);
+    *tag = v->tag;
+  } else if (key == variation_value_ptr) {
+    lua_pushnumber(L, v->value);
+  } else {
+    lua_pushnil(L);
+  }
+  return 1;
+}
+
+static int variation_newindex(lua_State *L) {
+  Variation* v = (Variation *)luaL_checkudata(L, 1, "harfbuzz.Variation");
+  const char *key = lua_tostring(L, 2);
+
+  if (key == variation_tag_ptr) {
+    v->tag = *(Tag *)luaL_checkudata(L, 3, "harfbuzz.Tag");
+  } else if (key == variation_value_ptr) {
+    v->value = luaL_checknumber(L, 3);
+  }
+  return 0;
+}
+
+static const struct luaL_Reg variation_methods[] = {
+  { "__index", variation_index },
+  { "__newindex", variation_newindex },
+  { "__tostring", variation_to_string },
+  { NULL, NULL },
+};
+
+static const struct luaL_Reg variation_functions[] = {
+  { "new", variation_new },
+  { NULL,  NULL }
+};
+
+int register_variation(lua_State *L) {
+  lua_pushliteral(L, "tag");
+  variation_tag_ptr = lua_tostring(L, -1);
+  (void) luaL_ref (L, LUA_REGISTRYINDEX);
+  lua_pushliteral(L, "value");
+  variation_value_ptr = lua_tostring(L, -1);
+  (void) luaL_ref (L, LUA_REGISTRYINDEX);
+
+  return register_class(L, "harfbuzz.Variation", variation_methods, variation_functions, NULL);
+}
-- 
2.32.0


From luigi.scarso at gmail.com  Mon Aug  2 19:12:56 2021
From: luigi.scarso at gmail.com (luigi scarso)
Date: Mon, 2 Aug 2021 19:12:56 +0200
Subject: [Dev-luatex] [PATCH] luaharfbuzz: Provide interface for
 variable fonts
In-Reply-To: <20210802165628.iwebq7e64nqfv6aw@beeblebrox>
References: <20210802165628.iwebq7e64nqfv6aw@beeblebrox>
Message-ID: <CAG5iGsB2v4fpGJmfN9TNzixyb9mQTjVA0kZ5-KbLhN6J4E83Xg@mail.gmail.com>

On Mon, Aug 2, 2021 at 6:57 PM Marcel Fabian KrÃ¼ger <tex at 2krueger.de> wrote:

> Hi,
>
> please consider the attached patch for luahbtex. It adds a Lua interface
> for HarfBuzz's functions around variable fonts.
>
> It is an adoption of recent upstream luaharfbuzz changes with additional
> LuaJIT support. While corresponding busted tests are included too, the
> font needed to actually run these tests has not been added to the fonts
> directory since sending binary files in diffs via email is problematic
> and I don't think that anyone is running these tests from the LuaTeX
> repo anyway.
>

1) why 2 files ?
2)  Makefile.in is not necessary
3) can you make  each patch as a separate file, and then  make a zip (o tar
)?

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20210802/b19d93a4/attachment.htm>

From tex at 2krueger.de  Mon Aug  2 20:40:21 2021
From: tex at 2krueger.de (Marcel Fabian =?utf-8?Q?Kr=C3=BCger?=)
Date: Mon, 2 Aug 2021 20:40:21 +0200
Subject: [Dev-luatex] [PATCH] luaharfbuzz: Provide interface for
 variable fonts
In-Reply-To: <CAG5iGsB2v4fpGJmfN9TNzixyb9mQTjVA0kZ5-KbLhN6J4E83Xg@mail.gmail.com>
References: <20210802165628.iwebq7e64nqfv6aw@beeblebrox>
 <CAG5iGsB2v4fpGJmfN9TNzixyb9mQTjVA0kZ5-KbLhN6J4E83Xg@mail.gmail.com>
Message-ID: <20210802184021.uvmt36r5oczalc6h@beeblebrox>

On Mon, Aug 02, 2021 at 07:12:56PM +0200, luigi scarso wrote:
> On Mon, Aug 2, 2021 at 6:57 PM Marcel Fabian KrÃ¼ger <tex at 2krueger.de> wrote:
> 
> > Hi,
> >
> > please consider the attached patch for luahbtex. It adds a Lua interface
> > for HarfBuzz's functions around variable fonts.
> >
> > It is an adoption of recent upstream luaharfbuzz changes with additional
> > LuaJIT support. While corresponding busted tests are included too, the
> > font needed to actually run these tests has not been added to the fonts
> > directory since sending binary files in diffs via email is problematic
> > and I don't think that anyone is running these tests from the LuaTeX
> > repo anyway.
> >
> 
> 1) why 2 files ?

Whenever I checkout the sources from git, svn or the web interface I get files
with UNIX line ending, but some months ago you mentioned that a patch
couldn't be applied because it should have used Windows line endings
instead. Therefore I added a .win version with Windows line endings to
avoid issues but still included the other patch since that's the one I
actually tested locally.

> 2)  Makefile.in is not necessary
Ok, I dropped it.

> 3) can you make  each patch as a separate file, and then  make a zip (o tar
> )?
Sure, I added a zip of the individual patches.

Best,
Marcel
-------------- next part --------------
A non-text attachment was scrubbed...
Name: patches.zip
Type: application/zip
Size: 6919 bytes
Desc: not available
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20210802/a76a0c9a/attachment.zip>

From luigi.scarso at gmail.com  Tue Aug  3 11:51:16 2021
From: luigi.scarso at gmail.com (luigi scarso)
Date: Tue, 3 Aug 2021 11:51:16 +0200
Subject: [Dev-luatex] [PATCH] luaharfbuzz: Provide interface for
 variable fonts
In-Reply-To: <20210802184021.uvmt36r5oczalc6h@beeblebrox>
References: <20210802165628.iwebq7e64nqfv6aw@beeblebrox>
 <CAG5iGsB2v4fpGJmfN9TNzixyb9mQTjVA0kZ5-KbLhN6J4E83Xg@mail.gmail.com>
 <20210802184021.uvmt36r5oczalc6h@beeblebrox>
Message-ID: <CAG5iGsDxW=YKq+40Y8HK8+WnnkUNc9bjKm1_ni8RnoLAJEJCSQ@mail.gmail.com>

On Mon, Aug 2, 2021 at 8:40 PM Marcel Fabian KrÃ¼ger <tex at 2krueger.de> wrote:

>
> > 1) why 2 files ?
>
> Whenever I checkout the sources from git, svn or the web interface I get
> files
> with UNIX line ending, but some months ago you mentioned that a patch
> couldn't be applied because it should have used Windows line endings
> instead. Therefore I added a .win version with Windows line endings to
> avoid issues but still included the other patch since that's the one I
> actually tested locally.
>
>
Do you remember the email ? All code should be with UNIX line ending

Sure, I added a zip of the individual patches.
>

Patches applied, but I don't have variation.c, which is mentioned
in luaharfbuzz.am.patch
and  so variation.c.patch cannot be applied .

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20210803/d36a1cc7/attachment.htm>

From tex at 2krueger.de  Tue Aug  3 13:43:57 2021
From: tex at 2krueger.de (Marcel Fabian =?utf-8?Q?Kr=C3=BCger?=)
Date: Tue, 3 Aug 2021 13:43:57 +0200
Subject: [Dev-luatex] [PATCH] luaharfbuzz: Provide interface for
 variable fonts
In-Reply-To: <CAG5iGsDxW=YKq+40Y8HK8+WnnkUNc9bjKm1_ni8RnoLAJEJCSQ@mail.gmail.com>
References: <20210802165628.iwebq7e64nqfv6aw@beeblebrox>
 <CAG5iGsB2v4fpGJmfN9TNzixyb9mQTjVA0kZ5-KbLhN6J4E83Xg@mail.gmail.com>
 <20210802184021.uvmt36r5oczalc6h@beeblebrox>
 <CAG5iGsDxW=YKq+40Y8HK8+WnnkUNc9bjKm1_ni8RnoLAJEJCSQ@mail.gmail.com>
Message-ID: <20210803114357.ro3e2m6rywih23ka@beeblebrox>

On Tue, Aug 03, 2021 at 11:51:16AM +0200, luigi scarso wrote:
> On Mon, Aug 2, 2021 at 8:40 PM Marcel Fabian KrÃ¼ger <tex at 2krueger.de> wrote:
> 
> >
> > > 1) why 2 files ?
> >
> > Whenever I checkout the sources from git, svn or the web interface I get
> > files
> > with UNIX line ending, but some months ago you mentioned that a patch
> > couldn't be applied because it should have used Windows line endings
> > instead. Therefore I added a .win version with Windows line endings to
> > avoid issues but still included the other patch since that's the one I
> > actually tested locally.
> >
> >
> Do you remember the email ? All code should be with UNIX line ending

Hi Luigi,

Oops, looking back I realized that I remembered it incorrectly: The issue
was that the file couldn't get applied because the *patch* had Windows
lineendings. Not sure how that happened but anyway I stand corrected.

> 
> Sure, I added a zip of the individual patches.
> >
> 
> Patches applied, but I don't have variation.c, which is mentioned
> in luaharfbuzz.am.patch
> and  so variation.c.patch cannot be applied .

Actually variation.c.patch is supposed to create a new file, so it
should work even if the file doesn't exists yet. Not sure how standard
that format is though, it seems to be a git extension which got picked
up by GNU patch but not by many other tools.

I added the full file variation.c as an attachment. It belongs at
source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c

Best,
Marcel
-------------- next part --------------
// harfbuzz.Variation
#include "luaharfbuzz.h"

static int variation_new(lua_State *L) {
  Variation v;
  const char *variation = luaL_checkstring(L, 1);

  if (hb_variation_from_string(variation, -1, &v)) {
    Variation *vp = (Variation *)lua_newuserdata(L, sizeof(*vp));
    luaL_getmetatable(L, "harfbuzz.Variation");
    lua_setmetatable(L, -2);
    *vp = v;
  } else {
    lua_pushnil(L);
  }

  return 1;
}

static int variation_to_string(lua_State *L) {
  Variation* v = (Variation *)luaL_checkudata(L, 1, "harfbuzz.Variation");
  char variation[128];

  hb_variation_to_string(v, variation, 128);
  lua_pushstring(L, variation);
  return 1;
}

static const char *variation_tag_ptr;
static const char *variation_value_ptr;

static int variation_index(lua_State *L) {
  Variation* v = (Variation *)luaL_checkudata(L, 1, "harfbuzz.Variation");
  const char *key = lua_tostring(L, 2);

  if (key == variation_tag_ptr) {
    Tag *tag = (Tag *)lua_newuserdata(L, sizeof(*tag));
    luaL_getmetatable(L, "harfbuzz.Tag");
    lua_setmetatable(L, -2);
    *tag = v->tag;
  } else if (key == variation_value_ptr) {
    lua_pushnumber(L, v->value);
  } else {
    lua_pushnil(L);
  }
  return 1;
}

static int variation_newindex(lua_State *L) {
  Variation* v = (Variation *)luaL_checkudata(L, 1, "harfbuzz.Variation");
  const char *key = lua_tostring(L, 2);

  if (key == variation_tag_ptr) {
    v->tag = *(Tag *)luaL_checkudata(L, 3, "harfbuzz.Tag");
  } else if (key == variation_value_ptr) {
    v->value = luaL_checknumber(L, 3);
  }
  return 0;
}

static const struct luaL_Reg variation_methods[] = {
  { "__index", variation_index },
  { "__newindex", variation_newindex },
  { "__tostring", variation_to_string },
  { NULL, NULL },
};

static const struct luaL_Reg variation_functions[] = {
  { "new", variation_new },
  { NULL,  NULL }
};

int register_variation(lua_State *L) {
  lua_pushliteral(L, "tag");
  variation_tag_ptr = lua_tostring(L, -1);
  (void) luaL_ref (L, LUA_REGISTRYINDEX);
  lua_pushliteral(L, "value");
  variation_value_ptr = lua_tostring(L, -1);
  (void) luaL_ref (L, LUA_REGISTRYINDEX);

  return register_class(L, "harfbuzz.Variation", variation_methods, variation_functions, NULL);
}

From luigi.scarso at gmail.com  Tue Aug  3 14:36:08 2021
From: luigi.scarso at gmail.com (luigi scarso)
Date: Tue, 3 Aug 2021 14:36:08 +0200
Subject: [Dev-luatex] [PATCH] luaharfbuzz: Provide interface for
 variable fonts
In-Reply-To: <20210803114357.ro3e2m6rywih23ka@beeblebrox>
References: <20210802165628.iwebq7e64nqfv6aw@beeblebrox>
 <CAG5iGsB2v4fpGJmfN9TNzixyb9mQTjVA0kZ5-KbLhN6J4E83Xg@mail.gmail.com>
 <20210802184021.uvmt36r5oczalc6h@beeblebrox>
 <CAG5iGsDxW=YKq+40Y8HK8+WnnkUNc9bjKm1_ni8RnoLAJEJCSQ@mail.gmail.com>
 <20210803114357.ro3e2m6rywih23ka@beeblebrox>
Message-ID: <CAG5iGsBO7qdsa=5PZx3gTkLehB61o2zLC7vbE2J5Umzz7BD=8g@mail.gmail.com>

On Tue, Aug 3, 2021 at 1:44 PM Marcel Fabian KrÃ¼ger <tex at 2krueger.de> wrote:

>
> Oops, looking back I realized that I remembered it incorrectly: The issue
> was that the file couldn't get applied because the *patch* had Windows
> lineendings. Not sure how that happened but anyway I stand corrected.
>
>
Indeed, that was the case.


>
> I added the full file variation.c as an attachment. It belongs at
> source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/variation.c
>

and again your variation.c attached has Windows line endings.
Anyway, variation.c from variation.c.patch is ok, it is  the same
of luaharfbuzz-master .

In general Windows line endings  are not a problem for me, because I am
used  to run dos2unix  before.
The default diff (i.e. without ignoring blanks)  is annoying because it
says  that all the lines differ,
and I don't run diff -b  because spaces matter in comments .

Committed revision 7447.

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20210803/f4545912/attachment.htm>

From tex at 2krueger.de  Wed Aug  4 14:11:45 2021
From: tex at 2krueger.de (Marcel Fabian =?utf-8?Q?Kr=C3=BCger?=)
Date: Wed, 4 Aug 2021 14:11:45 +0200
Subject: [Dev-luatex] [PATCH] luaharfbuzz: Provide interface for
 variable fonts
In-Reply-To: <CAG5iGsDxW=YKq+40Y8HK8+WnnkUNc9bjKm1_ni8RnoLAJEJCSQ@mail.gmail.com>
References: <20210802165628.iwebq7e64nqfv6aw@beeblebrox>
 <CAG5iGsB2v4fpGJmfN9TNzixyb9mQTjVA0kZ5-KbLhN6J4E83Xg@mail.gmail.com>
 <20210802184021.uvmt36r5oczalc6h@beeblebrox>
 <CAG5iGsDxW=YKq+40Y8HK8+WnnkUNc9bjKm1_ni8RnoLAJEJCSQ@mail.gmail.com>
Message-ID: <20210804121145.nrcux3aybuo3c7mf@beeblebrox>

On Tue, Aug 03, 2021 at 11:51:16AM +0200, luigi scarso wrote:
> Patches applied, but I don't have variation.c, which is mentioned
> in luaharfbuzz.am.patch
> and  so variation.c.patch cannot be applied .
> 

Sadly I introduced a bug here: Named instances queried from face
objects use 1-based indices, while the related Font method to set the
current instance still uses a zero based index. 

I attached a patch to fix this issue.

Best regards,
Marcel
-------------- next part --------------
From b1c13f1aab58fc8ff4ed572a3bed38c957535170 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marcel=20Fabian=20Kr=C3=BCger?= <tex at 2krueger.de>
Date: Wed, 4 Aug 2021 14:02:28 +0200
Subject: [PATCH] Fix named instance inconsistency in luaharfbuzz

---
 source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/font.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/font.c b/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/font.c
index 2734534a2..d369f02f2 100644
--- a/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/font.c
+++ b/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/font.c
@@ -235,7 +235,7 @@ static int font_set_var_named_instance(lua_State *L) {
   Font *f = (Font *)luaL_checkudata(L, 1, "harfbuzz.Font");
   unsigned int instance = luaL_checkinteger(L, 2);
 
-  hb_font_set_var_named_instance(*f, instance);
+  hb_font_set_var_named_instance(*f, instance - 1);
   return 0;
 }
 
-- 
2.32.0


From luigi.scarso at gmail.com  Wed Aug  4 14:56:23 2021
From: luigi.scarso at gmail.com (luigi scarso)
Date: Wed, 4 Aug 2021 14:56:23 +0200
Subject: [Dev-luatex] [PATCH] luaharfbuzz: Provide interface for
 variable fonts
In-Reply-To: <20210804121145.nrcux3aybuo3c7mf@beeblebrox>
References: <20210802165628.iwebq7e64nqfv6aw@beeblebrox>
 <CAG5iGsB2v4fpGJmfN9TNzixyb9mQTjVA0kZ5-KbLhN6J4E83Xg@mail.gmail.com>
 <20210802184021.uvmt36r5oczalc6h@beeblebrox>
 <CAG5iGsDxW=YKq+40Y8HK8+WnnkUNc9bjKm1_ni8RnoLAJEJCSQ@mail.gmail.com>
 <20210804121145.nrcux3aybuo3c7mf@beeblebrox>
Message-ID: <CAG5iGsAUruqq-wXD4V9u8n1J3wS5v+5DHeFhfXK6C9BofM-jYw@mail.gmail.com>

On Wed, Aug 4, 2021 at 2:11 PM Marcel Fabian KrÃ¼ger <tex at 2krueger.de> wrote:

> On Tue, Aug 03, 2021 at 11:51:16AM +0200, luigi scarso wrote:
> > Patches applied, but I don't have variation.c, which is mentioned
> > in luaharfbuzz.am.patch
> > and  so variation.c.patch cannot be applied .
> >
>
> Sadly I introduced a bug here: Named instances queried from face
> objects use 1-based indices, while the related Font method to set the
> current instance still uses a zero based index.
>
> I attached a patch to fix this issue.
>
> Best regards,
> Marcel
>

Committed revision 7448.
-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20210804/7ff107b2/attachment.htm>

From tex at 2krueger.de  Sat Aug  7 02:30:09 2021
From: tex at 2krueger.de (Marcel Fabian =?utf-8?Q?Kr=C3=BCger?=)
Date: Sat, 7 Aug 2021 02:30:09 +0200
Subject: [Dev-luatex] Improvements for glyph_stream_provider with TTF fonts
Message-ID: <20210807003009.czegf2pbpbpzt6vw@beeblebrox>

Hi,

while working with the glyph_stream_provider callback I noticed that it
has some issues, especially around TTF fonts.

Especially LuaTeX analyzes the glyph streams *before* the callback get
involved to identify composite glyphs. If composite glyphs are found,
the corresponding components get added to the subset bug get new glyph
ids. Later, when glyph_stream_provider is called to get the glyph
streams, the parameters are the new glyph ids which are assigned by
LuaTeX and the mapping is not made available.

This leads to two issues:

  - When glyph_stream_provider is used, composite glyphs can't be
    preserved but have to be expanded since the callback has no way of
    knowing the final (remapped) glyph ids of the components.
    This can not only make the file bigger, it can also invalidate hinting
    instructions.
  - Even though the remapped components can't be found from the composite
    glyphs, they still trigger a call to the callback which can't be
    distinguished from normal calls and therefore still lead to
    something being added to the embedded font. Since only the remapped
    GID is made available, this will not even be the correct component
    glyph which happens to be in the slot described by the glyph id the
    component got mapped to (typically glyphs 1, 2, etc. since the
    remapping maps to the smallest unused glyph ids).
    This mostly just makes the embedded font bigger and it's confusing
    when looking at these subsetted fonts with weird glyphs included in
    the subset.
  - Somewhat independently, this current code does not allow the side
    bearings and advance widths to be modified which means that some
    table values can get inconsistent for variable fonts which change
    these values.

This this is used by existing code and mostly just causes inefficiencies
and not outright errors, the existing behavior should probably be kept
available for compatibility, so I suggest the following addition:

  When a font has font_streamprovider set to 3, behave exactly as if the
  streamprovider was 2, except that before the "normal"
  glyph_stream_provider provider calls for a font happen (with arguments
  fontid, (remapped) gid, 2) call the `glyph_stream_provider` once for
  every glyph with the four arguments
  (fontid, remapped gid, 3, original gid) and expect four return values,
  corresponding to horizontal advance width, left side bearing, vertical
  advance width and top side bearing.

This ensures that when the glyphstreams are generated, the callback code
is aware of the full mapping between original and remapping GIDs and can
therefore use these remapped GIDs correctly.

An example implementation is attached.

Best regards,
Marcel
-------------- next part --------------
diff --git a/source/texk/web2c/luatexdir/font/tt_glyf.c b/source/texk/web2c/luatexdir/font/tt_glyf.c
index 750e126aa..17a72c8e4 100644
--- a/source/texk/web2c/luatexdir/font/tt_glyf.c
+++ b/source/texk/web2c/luatexdir/font/tt_glyf.c
@@ -163,7 +163,7 @@ int tt_build_tables(sfnt * sfont, struct tt_glyphs *g, fd_entry * fd)
     int tex_font = fd->tex_font;
     int streamprovider = 0;
     int callback_id = 0 ;
-    if ((tex_font > 0) && (font_streamprovider(tex_font) == 2)) {
+    if ((tex_font > 0) && (font_streamprovider(tex_font) == 2 || font_streamprovider(tex_font) == 3)) {
         streamprovider = font_streamprovider(tex_font);
         callback_id = callback_defined(glyph_stream_provider_callback);
     }
@@ -230,14 +230,23 @@ int tt_build_tables(sfnt * sfont, struct tt_glyphs *g, fd_entry * fd)
             formatted_error("ttf","invalid glyph index (gid %u)", gid);
         loc = location[gid];
         len = location[gid + 1] - loc;
+        if (callback_id > 0 && streamprovider == 3) {
+            int advw, lsb, advh, tsb;
+            run_callback(callback_id, "dddd->dddd", tex_font, g->gd[i].gid, 3, gid, &advw, &lsb, &advh, &tsb);
+            g->gd[i].advw = advw;
+            g->gd[i].lsb = lsb;
+            g->gd[i].advh = advh;
+            g->gd[i].tsb = tsb;
+        } else {
-        g->gd[i].advw = hmtx[gid].advance;
-        g->gd[i].lsb = hmtx[gid].sideBearing;
-        if (vmtx) {
-            g->gd[i].advh = vmtx[gid].advance;
-            g->gd[i].tsb = vmtx[gid].sideBearing;
-        } else {
-            g->gd[i].advh = g->default_advh;
-            g->gd[i].tsb = g->default_tsb;
-        }
+            g->gd[i].advw = hmtx[gid].advance;
+            g->gd[i].lsb = hmtx[gid].sideBearing;
+            if (vmtx) {
+                g->gd[i].advh = vmtx[gid].advance;
+                g->gd[i].tsb = vmtx[gid].sideBearing;
+            } else {
+                g->gd[i].advh = g->default_advh;
+                g->gd[i].tsb = g->default_tsb;
+            }
+        }
         g->gd[i].length = len;
         g->gd[i].data = NULL;
@@ -402,7 +411,7 @@ int tt_build_tables(sfnt * sfont, struct tt_glyphs *g, fd_entry * fd)
             if (callback_id > 0) {
                 lstring * result;
                 long size = 0;
-                run_callback(callback_id, "ddd->L", tex_font, g->gd[i].gid, streamprovider, &result);
+                run_callback(callback_id, "ddd->L", tex_font, g->gd[i].gid, 2, &result);
                 padlen = (int) ((result->l % 4) ? (4 - (result->l % 4)) : 0);
                 size = (size_t) result->l + (ULONG) padlen;
                 if (glyf_table_used + size >= glyf_table_size) {

From luigi.scarso at gmail.com  Sat Aug  7 10:43:35 2021
From: luigi.scarso at gmail.com (luigi scarso)
Date: Sat, 7 Aug 2021 10:43:35 +0200
Subject: [Dev-luatex] Improvements for glyph_stream_provider with TTF
 fonts
In-Reply-To: <20210807003009.czegf2pbpbpzt6vw@beeblebrox>
References: <20210807003009.czegf2pbpbpzt6vw@beeblebrox>
Message-ID: <CAG5iGsAPh2yud5UrKYJNsYLF0T56emdPGm8nDZ+NgQA6LDC1uw@mail.gmail.com>

On Sat, Aug 7, 2021 at 2:30 AM Marcel Fabian KrÃ¼ger <tex at 2krueger.de> wrote:

>
> An example implementation is attached.
>


$> dos2unix streamprovider3.patch

$> patch  <streamprovider3.patch
patching file tt_glyf.c
Hunk #2 succeeded at 230 with fuzz 1.

hm, different source files ?

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20210807/133d9013/attachment.htm>

From tex at 2krueger.de  Sat Aug  7 14:26:08 2021
From: tex at 2krueger.de (Marcel Fabian =?utf-8?Q?Kr=C3=BCger?=)
Date: Sat, 7 Aug 2021 14:26:08 +0200
Subject: [Dev-luatex] Improvements for glyph_stream_provider with TTF
 fonts
In-Reply-To: <CAG5iGsAPh2yud5UrKYJNsYLF0T56emdPGm8nDZ+NgQA6LDC1uw@mail.gmail.com>
References: <20210807003009.czegf2pbpbpzt6vw@beeblebrox>
 <CAG5iGsAPh2yud5UrKYJNsYLF0T56emdPGm8nDZ+NgQA6LDC1uw@mail.gmail.com>
Message-ID: <20210807122608.gilhsaqrhx7mj5wy@beeblebrox>

On Sat, Aug 07, 2021 at 10:43:35AM +0200, luigi scarso wrote:
> On Sat, Aug 7, 2021 at 2:30 AM Marcel Fabian KrÃ¼ger <tex at 2krueger.de> wrote:
> 
> >
> > An example implementation is attached.
> >
> 
> 
> $> dos2unix streamprovider3.patch
> 
> $> patch  <streamprovider3.patch
> patching file tt_glyf.c
> Hunk #2 succeeded at 230 with fuzz 1.
> 
> hm, different source files ?

No, just an odd diff. I applied it locally with patch and got the same
fuzz. The result is correct though. I'll attach a fixed patch file anyway.
(It's probably caused by attempts to make the patch more
readable by moving lines around. Not quite sure what exactly caused it.
I had only checked patch with `git apply` before which seems to be more
tolerant.)

Best,

  Marcel
-------------- next part --------------
diff --git a/source/texk/web2c/luatexdir/font/tt_glyf.c b/source/texk/web2c/luatexdir/font/tt_glyf.c
index 750e126aa..17a72c8e4 100644
--- a/source/texk/web2c/luatexdir/font/tt_glyf.c
+++ b/source/texk/web2c/luatexdir/font/tt_glyf.c
@@ -163,7 +163,7 @@ int tt_build_tables(sfnt * sfont, struct tt_glyphs *g, fd_entry * fd)
     int tex_font = fd->tex_font;
     int streamprovider = 0;
     int callback_id = 0 ;
-    if ((tex_font > 0) && (font_streamprovider(tex_font) == 2)) {
+    if ((tex_font > 0) && (font_streamprovider(tex_font) == 2 || font_streamprovider(tex_font) == 3)) {
         streamprovider = font_streamprovider(tex_font);
         callback_id = callback_defined(glyph_stream_provider_callback);
     }
@@ -230,14 +230,23 @@ int tt_build_tables(sfnt * sfont, struct tt_glyphs *g, fd_entry * fd)
             formatted_error("ttf","invalid glyph index (gid %u)", gid);
         loc = location[gid];
         len = location[gid + 1] - loc;
-        g->gd[i].advw = hmtx[gid].advance;
-        g->gd[i].lsb = hmtx[gid].sideBearing;
-        if (vmtx) {
-            g->gd[i].advh = vmtx[gid].advance;
-            g->gd[i].tsb = vmtx[gid].sideBearing;
+        if (callback_id > 0 && streamprovider == 3) {
+            int advw, lsb, advh, tsb;
+            run_callback(callback_id, "dddd->dddd", tex_font, g->gd[i].gid, 3, gid, &advw, &lsb, &advh, &tsb);
+            g->gd[i].advw = advw;
+            g->gd[i].lsb = lsb;
+            g->gd[i].advh = advh;
+            g->gd[i].tsb = tsb;
         } else {
-            g->gd[i].advh = g->default_advh;
-            g->gd[i].tsb = g->default_tsb;
+            g->gd[i].advw = hmtx[gid].advance;
+            g->gd[i].lsb = hmtx[gid].sideBearing;
+            if (vmtx) {
+                g->gd[i].advh = vmtx[gid].advance;
+                g->gd[i].tsb = vmtx[gid].sideBearing;
+            } else {
+                g->gd[i].advh = g->default_advh;
+                g->gd[i].tsb = g->default_tsb;
+            }
         }
         g->gd[i].length = len;
         g->gd[i].data = NULL;
@@ -402,7 +411,7 @@ int tt_build_tables(sfnt * sfont, struct tt_glyphs *g, fd_entry * fd)
             if (callback_id > 0) {
                 lstring * result;
                 long size = 0;
-                run_callback(callback_id, "ddd->L", tex_font, g->gd[i].gid, streamprovider, &result);
+                run_callback(callback_id, "ddd->L", tex_font, g->gd[i].gid, 2, &result);
                 padlen = (int) ((result->l % 4) ? (4 - (result->l % 4)) : 0);
                 size = (size_t) result->l + (ULONG) padlen;
                 if (glyf_table_used + size >= glyf_table_size) {

From luigi.scarso at gmail.com  Sun Aug  8 12:19:36 2021
From: luigi.scarso at gmail.com (luigi scarso)
Date: Sun, 8 Aug 2021 12:19:36 +0200
Subject: [Dev-luatex] Improvements for glyph_stream_provider with TTF
 fonts
In-Reply-To: <20210807122608.gilhsaqrhx7mj5wy@beeblebrox>
References: <20210807003009.czegf2pbpbpzt6vw@beeblebrox>
 <CAG5iGsAPh2yud5UrKYJNsYLF0T56emdPGm8nDZ+NgQA6LDC1uw@mail.gmail.com>
 <20210807122608.gilhsaqrhx7mj5wy@beeblebrox>
Message-ID: <CAG5iGsAHnokLubA3ZZ9wZU=kGwwXX37U2n2FPiZHt+iTO0SMJA@mail.gmail.com>

Patch is now ok, but I am perplexed by this line

-                run_callback(callback_id, "ddd->L", tex_font,
g->gd[i].gid, streamprovider, &result);
+                run_callback(callback_id, "ddd->L", tex_font,
g->gd[i].gid, 2, &result);

It's not clear why now we use 2.
Perhaps it's better to introduce another variable, i.e.
int actual_streamprovider ;
if actual_streamprovider>2 {
  actual_streamprovider=2;
}
run_callback(callback_id, "ddd->L", tex_font, g->gd[i].gid,
actual_streamprovider, &result);

Or add a comment  before , something like
/* The streamprovider here is always 2 because... */

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20210808/ea58707a/attachment.htm>

From tex at 2krueger.de  Sun Aug  8 13:27:06 2021
From: tex at 2krueger.de (Marcel Fabian =?utf-8?Q?Kr=C3=BCger?=)
Date: Sun, 8 Aug 2021 13:27:06 +0200
Subject: [Dev-luatex] Improvements for glyph_stream_provider with TTF
 fonts
In-Reply-To: <CAG5iGsAHnokLubA3ZZ9wZU=kGwwXX37U2n2FPiZHt+iTO0SMJA@mail.gmail.com>
References: <20210807003009.czegf2pbpbpzt6vw@beeblebrox>
 <CAG5iGsAPh2yud5UrKYJNsYLF0T56emdPGm8nDZ+NgQA6LDC1uw@mail.gmail.com>
 <20210807122608.gilhsaqrhx7mj5wy@beeblebrox>
 <CAG5iGsAHnokLubA3ZZ9wZU=kGwwXX37U2n2FPiZHt+iTO0SMJA@mail.gmail.com>
Message-ID: <20210808112706.gxiaypynyiu4zq7i@beeblebrox>

Hi,

On Sun, Aug 08, 2021 at 12:19:36PM +0200, luigi scarso wrote:
> Patch is now ok, but I am perplexed by this line
> 
> -                run_callback(callback_id, "ddd->L", tex_font,
> g->gd[i].gid, streamprovider, &result);
> +                run_callback(callback_id, "ddd->L", tex_font,
> g->gd[i].gid, 2, &result);
> 
> It's not clear why now we use 2.

Basically this call is always compatible with the call made if the
streamprovider were 2, so 2 is passed to differentiate it from the
second call which actually provides behavior specific to streamprovider 3
and therefore uses streamprovider 3.

We could also do this differently, e.g. by letting the Lua code determine
it automatically by looking at the number of arguments passed to the
callback or using different callback names, but since I would assume
that most implementations would want to treat the callback from
streamprovider 2 and the streamprovider 2 compatible call from
streamprovider 3 identically anyway I considered this nicer.

> Perhaps it's better to introduce another variable, i.e.
> int actual_streamprovider ;
> if actual_streamprovider>2 {
>   actual_streamprovider=2;
> }
> run_callback(callback_id, "ddd->L", tex_font, g->gd[i].gid,
> actual_streamprovider, &result);
> 
> Or add a comment  before , something like
> /* The streamprovider here is always 2 because... */

Suggested comment:

  /*
      The streamprovider here is always 2, even when we actually have streamprovider == 3,
      to differentiate this call which behaves exactly like the call in the
      streamprovider == 2 case from the streamprovider == 3 specific call earlier.
  */

Best regards,
Marcel

> 
> -- 
> luigi

> _______________________________________________
> dev-luatex mailing list
> dev-luatex at ntg.nl
> https://mailman.ntg.nl/mailman/listinfo/dev-luatex

-------------- next part --------------
diff --git a/source/texk/web2c/luatexdir/font/tt_glyf.c b/source/texk/web2c/luatexdir/font/tt_glyf.c
index 750e126aa..010a25a7f 100644
--- a/source/texk/web2c/luatexdir/font/tt_glyf.c
+++ b/source/texk/web2c/luatexdir/font/tt_glyf.c
@@ -163,7 +163,7 @@ int tt_build_tables(sfnt * sfont, struct tt_glyphs *g, fd_entry * fd)
     int tex_font = fd->tex_font;
     int streamprovider = 0;
     int callback_id = 0 ;
-    if ((tex_font > 0) && (font_streamprovider(tex_font) == 2)) {
+    if ((tex_font > 0) && (font_streamprovider(tex_font) == 2 || font_streamprovider(tex_font) == 3)) {
         streamprovider = font_streamprovider(tex_font);
         callback_id = callback_defined(glyph_stream_provider_callback);
     }
@@ -230,14 +230,24 @@ int tt_build_tables(sfnt * sfont, struct tt_glyphs *g, fd_entry * fd)
             formatted_error("ttf","invalid glyph index (gid %u)", gid);
         loc = location[gid];
         len = location[gid + 1] - loc;
-        g->gd[i].advw = hmtx[gid].advance;
-        g->gd[i].lsb = hmtx[gid].sideBearing;
-        if (vmtx) {
-            g->gd[i].advh = vmtx[gid].advance;
-            g->gd[i].tsb = vmtx[gid].sideBearing;
+        if (callback_id > 0 && streamprovider == 3) {
+            int advw, lsb, advh, tsb;
+            run_callback(callback_id, "dddd->dddd", tex_font, g->gd[i].gid,
+                streamprovider, gid, &advw, &lsb, &advh, &tsb);
+            g->gd[i].advw = advw;
+            g->gd[i].lsb = lsb;
+            g->gd[i].advh = advh;
+            g->gd[i].tsb = tsb;
         } else {
-            g->gd[i].advh = g->default_advh;
-            g->gd[i].tsb = g->default_tsb;
+            g->gd[i].advw = hmtx[gid].advance;
+            g->gd[i].lsb = hmtx[gid].sideBearing;
+            if (vmtx) {
+                g->gd[i].advh = vmtx[gid].advance;
+                g->gd[i].tsb = vmtx[gid].sideBearing;
+            } else {
+                g->gd[i].advh = g->default_advh;
+                g->gd[i].tsb = g->default_tsb;
+            }
         }
         g->gd[i].length = len;
         g->gd[i].data = NULL;
@@ -402,7 +412,12 @@ int tt_build_tables(sfnt * sfont, struct tt_glyphs *g, fd_entry * fd)
             if (callback_id > 0) {
                 lstring * result;
                 long size = 0;
-                run_callback(callback_id, "ddd->L", tex_font, g->gd[i].gid, streamprovider, &result);
+                /*
+                    The streamprovider here is always 2, even when we actually have streamprovider == 3,
+                    to differentiate this call which behaves exactly like the call in the
+                    streamprovider == 2 case from the streamprovider == 3 specific call earlier.
+                */
+                run_callback(callback_id, "ddd->L", tex_font, g->gd[i].gid, 2, &result);
                 padlen = (int) ((result->l % 4) ? (4 - (result->l % 4)) : 0);
                 size = (size_t) result->l + (ULONG) padlen;
                 if (glyf_table_used + size >= glyf_table_size) {

From luigi.scarso at gmail.com  Sun Aug  8 13:32:02 2021
From: luigi.scarso at gmail.com (luigi scarso)
Date: Sun, 8 Aug 2021 13:32:02 +0200
Subject: [Dev-luatex] Improvements for glyph_stream_provider with TTF
 fonts
In-Reply-To: <20210808112706.gxiaypynyiu4zq7i@beeblebrox>
References: <20210807003009.czegf2pbpbpzt6vw@beeblebrox>
 <CAG5iGsAPh2yud5UrKYJNsYLF0T56emdPGm8nDZ+NgQA6LDC1uw@mail.gmail.com>
 <20210807122608.gilhsaqrhx7mj5wy@beeblebrox>
 <CAG5iGsAHnokLubA3ZZ9wZU=kGwwXX37U2n2FPiZHt+iTO0SMJA@mail.gmail.com>
 <20210808112706.gxiaypynyiu4zq7i@beeblebrox>
Message-ID: <CAG5iGsAnGVDFV6LFEiiEe6Uq7SN1QnbcTJFB4e82B3LrTA=q+Q@mail.gmail.com>

On Sun, Aug 8, 2021 at 1:27 PM Marcel Fabian KrÃ¼ger <tex at 2krueger.de> wrote:

>
>   /*
>       The streamprovider here is always 2, even when we actually have
> streamprovider == 3,
>       to differentiate this call which behaves exactly like the call in the
>       streamprovider == 2 case from the streamprovider == 3 specific call
> earlier.
>   */
>

ok.

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20210808/3d6f49b2/attachment.htm>

From luigi.scarso at gmail.com  Sun Aug  8 18:22:02 2021
From: luigi.scarso at gmail.com (luigi scarso)
Date: Sun, 8 Aug 2021 18:22:02 +0200
Subject: [Dev-luatex] Improvements for glyph_stream_provider with TTF
 fonts
In-Reply-To: <CAG5iGsAnGVDFV6LFEiiEe6Uq7SN1QnbcTJFB4e82B3LrTA=q+Q@mail.gmail.com>
References: <20210807003009.czegf2pbpbpzt6vw@beeblebrox>
 <CAG5iGsAPh2yud5UrKYJNsYLF0T56emdPGm8nDZ+NgQA6LDC1uw@mail.gmail.com>
 <20210807122608.gilhsaqrhx7mj5wy@beeblebrox>
 <CAG5iGsAHnokLubA3ZZ9wZU=kGwwXX37U2n2FPiZHt+iTO0SMJA@mail.gmail.com>
 <20210808112706.gxiaypynyiu4zq7i@beeblebrox>
 <CAG5iGsAnGVDFV6LFEiiEe6Uq7SN1QnbcTJFB4e82B3LrTA=q+Q@mail.gmail.com>
Message-ID: <CAG5iGsCiRW0Gu7_kBMip6KSPJtKtSejZ48eEYSrV66r3OF84tg@mail.gmail.com>

On Sun, Aug 8, 2021 at 1:32 PM luigi scarso <luigi.scarso at gmail.com> wrote:

>
>
> On Sun, Aug 8, 2021 at 1:27 PM Marcel Fabian KrÃ¼ger <tex at 2krueger.de>
> wrote:
>
>>
>>   /*
>>       The streamprovider here is always 2, even when we actually have
>> streamprovider == 3,
>>       to differentiate this call which behaves exactly like the call in
>> the
>>       streamprovider == 2 case from the streamprovider == 3 specific call
>> earlier.
>>   */
>>
>
> ok.
>
>
Committed revision 7449.
-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20210808/bccdf585/attachment.htm>

From tex at 2krueger.de  Mon Aug  9 17:31:52 2021
From: tex at 2krueger.de (Marcel Fabian =?utf-8?Q?Kr=C3=BCger?=)
Date: Mon, 9 Aug 2021 17:31:52 +0200
Subject: [Dev-luatex] Improvements for glyph_stream_provider with TTF
 fonts
In-Reply-To: <CAG5iGsCiRW0Gu7_kBMip6KSPJtKtSejZ48eEYSrV66r3OF84tg@mail.gmail.com>
References: <20210807003009.czegf2pbpbpzt6vw@beeblebrox>
 <CAG5iGsAPh2yud5UrKYJNsYLF0T56emdPGm8nDZ+NgQA6LDC1uw@mail.gmail.com>
 <20210807122608.gilhsaqrhx7mj5wy@beeblebrox>
 <CAG5iGsAHnokLubA3ZZ9wZU=kGwwXX37U2n2FPiZHt+iTO0SMJA@mail.gmail.com>
 <20210808112706.gxiaypynyiu4zq7i@beeblebrox>
 <CAG5iGsAnGVDFV6LFEiiEe6Uq7SN1QnbcTJFB4e82B3LrTA=q+Q@mail.gmail.com>
 <CAG5iGsCiRW0Gu7_kBMip6KSPJtKtSejZ48eEYSrV66r3OF84tg@mail.gmail.com>
Message-ID: <20210809153152.as4ozl6zg4aegkmj@beeblebrox>

On Sun, Aug 08, 2021 at 06:22:02PM +0200, luigi scarso wrote:
> On Sun, Aug 8, 2021 at 1:32 PM luigi scarso <luigi.scarso at gmail.com> wrote:
> 
> >
> >
> > On Sun, Aug 8, 2021 at 1:27 PM Marcel Fabian KrÃ¼ger <tex at 2krueger.de>
> > wrote:
> >
> >>
> >>   /*
> >>       The streamprovider here is always 2, even when we actually have
> >> streamprovider == 3,
> >>       to differentiate this call which behaves exactly like the call in
> >> the
> >>       streamprovider == 2 case from the streamprovider == 3 specific call
> >> earlier.
> >>   */
> >>
> >
> > ok.
> >
> >
> Committed revision 7449.

Thank you :)

-- Marcel

From w.m.l at gmx.net  Tue Aug 17 02:53:33 2021
From: w.m.l at gmx.net (Robert)
Date: Tue, 17 Aug 2021 02:53:33 +0200
Subject: [Dev-luatex] lastnodetype, again
Message-ID: <6d4cf457-2847-e05d-801d-81ffdbe97058@gmx.net>

Hi,

while the last problem with \lastnodetype (cf.
https://mailman.ntg.nl/pipermail/dev-luatex/2020-April/006414.html) has
been fixed, there are still incompatibilities if it is preceded by \relax.

The following outputs 7,0,8,7,7,7 with pdftex and etex, but 7,0,0,0,0,0
with luatex:

%\input luaotfload.sty
%\font\x=[lmroman12-regular.otf]:script=latn;+trep;+tlig;%mode=base;
%\x % no difference
\setbox0\hbox{--}
\unhbox0 \the\lastnodetype % OK

--\the\lastnodetype % OK

--\relax\the\lastnodetype

\setbox0\hbox{--\relax\the\lastnodetype}
\unhbox0

\toks0={--}
\setbox0\hbox{\the\toks0\relax \the\lastnodetype}
\unhbox0

\setbox0\vbox{\hbox{--\relax\the\lastnodetype}}
\unvbox0
\bye

Best,
--
  Robert

From luigi.scarso at gmail.com  Wed Aug 18 16:56:54 2021
From: luigi.scarso at gmail.com (luigi scarso)
Date: Wed, 18 Aug 2021 16:56:54 +0200
Subject: [Dev-luatex] harfbuzz 2.8.2
Message-ID: <CAG5iGsCojDacker=FagB3FN3JA4-1wJ=a-8_1zZ7158hLwpGiQ@mail.gmail.com>

I have  pushed harfbuzz 2.8.2 into experimental,
if it's ok I will sync with the texlive repo.


-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20210818/d65b0640/attachment.htm>

From w.m.l at gmx.net  Thu Aug 19 17:00:42 2021
From: w.m.l at gmx.net (Robert)
Date: Thu, 19 Aug 2021 17:00:42 +0200
Subject: [Dev-luatex] lastnodetype, again
In-Reply-To: <6d4cf457-2847-e05d-801d-81ffdbe97058@gmx.net>
References: <6d4cf457-2847-e05d-801d-81ffdbe97058@gmx.net>
Message-ID: <9bbb92b9-15ab-b015-7bc5-f019dd848e23@gmx.net>

Hans has replied off-list, saying that this is basically expected
behaviour and that checking for ligatures by means of \lastnodetype is
inherently unreliable in luatex. In that case I would suggest to change
the wording in the manual, which quite unequivocally claims the opposite:

| The \lastnodetype primitive is ð-TEX compliant. The valid range is
| still [â1, 15] and glyph nodes (formerly known as char nodes) have
| number 0 while ligature nodes are mapped to 7. That way macro packages
| can use the same symbolic names as in traditional ð-TEX.
(p.123)

Best,
--
  Robert


On 17.08.21 02:53, Robert wrote:
> Hi,
>
> while the last problem with \lastnodetype (cf.
> https://mailman.ntg.nl/pipermail/dev-luatex/2020-April/006414.html) has
> been fixed, there are still incompatibilities if it is preceded by \relax.
>
> The following outputs 7,0,8,7,7,7 with pdftex and etex, but 7,0,0,0,0,0
> with luatex:
>
> %\input luaotfload.sty
> %\font\x=[lmroman12-regular.otf]:script=latn;+trep;+tlig;%mode=base;
> %\x % no difference
> \setbox0\hbox{--}
> \unhbox0 \the\lastnodetype % OK
>
> --\the\lastnodetype % OK
>
> --\relax\the\lastnodetype
>
> \setbox0\hbox{--\relax\the\lastnodetype}
> \unhbox0
>
> \toks0={--}
> \setbox0\hbox{\the\toks0\relax \the\lastnodetype}
> \unhbox0
>
> \setbox0\vbox{\hbox{--\relax\the\lastnodetype}}
> \unvbox0
> \bye
>
> Best,
> --
>  Â Robert
> _______________________________________________
> dev-luatex mailing list
> dev-luatex at ntg.nl
> https://mailman.ntg.nl/mailman/listinfo/dev-luatex


From j.hagen at xs4all.nl  Thu Aug 19 18:30:52 2021
From: j.hagen at xs4all.nl (Hans Hagen)
Date: Thu, 19 Aug 2021 18:30:52 +0200
Subject: [Dev-luatex] lastnodetype, again
In-Reply-To: <9bbb92b9-15ab-b015-7bc5-f019dd848e23@gmx.net>
References: <6d4cf457-2847-e05d-801d-81ffdbe97058@gmx.net>
 <9bbb92b9-15ab-b015-7bc5-f019dd848e23@gmx.net>
Message-ID: <f3873e88-e85e-f8c9-9c39-4576eb5dee89@xs4all.nl>

On 8/19/2021 5:00 PM, Robert wrote:
> Hans has replied off-list, saying that this is basically expected
> behaviour and that checking for ligatures by means of \lastnodetype is
> inherently unreliable in luatex. In that case I would suggest to change
> the wording in the manual, which quite unequivocally claims the opposite:
> 
> | The \lastnodetype primitive is ð-TEX compliant. The valid range is
> | still [â1, 15] and glyph nodes (formerly known as char nodes) have
> | number 0 while ligature nodes are mapped to 7. That way macro packages
> | can use the same symbolic names as in traditional ð-TEX.
> (p.123)

this is correct .. it doesn't say that the nodelist is the same and in 
fact luatex does report the right node in etex speak .. in the case of 
luatex there is no ligature node because the nodelist isn't processed 
and even then it could as well be a disc node (and if it is aligature 
you cannot assume that the font handler used sets the ligature subtype 
either)

just don't assume that luatex, pdftex, xetex produce the same node lists

and don't assume that f + i is a ligature in each font (or script / 
language) either because it can as wel be some kerning between f (either 
or not substituted) and i (either or not substituted)

in luatex when you want to mess around at that level you have to use a 
callback (or preprocess the input)

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From w.m.l at gmx.net  Sun Aug 22 01:17:50 2021
From: w.m.l at gmx.net (Robert)
Date: Sun, 22 Aug 2021 01:17:50 +0200
Subject: [Dev-luatex] lastnodetype, again
In-Reply-To: <f3873e88-e85e-f8c9-9c39-4576eb5dee89@xs4all.nl>
References: <6d4cf457-2847-e05d-801d-81ffdbe97058@gmx.net>
 <9bbb92b9-15ab-b015-7bc5-f019dd848e23@gmx.net>
 <f3873e88-e85e-f8c9-9c39-4576eb5dee89@xs4all.nl>
Message-ID: <4703d284-9a93-15d8-33da-488d4452ede7@gmx.net>

On 19.08.21 18:30, Hans Hagen wrote:
> On 8/19/2021 5:00 PM, Robert wrote:
>> Hans has replied off-list, saying that this is basically expected
>> behaviour and that checking for ligatures by means of \lastnodetype is
>> inherently unreliable in luatex. In that case I would suggest to change
>> the wording in the manual, which quite unequivocally claims the opposite:
>>
>> | The \lastnodetype primitive is ð-TEX compliant. The valid range is
>> | still [â1, 15] and glyph nodes (formerly known as char nodes) have
>> | number 0 while ligature nodes are mapped to 7. That way macro packages
>> | can use the same symbolic names as in traditional ð-TEX.
>> (p.123)
>
> this is correct .. it doesn't say that the nodelist is the same and in
> fact luatex does report the right node in etex speak ..

Hm, just saying, numbers are in the same range, but they actually may be
totally different, is not really what I would call "compliant"...

> in the case of
> luatex there is no ligature node because the nodelist isn't processed
> and even then it could as well be a disc node

Well yes, something comparable (I guess) happens in etex/pdftex: without
the \relax after the ligature, they also just report a glyph node --
with the \relax, however, they do report a ligature (or disc) node. But
with luatex it doesn't make a difference whether there's a \relax after
the ligature or not. That's kind of the crux of my report, I suppose.

Also, luatex does get the node type right when the ligature is wrapped
in a box first:
\setbox0\hbox{--}
\unhbox0 \the\lastnodetype % OK

So deep down luatex seems to know better...

> just don't assume that luatex, pdftex, xetex produce the same node lists

Not even if there's no opentype font involved? And just for the record,
xetex does report the same as pdftex.

> and don't assume that f + i is a ligature in each font (or script /
> language) either because it can as wel be some kerning between f (either
> or not substituted) and i (either or not substituted)

I have no idea why you would think that I assume that f+i is a ligature
in every font (I don't), and furthermore, I have no idea what this has
to do with \lastnodetype not returning the expected value (my example
didn't even contain "fi").

> in luatex when you want to mess around at that level you have to use a
> callback (or preprocess the input)

Not quite sure how preprocessing the /input/ could tell me whether a
/font/ has a specific ligature. Also I'm a bit baffled that expecting a
luatex command to be compatible with etex/pdftex (as per the manual)
should be tantamount to "messing around".


Best,
--
  Robert

From j.hagen at xs4all.nl  Sun Aug 22 11:49:58 2021
From: j.hagen at xs4all.nl (Hans Hagen)
Date: Sun, 22 Aug 2021 11:49:58 +0200
Subject: [Dev-luatex] lastnodetype, again
In-Reply-To: <4703d284-9a93-15d8-33da-488d4452ede7@gmx.net>
References: <6d4cf457-2847-e05d-801d-81ffdbe97058@gmx.net>
 <9bbb92b9-15ab-b015-7bc5-f019dd848e23@gmx.net>
 <f3873e88-e85e-f8c9-9c39-4576eb5dee89@xs4all.nl>
 <4703d284-9a93-15d8-33da-488d4452ede7@gmx.net>
Message-ID: <ee13320b-625d-8284-20c0-739ec3bf272f@xs4all.nl>

On 8/22/2021 1:17 AM, Robert wrote:
> On 19.08.21 18:30, Hans Hagen wrote:
>> On 8/19/2021 5:00 PM, Robert wrote:
>>> Hans has replied off-list, saying that this is basically expected
>>> behaviour and that checking for ligatures by means of \lastnodetype is
>>> inherently unreliable in luatex. In that case I would suggest to change
>>> the wording in the manual, which quite unequivocally claims the 
>>> opposite:
>>>
>>> | The \lastnodetype primitive is ð-TEX compliant. The valid range is
>>> | still [â1, 15] and glyph nodes (formerly known as char nodes) have
>>> | number 0 while ligature nodes are mapped to 7. That way macro packages
>>> | can use the same symbolic names as in traditional ð-TEX.
>>> (p.123)
>>
>> this is correct .. it doesn't say that the nodelist is the same and in
>> fact luatex does report the right node in etex speak ..
> 
> Hm, just saying, numbers are in the same range, but they actually may be
> totally different, is not really what I would call "compliant"...

from the (rest of the) manual it's clear that luatex (1) has different 
nodes, (2) has split the interwoven "read input, handle fonts, hyphenate 
when needed" approach and that (3) one can kick in font handler functions

so, this etex lastnode command just looks back at the moment it is 
invoked and *that* is what you then get back (with luatex glyph node 
number changed into zero which in luatex actually is a hlist node)

>> in the case of
>> luatex there is no ligature node because the nodelist isn't processed
>> and even then it could as well be a disc node
> 
> Well yes, something comparable (I guess) happens in etex/pdftex: without
> the \relax after the ligature, they also just report a glyph node --
> with the \relax, however, they do report a ligature (or disc) node. But
> with luatex it doesn't make a difference whether there's a \relax after
> the ligature or not. That's kind of the crux of my report, I suppose.

because, as said, the list is handled after it has been completely 
constructed ... (if you don't believe this, just compare the pdftex 
source with luatex source)

> Also, luatex does get the node type right when the ligature is wrapped
> in a box first:
> \setbox0\hbox{--}
> \unhbox0 \the\lastnodetype % OK
> 
> So deep down luatex seems to know better...

compare that with

 > \setbox0\hbox{--\the\lastnodetype}

again, whole list read, then treatment (and that do be anything, even 
remove these -)

you either 'immediately look at the last node (currently constructed 
list) or you look at it after the list has been 'typeset'

(if lastnodetype could be negative you even got different results 
because then you get three hyphens in a row)

>> just don't assume that luatex, pdftex, xetex produce the same node lists
> 
> Not even if there's no opentype font involved? And just for the record,
> xetex does report the same as pdftex.

indeed, split read/hyphenate/lig/kerning (unless overloaded which can be 
done)

>> and don't assume that f + i is a ligature in each font (or script /
>> language) either because it can as wel be some kerning between f (either
>> or not substituted) and i (either or not substituted)
> 
> I have no idea why you would think that I assume that f+i is a ligature
> in every font (I don't), and furthermore, I have no idea what this has
> to do with \lastnodetype not returning the expected value (my example
> didn't even contain "fi").

because if you test for (etex) last node type and expect a char or 
ligature node type (you explicitly point to codes 0 and 7 being 
different in the engines)

you cannot predict what gets out; glyph/ligature are subtypes in a node 
but not different nodes so 'looking at the last node type in order to 
see what one gets is unreliable wrt this detail: in luatex there is no 
guarantee that the lig subtype is set, so etex-number-7 quite often 
might not show up when you look at the end of an unboxed list)

>> in luatex when you want to mess around at that level you have to use a
>> callback (or preprocess the input)
> 
> Not quite sure how preprocessing the /input/ could tell me whether a
> /font/ has a specific ligature. Also I'm a bit baffled that expecting a
> luatex command to be compatible with etex/pdftex (as per the manual)
> should be tantamount to "messing around".

if you want to know that you can best write a callback that looks at he 
list after it has gone through the font handler

the messing around refers to 'looking at a specific node when processing 
input using lastnodetype and handling on that'

btw, in general the only lastnodetypes that are sort of reliable are 
those testing for penalties, kerns glue (inserts and marks can travel, 
whatsits can be anything).

(there are more differences like this: {} doesn't break a ligature for 
instance and reprocessing of an unboxed list can also have side effects, 
depending on what callbacks kick in; there are also subtle differences, 
some under mode control, wrt successive hyphens, because these are 
handled at a different time in luatex)

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From lahcim8 at gmail.com  Sat Aug 28 21:14:23 2021
From: lahcim8 at gmail.com (=?utf-8?q?Michal_Vlas=C3=A1k?=)
Date: Sat, 28 Aug 2021 21:14:23 +0200
Subject: [Dev-luatex] Fix for pdf_literal Lua string / token list conversions
Message-ID: <CDVDW7KIJCSY.3OFCLMN3IB4KD@phobos>

Hello,

take this plain LuaTeX example:

    \setbox0=\hbox{\pdfextension literal{0 g}}

    % 1)
    \directlua{
        local literal = tex.getbox(0).head
        texio.write_nl("log", "literal.data="..literal.data)
    }
    \showbox0
    
    % 2)
    \directlua{
        local literal = tex.getbox(0).head
        literal.data = "test"
        literal.token = "toks"
        texio.write_nl("log", "literal.token="..(literal.token or "nil"))
        }
    \showbox0
    
    % 3) patch test
    \directlua{
        tex.set("everyjob", "asd")
        texio.write_nl("log", tex.get("everyjob"))
    }
    
    \bye

Expected log output (abridged):
1)
    literal.data=0 g
    .\pdfliteral origin{0 g}

2)
    literal.token=toks
    .\pdfliteral origin{toks}


Actual output:
1)
    literal.data=data
    .\pdfliteral origin{0 g}

2)
    literal.token=characters
    .\pdfliteral origin <lua data reference 153>


In the first case the Lua accessor returns a value which happens to be
on top of the stack (the key "data" itself). In the second case an index
into TeX memory is misinterpreted as a Lua registry index, so the
returned data is essentially garbage.

Patch for both issues is attached. I also extended `tokenlist_from_lua`
(which is what `nodelib_gettoks` is defined as) to allow an index
argument. The previous version used the value on top of the stack, which
probably worked for every use currently in LuaTeX, but seemed rather
dangerous and subtle.

The patch is from git, though it can be applied normally with

    patch -Np1 < pdf_literal.patch

Kind regards,
Michal VlasÃ¡k
-------------- next part --------------
diff --git a/source/texk/web2c/luatexdir/lua/lnodelib.c b/source/texk/web2c/luatexdir/lua/lnodelib.c
index 0cd680384..4fbf96db7 100644
--- a/source/texk/web2c/luatexdir/lua/lnodelib.c
+++ b/source/texk/web2c/luatexdir/lua/lnodelib.c
@@ -150,7 +150,7 @@
 
 #define nodelib_setattr(L, s, n)     reassign_attribute(n,nodelib_getlist(L,s))
 
-#define nodelib_gettoks(L,a)   tokenlist_from_lua(L)
+#define nodelib_gettoks(L,a)   tokenlist_from_lua(L, a)
 
 #define nodelib_getspec        nodelib_getlist
 #define nodelib_getaction      nodelib_getlist
@@ -1566,7 +1566,7 @@ static int lua_nodelib_direct_setleader(lua_State * L)
 #define get_pdf_literal_direct_value(L,n) do {                  \
     if (pdf_literal_type(n) == lua_refid_literal) {             \
         lua_rawgeti(L, LUA_REGISTRYINDEX, pdf_literal_data(n)); \
-    } else if (pdf_literal_type(n) == lua_refid_literal) {      \
+    } else if (pdf_literal_type(n) == normal) {                 \
         tokenlist_to_luastring(L, pdf_literal_data(n));         \
     }                                                           \
 } while (0)
@@ -1584,6 +1584,7 @@ static int lua_nodelib_direct_setleader(lua_State * L)
 
 #define set_pdf_literal_direct_token(L,n,i) do { \
     pdf_literal_data(n) = nodelib_gettoks(L, i); \
+    pdf_literal_type(n) = normal;                \
 } while (0)
 
 #define cleanup_late_lua(n) do {                               \
diff --git a/source/texk/web2c/luatexdir/lua/ltexlib.c b/source/texk/web2c/luatexdir/lua/ltexlib.c
index 6e19e0727..590a83144 100644
--- a/source/texk/web2c/luatexdir/lua/ltexlib.c
+++ b/source/texk/web2c/luatexdir/lua/ltexlib.c
@@ -1790,7 +1790,7 @@ static int settex(lua_State * L)
                 }
             } else if (is_toks_assign(cur_cmd1)) {
                 if (lua_type(L,i) == LUA_TSTRING) {
-                    j = tokenlist_from_lua(L);  /* uses stack -1 */
+                    j = tokenlist_from_lua(L, i);
                     assign_internal_value((isglobal ? 4 : 0), equiv(cur_cs1), j);
 
                 } else {
diff --git a/source/texk/web2c/luatexdir/lua/luatex-api.h b/source/texk/web2c/luatexdir/lua/luatex-api.h
index f50664764..996ef6466 100644
--- a/source/texk/web2c/luatexdir/lua/luatex-api.h
+++ b/source/texk/web2c/luatexdir/lua/luatex-api.h
@@ -162,7 +162,7 @@ extern int characters_from_lua(lua_State * L, int f); /* return is boolean */
 extern int luaopen_token(lua_State * L);
 extern void tokenlist_to_lua(lua_State * L, int p);
 extern void tokenlist_to_luastring(lua_State * L, int p);
-extern int tokenlist_from_lua(lua_State * L);
+extern int tokenlist_from_lua(lua_State * L, int n);
 
 extern void lua_nodelib_push(lua_State * L);
 extern int nodelib_getdir(lua_State * L, int n);
diff --git a/source/texk/web2c/luatexdir/lua/luatoken.c b/source/texk/web2c/luatexdir/lua/luatoken.c
index dc2c6b8aa..56de5407a 100644
--- a/source/texk/web2c/luatexdir/lua/luatoken.c
+++ b/source/texk/web2c/luatexdir/lua/luatoken.c
@@ -482,7 +482,7 @@ void tokenlist_to_luastring(lua_State * L, int p)
     free(s);
 }
 
-int tokenlist_from_lua(lua_State * L)
+int tokenlist_from_lua(lua_State * L, int n)
 {
     const char *s;
     int tok, t;
@@ -492,12 +492,12 @@ int tokenlist_from_lua(lua_State * L)
     token_info(r) = 0;
     token_link(r) = null;
     p = r;
-    t = lua_type(L, -1);
+    t = lua_type(L, n);
     if (t == LUA_TTABLE) {
-        j = lua_rawlen(L, -1);
+        j = lua_rawlen(L, n);
         if (j > 0) {
             for (i = 1; i <= j; i++) {
-                lua_rawgeti(L, -1, (int) i);
+                lua_rawgeti(L, n, (int) i);
                 tok = token_from_lua(L);
                 if (tok >= 0) {
                     store_new_token(tok);
@@ -507,7 +507,7 @@ int tokenlist_from_lua(lua_State * L)
         }
         return r;
     } else if (t == LUA_TSTRING) {
-        s = lua_tolstring(L, -1, &j);
+        s = lua_tolstring(L, n, &j);
         for (i = 0; i < j; i++) {
             if (s[i] == 32) {
                 tok = token_val(10, s[i]);

From lahcim8 at gmail.com  Sat Aug 28 21:46:16 2021
From: lahcim8 at gmail.com (=?utf-8?q?Michal_Vlas=C3=A1k?=)
Date: Sat, 28 Aug 2021 21:46:16 +0200
Subject: [Dev-luatex] Issues with settex() and glue
Message-ID: <CDVEKMLD6V9N.08S0TINT0847@phobos>

Hello,

as part of [1] I also noticed that, the "settex" function (used as
metamethod for the "tex" table and for "tex.set") doesn't work for glue
specified by (up to) five values case. There are multiple issues.

Firstly this is the Lua stack when this function is called
(i = lua_gettop()):

    tex.set("global", "parskip", 1, 2, 3, 4, 5)
->
     i-6      i-5       i-4  i-3  i-2  i-1  i
    "global" "parskip"  1    2    3    4    5

The function essentially doesn't do anything for the five number glue
case, because of the outer most check:

    if (lua_type(L, i - 1) == LUA_TSTRING) {

Even if it did, it wouldn't respect the "global" setting, because it is
checked like this:

    if (i == 3 && (lua_type(L,1) == LUA_TSTRING)) {
        const char *s = lua_tostring(L, 1);
        if (lua_key_eq(s,global))

And even then, it would try to use values beyond the top of the stack:

    width(value) = lua_roundnumber(L,i);
    if (i > 1) { stretch(value) = lua_roundnumber(L,i+1); }
    if (i > 3) { shrink(value) = lua_roundnumber(L,i+2); }
    if (i > 4) { stretch_order(value) = lua_tointeger(L,i+3); }
    if (i > 5) { shrink_order(value) = lua_tointeger(L,i+4); }

The manual also mentions the 5 value case twice in the same paragraph:

    --- a/manual/luatex-tex.tex
    +++ b/manual/luatex-tex.tex
    @@ -271,9 +271,7 @@
     \type {tex.get} you get the width of the glue and when you pass \type {true} you
     get all five values. Otherwise you get a node which is a copy of the internal
     value so you are responsible for its freeing at the \LUA\ end. When you set a
    -glue quantity you can either pass a \nod {glue_spec} or upto five numbers. If
    -you pass \type {true} to \type {get} you get 5 values returned for a glue and
    -when you pass \type {false} you only get the width returned.
    +glue quantity you can either pass a \nod {glue_spec} or upto five numbers.

And then the contradicts itself:

    10.3.2.4 Glue parameters
    The glue parameters accept and return a userdata object that
    represents a glue_spec node.



I tried to fix the issues, but the "settex" function is also complicated
by the fact, that it also is a __newindex metamethod of the tex table,
which means that its stack can also look like this:

    tex.parskip = n
->
    i-2  i-1       i
    tex "parskip"  n

So one can't easily just index from the the bottom.

Also the line:

    int a = isglobal;

in the glue case would deserve a comment, since it is subtle, but
required for define() to work properly (it looks at the variable called
"a"). I would prefer something like:

    int a = isglobal; /* for define() */


In the end I am not even sure how to handle the issues. I leave it to
the more experienced.

Kind regards,
Michal VlasÃ¡k

[1]: https://mailman.ntg.nl/pipermail/dev-luatex/2021-August/006542.html

