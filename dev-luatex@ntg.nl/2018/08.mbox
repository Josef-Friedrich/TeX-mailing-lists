From tex at 2krueger.de  Fri Aug  3 01:09:07 2018
From: tex at 2krueger.de (=?UTF-8?Q?Marcel_Kr=C3=BCger?=)
Date: Fri, 03 Aug 2018 01:09:07 +0200
Subject: [Dev-luatex] nodelist based tex.saveboxresource
Message-ID: <164fce6e4aa.1208d424195856.5629322144544422555@2krueger.de>

Hello,

I want to suggest extending the tex.saveboxresource interface to accept a hlist or vlist node as an alternative to a box number as first argument.
Currently creating a boxresource from Lua node list requires saving the list in a TeX box register, only to delete that register again by tex.saveboxresource.
A direct way to transform a h/vlist into a boxresource would make such code easier and avoid potential side effects from changing the TeX registers.
An experimental patch with a suggested implementation is attached.

I also attached a patch implementing a node.scan method which I think would be another nice addition for LuaTeX: It scans a box with rules similar to `\setbox0`
and returns the node. This allows passing box-like material to LuaTeX without requiring box registers.

Best regards
Marcel
-------------- next part --------------
A non-text attachment was scrubbed...
Name: luatex-node-savebox.diff
Type: application/octet-stream
Size: 6349 bytes
Desc: not available
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20180803/3245ad2b/attachment.obj>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: luatex-node-scan.diff
Type: application/octet-stream
Size: 3873 bytes
Desc: not available
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20180803/3245ad2b/attachment-0001.obj>

From j.hagen at xs4all.nl  Fri Aug  3 15:51:24 2018
From: j.hagen at xs4all.nl (Hans Hagen)
Date: Fri, 3 Aug 2018 15:51:24 +0200
Subject: [Dev-luatex] nodelist based tex.saveboxresource
In-Reply-To: <164fce6e4aa.1208d424195856.5629322144544422555@2krueger.de>
References: <164fce6e4aa.1208d424195856.5629322144544422555@2krueger.de>
Message-ID: <686e7a44-220a-fde6-605b-49015a6a2a25@xs4all.nl>

On 8/3/2018 1:09 AM, Marcel KrÃ¼ger wrote:
> Hello,
> 
> I want to suggest extending the tex.saveboxresource interface to accept a hlist or vlist node as an alternative to a box number as first argument.
> Currently creating a boxresource from Lua node list requires saving the list in a TeX box register, only to delete that register again by tex.saveboxresource.
> A direct way to transform a h/vlist into a boxresource would make such code easier and avoid potential side effects from changing the TeX registers.
> An experimental patch with a suggested implementation is attached.

ok, makes sense (but not entirely ok that way but i can fix it)

> I also attached a patch implementing a node.scan method which I think would be another nice addition for LuaTeX: It scans a box with rules similar to `\setbox0`
> and returns the node. This allows passing box-like material to LuaTeX without requiring box registers.

this is tricky stuff so i need to have a close look at side effects 
(it's also more relatex to token scanning so belongs in another namespace)

i'll have a go at it

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From tdvit at mail.com  Sat Aug  4 19:44:11 2018
From: tdvit at mail.com (Thomas de Vivo)
Date: Sat, 4 Aug 2018 19:44:11 +0200
Subject: [Dev-luatex] LuaTex pagination
In-Reply-To: <686e7a44-220a-fde6-605b-49015a6a2a25@xs4all.nl>
References: <164fce6e4aa.1208d424195856.5629322144544422555@2krueger.de>
 <686e7a44-220a-fde6-605b-49015a6a2a25@xs4all.nl>
Message-ID: <trinity-323e216a-3c36-4201-8d45-ec03cbcc18fd-1533404651394@3c-app-mailcom-lxa05>

An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20180804/84d15f88/attachment.html>

From j.hagen at xs4all.nl  Sun Aug  5 12:36:04 2018
From: j.hagen at xs4all.nl (Hans Hagen)
Date: Sun, 5 Aug 2018 12:36:04 +0200
Subject: [Dev-luatex] LuaTex pagination
In-Reply-To: <trinity-323e216a-3c36-4201-8d45-ec03cbcc18fd-1533404651394@3c-app-mailcom-lxa05>
References: <164fce6e4aa.1208d424195856.5629322144544422555@2krueger.de>
 <686e7a44-220a-fde6-605b-49015a6a2a25@xs4all.nl>
 <trinity-323e216a-3c36-4201-8d45-ec03cbcc18fd-1533404651394@3c-app-mailcom-lxa05>
Message-ID: <2045885f-b8dd-3755-506a-7ade137f588f@xs4all.nl>

On 8/4/2018 7:44 PM, Thomas de Vivo wrote:
> dearÂ dev-luatexÂ list,
>  Â  Â  Â I'm an estimatorÂ of (La)Tex and the
> work done Donald Knuth -- as well as the work that
> you all are doing -- and I'm following this list
> since a while.
> Few time ago I have been in touch with
> Patrick Gundlach ofÂ https://www.speedata.de/en/
> a publishing system based on LuateX.
> My concern and goal would be to be able
> to control the looseness of paragraphs while
> paging a text, so to minimize widows and orphans
> in the resulting document.
> In practical terms, when the system finds that
> aÂ widow is being produced, then it triesÂ to make
> the relevant paragraph more dense, or even
> more than one, in order to fit all the text
> in the page.Â (This is not currently possible using Speedata)
> I would like to know whether LuaTex offers such
> control, on in other terms whether the pagination
> algorithm is asÂ sophisticated as the famous
> linebreakÂ algorithm of Tex/Latex. (thing in
> my opinion highlyÂ desirable)
> Alternatively, I would like to know what files
> I have to check in the distribution of Lua
> to reach such a result.
You can write callbacks functions that do such things; after all you 
have access to the internals. It could work out ok for trivial documents 
but the times i played with it myself but in the end the interaction 
between different mechanisme, conflicting demands etc make a fully 
unattended automatic mechanmism that meets all demands kind of hard. 
(IRR, Don Knuth somewhere suggests to adapt the text in hard to cover 
cases.).

This is why we're not adding more heuristics to the core but expect 
users to use callbacks and mess around with lua.

Hans


-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From frank.mittelbach at latex-project.org  Sun Aug  5 12:57:37 2018
From: frank.mittelbach at latex-project.org (Frank Mittelbach)
Date: Sun, 5 Aug 2018 12:57:37 +0200
Subject: [Dev-luatex] LuaTex pagination
In-Reply-To: <trinity-323e216a-3c36-4201-8d45-ec03cbcc18fd-1533404651394@3c-app-mailcom-lxa05>
References: <164fce6e4aa.1208d424195856.5629322144544422555@2krueger.de>
 <686e7a44-220a-fde6-605b-49015a6a2a25@xs4all.nl>
 <trinity-323e216a-3c36-4201-8d45-ec03cbcc18fd-1533404651394@3c-app-mailcom-lxa05>
Message-ID: <4bab9fb3-e8b0-68e9-6132-c81301dc5c94@latex-project.org>

Am 04.08.18 um 19:44 schrieb Thomas de Vivo:
> dearÂ dev-luatexÂ list,
>  Â  Â  Â I'm an estimatorÂ of (La)Tex and the
> work done Donald Knuth -- as well as the work that
> you all are doing -- and I'm following this list
> since a while.
> Few time ago I have been in touch with
> Patrick Gundlach ofÂ https://www.speedata.de/en/
> a publishing system based on LuateX.
> My concern and goal would be to be able
> to control the looseness of paragraphs while
> paging a text, so to minimize widows and orphans
> in the resulting document.
> In practical terms, when the system finds that
> aÂ widow is being produced, then it triesÂ to make
> the relevant paragraph more dense, or even
> more than one, in order to fit all the text
> in the page.Â (This is not currently possible using Speedata)
> I would like to know whether LuaTex offers such
> control, on in other terms whether the pagination
> algorithm is asÂ sophisticated as the famous
> linebreakÂ algorithm of Tex/Latex. (thing in
> my opinion highlyÂ desirable)
> Alternatively, I would like to know what files
> I have to check in the distribution of Lua
> to reach such a result.
> Thank you and kind regards
> (Thomas)

as Hans said, there is no production code in that space, largely due to 
the fact that the problems in that space are very difficult to solve 
(often NP) and managing the real-life conflicting requirements is 
challenging. And if you restrict yourself then the class of documents 
that can be handled gets very limited.

I have done some research on that in the last couple of years and the 
result can be found at:

   https://www.latex-project.org/publications/indexbytopic/pagination/

Basically this proves that suitable results can be produced in adequate 
time spans (under reasonable conditions) but so far I have only 
published the research not any code --- doing the latter would mean 
further work that I estimate at several hundreds of hours so I'm not 
sure when that can be undertaken (unless I find sponsors for it)

frank

From tex at 2krueger.de  Tue Aug  7 09:46:50 2018
From: tex at 2krueger.de (=?UTF-8?Q?Marcel_Kr=C3=BCger?=)
Date: Tue, 07 Aug 2018 09:46:50 +0200
Subject: [Dev-luatex] Bug in lua_nodelib_new
Message-ID: <165135a50b8.faa7dfe3175015.7874650369566481913@2krueger.de>

Hi,

the command `node.new('whatsit', '...')` with a string subtype currently always triggers the error

    creating a whatsit requires the subtype number as a second argument

It can be fixed with the attached patch.

Best regards
Marcel
-------------- next part --------------
A non-text attachment was scrubbed...
Name: luatex-fix-subtype.diff
Type: application/octet-stream
Size: 588 bytes
Desc: not available
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20180807/6cab041f/attachment.obj>

From j.hagen at xs4all.nl  Tue Aug  7 13:00:32 2018
From: j.hagen at xs4all.nl (Hans Hagen)
Date: Tue, 7 Aug 2018 13:00:32 +0200
Subject: [Dev-luatex] nodelist based tex.saveboxresource
In-Reply-To: <16512d6bb17.12aea8191155770.1979590006279938716@2krueger.de>
References: <164fce6e4aa.1208d424195856.5629322144544422555@2krueger.de>
 <686e7a44-220a-fde6-605b-49015a6a2a25@xs4all.nl>
 <16512d6bb17.12aea8191155770.1979590006279938716@2krueger.de>
Message-ID: <1dc65985-13ea-66cb-c974-bdfc2b87f750@xs4all.nl>

On 8/7/2018 7:23 AM, Marcel KrÃ¼ger wrote:
>   ---- On Fri, 03 Aug 2018 15:51:24 +0200 Hans Hagen <j.hagen at xs4all.nl> wrote ----
>   > On 8/3/2018 1:09 AM, Marcel KrÃ¼ger wrote:
>   > > Hello,
>   > >
>   > > I want to suggest extending the tex.saveboxresource interface to accept a hlist or vlist node as an alternative to a box number as first argument.
>   > > Currently creating a boxresource from Lua node list requires saving the list in a TeX box register, only to delete that register again by tex.saveboxresource.
>   > > A direct way to transform a h/vlist into a boxresource would make such code easier and avoid potential side effects from changing the TeX registers.
>   > > An experimental patch with a suggested implementation is attached.
>   >
>   > ok, makes sense (but not entirely ok that way but i can fix it)
>   >
>   > > I also attached a patch implementing a node.scan method which I think would be another nice addition for LuaTeX: It scans a box with rules similar to `\setbox0`
>   > > and returns the node. This allows passing box-like material to LuaTeX without requiring box registers.
>   >
>   > this is tricky stuff so i need to have a close look at side effects
>   > (it's also more relatex to token scanning so belongs in another namespace)
>   >
>   > i'll have a go at it
> 
> Thank you very much. Just so you know while testing the new changes I noticed that the current trunk generates a warning
> 
>       warning  (pdf backend): dangling objects discarded
> 
> for *every* non-empty document.

I'm checking some backend issues and in the process that can happen. If 
trunk generates that then it's something else triggering it.

Experimental is just that: experimental and things can change there 
stuff showing up there can even go. Also, if something is not 
documented, then don't use it. (This dangling is something i noticed and 
will be fixed, in addition to a possible accessor.)

> Anyway there is another maybe more controversial feature I would like to see in LuaTeX: Could you add a callback replacing the built-in `do_delimiter`?
> This would allow creating big delimiter in more flexible ways than just stacking boxes, especially I think about drawing custom-size delimiters using mplib > I am aware that this could be archieved by using the `mlist_to_hlist` 
callback but I think experimenting with delimiter construction should 
not require rewriting the entire mathlist conversion in Lua.

Won't happen. For such fundamental extensions, changes, patches, 
adaptions one can use lua. In fact, drawing delimiters with e.g. mp can 
already be done for many years. It really makes no sense to replace each 
bit. We're now more than a decade in luatex and imo we can do whatever 
we want to extend in lua now. Also, given history it's nearly impossible 
to get an agreement on extensions that have hard coded behaviour.

Probably the only bit that might evolve a bit is cleaning up the 
backend. (And I might start experimenting with a stripped down luatex 
follow up for context some day.)

> Another option might be adding a `<function>` argument to node.mlist_to_hlist which, when not nil, is called to create delimiters.
Won't happen either. Basically we're now at a stage where there will be 
no more extensions added. If needed there will be more parameters to 
replace hard coded values, but that's it.

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From fab1an at onet.pl  Tue Aug  7 11:23:34 2018
From: fab1an at onet.pl (fab1an)
Date: Tue, 07 Aug 2018 11:23:34 +0200
Subject: [Dev-luatex] mruby
Message-ID: <229656346-d32d374ab52867850829a09cd39fe099@pmq3v.m5r2.onet>

Hello,
Â 
Is possible using mruby on Latex? for example https://github.com/matsumotory/mruby-on-Lua
How to do this? Is this dificult?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20180807/cf46183a/attachment.html>

From reinhard.kotucha at web.de  Wed Aug  8 23:22:14 2018
From: reinhard.kotucha at web.de (Reinhard Kotucha)
Date: Wed, 8 Aug 2018 23:22:14 +0200
Subject: [Dev-luatex] mruby
In-Reply-To: <229656346-d32d374ab52867850829a09cd39fe099@pmq3v.m5r2.onet>
References: <229656346-d32d374ab52867850829a09cd39fe099@pmq3v.m5r2.onet>
Message-ID: <23403.24326.79571.938447@gargle.gargle.HOWL>

On 2018-08-07 at 11:23:34 +0200, fab1an wrote:

 > Hello,
 >  
 > Is possible using mruby on Latex? for example 
 > https://github.com/matsumotory/mruby-on-Lua

According to README.md and the examples there is no usable interface
between Lua and Ruby.  You can pass Ruby code as a string to
mruby.run() but you can't pass the results back to Lua.  The latter is
required because only Lua can communicate with TeX.

Hence IMO mruby isn't very useful, even for other purposes.

Regards,
  Reinhard

-- 
------------------------------------------------------------------
Reinhard Kotucha                            Phone: +49-511-3373112
Marschnerstr. 25
D-30167 Hannover                    mailto:reinhard.kotucha at web.de
------------------------------------------------------------------

From tex at 2krueger.de  Tue Aug 14 19:24:01 2018
From: tex at 2krueger.de (=?UTF-8?Q?Marcel_Kr=C3=BCger?=)
Date: Tue, 14 Aug 2018 19:24:01 +0200
Subject: [Dev-luatex] Fix PDF whatsits
Message-ID: <165397741bd.129e4b7b7102124.1382522863580656135@2krueger.de>

Hello,

I attached a little patch to avoid SEGFAULTs when the backend encounters `pdf_annot`, `pdf_start_link`, `pdf_dest` or `pdf_thread` whatsits.
The SEGFAULT was introduced in revision 6738.

I also noticed that there is no backend support for pdf_start_thread nodes, so using `\pdfextension startthread` leads to

    ! error:  (pdf backend): no output function for whatsit pdf_start_thread

Maybe a note about this could be added to the documentation?

Best regards
Marcel KrÃ¼ger

-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0001-Fix-segfault-when-using-PDF-whatsit-s.patch
Type: application/octet-stream
Size: 675 bytes
Desc: not available
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20180814/b705e108/attachment.obj>

From j.hagen at xs4all.nl  Tue Aug 14 19:46:06 2018
From: j.hagen at xs4all.nl (Hans Hagen)
Date: Tue, 14 Aug 2018 19:46:06 +0200
Subject: [Dev-luatex] Fix PDF whatsits
In-Reply-To: <165397741bd.129e4b7b7102124.1382522863580656135@2krueger.de>
References: <165397741bd.129e4b7b7102124.1382522863580656135@2krueger.de>
Message-ID: <e35a3a49-b52f-bd70-1f6f-8fa06b62cf16@xs4all.nl>

On 8/14/2018 7:24 PM, Marcel KrÃ¼ger wrote:
> Hello,
> 
> I attached a little patch to avoid SEGFAULTs when the backend encounters `pdf_annot`, `pdf_start_link`, `pdf_dest` or `pdf_thread` whatsits.
> The SEGFAULT was introduced in revision 6738.
hm, indeed this need to be fixed but with another kind of patch. will do

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From tex at 2krueger.de  Thu Aug 16 18:59:24 2018
From: tex at 2krueger.de (=?UTF-8?Q?Marcel_Kr=C3=BCger?=)
Date: Thu, 16 Aug 2018 18:59:24 +0200
Subject: [Dev-luatex] nodelist based tex.saveboxresource
In-Reply-To: <1dc65985-13ea-66cb-c974-bdfc2b87f750@xs4all.nl>
References: <164fce6e4aa.1208d424195856.5629322144544422555@2krueger.de>
 <686e7a44-220a-fde6-605b-49015a6a2a25@xs4all.nl>
 <16512d6bb17.12aea8191155770.1979590006279938716@2krueger.de>
 <1dc65985-13ea-66cb-c974-bdfc2b87f750@xs4all.nl>
Message-ID: <16543ad7063.e9419a3c408936.8380460772073876045@2krueger.de>




 ---- On Tue, 07 Aug 2018 13:00:32 +0200 Hans Hagen <j.hagen at xs4all.nl> wrote ---- 
 > On 8/7/2018 7:23 AM, Marcel KrÃ¼ger wrote: 
 > >   ---- On Fri, 03 Aug 2018 15:51:24 +0200 Hans Hagen <j.hagen at xs4all.nl> wrote ---- 
 > >   > On 8/3/2018 1:09 AM, Marcel KrÃ¼ger wrote: 
 > >   > > Hello, 
 > >   > > 
 > >   > > I want to suggest extending the tex.saveboxresource interface to accept a hlist or vlist node as an alternative to a box number as first argument. 
 > >   > > Currently creating a boxresource from Lua node list requires saving the list in a TeX box register, only to delete that register again by tex.saveboxresource. 
 > >   > > A direct way to transform a h/vlist into a boxresource would make such code easier and avoid potential side effects from changing the TeX registers. 
 > >   > > An experimental patch with a suggested implementation is attached. 
 > >   > 
 > >   > ok, makes sense (but not entirely ok that way but i can fix it) 
 > >   > 
 > >   > > I also attached a patch implementing a node.scan method which I think would be another nice addition for LuaTeX: It scans a box with rules similar to `\setbox0` 
 > >   > > and returns the node. This allows passing box-like material to LuaTeX without requiring box registers. 
 > >   > 
 > >   > this is tricky stuff so i need to have a close look at side effects 
 > >   > (it's also more relatex to token scanning so belongs in another namespace) 
 > >   > 
 > >   > i'll have a go at it 
 > >  
 > > Thank you very much. Just so you know while testing the new changes I noticed that the current trunk generates a warning 
 > >  
 > >       warning  (pdf backend): dangling objects discarded 
 > >  
 > > for *every* non-empty document. 
 >  
 > I'm checking some backend issues and in the process that can happen. If  
 > trunk generates that then it's something else triggering it. 
 >  
 > Experimental is just that: experimental and things can change there  
 > stuff showing up there can even go. Also, if something is not  
 > documented, then don't use it. (This dangling is something i noticed and  
 > will be fixed, in addition to a possible accessor.) 

I'm sorry, of course I meant experimental and not trunk. 

 >  
 > > Anyway there is another maybe more controversial feature I would like to see in LuaTeX: Could you add a callback replacing the built-in `do_delimiter`? 
 > > This would allow creating big delimiter in more flexible ways than just stacking boxes, especially I think about drawing custom-size delimiters using mplib > I am aware that this could be archieved by using the `mlist_to_hlist`  
 > callback but I think experimenting with delimiter construction should  
 > not require rewriting the entire mathlist conversion in Lua. 
 >  
 > Won't happen. For such fundamental extensions, changes, patches,  
 > adaptions one can use lua. In fact, drawing delimiters with e.g. mp can  
 > already be done for many years. It really makes no sense to replace each  
 > bit. We're now more than a decade in luatex and imo we can do whatever  
 > we want to extend in lua now. Also, given history it's nearly impossible  
 > to get an agreement on extensions that have hard coded behaviour. 

I already expected a response along these lines. When you write that
"drawing delimiters with e.g. mp can already be done" are you referring to a specific way?

I experimented with this and could think of three approaches, but I'm not happy about any of them:

- Rewriting `mlist_to_hlist` in Lua, at least the recursion into sub_mlists.
  I tried to avoid this because it looked like there are a lots of special cases
  and some internal state which would hard to track.

- Use dummy delimiters marked with attributes and replace them
  after mlist to hlist conversion. This works quite well except that
  changing e.g. the width of vertical delimiters does not really work,
  especially when horizontal delimiters are involved too.

- Do not use TeX delimiters (\left, \right, \middle, \radical, etc.)
  but emulate them using Lua/TeX macros. This wan't really an option
  because I had to be compatible with legacy input using the TeX functionality.

Is there a better way I missed? For my current use-case I was able to solve
my problems by using a patched LuaTeX version to accept glyph specific
Lua functions in the `horiz_variants` and `vert_variants`, but I would love
to see a nicer way which doesn't require tampering with the engine.


On another note, I noticed that `\Uskewed` uses a delimiter for the
middle character but it is always set with minimal height.
This seems to be against the point of using a delimiter in the first place
and it also isn't compatible with the handling of skewed fractions in other
OpenType Math renderers like MS Word, so I wanted to ask if this is by design
or if dynamic height of the fraction slash simply isn't implemented (yet)?

Best regards
Marcel KrÃ¼ger


From j.hagen at xs4all.nl  Thu Aug 16 19:44:28 2018
From: j.hagen at xs4all.nl (Hans Hagen)
Date: Thu, 16 Aug 2018 19:44:28 +0200
Subject: [Dev-luatex] nodelist based tex.saveboxresource
In-Reply-To: <16543ad7063.e9419a3c408936.8380460772073876045@2krueger.de>
References: <164fce6e4aa.1208d424195856.5629322144544422555@2krueger.de>
 <686e7a44-220a-fde6-605b-49015a6a2a25@xs4all.nl>
 <16512d6bb17.12aea8191155770.1979590006279938716@2krueger.de>
 <1dc65985-13ea-66cb-c974-bdfc2b87f750@xs4all.nl>
 <16543ad7063.e9419a3c408936.8380460772073876045@2krueger.de>
Message-ID: <dc168aa1-47c0-ec62-7382-9f1b3e200284@xs4all.nl>

On 8/16/2018 6:59 PM, Marcel KrÃ¼ger wrote:
>   > > Anyway there is another maybe more controversial feature I would like to see in LuaTeX: Could you add a callback replacing the built-in `do_delimiter`?
>   > > This would allow creating big delimiter in more flexible ways than just stacking boxes, especially I think about drawing custom-size delimiters using mplib > I am aware that this could be archieved by using the `mlist_to_hlist`
>   > callback but I think experimenting with delimiter construction should
>   > not require rewriting the entire mathlist conversion in Lua.
>   >
>   > Won't happen. For such fundamental extensions, changes, patches,
>   > adaptions one can use lua. In fact, drawing delimiters with e.g. mp can
>   > already be done for many years. It really makes no sense to replace each
>   > bit. We're now more than a decade in luatex and imo we can do whatever
>   > we want to extend in lua now. Also, given history it's nearly impossible
>   > to get an agreement on extensions that have hard coded behaviour.
> 
> I already expected a response along these lines. When you write that
> "drawing delimiters with e.g. mp can already be done" are you referring to a specific way?

the 'context' way which is not the 'latex' way so of not much relevance 
here as context does math a bit different

> I experimented with this and could think of three approaches, but I'm not happy about any of them:
> 
> - Rewriting `mlist_to_hlist` in Lua, at least the recursion into sub_mlists.
>    I tried to avoid this because it looked like there are a lots of special cases
>    and some internal state which would hard to track.

you can indeed walk over that list and mess with specific nodes, you can 
do that before calling mlist_to_hlist or after (and then maybe fix soem 
things) .. in fact locating the delimiters in no big deal, and you could 
mark them beforehand (with an attribute or user node) and then 
afterwards mess a bit with the created boxes

> - Use dummy delimiters marked with attributes and replace them
>    after mlist to hlist conversion. This works quite well except that
>    changing e.g. the width of vertical delimiters does not really work,
>    especially when horizontal delimiters are involved too.

well, that's math ... heuristics ... interferences within fonts ... 
conflicting demands ... also depending on taste

> - Do not use TeX delimiters (\left, \right, \middle, \radical, etc.)
>    but emulate them using Lua/TeX macros. This wan't really an option
>    because I had to be compatible with legacy input using the TeX functionality.

indeed, that's the most reasonable route .. often macro packages wrap 
stuff in macros anyway .. it also gives you precise control

> Is there a better way I missed? For my current use-case I was able to solve
> my problems by using a patched LuaTeX version to accept glyph specific
> Lua functions in the `horiz_variants` and `vert_variants`, but I would love
> to see a nicer way which doesn't require tampering with the engine.

adding all kind of extra callbacks for handling such cases is opening 
cans of worms ... radicals, accents then follow too so we would have 
probably more that this hack ... in the end the tex math machinery is 
kind of a standard and we keep it that way ... after all it served the 
community well

also, it is not the intention of the project to open up every tiny bit 
of tex and so for now mlist_to_hlist has to do (so far all i wanted to 
do could be done one wya or the other); this kind of opening up would 
mean tons of extra callbacks (which also adds overhead that we don't want)

also, keep in mind that the more callbacks there are, the more users can 
kick in code and in the end all has to work together; so in fact, this 
kind of opening up and patching with lua code will backfire at some 
point ... interferences, expectations of how a list looks, etc etc ... i 
guess that it can be a macro package integrators nightmare

> On another note, I noticed that `\Uskewed` uses a delimiter for the
> middle character but it is always set with minimal height.
> This seems to be against the point of using a delimiter in the first place
> and it also isn't compatible with the handling of skewed fractions in other
> OpenType Math renderers like MS Word, so I wanted to ask if this is by design
> or if dynamic height of the fraction slash simply isn't implemented (yet)?

by design ... these slanted (skewed) things are not really delimiters 
and most fonts don't even offer many variants (in fact, only a few 
symbols can really grow using the variants mechanism as slopes are not 
part of the game)

also, middle is kind of special (introduced in etex btw) and 
conceptually fuzzy .. there is some more control in luatex but it will 
never be perfect

anyway, concernign more callbacks, i'll keep it in mind when i look at 
math again, but any change in that department is not happening in 1.10 
(one of these days we will relase 1.09 as prelude for a stable 1.10) and 
even if we would add some more control it would not be a quick hack 
either (as with many such mechanism probably a few years testing in 
context before settling on something would be part of the game)
  Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From j.hagen at xs4all.nl  Thu Aug 16 20:19:16 2018
From: j.hagen at xs4all.nl (Hans Hagen)
Date: Thu, 16 Aug 2018 20:19:16 +0200
Subject: [Dev-luatex] nodelist based tex.saveboxresource
In-Reply-To: <dc168aa1-47c0-ec62-7382-9f1b3e200284@xs4all.nl>
References: <164fce6e4aa.1208d424195856.5629322144544422555@2krueger.de>
 <686e7a44-220a-fde6-605b-49015a6a2a25@xs4all.nl>
 <16512d6bb17.12aea8191155770.1979590006279938716@2krueger.de>
 <1dc65985-13ea-66cb-c974-bdfc2b87f750@xs4all.nl>
 <16543ad7063.e9419a3c408936.8380460772073876045@2krueger.de>
 <dc168aa1-47c0-ec62-7382-9f1b3e200284@xs4all.nl>
Message-ID: <43e81c9e-252d-36eb-c9de-73016069d338@xs4all.nl>

Hi,

btw, you probably noticed that mlist_to_hlist is called recursively so 
you might use that fact

conceptually one could have callbacks at the make_* level (the wrapping 
things) which is kind of clean but that has not much use as work happens 
in those and duplicating all that happens in there in lua makes no sense

a do_delimiter callback is only a partial solution as it is used in 
several places and also works in tandem with other constructs (rules for 
instance); also, you'd always have to keep in mind that other mechanisms 
expect (for instance) attributes to be retained, character properties to 
migrate to unicode (cut and paste), etc, but that can be dealt with, in 
that sense the name 'delimiter' is somewhat confusing

(fwfw, in context we hardly use these constructs because we want to have 
more control and do fancy things)

anyway, a dodelimiter callback is in some sense not so much a delimiter 
one, but more a constructor one as it kind of relates to fonts and not 
so much to math ... basically it could be something "create_extensible" 
or so which is then triggered inside e.g. do_delimiter

i'll play with that a bit when i have time (i.e. what is the context we 
need to pass and what do we want back and what wrapup afterwards is 
needed) to see if it makes sense at all

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From tex at 2krueger.de  Thu Aug 16 21:08:37 2018
From: tex at 2krueger.de (=?UTF-8?Q?Marcel_Kr=C3=BCger?=)
Date: Thu, 16 Aug 2018 21:08:37 +0200
Subject: [Dev-luatex] nodelist based tex.saveboxresource
In-Reply-To: <43e81c9e-252d-36eb-c9de-73016069d338@xs4all.nl>
References: <164fce6e4aa.1208d424195856.5629322144544422555@2krueger.de>
 <686e7a44-220a-fde6-605b-49015a6a2a25@xs4all.nl>
 <16512d6bb17.12aea8191155770.1979590006279938716@2krueger.de>
 <1dc65985-13ea-66cb-c974-bdfc2b87f750@xs4all.nl>
 <16543ad7063.e9419a3c408936.8380460772073876045@2krueger.de>
 <dc168aa1-47c0-ec62-7382-9f1b3e200284@xs4all.nl>
 <43e81c9e-252d-36eb-c9de-73016069d338@xs4all.nl>
Message-ID: <1654423bde0.1029d6b45425681.2387155579045605046@2krueger.de>

 ---- On Thu, 16 Aug 2018 20:19:16 +0200 Hans Hagen <j.hagen at xs4all.nl> wrote ---- 
 > Hi, 
 >  
 > btw, you probably noticed that mlist_to_hlist is called recursively so  
 > you might use that fact 

I had some experiments in this area but it is quite hard to avoid side effects
here. Anyway it seems to be the most promising way.
Related to this: Strict reading of the manual would imply that node.mlist_to_hlist
only accepts 'display' or 'text' as style parameter. While you could emulate
everything else by adding style nodes, the implementation accepts other styles too
and it seemed to make sense to pass the specific style directly.
Is this officially supported?

 >  
 > conceptually one could have callbacks at the make_* level (the wrapping  
 > things) which is kind of clean but that has not much use as work happens  
 > in those and duplicating all that happens in there in lua makes no sense 
 >  
 > a do_delimiter callback is only a partial solution as it is used in  
 > several places and also works in tandem with other constructs (rules for  
 > instance); also, you'd always have to keep in mind that other mechanisms  
 > expect (for instance) attributes to be retained, character properties to  
 > migrate to unicode (cut and paste), etc, but that can be dealt with, in  
 > that sense the name 'delimiter' is somewhat confusing 
 >  
 > (fwfw, in context we hardly use these constructs because we want to have  
 > more control and do fancy things) 

I certainly have to take me some time to look more into ConTeXt but I
generally try to avoid using too much GPL licensed stuff... Anyway, that's
completely off-topic.

 >  
 > anyway, a dodelimiter callback is in some sense not so much a delimiter  
 > one, but more a constructor one as it kind of relates to fonts and not  
 > so much to math ... basically it could be something "create_extensible"  
 > or so which is then triggered inside e.g. do_delimiter 
 >  
 > i'll play with that a bit when i have time (i.e. what is the context we  
 > need to pass and what do we want back and what wrapup afterwards is  
 > needed) to see if it makes sense at all 

Just in case you are interested in my code I attached a patch
I am currently experimenting with which moves this completely into the font
and triggers it in `get_delim_box` to avoid interference for "easy"
delimiters. It a hack which probably fails completely if you try dumping
the font during format generation and it does some mostly untested
and improvised reference counting, but for easy cases it seems to
work quite reliable.

Anyway I agree that adding that adding anything here might not be
worth it so I will see if I continue with using custom patches or if I
find a sufficiently nice `mlist_to_hlist` solution.
 
 >  
 > Hans 
 >  
 > ----------------------------------------------------------------- 
 >                                            Hans Hagen | PRAGMA ADE 
 >                Ridderstraat 27 | 8061 GH Hasselt | The Netherlands 
 >         tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl 
 > ----------------------------------------------------------------- 
 > 

Best regards
Marcel
-------------- next part --------------
A non-text attachment was scrubbed...
Name: exp_font_variants_lua_stuff.diff
Type: application/octet-stream
Size: 8761 bytes
Desc: not available
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20180816/b46d3ee9/attachment-0001.obj>

From j.hagen at xs4all.nl  Fri Aug 17 10:03:13 2018
From: j.hagen at xs4all.nl (Hans Hagen)
Date: Fri, 17 Aug 2018 10:03:13 +0200
Subject: [Dev-luatex] nodelist based tex.saveboxresource
In-Reply-To: <1654423bde0.1029d6b45425681.2387155579045605046@2krueger.de>
References: <164fce6e4aa.1208d424195856.5629322144544422555@2krueger.de>
 <686e7a44-220a-fde6-605b-49015a6a2a25@xs4all.nl>
 <16512d6bb17.12aea8191155770.1979590006279938716@2krueger.de>
 <1dc65985-13ea-66cb-c974-bdfc2b87f750@xs4all.nl>
 <16543ad7063.e9419a3c408936.8380460772073876045@2krueger.de>
 <dc168aa1-47c0-ec62-7382-9f1b3e200284@xs4all.nl>
 <43e81c9e-252d-36eb-c9de-73016069d338@xs4all.nl>
 <1654423bde0.1029d6b45425681.2387155579045605046@2krueger.de>
Message-ID: <5e3f3794-b8f0-036d-5399-c4a93ce9b80a@xs4all.nl>

On 8/16/2018 9:08 PM, Marcel KrÃ¼ger wrote:
>   ---- On Thu, 16 Aug 2018 20:19:16 +0200 Hans Hagen <j.hagen at xs4all.nl> wrote ----
>   > Hi,
>   >
>   > btw, you probably noticed that mlist_to_hlist is called recursively so
>   > you might use that fact
> 
> I had some experiments in this area but it is quite hard to avoid side effects
> here. Anyway it seems to be the most promising way.
> Related to this: Strict reading of the manual would imply that node.mlist_to_hlist
> only accepts 'display' or 'text' as style parameter. While you could emulate
> everything else by adding style nodes, the implementation accepts other styles too
> and it seemed to make sense to pass the specific style directly.
> Is this officially supported?

sure as it is used recursively for all styles

> Just in case you are interested in my code I attached a patch
> I am currently experimenting with which moves this completely into the font
> and triggers it in `get_delim_box` to avoid interference for "easy"

last night i came to the conclusion that the only feasible plug is in 
the construction of a compound glyph but then we also need to provide it 
as helper function i.e. it is more a font related thing than math 
related (even if it gets triggered by a delimiter

> delimiters. It a hack which probably fails completely if you try dumping
> the font during format generation and it does some mostly untested
> and improvised reference counting, but for easy cases it seems to
> work quite reliable.

best forget about dumping that kind of font stuff .. lua states are not 
dumped and anything lua related to fonts neither ...

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From tex at 2krueger.de  Fri Aug 17 11:56:27 2018
From: tex at 2krueger.de (=?UTF-8?Q?Marcel_Kr=C3=BCger?=)
Date: Fri, 17 Aug 2018 11:56:27 +0200
Subject: [Dev-luatex] nodelist based tex.saveboxresource
In-Reply-To: <0f3672e5-3764-f06a-3e7b-0ed196d68fc9@xs4all.nl>
References: <164fce6e4aa.1208d424195856.5629322144544422555@2krueger.de>
 <686e7a44-220a-fde6-605b-49015a6a2a25@xs4all.nl>
 <16512d6bb17.12aea8191155770.1979590006279938716@2krueger.de>
 <1dc65985-13ea-66cb-c974-bdfc2b87f750@xs4all.nl>
 <16543ad7063.e9419a3c408936.8380460772073876045@2krueger.de>
 <dc168aa1-47c0-ec62-7382-9f1b3e200284@xs4all.nl>
 <43e81c9e-252d-36eb-c9de-73016069d338@xs4all.nl>
 <1654423bde0.1029d6b45425681.2387155579045605046@2krueger.de>
 <0f3672e5-3764-f06a-3e7b-0ed196d68fc9@xs4all.nl>
Message-ID: <1654750913c.e1b1831a64547.5712067225063290648@2krueger.de>

 ---- On Fri, 17 Aug 2018 10:08:13 +0200 Hans Hagen <j.hagen at xs4all.nl> wrote ---- 
 > Hi, 
 >  
 > Just a note: you use experimental but experimental is actually there for  
 > me and luigi as communication channel. It happens to be public but  
 > that's a side effect. It's unsupported, and things can come and go. 

Thanks for the note. I mostly use a setup to easily switch between multiple
installed versions,  so I mostly use the last TeX Live version (or trunk)
for anything important and only use experimental when experimenting,
so things coming and going is not that much of a concern. But I keep this
in mind and will also avoid writing to the list about the smaller bugs in
there if it is that unsupported.

Also thank you and luigi very much for all your great work on LuaTeX.

Best regards
Marcel


From tex at 2krueger.de  Fri Aug 17 12:11:06 2018
From: tex at 2krueger.de (=?UTF-8?Q?Marcel_Kr=C3=BCger?=)
Date: Fri, 17 Aug 2018 12:11:06 +0200
Subject: [Dev-luatex] nodelist based tex.saveboxresource
In-Reply-To: <5e3f3794-b8f0-036d-5399-c4a93ce9b80a@xs4all.nl>
References: <164fce6e4aa.1208d424195856.5629322144544422555@2krueger.de>
 <686e7a44-220a-fde6-605b-49015a6a2a25@xs4all.nl>
 <16512d6bb17.12aea8191155770.1979590006279938716@2krueger.de>
 <1dc65985-13ea-66cb-c974-bdfc2b87f750@xs4all.nl>
 <16543ad7063.e9419a3c408936.8380460772073876045@2krueger.de>
 <dc168aa1-47c0-ec62-7382-9f1b3e200284@xs4all.nl>
 <43e81c9e-252d-36eb-c9de-73016069d338@xs4all.nl>
 <1654423bde0.1029d6b45425681.2387155579045605046@2krueger.de>
 <5e3f3794-b8f0-036d-5399-c4a93ce9b80a@xs4all.nl>
Message-ID: <165475dfe6a.c2e1ff5166423.3058933416638300689@2krueger.de>

 ---- On Fri, 17 Aug 2018 10:03:13 +0200 Hans Hagen <j.hagen at xs4all.nl> wrote ---- 
 > last night i came to the conclusion that the only feasible plug is in  
 > the construction of a compound glyph but then we also need to provide it  
 > as helper function i.e. it is more a font related thing than math  
 > related (even if it gets triggered by a delimiter 

This sounds similar to my last approach. If you can select using Lua
or the builtin functionality on a per-glyph or even per-font basis,
the helper should not be that important, even if  providing it might
be useful anyway.

 >  
 > > delimiters. It a hack which probably fails completely if you try dumping 
 > > the font during format generation and it does some mostly untested 
 > > and improvised reference counting, but for easy cases it seems to 
 > > work quite reliable. 
 >  
 > best forget about dumping that kind of font stuff .. lua states are not  
 > dumped and anything lua related to fonts neither ... 

This was more about printing an error if someone tries it instead  of
dumping a font which calls random code whenever a delimiter is used...

Marcel


From luigi.scarso at gmail.com  Fri Aug 31 21:00:33 2018
From: luigi.scarso at gmail.com (luigi scarso)
Date: Fri, 31 Aug 2018 21:00:33 +0200
Subject: [Dev-luatex] Luatex 1.08.0 announcement
Message-ID: <CAG5iGsAeFxJ3Sq_7F9btTL_-XV5_u7NwzB7MTJkQUB6tivyeBw@mail.gmail.com>

==============================================================
LuaTeX 1.08 2018-08-28
==============================================================


(1) This release is a prelude to 1.10, the next stable iteration of LuaTeX
after version 1.00.

(2) Lua 5.3 is now considered to be default and we might use 5.4 in version
1.10. There are no real functional changed expected. You still need to
rename
the binary for 5.3!

(3) Binary mode is no longer available in MPlib but it is still available in
stand alone MetaPost. This simplifies compilation and reduces dependencies.

(4) The dependency on Poppler for pdf image inclusion has been removed. We
now use a small dedicated library written by Pawel Jakowski. We no longer
need c++ compilers. We're in the process of making it behave well on all
platforms. It has been tested on intel platforms.

(5) We know that there can be some (alignment) issues with the arm platform
but these are looked into. Therefore, later this year we will release 1.09.
Version 1.10 is planned for TeXlive. We hope that ffi works ok on intel and
arm platforms at that point.

(6) There have been some extensions to the Lua libraries and some callbacks
have been added. Also, a few new primitives have been introduced. The
documentation mentions the stable extensions.

(7) There are the usual bug fixes and cleanups but there have been no real
fundamental changes in the API.

The LuaTeX team
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20180831/1c91ea08/attachment.html>

