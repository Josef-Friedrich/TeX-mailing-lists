From kakuto at fuk.kindai.ac.jp  Thu Sep  6 05:10:04 2018
From: kakuto at fuk.kindai.ac.jp (Akira Kakuto)
Date: Thu, 6 Sep 2018 12:10:04 +0900
Subject: [Dev-luatex] [tlbuild] luatex build breaks in current TL
In-Reply-To: <20180906025443.GD21614@bulldog.preining.info>
References: <20180906025443.GD21614@bulldog.preining.info>
Message-ID: <A39D7B1D9C44479BAEB7E8EEA4F19F36@CJ3001517A>

Hi Norbert,

> there are more breakages in TL since the inclusion of the current luatex
> sources (did anyone did test builds before committing???)
>
> Travis-CI complains since the last commits, error excerpt:

Probably because reautoconf is not done yet.

Thanks,
Akira


From luigi.scarso at gmail.com  Thu Sep  6 05:46:47 2018
From: luigi.scarso at gmail.com (luigi scarso)
Date: Thu, 6 Sep 2018 05:46:47 +0200
Subject: [Dev-luatex] [tlbuild] luatex build breaks in current TL
In-Reply-To: <A39D7B1D9C44479BAEB7E8EEA4F19F36@CJ3001517A>
References: <20180906025443.GD21614@bulldog.preining.info>
 <A39D7B1D9C44479BAEB7E8EEA4F19F36@CJ3001517A>
Message-ID: <CAG5iGsB7ui_ha1Sm467iSvEknPqjUZ616EL=7GsbCd5EYqOMdQ@mail.gmail.com>

Il gio 6 set 2018, 05:10 Akira Kakuto <kakuto at fuk.kindai.ac.jp> ha scritto:

> Hi Norbert,
>
> > there are more breakages in TL since the inclusion of the current luatex
> > sources (did anyone did test builds before committing???)
> >
> > Travis-CI complains since the last commits, error excerpt:
>
> Probably because reautoconf is not done yet.
>
> Thanks,
> Akira
>

Hm, perhaps I have forgotten to update some autotools files..I will rebuild
later.
Luatex now include mplib without binary mode, i.e no more mpfr and gmp
dependencies. Metapost still has the full math modes, so it needs gmp and
mpfr.
Luatex also doesn't need poppler anymore, and hence no need for c++ also.

>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20180906/e3dbaef5/attachment.html>

From preining at logic.at  Thu Sep  6 06:28:12 2018
From: preining at logic.at (Norbert Preining)
Date: Thu, 6 Sep 2018 13:28:12 +0900
Subject: [Dev-luatex] [tlbuild] luatex build breaks in current TL
In-Reply-To: <A39D7B1D9C44479BAEB7E8EEA4F19F36@CJ3001517A>
References: <20180906025443.GD21614@bulldog.preining.info>
 <A39D7B1D9C44479BAEB7E8EEA4F19F36@CJ3001517A>
Message-ID: <20180906042812.GF21614@bulldog.preining.info>

> Probably because reautoconf is not done yet.

Unfortunately not, doing a reautoconf and Build breaks at

gcc -DHAVE_CONFIG_H -I. -I../../../texk/web2c -I./w2c  -I/home/norbert/Development/TeX/texlive.git/Build/source/Work/libs/mpfr/include -I/home/norbert/Development/TeX/texlive.git/Build/source/Work/libs/gmp/include -I/home/norbert/Development/TeX/texlive.git/Build/source/Work/libs/cairo/cairo -I/home/norbert/Development/TeX/texlive.git/Build/source/Work/libs/pixman/include -I/home/norbert/Development/TeX/texlive.git/Build/source/Work/libs/libpng/include -I/home/norbert/Development/TeX/texlive.git/Build/source/Work/libs/zlib/include -I/home/norbert/Development/TeX/texlive.git/Build/source/Work/texk/ptexenc -I/home/norbert/Development/TeX/texlive.git/Build/source/texk/ptexenc -I/home/norbert/Development/TeX/texlive.git/Build/source/Work/texk -I/home/norbert/Development/TeX/texlive.git/Build/source/texk -I../../../texk/web2c/mplibdir  -Wimplicit -Wreturn-type -g -O2 -MT pmpost-pmpmathbinary.o -MD -MP -MF .deps/pmpost-pmpmathbinary.Tpo -c -o pmpost-pmpmathbinary.o `test -f 'pmpmathbinary.c' || echo '../../../texk/web2c/'`pmpmathbinary.c
In file included from ../../../texk/web2c/mplibdir/mpmathbinary.w:28:
../../../texk/web2c/mplibdir/mpmathbinary.w:44:10: fatal error: gmp/config.h: No such file or directory
 #include <gmp/config.h>
          ^~~~~~~~~~~~~~
compilation terminated.


THere is
	-I/home/norbert/Development/TeX/texlive.git/Build/source/Work/libs/gmp/include
and that directory contains
	gmp.h -> ../gmp.h

But since 
	gmp/config.h
is searched, one needs to add
	.../source/Work/libs
to the include path ... or fix the include statement.

Best

Norbert

--
PREINING Norbert                               http://www.preining.info
Accelia Inc.     +    JAIST     +    TeX Live     +    Debian Developer
GPG: 0x860CDC13   fp: F7D8 A928 26E3 16A1 9FA0 ACF0 6CAC A448 860C DC13

From preining at logic.at  Thu Sep  6 06:30:12 2018
From: preining at logic.at (Norbert Preining)
Date: Thu, 6 Sep 2018 13:30:12 +0900
Subject: [Dev-luatex] [tlbuild]   luatex build breaks in current TL
In-Reply-To: <CAG5iGsB7ui_ha1Sm467iSvEknPqjUZ616EL=7GsbCd5EYqOMdQ@mail.gmail.com>
References: <20180906025443.GD21614@bulldog.preining.info>
 <A39D7B1D9C44479BAEB7E8EEA4F19F36@CJ3001517A>
 <CAG5iGsB7ui_ha1Sm467iSvEknPqjUZ616EL=7GsbCd5EYqOMdQ@mail.gmail.com>
Message-ID: <20180906043012.GG21614@bulldog.preining.info>

Hi Luigi

> Hm, perhaps I have forgotten to update some autotools files..I will rebuild
> later.

Thanks

> dependencies. Metapost still has the full math modes, so it needs gmp and
> mpfr.

Please also look into the 
	#include <gmp/config.h>
thingy, thanks.

> Luatex also doesn't need poppler anymore, and hence no need for c++ also.

It would be GREAT if we could use the new replacement library *all*over*
TeX Live and finally eradicate poppler from TL. One of the sources of my
nightmares it is this poppler.

Best

Norbert

--
PREINING Norbert                               http://www.preining.info
Accelia Inc.     +    JAIST     +    TeX Live     +    Debian Developer
GPG: 0x860CDC13   fp: F7D8 A928 26E3 16A1 9FA0 ACF0 6CAC A448 860C DC13

From luigi.scarso at gmail.com  Thu Sep  6 06:52:33 2018
From: luigi.scarso at gmail.com (luigi scarso)
Date: Thu, 6 Sep 2018 06:52:33 +0200
Subject: [Dev-luatex] [tlbuild]  luatex build breaks in current TL
In-Reply-To: <20180906043012.GG21614@bulldog.preining.info>
References: <20180906025443.GD21614@bulldog.preining.info>
 <A39D7B1D9C44479BAEB7E8EEA4F19F36@CJ3001517A>
 <CAG5iGsB7ui_ha1Sm467iSvEknPqjUZ616EL=7GsbCd5EYqOMdQ@mail.gmail.com>
 <20180906043012.GG21614@bulldog.preining.info>
Message-ID: <CAG5iGsBeNXwJG+o6FeiWA_LSyd-Fpzrpmgy9f-4JiqiVGeEGNA@mail.gmail.com>

Il gio 6 set 2018, 06:30 Norbert Preining <preining at logic.at> ha scritto

>
>
>
> It would be GREAT if we could use the new replacement library *all*over*
> TeX Live and finally eradicate poppler from TL. One of the sources of my
> nightmares it is this poppler.
>

I think that it's better to keep poppler  in texlive for  the next 2019;
pplib in luatex seems to be faster than poppler, and the size of the binary
is smaller, but we still have some issues with some pdf and I have not
checked it on all platforms . It's better to test it only in luatex for
now, but yes ,as poppler replacement for texlive  it makes sense.

>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20180906/e9481189/attachment.html>

From preining at logic.at  Thu Sep  6 07:04:31 2018
From: preining at logic.at (Norbert Preining)
Date: Thu, 6 Sep 2018 14:04:31 +0900
Subject: [Dev-luatex] [tlbuild]  luatex build breaks in current TL
In-Reply-To: <CAG5iGsBeNXwJG+o6FeiWA_LSyd-Fpzrpmgy9f-4JiqiVGeEGNA@mail.gmail.com>
References: <20180906025443.GD21614@bulldog.preining.info>
 <A39D7B1D9C44479BAEB7E8EEA4F19F36@CJ3001517A>
 <CAG5iGsB7ui_ha1Sm467iSvEknPqjUZ616EL=7GsbCd5EYqOMdQ@mail.gmail.com>
 <20180906043012.GG21614@bulldog.preining.info>
 <CAG5iGsBeNXwJG+o6FeiWA_LSyd-Fpzrpmgy9f-4JiqiVGeEGNA@mail.gmail.com>
Message-ID: <20180906050431.GA8711@bulldog.preining.info>

> now, but yes ,as poppler replacement for texlive  it makes sense.

I would be happy if by 2021 we could get rid of poppler, 2020 would even
better ;-) 

Norbert

--
PREINING Norbert                               http://www.preining.info
Accelia Inc.     +    JAIST     +    TeX Live     +    Debian Developer
GPG: 0x860CDC13   fp: F7D8 A928 26E3 16A1 9FA0 ACF0 6CAC A448 860C DC13

From norbert at preining.info  Thu Sep  6 04:54:43 2018
From: norbert at preining.info (Norbert Preining)
Date: Thu, 6 Sep 2018 11:54:43 +0900
Subject: [Dev-luatex] luatex build breaks in current TL
Message-ID: <20180906025443.GD21614@bulldog.preining.info>

Hi Luigi,

there are more breakages in TL since the inclusion of the current luatex
sources (did anyone did test builds before committing???)

Travis-CI complains since the last commits, error excerpt:

gcc -DHAVE_CONFIG_H -I. -I../../../texk/web2c -I./w2c  -I/texlive/Work/texk/ptexenc -I/texlive/texk/ptexenc -I/texlive/Work/texk -I/texlive/texk  -Wimplicit -Wreturn-type -Wdeclaration-after-statement -Wno-unknown-pragmas -g -O2 -MT ptexdir/libkanji_a-kanji.o -MD -MP -MF ptexdir/.deps/libkanji_a-kanji.Tpo -c -o ptexdir/libkanji_a-kanji.o `test -f 'ptexdir/kanji.c' || echo '../../../texk/web2c/'`ptexdir/kanji.c
mv -f ptexdir/.deps/libkanji_a-kanji.Tpo ptexdir/.deps/libkanji_a-kanji.Po
make[5]: *** No rule to make target 'luatexdir/lua/helpers.w', needed by 'helpers.c'.  Stop.
make[5]: *** Waiting for unfinished jobs....
make[5]: Leaving directory '/texlive/Work/texk/web2c'

Full log 
https://api.travis-ci.org/v3/job/425011985/log.txt

Enjoy

Norbert

--
PREINING Norbert                               http://www.preining.info
Accelia Inc.     +    JAIST     +    TeX Live     +    Debian Developer
GPG: 0x860CDC13   fp: F7D8 A928 26E3 16A1 9FA0 ACF0 6CAC A448 860C DC13

From norbert at preining.info  Thu Sep  6 04:55:30 2018
From: norbert at preining.info (Norbert Preining)
Date: Thu, 6 Sep 2018 11:55:30 +0900
Subject: [Dev-luatex] luatex 1.08 in TL cannot be built with
	--with-system-gmp
In-Reply-To: <20180906013015.GC4225@bulldog.preining.info>
References: <20180906013015.GC4225@bulldog.preining.info>
Message-ID: <20180906025530.GE21614@bulldog.preining.info>

Reposting to dev-luatex, seems to be the appropriate place.

On Thu, 06 Sep 2018, Norbert Preining wrote:
> Hi Luigi, hi all,
> 
> configuring current TL sources with
> 	--with-system-gmp
> I get an error:
> gcc -DHAVE_CONFIG_H -I. -I../../../texk/web2c -I./w2c    -I/usr/include/libpng16  -I/home/norbert/Development/TeX/texlive.git/Build/source/foo/texk -I/home/norbert/Development/TeX/texlive.git/Build/source/texk -I../../../texk/web2c/mplibdir  -Wimplicit -Wreturn-type -g -O2 -MT libmplibcore_a-mpmathbinary.o -MD -MP -MF .deps/libmplibcore_a-mpmathbinary.Tpo -c -o libmplibcore_a-mpmathbinary.o `test -f 'mpmathbinary.c' || echo '../../../texk/web2c/'`mpmathbinary.c
> In file included from ../../../texk/web2c/mplibdir/mpmathbinary.w:28:
> ../../../texk/web2c/mplibdir/mpmathbinary.w:44:10: fatal error: gmp/config.h: No such file or directory
>  #include <gmp/config.h>
>           ^~~~~~~~~~~~~~
> compilation terminated.
> 
> 
> Debian's libgmp-dev does not ship 
> 	gmp/config.h
> only
> 	gmp.h
> 
> Is it now necessary to build with the TL shipped libgmp?

Best

Norbert

--
PREINING Norbert                               http://www.preining.info
Accelia Inc.     +    JAIST     +    TeX Live     +    Debian Developer
GPG: 0x860CDC13   fp: F7D8 A928 26E3 16A1 9FA0 ACF0 6CAC A448 860C DC13

From luigi.scarso at gmail.com  Thu Sep  6 12:29:51 2018
From: luigi.scarso at gmail.com (luigi scarso)
Date: Thu, 6 Sep 2018 12:29:51 +0200
Subject: [Dev-luatex] luatex 1.08 in TL cannot be built with
	--with-system-gmp
In-Reply-To: <20180906025530.GE21614@bulldog.preining.info>
References: <20180906013015.GC4225@bulldog.preining.info>
 <20180906025530.GE21614@bulldog.preining.info>
Message-ID: <CAG5iGsDvZFK-y9LaHr2_dHbJTD6o=Vi+MFBHer-Gx1WHUP3chQ@mail.gmail.com>

On Thu, Sep 6, 2018 at 8:41 AM Norbert Preining <norbert at preining.info>
wrote:

> Reposting to dev-luatex, seems to be the appropriate place.
>
> On Thu, 06 Sep 2018, Norbert Preining wrote:
> > Hi Luigi, hi all,
> >
> > configuring current TL sources with
> >       --with-system-gmp
> > I get an error:
>

confirmed , the split between  metapost and mplib is not ok
--with-system-gmp
(pmpost also fails --with-system-gmp=no, so probably I have overlooked
something in my local tl tree).

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20180906/bda26cb7/attachment.html>

From luigi.scarso at gmail.com  Fri Sep  7 16:57:38 2018
From: luigi.scarso at gmail.com (luigi scarso)
Date: Fri, 7 Sep 2018 16:57:38 +0200
Subject: [Dev-luatex] luatex 1.08 in TL cannot be built with
	--with-system-gmp
In-Reply-To: <20180906025530.GE21614@bulldog.preining.info>
References: <20180906013015.GC4225@bulldog.preining.info>
 <20180906025530.GE21614@bulldog.preining.info>
Message-ID: <CAG5iGsCwYNSfUi3KdVNN6+EgqPUhdyb5yr3B1rDFHE8_PaDK4w@mail.gmail.com>

On Thu, Sep 6, 2018 at 8:41 AM Norbert Preining <norbert at preining.info>
wrote:

> Reposting to dev-luatex, seems to be the appropriate place.
>
> On Thu, 06 Sep 2018, Norbert Preining wrote:
> > Hi Luigi, hi all,
> >
> > configuring current TL sources with
> >       --with-system-gmp
> > I get an error:
> > gcc -DHAVE_CONFIG_H -I. -I../../../texk/web2c -I./w2c
> -I/usr/include/libpng16
> -I/home/norbert/Development/TeX/texlive.git/Build/source/foo/texk
> -I/home/norbert/Development/TeX/texlive.git/Build/source/texk
> -I../../../texk/web2c/mplibdir  -Wimplicit -Wreturn-type -g -O2 -MT
> libmplibcore_a-mpmathbinary.o -MD -MP -MF
> .deps/libmplibcore_a-mpmathbinary.Tpo -c -o libmplibcore_a-mpmathbinary.o
> `test -f 'mpmathbinary.c' || echo '../../../texk/web2c/'`mpmathbinary.c
> > In file included from ../../../texk/web2c/mplibdir/mpmathbinary.w:28:
> > ../../../texk/web2c/mplibdir/mpmathbinary.w:44:10: fatal error:
> gmp/config.h: No such file or directory
> >  #include <gmp/config.h>
> >           ^~~~~~~~~~~~~~
> > compilation terminated.
> >
> >
> > Debian's libgmp-dev does not ship
> >       gmp/config.h
> > only
> >       gmp.h
> >
> > Is it now necessary to build with the TL shipped libgmp?
>
> Best
>
> Norbert
>
>
>
the buildfarm looks ok now :
http://build.contextgarden.net/waterfall?tag=c/texlive
The red ones are offline.

can you check if --with-system-gmp works for your ?
Here
$> ./Build --debug --with-system-gmp
fails  with
""
checking requested system `gmp' library... ok
configure: error: you can not use system libraries for a native TeX Live
build
""
-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20180907/c04aca5b/attachment.html>

From tex at 2krueger.de  Wed Sep 12 12:15:23 2018
From: tex at 2krueger.de (=?UTF-8?Q?Marcel_Kr=C3=BCger?=)
Date: Wed, 12 Sep 2018 12:15:23 +0200
Subject: [Dev-luatex] MetaPost get_... related problems
Message-ID: <165cd474056.107f8d4c7202628.5842153154745432560@2krueger.de>

Hi,

I noticed two problems with the mplib `get_...` family of functions:

- First there seems to be a LuaTeX specific documentation bug:
  In the LuaTeX manual these functions are listed as `getboolean`,
  `getnumeric`, `getstring`and `getpath`, but in the actual
  implementation the names contain a underscore.

- If `get_numeric` is called while two nested loops are in effect in MetaPost,
  an endless loop is triggered when MetaPost tries to iterate
  through the current loops.

I attached a patch fixing both problems. The second point also applies to the standalone mplib.

Best regards
Marcel KrÃ¼ger
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0001-Fix-typo-in-get_numeric.patch
Type: application/octet-stream
Size: 1710 bytes
Desc: not available
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20180912/681547e4/attachment.obj>

From luigi.scarso at gmail.com  Wed Sep 12 13:07:36 2018
From: luigi.scarso at gmail.com (luigi scarso)
Date: Wed, 12 Sep 2018 13:07:36 +0200
Subject: [Dev-luatex] MetaPost get_... related problems
In-Reply-To: <165cd474056.107f8d4c7202628.5842153154745432560@2krueger.de>
References: <165cd474056.107f8d4c7202628.5842153154745432560@2krueger.de>
Message-ID: <CAG5iGsD_KaDVtSw-Mn7vTzKcGC63A=q7NfgKOjJKswjU9Q6rzw@mail.gmail.com>

On Wed, Sep 12, 2018 at 12:16 PM Marcel KrÃ¼ger <tex at 2krueger.de> wrote:

> Hi,
>
> I noticed two problems with the mplib `get_...` family of functions:
>
> - First there seems to be a LuaTeX specific documentation bug:
>   In the LuaTeX manual these functions are listed as `getboolean`,
>   `getnumeric`, `getstring`and `getpath`, but in the actual
>   implementation the names contain a underscore.
>
> - If `get_numeric` is called while two nested loops are in effect in
> MetaPost,
>   an endless loop is triggered when MetaPost tries to iterate
>   through the current loops.
>
> I attached a patch fixing both problems. The second point also applies to
> the standalone mplib.
>

Thank you for the patches.
Do you have an example where the get_numeric fails ?
-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20180912/12bb6cf1/attachment.html>

From tex at 2krueger.de  Wed Sep 12 13:38:19 2018
From: tex at 2krueger.de (=?UTF-8?Q?Marcel_Kr=C3=BCger?=)
Date: Wed, 12 Sep 2018 13:38:19 +0200
Subject: [Dev-luatex] MetaPost get_... related problems
In-Reply-To: <CAG5iGsD_KaDVtSw-Mn7vTzKcGC63A=q7NfgKOjJKswjU9Q6rzw@mail.gmail.com>
References: <165cd474056.107f8d4c7202628.5842153154745432560@2krueger.de>
 <CAG5iGsD_KaDVtSw-Mn7vTzKcGC63A=q7NfgKOjJKswjU9Q6rzw@mail.gmail.com>
Message-ID: <165cd932eba.104e581bd216799.7126252031719621816@2krueger.de>

 ---- On Wed, 12 Sep 2018 13:07:36 +0200 luigi scarso <luigi.scarso at gmail.com> wrote ---- 
 > 
 > 
 > On Wed, Sep 12, 2018 at 12:16 PM Marcel KrÃ¼ger <tex at 2krueger.de> wrote:
 > Hi,
 >  
 >  I noticed two problems with the mplib `get_...` family of functions:
 >  
 >  - First there seems to be a LuaTeX specific documentation bug:
 >    In the LuaTeX manual these functions are listed as `getboolean`,
 >    `getnumeric`, `getstring`and `getpath`, but in the actual
 >    implementation the names contain a underscore.
 >  
 >  - If `get_numeric` is called while two nested loops are in effect in MetaPost,
 >    an endless loop is triggered when MetaPost tries to iterate
 >    through the current loops.
 >  
 >  I attached a patch fixing both problems. The second point also applies to the standalone mplib.
 > 
 > Thank you for the patches.Do you have an example where the get_numeric fails ? -- 

A plain LuaTeX example:

    \directlua{
      local mp
      mp = mplib.new{
        extensions = 1,
        run_script = function(script)
          print('The value:', mp:get_numeric'mynumeric')
          return ""
        end
      }
      mp:execute[[
        mynumeric = 1;
        myother = for i=1,2:
                    for j=1,2:
                        i+j+runscript"something"
                  endfor endfor
                  1;
      ]]
    }
    \bye

This prints `The value:    1.0` with the patch and freezes without it.

Best regards
Marcel


From luigi.scarso at gmail.com  Wed Sep 12 13:51:40 2018
From: luigi.scarso at gmail.com (luigi scarso)
Date: Wed, 12 Sep 2018 13:51:40 +0200
Subject: [Dev-luatex] MetaPost get_... related problems
In-Reply-To: <165cd932eba.104e581bd216799.7126252031719621816@2krueger.de>
References: <165cd474056.107f8d4c7202628.5842153154745432560@2krueger.de>
 <CAG5iGsD_KaDVtSw-Mn7vTzKcGC63A=q7NfgKOjJKswjU9Q6rzw@mail.gmail.com>
 <165cd932eba.104e581bd216799.7126252031719621816@2krueger.de>
Message-ID: <CAG5iGsCoh0wovDgWsKRXy4akyPZyMYO1kOQ_d4RV7a+8-7L2qg@mail.gmail.com>

On Wed, Sep 12, 2018 at 1:38 PM Marcel KrÃ¼ger <tex at 2krueger.de> wrote:

>  ---- On Wed, 12 Sep 2018 13:07:36 +0200 luigi scarso <
> luigi.scarso at gmail.com> wrote ----
>  >
>  >
>  > On Wed, Sep 12, 2018 at 12:16 PM Marcel KrÃ¼ger <tex at 2krueger.de> wrote:
>  > Hi,
>  >
>  >  I noticed two problems with the mplib `get_...` family of functions:
>  >
>  >  - First there seems to be a LuaTeX specific documentation bug:
>  >    In the LuaTeX manual these functions are listed as `getboolean`,
>  >    `getnumeric`, `getstring`and `getpath`, but in the actual
>  >    implementation the names contain a underscore.
>  >
>  >  - If `get_numeric` is called while two nested loops are in effect in
> MetaPost,
>  >    an endless loop is triggered when MetaPost tries to iterate
>  >    through the current loops.
>  >
>  >  I attached a patch fixing both problems. The second point also applies
> to the standalone mplib.
>  >
>  > Thank you for the patches.Do you have an example where the get_numeric
> fails ? --
>
> A plain LuaTeX example:
>
>     \directlua{
>       local mp
>       mp = mplib.new{
>         extensions = 1,
>         run_script = function(script)
>           print('The value:', mp:get_numeric'mynumeric')
>           return ""
>         end
>       }
>       mp:execute[[
>         mynumeric = 1;
>         myother = for i=1,2:
>                     for j=1,2:
>                         i+j+runscript"something"
>                   endfor endfor
>                   1;
>       ]]
>     }
>     \bye
>
> This prints `The value:    1.0` with the patch and freezes without it.
>
> Best regards
> Marcel
>
> OK, thank you very much.


-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20180912/a042843f/attachment.html>

From tex at 2krueger.de  Tue Sep 25 21:33:58 2018
From: tex at 2krueger.de (=?UTF-8?Q?Marcel_Kr=C3=BCger?=)
Date: Tue, 25 Sep 2018 21:33:58 +0200
Subject: [Dev-luatex] Preserving unknown keys in cached font table
Message-ID: <16612395130.10ed095fb252868.5131975743767462110@2krueger.de>

Hi,

while looking into a [luaotfload bug][bug] caused by the fontloader
being confused when LuaTeX overwrites the `parameters` in a
cached font table, I wondered why `write_lua_parameters` always
creates a new table instead of altering a potentially preexisting table.

Changing this should lead to some small performance improvement
because  Lua no longer has to create a new table every time a cached
font table is queried and more importantly it allows additional string
keys in `parameters` to be preserved.

Best regards
Marcel

[bug]: https://github.com/u-fischer/luaotfload/issues/3

A patch implementing the suggested change:

---
 source/texk/web2c/luatexdir/font/luafont.c | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/source/texk/web2c/luatexdir/font/luafont.c b/source/texk/web2c/luatexdir/font/luafont.c
index e64aaffc1..68e74ffc5 100644
--- a/source/texk/web2c/luatexdir/font/luafont.c
+++ b/source/texk/web2c/luatexdir/font/luafont.c
@@ -349,7 +349,11 @@ static void write_lua_parameters(lua_State * L, int f)
 {
     int k;
     lua_push_string_by_name(L,parameters);
-    lua_newtable(L);
+    lua_pushvalue(L, -1);
+    if (LUA_TNIL == lua_rawget(L, -3)) {
+        lua_pop(L, 1);
+        lua_newtable(L);
+    }
     for (k = 1; k <= font_params(f); k++) {
         switch (k) {
             case slant_code:
-- 
2.19.0




From j.hagen at xs4all.nl  Tue Sep 25 23:26:10 2018
From: j.hagen at xs4all.nl (Hans Hagen)
Date: Tue, 25 Sep 2018 23:26:10 +0200
Subject: [Dev-luatex] Preserving unknown keys in cached font table
In-Reply-To: <16612395130.10ed095fb252868.5131975743767462110@2krueger.de>
References: <16612395130.10ed095fb252868.5131975743767462110@2krueger.de>
Message-ID: <46f3fd74-2ab4-391a-901b-f4d16b390028@xs4all.nl>

On 9/25/2018 9:33 PM, Marcel KrÃ¼ger wrote:
> Hi,
> 
> while looking into a [luaotfload bug][bug] caused by the fontloader
> being confused when LuaTeX overwrites the `parameters` in a
> cached font table, I wondered why `write_lua_parameters` always
> creates a new table instead of altering a potentially preexisting table.
> 
> Changing this should lead to some small performance improvement
> because  Lua no longer has to create a new table every time a cached
> font table is queried and more importantly it allows additional string
> keys in `parameters` to be preserved.

sounds more like an issue of luaotfload ... it should manage the 
parameters well

we're not going to change the current behaviour in the engine which is 
creating these tables (same for math constant etc) from mem (changing 
such things might solve your specific issue but introduce issues for 
others)

Hans

> Best regards
> Marcel
> 
> [bug]: https://github.com/u-fischer/luaotfload/issues/3
> 
> A patch implementing the suggested change:
> 
> ---
>   source/texk/web2c/luatexdir/font/luafont.c | 6 +++++-
>   1 file changed, 5 insertions(+), 1 deletion(-)
> 
> diff --git a/source/texk/web2c/luatexdir/font/luafont.c b/source/texk/web2c/luatexdir/font/luafont.c
> index e64aaffc1..68e74ffc5 100644
> --- a/source/texk/web2c/luatexdir/font/luafont.c
> +++ b/source/texk/web2c/luatexdir/font/luafont.c
> @@ -349,7 +349,11 @@ static void write_lua_parameters(lua_State * L, int f)
>   {
>       int k;
>       lua_push_string_by_name(L,parameters);
> -    lua_newtable(L);
> +    lua_pushvalue(L, -1);
> +    if (LUA_TNIL == lua_rawget(L, -3)) {
> +        lua_pop(L, 1);
> +        lua_newtable(L);
> +    }
>       for (k = 1; k <= font_params(f); k++) {
>           switch (k) {
>               case slant_code:
> 


-- 

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From tex at 2krueger.de  Wed Sep 26 00:30:34 2018
From: tex at 2krueger.de (=?UTF-8?Q?Marcel_Kr=C3=BCger?=)
Date: Wed, 26 Sep 2018 00:30:34 +0200
Subject: [Dev-luatex] Preserving unknown keys in cached font table
In-Reply-To: <46f3fd74-2ab4-391a-901b-f4d16b390028@xs4all.nl>
References: <16612395130.10ed095fb252868.5131975743767462110@2krueger.de>
 <46f3fd74-2ab4-391a-901b-f4d16b390028@xs4all.nl>
Message-ID: <16612daff94.f19f41fb274301.9089029177545199825@2krueger.de>

 ---- On Tue, 25 Sep 2018 23:26:10 +0200 Hans Hagen <j.hagen at xs4all.nl> wrote ---- 
 > On 9/25/2018 9:33 PM, Marcel KrÃ¼ger wrote: 
 > > Hi, 
 > >  
 > > while looking into a [luaotfload bug][bug] caused by the fontloader 
 > > being confused when LuaTeX overwrites the `parameters` in a 
 > > cached font table, I wondered why `write_lua_parameters` always 
 > > creates a new table instead of altering a potentially preexisting table. 
 > >  
 > > Changing this should lead to some small performance improvement 
 > > because  Lua no longer has to create a new table every time a cached 
 > > font table is queried and more importantly it allows additional string 
 > > keys in `parameters` to be preserved. 
 >  
 > sounds more like an issue of luaotfload ... it should manage the  
 > parameters well 

I do not think luaotfload is responsible especially because Ulrike Fischer
got a similar problem on ConTeXt with

    \starttext
    foo
    \ctxlua{for ii,vv in font.each() do end }
    bar
    \stoptext

She proposed that the ConTeXt fontloader might benefit from overloading
`font.each()` similar to `font.getfont` if the engine should not be changed.

In some personal experiments

    local function fonteach_next(max, f)
      repeat
        f = f + 1
        if f > max then return end
      until font.frozen(f) ~= nil
      return f, font.getfont(f) or font.fonts[f]
    end
    font.each = function() return fonteach_next, font.max(), 0 end
 
seemed to fix the problem.

 >  
 > we're not going to change the current behaviour in the engine which is  
 > creating these tables (same for math constant etc) from mem (changing  
 > such things might solve your specific issue but introduce issues for  
 > others)

While I agree that keeping compatibility is important I do not really understand
how this would lead to issues.

Especially the parameters known to LuaTeX are still updated, so the only change
I can see here would be if someone relies on LuaTeX dropping some table values...

Is there a problem I missed?

Best regards
Marcel

 >  
 > ----------------------------------------------------------------- 
 >                                            Hans Hagen | PRAGMA ADE 
 >                Ridderstraat 27 | 8061 GH Hasselt | The Netherlands 
 >         tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl 
 > ----------------------------------------------------------------- 
 > 



From j.hagen at xs4all.nl  Wed Sep 26 10:51:57 2018
From: j.hagen at xs4all.nl (Hans Hagen)
Date: Wed, 26 Sep 2018 10:51:57 +0200
Subject: [Dev-luatex] Preserving unknown keys in cached font table
In-Reply-To: <16612daff94.f19f41fb274301.9089029177545199825@2krueger.de>
References: <16612395130.10ed095fb252868.5131975743767462110@2krueger.de>
 <46f3fd74-2ab4-391a-901b-f4d16b390028@xs4all.nl>
 <16612daff94.f19f41fb274301.9089029177545199825@2krueger.de>
Message-ID: <adcdc167-b091-65fa-6305-a5feffd20d7d@xs4all.nl>

On 9/26/2018 12:30 AM, Marcel KrÃ¼ger wrote:
>   ---- On Tue, 25 Sep 2018 23:26:10 +0200 Hans Hagen <j.hagen at xs4all.nl> wrote ----
>   > On 9/25/2018 9:33 PM, Marcel KrÃ¼ger wrote:
>   > > Hi,
>   > >
>   > > while looking into a [luaotfload bug][bug] caused by the fontloader
>   > > being confused when LuaTeX overwrites the `parameters` in a
>   > > cached font table, I wondered why `write_lua_parameters` always
>   > > creates a new table instead of altering a potentially preexisting table.
>   > >
>   > > Changing this should lead to some small performance improvement
>   > > because  Lua no longer has to create a new table every time a cached
>   > > font table is queried and more importantly it allows additional string
>   > > keys in `parameters` to be preserved.
>   >
>   > sounds more like an issue of luaotfload ... it should manage the
>   > parameters well
> 
> I do not think luaotfload is responsible especially because Ulrike Fischer
> got a similar problem on ConTeXt with
> 
>      \starttext
>      foo
>      \ctxlua{for ii,vv in font.each() do end }
>      bar
>      \stoptext

hm, we never use font.each in context

> She proposed that the ConTeXt fontloader might benefit from overloading
> `font.each()` similar to `font.getfont` if the engine should not be changed.

she hasn't reported an issue on the context list (yet)

> In some personal experiments
> 
>      local function fonteach_next(max, f)
>        repeat
>          f = f + 1
>          if f > max then return end
>        until font.frozen(f) ~= nil

usage and therefore freezing can happen out of order so you can miss some

>        return f, font.getfont(f) or font.fonts[f]
>      end
>      font.each = function() return fonteach_next, font.max(), 0 end
>   
> seemed to fix the problem.

i assume that you just want to run over fonts ... in that case i can 
overload font.each in the context font loader (but different) in a more 
efficient way than querying tex

>   > we're not going to change the current behaviour in the engine which is
>   > creating these tables (same for math constant etc) from mem (changing
>   > such things might solve your specific issue but introduce issues for
>   > others)
> 
> While I agree that keeping compatibility is important I do not really understand
> how this would lead to issues.
> 
> Especially the parameters known to LuaTeX are still updated, so the only change
> I can see here would be if someone relies on LuaTeX dropping some table values...
> 
> Is there a problem I missed?
- why only parameters and not mathconstants, every character (which can 
have subtables), and other properties

- why overload set values at the lua end with values at the tex end 
(they can differe on purpose)

- better would be to set a metatable but that would add an extra lookup 
chain every time one does font.each

- do you really want to use font.each and overwrite parameters with 
maybe values different from what is expected at the other end (can have 
fuzzy side effects)

- you probably loose way more than this one variable with font.each

- basically what font.each does is give you back what tex sees (which 
can be way less than what lives at the lua end)

- so you solve one of your issues, then later another pops up (because 
some other assumed value is not coming from the tex end, and within a 
few years we have chaos in intercepts and heuristics

- the example of 'factor' not being in the tex parameters table is an 
example of where usage can differ from stock tex usage

etc

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From tex at 2krueger.de  Wed Sep 26 12:07:58 2018
From: tex at 2krueger.de (=?UTF-8?Q?Marcel_Kr=C3=BCger?=)
Date: Wed, 26 Sep 2018 12:07:58 +0200
Subject: [Dev-luatex] Preserving unknown keys in cached font table
In-Reply-To: <adcdc167-b091-65fa-6305-a5feffd20d7d@xs4all.nl>
References: <16612395130.10ed095fb252868.5131975743767462110@2krueger.de>
 <46f3fd74-2ab4-391a-901b-f4d16b390028@xs4all.nl>
 <16612daff94.f19f41fb274301.9089029177545199825@2krueger.de>
 <adcdc167-b091-65fa-6305-a5feffd20d7d@xs4all.nl>
Message-ID: <16615597fce.115baae7210781.776393276468946675@2krueger.de>

 ---- On Wed, 26 Sep 2018 10:51:57 +0200 Hans Hagen <j.hagen at xs4all.nl> wrote ---- 
 > On 9/26/2018 12:30 AM, Marcel KrÃ¼ger wrote: 
 > > [...]
 > > She proposed that the ConTeXt fontloader might benefit from overloading 
 > > `font.each()` similar to `font.getfont` if the engine should not be changed. 
 >  
 > she hasn't reported an issue on the context list (yet) 

 >  
 > > In some personal experiments 
 > >  
 > >      local function fonteach_next(max, f) 
 > >        repeat 
 > >          f = f + 1 
 > >          if f > max then return end 
 > >        until font.frozen(f) ~= nil 
 >  
 > usage and therefore freezing can happen out of order so you can miss some 

RIght, but it is only comparing to nil so it shouldn't check if the font is
frozen, it is just used as a way to check if the font is valid.

 >  
 > >        return f, font.getfont(f) or font.fonts[f] 
 > >      end 
 > >      font.each = function() return fonteach_next, font.max(), 0 end 
 > >    
 > > seemed to fix the problem. 
 >  
 > i assume that you just want to run over fonts ... in that case i can  
 > overload font.each in the context font loader (but different) in a more  
 > efficient way than querying tex 

That would certainly fix the original problem but I still think that it would be
nicer to change the engine here. Keeping almost everything in cached font tables
except for the parameters table seems counterintuitive.

 > [...]
 
 > - why only parameters and not mathconstants, every character (which can  
 > have subtables), and other properties 
 >  
 > - you probably loose way more than this one variable with font.each 
 >  
 > - basically what font.each does is give you back what tex sees (which  
 > can be way less than what lives at the lua end) 
 >  
 > - so you solve one of your issues, then later another pops up (because  
 > some other assumed value is not coming from the tex end, and within a  
 > few years we have chaos in intercepts and heuristics   

This is only about cached font tables. The code handling them is `font_to_lua` is

    if (font_cache_id(f) > 0) {
        /*tex Fetch the table from the registry if it was saved there by |font_from_lua|. */
        lua_rawgeti(L, LUA_REGISTRYINDEX, font_cache_id(f));
        /*tex Font dimenensions can be changed from \TEX\ code. */
        write_lua_parameters(L, f);
        return 1;
    }

So AFAICT the table is not modified (and no entries are lost) except
by `write_lua_parameters`. So I only want to change the handling of
`parameters` because no values are lost in the other fields.

 >
 > - why overload set values at the lua end with values at the tex end  
 > (they can differe on purpose) 
 >  
 > - do you really want to use font.each and overwrite parameters with  
 > maybe values different from what is expected at the other end (can have  
 > fuzzy side effects)   

I am not sure what you mean here. But I think it makes sense to reflect
changes in the TeX font parameters in the Lua table. I would think that
everyone who uses the font parameters table expects the values to conform
to the font dimensions in TeX.

 >
 > - better would be to set a metatable but that would add an extra lookup  
 > chain every time one does font.each 

I think an extra lookup would be a small price to pay if the alternative is
that font.each is effectivly useless.

 >  
 > - the example of 'factor' not being in the tex parameters table is an  
 > example of where usage can differ from stock tex usage 
I think this is more an argument to not change the parameters table at all.

Especially *because* the usage of the table can differ from stock TeX usage
it makes sense not to drop unknown entries.


Best regards
Marcel

 >  
 > etc 
 >  
 > Hans 
 >  
 > ----------------------------------------------------------------- 
 >                                            Hans Hagen | PRAGMA ADE 
 >                Ridderstraat 27 | 8061 GH Hasselt | The Netherlands 
 >         tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl 
 > ----------------------------------------------------------------- 
 > 



From luigi.scarso at gmail.com  Wed Sep 26 12:37:56 2018
From: luigi.scarso at gmail.com (luigi scarso)
Date: Wed, 26 Sep 2018 12:37:56 +0200
Subject: [Dev-luatex] Preserving unknown keys in cached font table
In-Reply-To: <16615597fce.115baae7210781.776393276468946675@2krueger.de>
References: <16612395130.10ed095fb252868.5131975743767462110@2krueger.de>
 <46f3fd74-2ab4-391a-901b-f4d16b390028@xs4all.nl>
 <16612daff94.f19f41fb274301.9089029177545199825@2krueger.de>
 <adcdc167-b091-65fa-6305-a5feffd20d7d@xs4all.nl>
 <16615597fce.115baae7210781.776393276468946675@2krueger.de>
Message-ID: <CAG5iGsASjN7a9XFv9J56Vw8+kqvS7wcPDRmx+N07PzqWK-W17g@mail.gmail.com>

On Wed, Sep 26, 2018 at 12:08 PM Marcel KrÃ¼ger <tex at 2krueger.de> wrote:

>  ---- On Wed, 26 Sep 2018 10:51:57 +0200 Hans Hagen <j.hagen at xs4all.nl>
> wrote ----
>  > On 9/26/2018 12:30 AM, Marcel KrÃ¼ger wrote:
>  > > [...]
>  > > She proposed that the ConTeXt fontloader might benefit from
> overloading
>  > > `font.each()` similar to `font.getfont` if the engine should not be
> changed.
>  >
>  > she hasn't reported an issue on the context list (yet)
>
>
for the record:

%%% test.tex
Test:
\directlua{
local function recdump(k,v)
 if type(v)=='table' then
   print(" >>",k)
   for k1, v1 in pairs(v) do recdump(k1,v1) end
 else
   print("   ",k,v)
 end
end

for ii,vv in font.each() do recdump(ii,vv)  end}
\bye

mtxrun --script plain test.tex

is ok (latest context beta) .

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/dev-luatex/attachments/20180926/a3a96af9/attachment.html>

From j.hagen at xs4all.nl  Wed Sep 26 14:22:35 2018
From: j.hagen at xs4all.nl (Hans Hagen)
Date: Wed, 26 Sep 2018 14:22:35 +0200
Subject: [Dev-luatex] Preserving unknown keys in cached font table
In-Reply-To: <16615597fce.115baae7210781.776393276468946675@2krueger.de>
References: <16612395130.10ed095fb252868.5131975743767462110@2krueger.de>
 <46f3fd74-2ab4-391a-901b-f4d16b390028@xs4all.nl>
 <16612daff94.f19f41fb274301.9089029177545199825@2krueger.de>
 <adcdc167-b091-65fa-6305-a5feffd20d7d@xs4all.nl>
 <16615597fce.115baae7210781.776393276468946675@2krueger.de>
Message-ID: <baacf396-23a3-e7d0-70e9-08f432d45f28@xs4all.nl>

On 9/26/2018 12:07 PM, Marcel KrÃ¼ger wrote:

> That would certainly fix the original problem but I still think that it would be
> nicer to change the engine here. Keeping almost everything in cached font tables
> except for the parameters table seems counterintuitive.
the problem is this:

when you pass a font to tex it can save the table, in which case you can 
get it back as-is

however, when you ask for a table the parameters will be rewritten

now, it is indeed arguable, but then it's better *not* to update the 
parameters at all because after all, other values are also passed as 
they are (and they can be different too from the known values inside 
tex, e.g. rounded dimensions) ... so, i'll just remove the whole update 
which then also means that you don't get the updated parameters ... it's 
probably not a problem as no sane user will fetch a table for just that

so, "each" and "getfont" will not update parameters any longer when a 
cached table is used and when one wants to know the ones really used in 
the engine "getparameters" is to be used; of course that table only has 
the few official ones, no additional keys known at the lua end (but 
someone using getfont or getparameters is not interested in those anyway)

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From tex at 2krueger.de  Wed Sep 26 16:22:41 2018
From: tex at 2krueger.de (=?UTF-8?Q?Marcel_Kr=C3=BCger?=)
Date: Wed, 26 Sep 2018 16:22:41 +0200
Subject: [Dev-luatex] Preserving unknown keys in cached font table
In-Reply-To: <baacf396-23a3-e7d0-70e9-08f432d45f28@xs4all.nl>
References: <16612395130.10ed095fb252868.5131975743767462110@2krueger.de>
 <46f3fd74-2ab4-391a-901b-f4d16b390028@xs4all.nl>
 <16612daff94.f19f41fb274301.9089029177545199825@2krueger.de>
 <adcdc167-b091-65fa-6305-a5feffd20d7d@xs4all.nl>
 <16615597fce.115baae7210781.776393276468946675@2krueger.de>
 <baacf396-23a3-e7d0-70e9-08f432d45f28@xs4all.nl>
Message-ID: <1661642b2ac.11b30f625377932.8259955020729476494@2krueger.de>

 ---- On Wed, 26 Sep 2018 14:22:35 +0200 Hans Hagen <j.hagen at xs4all.nl> wrote ---- 
 > the problem is this: 
 >  
 > when you pass a font to tex it can save the table, in which case you can  
 > get it back as-is 
 >  
 > however, when you ask for a table the parameters will be rewritten 
 >  
 > now, it is indeed arguable, but then it's better *not* to update the  
 > parameters at all because after all, other values are also passed as  
 > they are (and they can be different too from the known values inside  
 > tex, e.g. rounded dimensions) ... so, i'll just remove the whole update  
 > which then also means that you don't get the updated parameters ... it's  
 > probably not a problem as no sane user will fetch a table for just that 

Great, that might be the best solution.

Best regards
Marcel


