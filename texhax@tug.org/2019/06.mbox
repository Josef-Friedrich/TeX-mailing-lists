From anablasco98 at gmail.com  Wed Jun  5 12:36:25 2019
From: anablasco98 at gmail.com (Ana Blasco)
Date: Wed, 5 Jun 2019 12:36:25 +0200
Subject: Can't download
Message-ID: <CAFybZFE_CCsj-tj+Gxt89Hs2r6s6MdFKA96=cmTf-k5xU_TawQ@mail.gmail.com>

Hi, I have a Windows laptop and am interested in starting using LaTeX.
however, although I've tried to download the Protext files from tug.org
multiple times, whenever I try to install it a message informing that it
cannot be installed in my laptop appears. I wonder if it's due to the
connection or that I'm missing something, and would like to know if you
could anyhow help me out.

Best regards,

Ana Blasco Paredes
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://tug.org/pipermail/texhax/attachments/20190605/6497da37/attachment.html>

From ziegenhagen at gmail.com  Wed Jun  5 14:59:45 2019
From: ziegenhagen at gmail.com (Uwe Ziegenhagen)
Date: Wed, 5 Jun 2019 14:59:45 +0200
Subject: Can't download
In-Reply-To: <CAFybZFE_CCsj-tj+Gxt89Hs2r6s6MdFKA96=cmTf-k5xU_TawQ@mail.gmail.com>
References: <CAFybZFE_CCsj-tj+Gxt89Hs2r6s6MdFKA96=cmTf-k5xU_TawQ@mail.gmail.com>
Message-ID: <A1F83CC4-C111-431E-BABB-F71FAF5943B6@gmail.com>

What Windows version are you using?

Uwe

Von meinem iPhone gesendet

> Am 05.06.2019 um 12:36 schrieb Ana Blasco <anablasco98 at gmail.com>:
> 
> Hi, I have a Windows laptop and am interested in starting using LaTeX. however, although I've tried to download the Protext files from tug.org multiple times, whenever I try to install it a message informing that it cannot be installed in my laptop appears. I wonder if it's due to the connection or that I'm missing something, and would like to know if you could anyhow help me out.
> 
> Best regards,
> 
> Ana Blasco Paredes
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://tug.org/pipermail/texhax/attachments/20190605/c6d23cde/attachment.html>

From peter at silmaril.ie  Wed Jun  5 15:35:19 2019
From: peter at silmaril.ie (Peter Flynn)
Date: Wed, 05 Jun 2019 14:35:19 +0100
Subject: Can't download
In-Reply-To: <CAFybZFE_CCsj-tj+Gxt89Hs2r6s6MdFKA96=cmTf-k5xU_TawQ@mail.gmail.com>
References: <CAFybZFE_CCsj-tj+Gxt89Hs2r6s6MdFKA96=cmTf-k5xU_TawQ@mail.gmail.com>
Message-ID: <16b27d9e1d8.2798.4cd050b9e2734e903149e94ed29c5104@silmaril.ie>

Can you tell us the EXACT error message, and exactly WHEN it appears.

Peter

On 5 June 2019 13:47:34 Ana Blasco <anablasco98 at gmail.com> wrote:
> Hi, I have a Windows laptop and am interested in starting using LaTeX. 
> however, although I've tried to download the Protext files from tug.org 
> multiple times, whenever I try to install it a message informing that it 
> cannot be installed in my laptop appears. I wonder if it's due to the 
> connection or that I'm missing something, and would like to know if you 
> could anyhow help me out.
>
> Best regards,
>
> Ana Blasco Paredes

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://tug.org/pipermail/texhax/attachments/20190605/d5e814e9/attachment.html>

From P.Taylor at rhul.ac.uk  Fri Jun  7 17:56:36 2019
From: P.Taylor at rhul.ac.uk (Taylor, P)
Date: Fri, 7 Jun 2019 15:56:36 +0000
Subject: [texworks] inputenc error
In-Reply-To: <9c11bc80-d8f3-5687-59cb-eece7c163b0b@lkb.ens.fr>
References: <mailman.25.1559901605.2020.texworks@tug.org>
 <9c11bc80-d8f3-5687-59cb-eece7c163b0b@lkb.ens.fr>
Message-ID: <f8783be9-ba0b-b1ca-1e72-382e24a0922b@Rhul.Ac.Uk>

Jean Hare wrote:
> Your problem is likely? relative neither to texworks nor to MiKTeX,
> but to a change in LaTeX itself.
> Since April 2018, it default the input encoding to UTF-8.
> see https://www.latex-project.org/news/latex2e-news/
>
> Legacy versions used 7-bit encoding, or various? 8-bit encoding
> (in Latex2e with? inputenc package)
>
> If you don't already load inputenc,
> ?try adding \usepackage[latin1]{inputenc} or 
> \usepackage[latin9]{inputenc}
> this could fix the problem.
>
> An for future use, it would be better convert your files to utf-8.

Thank you for this excellent advice.? I have encounted (apparently) 
identical problems attempt to process legacy LaTeX documents that use 
Silvio Levy's/Claudio Beccari's 8-bit polytonic Greek encoding. Are you 
in a position to advise which variant of \usepackage [latin1] {inputenc} 
/ \usepackage [latin9] {inputenc} / \usepackage [latin$n$] {inputenc} 
might best address this issue ?

Philip Taylor


From d.p.carlisle at gmail.com  Fri Jun  7 18:22:47 2019
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Fri, 7 Jun 2019 17:22:47 +0100
Subject: [texworks] inputenc error
In-Reply-To: <f8783be9-ba0b-b1ca-1e72-382e24a0922b@Rhul.Ac.Uk>
References: <mailman.25.1559901605.2020.texworks@tug.org>
 <9c11bc80-d8f3-5687-59cb-eece7c163b0b@lkb.ens.fr>
 <f8783be9-ba0b-b1ca-1e72-382e24a0922b@Rhul.Ac.Uk>
Message-ID: <CAEW6iOh1_8+3dGiQTrDwd9okAncsU6Hok6xgL7h+gYRUMwuChA@mail.gmail.com>

if the encoding was previously declared in the document then the
document should work unchanged, but if it was assuming the 8bit
characters just start as catcode 12 then add
\UseRawInputEncoding
as the first line of the file which reverts things to the default
settings of older latex (ie those of plain tex)

On Fri, 7 Jun 2019 at 16:58, Taylor, P <P.Taylor at rhul.ac.uk> wrote:
>
> Jean Hare wrote:
> > Your problem is likely  relative neither to texworks nor to MiKTeX,
> > but to a change in LaTeX itself.
> > Since April 2018, it default the input encoding to UTF-8.
> > see https://www.latex-project.org/news/latex2e-news/
> >
> > Legacy versions used 7-bit encoding, or various  8-bit encoding
> > (in Latex2e with  inputenc package)
> >
> > If you don't already load inputenc,
> >  try adding \usepackage[latin1]{inputenc} or
> > \usepackage[latin9]{inputenc}
> > this could fix the problem.
> >
> > An for future use, it would be better convert your files to utf-8.
>
> Thank you for this excellent advice.  I have encounted (apparently)
> identical problems attempt to process legacy LaTeX documents that use
> Silvio Levy's/Claudio Beccari's 8-bit polytonic Greek encoding. Are you
> in a position to advise which variant of \usepackage [latin1] {inputenc}
> / \usepackage [latin9] {inputenc} / \usepackage [latin$n$] {inputenc}
> might best address this issue ?
>
> Philip Taylor
>

From P.Taylor at rhul.ac.uk  Fri Jun  7 18:37:49 2019
From: P.Taylor at rhul.ac.uk (Taylor, P)
Date: Fri, 7 Jun 2019 16:37:49 +0000
Subject: [texworks] inputenc error
In-Reply-To: <adf272de-8054-b039-5adf-b0f28b576ab5@lkb.ens.fr>
References: <mailman.25.1559901605.2020.texworks@tug.org>
 <9c11bc80-d8f3-5687-59cb-eece7c163b0b@lkb.ens.fr>
 <f8783be9-ba0b-b1ca-1e72-382e24a0922b@Rhul.Ac.Uk>
 <adf272de-8054-b039-5adf-b0f28b576ab5@lkb.ens.fr>
Message-ID: <1522a7d4-a957-95c1-0f65-8223149dda74@Rhul.Ac.Uk>

Thank you both.  I now see on closer inspection that despite the fact that I \usepackage about a dozen packages (none of which do I, of course, even pretend to understand), none of them is "inputenc".  I therefore wonder whether David's


if it was assuming the 8bit
characters just start as catcode 12 then add
\UseRawInputEncoding
as the first line of the file

might resolve the problem.  I will try.
Philip Taylor
--------
\usepackage [compact, center, explicit]{titlesec}

\usepackage {balance}

%

% No longer needed (2015++)

% \usepackage {fixltx2e}

%

\usepackage {fix1stcolmarks}

\usepackage {fancyhdr}

\usepackage {transparent}

\usepackage {oldstyle}

\usepackage [pdftex]{graphicx}

\usepackage [greek, english]{babel}

%\usepackage {teubner}

\usepackage {gfsporson}

\usepackage [colorlinks]{hyperref}

\usepackage[T1]{fontenc}

\usepackage[urw-garamond]{mathdesign}


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://tug.org/pipermail/texhax/attachments/20190607/88eea2df/attachment.html>

From reinhard.kotucha at web.de  Sat Jun  8 06:27:28 2019
From: reinhard.kotucha at web.de (Reinhard Kotucha)
Date: Sat, 8 Jun 2019 06:27:28 +0200
Subject: [texworks] inputenc error
In-Reply-To: <f8783be9-ba0b-b1ca-1e72-382e24a0922b@Rhul.Ac.Uk>
References: <mailman.25.1559901605.2020.texworks@tug.org>
 <9c11bc80-d8f3-5687-59cb-eece7c163b0b@lkb.ens.fr>
 <f8783be9-ba0b-b1ca-1e72-382e24a0922b@Rhul.Ac.Uk>
Message-ID: <23803.14640.898031.635173@gargle.gargle.HOWL>

On 2019-06-07 at 15:56:36 +0000, Taylor, P wrote:

 > [...] Are you in a position to advise which variant of \usepackage
 > [latin1] {inputenc} / \usepackage [latin9] {inputenc} / \usepackage
 > [latin$n$] {inputenc} might best address this issue ?

The short answer is "none of them" in favor of

  \usepackage[utf8]{inputenc}

If you are really forced to use old-fashioned 8-bit input encodings,
in most cases you would prefer latin9 (ISO 8895-15) because this makes
more frequently used characters accessible directly from Western
European keyboards.  For other keyboards one needs other input
encodings, for instance latin5 for Russian, viscii for Vietnamese,...

For ISO 8895 specifications consult

  https://en.wikipedia.org/wiki/ISO/IEC_8859

LaTeX converts all non-ASCII characters to LICR (LaTeX Internal
Character Representation) so that all non-ASCII characters are
assigned to control sequences.  Thus the choice of a paricular input
encoding is just a matter of convenience.  If you want to allow users
to use different input encodings, all strings in macro packages should
be in LICR.

The best choice today is definitely UTF-8 and I strongly recommend to
use it and to avoid national character sets due to their limitations.

Phil, I'm aware that I don't have to tell you what Unicode is good
for but you asked on a public mailing list.  Thus the more verbose
answer.

Regards,
  Reinhard

--
------------------------------------------------------------------
Reinhard Kotucha                            Phone: +49-511-3373112
Marschnerstr. 25
D-30167 Hannover                    mailto:reinhard.kotucha at web.de
------------------------------------------------------------------


From P.Taylor at rhul.ac.uk  Sat Jun  8 10:13:56 2019
From: P.Taylor at rhul.ac.uk (Taylor, P)
Date: Sat, 8 Jun 2019 08:13:56 +0000
Subject: [texworks] inputenc error
In-Reply-To: <23803.14640.898031.635173@gargle.gargle.HOWL>
References: <mailman.25.1559901605.2020.texworks@tug.org>
 <9c11bc80-d8f3-5687-59cb-eece7c163b0b@lkb.ens.fr>
 <f8783be9-ba0b-b1ca-1e72-382e24a0922b@Rhul.Ac.Uk>
 <23803.14640.898031.635173@gargle.gargle.HOWL>
Message-ID: <4a42527e-c159-40af-cb93-54075c69dccb@Rhul.Ac.Uk>

Thank you, Reinhard.? And of course we will convert to UTF-8 for the 
next phase of the project, but we also need to be able to process the 
legacy version (so that we can compare the outputs of the two, for 
example).? And there are no "exotic" characters in the? input at all ? 
it looks, in part, like the following :

\Byzantine 2272 0 inc-auto {{}} {a>ut`o} {1600} {P. Stephanus, 
Alphabetum Graecum \& Hebraicum (Paris, 1600), BL 12904.b.11 } {}
\Byzantine 2274 0 inc-autou1 {{}} {a>uto~u} {1600} {P. Stephanus, 
Alphabetum Graecum \& Hebraicum (Paris, 1600), BL 12904.b.11 } {}
\Byzantine 2275 0 inc-autwi {{}} {a>ut~w|} {1600} {P. Stephanus, 
Alphabetum Graecum \& Hebraicum (Paris, 1600), BL 12904.b.11 } {}

\Byzantine 2831 0 inc-u {{}} {~u} {1600} {P. Stephanus, Alphabetum 
Graecum \& Hebraicum (Paris, 1600), BL 12904.b.11 } {}
\Byzantine 2833 0 inc-ui {{}} {ui} {1600} {P. Stephanus, Alphabetum 
Graecum \& Hebraicum (Paris, 1600), BL 12904.b.11 } {}
\Byzantine 2834 0 inc-un1 {{}} {un} {1600} {P. Stephanus, Alphabetum 
Graecum \& Hebraicum (Paris, 1600), BL 12904.b.11 } {}
\Byzantine 2836 0 inc-un3 {{}} {un} {1600} {P. Stephanus, Alphabetum 
Graecum \& Hebraicum (Paris, 1600), BL 12904.b.11 } {}
\Byzantine 2835 0 inc-un2 {{}} {un} {1600} {P. Stephanus, Alphabetum 
Graecum \& Hebraicum (Paris, 1600), BL 12904.b.11 } {}
\Byzantine 2837 0 inc-un4 {{}} {>~un} {16\th c.} {W.H. Ingram, ?The 
Ligatures of Early Printed Greek', GRBS 7 (1966), 382-89} {}
\Byzantine 2838 0 inc-up {{}} {<up} {1600} {P. Stephanus, Alphabetum 
Graecum \& Hebraicum (Paris, 1600), BL 12904.b.11 } {}
\Byzantine 2841 0 inc-upo {{}} {<upo} {1600} {P. Stephanus, Alphabetum 
Graecum \& Hebraicum (Paris, 1600), BL 12904.b.11 } {}

\Byzantine 2849 0 inc-ws1 {{}} {~ws} {16\th c.} {W.H. Ingram, ?The 
Ligatures of Early Printed Greek', GRBS 7 (1966), 382-89} {}
\Byzantine 2246 0 inc-aitiatikh {{a>itia\raise {th}}} {a>itiatik`h} 
{1600} {P. Stephanus, Alphabetum Graecum \& Hebraicum (Paris, 1600), BL 
12904.b.11} {}
\Byzantine 2256 0 inc-aoristos {{>a'o\raise {os}}} {>a'oristos} {1600} 
{P. Stephanus, Alphabetum Graecum \& Hebraicum (Paris, 1600), BL 
12904.b.11 } {}
\Byzantine 2257 0 inc-aoristou {{>ao\raise {ou}}} {>aor'istou} {1600} 
{P. Stephanus, Alphabetum Graecum \& Hebraicum (Paris, 1600), BL 
12904.b.11 } {}
\Byzantine 2254 0 inc-antitou {{>a\raise {t}n\raise {t}}} {>ant`i to~u} 
{1600} {P. Stephanus, Alphabetum Graecum \& Hebraicum (Paris, 1600), BL 
12904.b.11 } {}
\Byzantine 2273 0 inc-autou {{>auo~u\raise {t}}} {a>uto~u} {1600} {P. 
Stephanus, Alphabetum Graecum \& Hebraicum (Paris, 1600), BL 12904.b.11 } {}

** Phil
--------
Reinhard Kotucha wrote:
> On 2019-06-07 at 15:56:36 +0000, Taylor, P wrote:
>
>   > [...] Are you in a position to advise which variant of \usepackage
>   > [latin1] {inputenc} / \usepackage [latin9] {inputenc} / \usepackage
>   > [latin$n$] {inputenc} might best address this issue ?
>
> The short answer is "none of them" in favor of
>
>    \usepackage[utf8]{inputenc}
>
> If you are really forced to use old-fashioned 8-bit input encodings,
> in most cases you would prefer latin9 (ISO 8895-15) because this makes
> more frequently used characters accessible directly from Western
> European keyboards.  For other keyboards one needs other input
> encodings, for instance latin5 for Russian, viscii for Vietnamese,...
>
> For ISO 8895 specifications consult
>
>    https://en.wikipedia.org/wiki/ISO/IEC_8859
>
> LaTeX converts all non-ASCII characters to LICR (LaTeX Internal
> Character Representation) so that all non-ASCII characters are
> assigned to control sequences.  Thus the choice of a paricular input
> encoding is just a matter of convenience.  If you want to allow users
> to use different input encodings, all strings in macro packages should
> be in LICR.
>
> The best choice today is definitely UTF-8 and I strongly recommend to
> use it and to avoid national character sets due to their limitations.
>
> Phil, I'm aware that I don't have to tell you what Unicode is good
> for but you asked on a public mailing list.  Thus the more verbose
> answer.
>
> Regards,
>    Reinhard
>
> --
> ------------------------------------------------------------------
> Reinhard Kotucha                            Phone: +49-511-3373112
> Marschnerstr. 25
> D-30167 Hannover                    mailto:reinhard.kotucha at web.de
> ------------------------------------------------------------------



From lomov.vl at yandex.ru  Sat Jun  8 10:41:07 2019
From: lomov.vl at yandex.ru (Vladimir Lomov)
Date: Sat, 8 Jun 2019 16:41:07 +0800
Subject: [texworks] inputenc error
In-Reply-To: <23803.14640.898031.635173@gargle.gargle.HOWL>
References: <mailman.25.1559901605.2020.texworks@tug.org>
 <9c11bc80-d8f3-5687-59cb-eece7c163b0b@lkb.ens.fr>
 <f8783be9-ba0b-b1ca-1e72-382e24a0922b@Rhul.Ac.Uk>
 <23803.14640.898031.635173@gargle.gargle.HOWL>
Message-ID: <20190608084107.GB917@smoon.vl-lomov.ru>

Hello,
** Reinhard Kotucha [2019-06-08 06:27:28 +0200]:

> On 2019-06-07 at 15:56:36 +0000, Taylor, P wrote:
> 
>  > [...] Are you in a position to advise which variant of \usepackage
>  > [latin1] {inputenc} / \usepackage [latin9] {inputenc} / \usepackage
>  > [latin$n$] {inputenc} might best address this issue ?
> 
> The short answer is "none of them" in favor of
> 
>   \usepackage[utf8]{inputenc}
> 
> If you are really forced to use old-fashioned 8-bit input encodings,
> in most cases you would prefer latin9 (ISO 8895-15) because this makes
> more frequently used characters accessible directly from Western
> European keyboards.  For other keyboards one needs other input
> encodings, for instance latin5 for Russian, viscii for Vietnamese,...

For Russian:

  cp1251, cp866, koi8-r, latin5 (ISO 8895-5)

in order of preference decreasing (I usually recommend to use UTF-8). In
some cases the first one is the only possible choice (eg, for amsart class).

> For ISO 8895 specifications consult
> 
>   https://en.wikipedia.org/wiki/ISO/IEC_8859
> 
> LaTeX converts all non-ASCII characters to LICR (LaTeX Internal
> Character Representation) so that all non-ASCII characters are
> assigned to control sequences.  Thus the choice of a paricular input
> encoding is just a matter of convenience.  If you want to allow users
> to use different input encodings, all strings in macro packages should
> be in LICR.
> 
> The best choice today is definitely UTF-8 and I strongly recommend to
> use it and to avoid national character sets due to their limitations.
> 
> Phil, I'm aware that I don't have to tell you what Unicode is good
> for but you asked on a public mailing list.  Thus the more verbose
> answer.
> 
> Regards,
>   Reinhard
> 
> --
> ------------------------------------------------------------------
> Reinhard Kotucha                            Phone: +49-511-3373112
> Marschnerstr. 25
> D-30167 Hannover                    mailto:reinhard.kotucha at web.de
> ------------------------------------------------------------------

---
WBR, Vladimir Lomov
 

-- 
	Catching his children with their hands in the new, still wet, patio,
the father spanked them.  His wife asked, "Don't you love your children?"
"In the abstract, yes, but not in the concrete."
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 228 bytes
Desc: not available
URL: <https://tug.org/pipermail/texhax/attachments/20190608/b9cb25a7/attachment.sig>

From d.p.carlisle at gmail.com  Sat Jun  8 10:45:23 2019
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Sat, 8 Jun 2019 09:45:23 +0100
Subject: [texworks] inputenc error
In-Reply-To: <4a42527e-c159-40af-cb93-54075c69dccb@Rhul.Ac.Uk>
References: <mailman.25.1559901605.2020.texworks@tug.org>
 <9c11bc80-d8f3-5687-59cb-eece7c163b0b@lkb.ens.fr>
 <f8783be9-ba0b-b1ca-1e72-382e24a0922b@Rhul.Ac.Uk>
 <23803.14640.898031.635173@gargle.gargle.HOWL>
 <4a42527e-c159-40af-cb93-54075c69dccb@Rhul.Ac.Uk>
Message-ID: <CAEW6iOi7MgM==_hL+XfPHidyk93Uu+Zxb0+8nYbUWtKdkNVx_g@mail.gmail.com>

the code you post there is all ASCII so totally unaffected by any
inputenc arguments or the 2018 change to default to UTF-8.

David

On Sat, 8 Jun 2019 at 09:15, Taylor, P <P.Taylor at rhul.ac.uk> wrote:
>
> Thank you, Reinhard.  And of course we will convert to UTF-8 for the
> next phase of the project, but we also need to be able to process the
> legacy version (so that we can compare the outputs of the two, for
> example).  And there are no "exotic" characters in the  input at all ?
> it looks, in part, like the following :
>
> \Byzantine 2272 0 inc-auto {{}} {a>ut`o} {1600} {P. Stephanus,
> Alphabetum Graecum \& Hebraicum (Paris, 1600), BL 12904.b.11 } {}
> \Byzantine 2274 0 inc-autou1 {{}} {a>uto~u} {1600} {P. Stephanus,
> Alphabetum Graecum \& Hebraicum (Paris, 1600), BL 12904.b.11 } {}
> \Byzantine 2275 0 inc-autwi {{}} {a>ut~w|} {1600} {P. Stephanus,
> Alphabetum Graecum \& Hebraicum (Paris, 1600), BL 12904.b.11 } {}
>
> \Byzantine 2831 0 inc-u {{}} {~u} {1600} {P. Stephanus, Alphabetum
> Graecum \& Hebraicum (Paris, 1600), BL 12904.b.11 } {}
> \Byzantine 2833 0 inc-ui {{}} {ui} {1600} {P. Stephanus, Alphabetum
> Graecum \& Hebraicum (Paris, 1600), BL 12904.b.11 } {}
> \Byzantine 2834 0 inc-un1 {{}} {un} {1600} {P. Stephanus, Alphabetum
> Graecum \& Hebraicum (Paris, 1600), BL 12904.b.11 } {}
> \Byzantine 2836 0 inc-un3 {{}} {un} {1600} {P. Stephanus, Alphabetum
> Graecum \& Hebraicum (Paris, 1600), BL 12904.b.11 } {}
> \Byzantine 2835 0 inc-un2 {{}} {un} {1600} {P. Stephanus, Alphabetum
> Graecum \& Hebraicum (Paris, 1600), BL 12904.b.11 } {}
> \Byzantine 2837 0 inc-un4 {{}} {>~un} {16\th c.} {W.H. Ingram, ?The
> Ligatures of Early Printed Greek', GRBS 7 (1966), 382-89} {}
> \Byzantine 2838 0 inc-up {{}} {<up} {1600} {P. Stephanus, Alphabetum
> Graecum \& Hebraicum (Paris, 1600), BL 12904.b.11 } {}
> \Byzantine 2841 0 inc-upo {{}} {<upo} {1600} {P. Stephanus, Alphabetum
> Graecum \& Hebraicum (Paris, 1600), BL 12904.b.11 } {}
>
> \Byzantine 2849 0 inc-ws1 {{}} {~ws} {16\th c.} {W.H. Ingram, ?The
> Ligatures of Early Printed Greek', GRBS 7 (1966), 382-89} {}
> \Byzantine 2246 0 inc-aitiatikh {{a>itia\raise {th}}} {a>itiatik`h}
> {1600} {P. Stephanus, Alphabetum Graecum \& Hebraicum (Paris, 1600), BL
> 12904.b.11} {}
> \Byzantine 2256 0 inc-aoristos {{>a'o\raise {os}}} {>a'oristos} {1600}
> {P. Stephanus, Alphabetum Graecum \& Hebraicum (Paris, 1600), BL
> 12904.b.11 } {}
> \Byzantine 2257 0 inc-aoristou {{>ao\raise {ou}}} {>aor'istou} {1600}
> {P. Stephanus, Alphabetum Graecum \& Hebraicum (Paris, 1600), BL
> 12904.b.11 } {}
> \Byzantine 2254 0 inc-antitou {{>a\raise {t}n\raise {t}}} {>ant`i to~u}
> {1600} {P. Stephanus, Alphabetum Graecum \& Hebraicum (Paris, 1600), BL
> 12904.b.11 } {}
> \Byzantine 2273 0 inc-autou {{>auo~u\raise {t}}} {a>uto~u} {1600} {P.
> Stephanus, Alphabetum Graecum \& Hebraicum (Paris, 1600), BL 12904.b.11 } {}
>
> ** Phil
> --------
> Reinhard Kotucha wrote:
> > On 2019-06-07 at 15:56:36 +0000, Taylor, P wrote:
> >
> >   > [...] Are you in a position to advise which variant of \usepackage
> >   > [latin1] {inputenc} / \usepackage [latin9] {inputenc} / \usepackage
> >   > [latin$n$] {inputenc} might best address this issue ?
> >
> > The short answer is "none of them" in favor of
> >
> >    \usepackage[utf8]{inputenc}
> >
> > If you are really forced to use old-fashioned 8-bit input encodings,
> > in most cases you would prefer latin9 (ISO 8895-15) because this makes
> > more frequently used characters accessible directly from Western
> > European keyboards.  For other keyboards one needs other input
> > encodings, for instance latin5 for Russian, viscii for Vietnamese,...
> >
> > For ISO 8895 specifications consult
> >
> >    https://en.wikipedia.org/wiki/ISO/IEC_8859
> >
> > LaTeX converts all non-ASCII characters to LICR (LaTeX Internal
> > Character Representation) so that all non-ASCII characters are
> > assigned to control sequences.  Thus the choice of a paricular input
> > encoding is just a matter of convenience.  If you want to allow users
> > to use different input encodings, all strings in macro packages should
> > be in LICR.
> >
> > The best choice today is definitely UTF-8 and I strongly recommend to
> > use it and to avoid national character sets due to their limitations.
> >
> > Phil, I'm aware that I don't have to tell you what Unicode is good
> > for but you asked on a public mailing list.  Thus the more verbose
> > answer.
> >
> > Regards,
> >    Reinhard
> >
> > --
> > ------------------------------------------------------------------
> > Reinhard Kotucha                            Phone: +49-511-3373112
> > Marschnerstr. 25
> > D-30167 Hannover                    mailto:reinhard.kotucha at web.de
> > ------------------------------------------------------------------
>
>


From tug-news at tug.org  Sun Jun  9 00:31:07 2019
From: tug-news at tug.org (TeX Users Group)
Date: Sat, 8 Jun 2019 16:31:07 -0600
Subject: Jun19 TUG news: tug'19, conferences, CTAN
Message-ID: <201906082231.x58MV7ru016591@freefriends.org>

Dear TeXers,

Summer is the time of vacations and conferences.  I am sorry for the
late newsletter, but I just returned from a conference myself.

The program for our main conference, TUG 2019 (in Palo Alto, California,
August 9-11), looks very interesting:
  https://tug.org/tug2019/program.html
Please register for the conference if you'd like to attend and haven't
already:
  https://tug.org/tug2019/register.html
We'd be most happy to have you.

There are openings at the conference workshops,
https://tug.org/tug2019/workshops.html. The number of participants at
the LaTeX workshop is limited; please reserve your place if you wish to
attend!

A couple of events are planned for the fall:  13th International
Context Meeting in Bassenge, Belgium, on September 16-21
(https://meeting.contextgarden.net/) and GuIT 2019 in Turin, Italy, on
October 26 (https://www.guitex.org/home/meeting).

The crop of new packages on CTAN (https://ctan.org) in May:

- addliga for accessing ligatures in legacy TrueType fonts from LuaTeX
- almendra, Almendra fonts with LaTeX support
- bitter, LaTeX support for the Bitter family of fonts
- ehhline, extending the \hhline command
- glossaries-slovene, Slovene language module for glossaries package
- hmtrump, a package to describe card games
- labels4easylist, adding labels to easylist items
- librefranklin, LaTeX support for the Libre-Franklin family of fonts
- linguisticspro, LinguisticsPro fonts with LaTeX support
- marcellus, Marcellus fonts with LaTeX support
- mathcommand, \newcommand-like commands for defining math macros
- mlacls, a class for MLA papers
- pdfarticle, a class for PDF publications in lualatex
- pgfmorepages, to assemble multiple logical pages onto a physical page
- proof-at-the-end, a package to move proofs to an appendix
- quran-ur, Urdu translation of the quran package
- subtext, easy text-style subscripts in math mode
- unam-thesis, a class for creating dissertation documents according to
         the National Autonomous University of Mexico (UNAM) guidelines
- vtable, vertical alignment of table cells

Happy TeXing!
Boris Veytsman (TUG President)

From rodolfo.medina at gmail.com  Fri Jun 21 13:34:40 2019
From: rodolfo.medina at gmail.com (Rodolfo Medina)
Date: Fri, 21 Jun 2019 11:34:40 +0000
Subject: How to prevent strechtability?
Message-ID: <87r27n6ujz.fsf@lenovo>

Dear TeXnicians,

in the following example, to process with simply `tex test', I'd like that
`hallo' was not so far from the hrule above.  How can I prevent stretchability
in that place?

Thanks for any help,

Rodolfo

  \hrule\vskip.1in
hallo
  \vskip .1in\hrule\vskip 1cm


CXXVIII   Italia mia, bench? 'l parlar sia indarno

Italia mia, bench? 'l parlar sia indarno
a le piaghe mortali
che nel bel corpo tuo s? spesse veggio,
piacemi almen che' miei sospir' sian quali
spera 'l Tevero et l'Arno,
e 'l Po, dove doglioso et grave or seggio.
Rettor del cielo, io cheggio
che la piet? che Ti condusse in terra
Ti volga al Tuo dilecto almo paese.
Vedi, Segnor cortese,
di che lievi cagion' che crudel guerra
e i cor', che 'ndura et serra
Marte superbo et fero
apri Tu, Padre, e 'ntenerisci et snoda
ivi fa' che 'l Tuo vero,
qual io mi sia, per la mia lingua s'oda.
Voi cui Fortuna ? posto in mano il freno
de le belle contrade,
di che nulla piet? par che vi stringa,
che fan qui tante pellegrine spade?
perch? 'l verde terreno
del barbarico sangue si depinga?
Vano error vi lusinga:
poco vedete, et parvi veder molto,
ch? 'n cor venale amor cercate o fede.
Qual pi? gente possede,
colui ? pi? da' suoi nemici avolto.
O diluvio raccolto
di che deserti strani,
per inondar i nostri dolci campi!
Se da le proprie mani
questo n'avene, or chi fia che ne scampi?
Ben provide Natura al nostro stato,
quando de l'Alpi schermo
pose fra noi et la tedesca rabbia;
ma 'l desir cieco, e 'ncontra 'l suo ben fermo,
s'? poi tanto ingegnato,
ch'al corpo sano ? procurato scabbia.
Or dentro ad una gabbia
fiere selvagge et mansuete gregge
s'annidan s?, che sempre il miglior geme;
et ? questo del seme,
per pi? dolor, del popol senza legge,
al qual, come si legge,
Mario aperse s? 'l fianco,
che memoria de l'opra ancho non langue,
quando assetato et stanco
non pi? bevve del fiume acqua che sangue.
Cesare taccio che per ogni piaggia
fece l'erbe sanguigne
di lor vene, ove 'l nostro ferro mise.
Or par, non so per che stelle maligne,
che 'l cielo in odio n'aggia:
vostra merc?, cui tanto si commise.
Vostre voglie divise
guastan del mondo la pi? bella parte.
Qual colpa, qual giudicio o qual destino
\eject
fastidire il vicino
povero, et le fortune afflicte et sparte
perseguire, e 'n disparte
cercar gente et gradire,
che sparga 'l sangue et venda l'alma a prezzo?
Io parlo per ver dire,
non per odio d'altrui, n? per disprezzo.
N? v'accorgete anchor per tante prove
del bavarico inganno
ch'alzando il dito colla morte scherza?
Peggio ? lo strazio, al mio parer, che 'l danno;
ma 'l vostro sangue piove
pi? largamente, ch'altr'ira vi sferza.
Da la matina a terza
di voi pensate, et vederete come
tien caro altrui che tien s? cos? vile.
Latin sangue gentile,
sgombra da te queste dannose some;
non far idolo un nome
vano senza soggetto:
ch? 'l furor de lass?, gente ritrosa,
vincerne d'intellecto,
peccato ? nostro, et non natural cosa.
Non ? questo 'l terren ch'i' tocchai pria?
Non ? questo il mio nido
ove nudrito fui s? dolcemente?
Non ? questa la patria in ch'io mi fido,
madre benigna et pia,
che copre l'un et l'altro mio parente?
Perdio, questo la mente
talor vi mova, et con piet? guardate
le lagrime del popol doloroso,
che sol da voi riposo
dopo Dio spera; et pur che voi mostriate
segno alcun di pietate,
vert? contra furore
prender? l'arme, et fia 'l combatter corto:
ch? l'antiquo valore
ne l'italici cor' non ? anchor morto.
Signor', mirate come 'l tempo vola,
et s? come la vita
fugge, et la morte n'? sovra le spalle.
Voi siete or qui; pensate a la partita:
ch? l'alma ignuda et sola
conven ch'arrive a quel dubbioso calle.
Al passar questa valle
piacciavi porre gi? l'odio et lo sdegno,
v?nti contrari a la vita serena;
et quel che 'n altrui pena
tempo si spende, in qualche acto pi? degno
o di mano o d'ingegno,
in qualche bella lode
in qualche honesto studio si converta:
cos? qua gi? si gode,
et la strada del ciel si trova aperta.
Canzone, io t'ammonisco
che tua ragion cortesemente dica,
perch? fra gente altera ir ti convene,
et le voglie son piene
gi? de l'usanza pessima et antica,
del ver sempre nemica.
Proverai tua ventura
fra' magnanimi pochi a chi 'l ben piace.
Di' lor: - Chi m'assicura?

\vfill\eject\end


From d.p.carlisle at gmail.com  Fri Jun 21 13:43:34 2019
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Fri, 21 Jun 2019 12:43:34 +0100
Subject: How to prevent strechtability?
In-Reply-To: <87r27n6ujz.fsf@lenovo>
References: <87r27n6ujz.fsf@lenovo>
Message-ID: <CAEW6iOhnT+PZexTouBogoMVKkhenOoN=hS9T37aM2_J2SRtyaw@mail.gmail.com>

the only stretchability there is \parskip which has the default

\parskip=0pt plus 1pt

that 1pt is then over stretched (tex warning on the console)

You could set \parskip to 0pt and make the page even more underful but
perhaps you want

\raggedbottom

so stretch glue is added at the end of the page, so \parskip isn't
forced to stretch.

(ignoring the fact that the example drops all non ascii letters if
used with classic tex)

David

From heiko.oberdiek at googlemail.com  Fri Jun 21 13:45:03 2019
From: heiko.oberdiek at googlemail.com (Heiko Oberdiek)
Date: Fri, 21 Jun 2019 13:45:03 +0200
Subject: How to prevent strechtability?
In-Reply-To: <87r27n6ujz.fsf@lenovo>
References: <87r27n6ujz.fsf@lenovo>
Message-ID: <54529b29-b9e2-2b28-e60f-ff84eea56574@googlemail.com>

Hello,

On 2019-06-21 13:34, Rodolfo Medina wrote:
> 
> in the following example, to process with simply `tex test', I'd like that
> `hallo' was not so far from the hrule above.  How can I prevent stretchability
> in that place?

>    \hrule\vskip.1in
> hallo
>    \vskip .1in\hrule\vskip 1cm

The stretchability is inserted by \parskip (0pt plus 1pt), when "hallo" 
starts a new paragraph. This can be prevented by locally removing the
stretchable component of \parskip when starting the paragraph for "hallo":

\hrule
\vskip.1in
\begingroup\parskip=0pt \leavevmode\endgroup
hallo
\vskip .1in
\hrule
\vskip 1cm

Yours sincerely
   Heiko

From rodolfo.medina at gmail.com  Fri Jun 21 14:22:59 2019
From: rodolfo.medina at gmail.com (Rodolfo Medina)
Date: Fri, 21 Jun 2019 12:22:59 +0000
Subject: How to prevent strechtability?
References: <87r27n6ujz.fsf@lenovo>
 <54529b29-b9e2-2b28-e60f-ff84eea56574@googlemail.com>
Message-ID: <878stv6sbg.fsf@lenovo>

Heiko Oberdiek via texhax <texhax at tug.org> writes:

> On 2019-06-21 13:34, Rodolfo Medina wrote:
>>
>> in the following example, to process with simply `tex test', I'd like that
>> `hallo' was not so far from the hrule above.  How can I prevent
>> stretchability in that place?
>
>>    \hrule\vskip.1in
>> hallo
>>    \vskip .1in\hrule\vskip 1cm
>
> The stretchability is inserted by \parskip (0pt plus 1pt), when "hallo"
> starts a new paragraph. This can be prevented by locally removing the
> stretchable component of \parskip when starting the paragraph for "hallo":
>
> \hrule
> \vskip.1in
> \begingroup\parskip=0pt \leavevmode\endgroup
> hallo
> \vskip .1in
> \hrule
> \vskip 1cm


Thanks, David and Heiko...

\raggebottom is not what I want, \parskip=0pt is ok.  But, out of curiosity:
why does TeX choose to stretch only there, between `\hrule' and `hallo', and
not between `hallo' and the following `\hrule'?  There should be a \parskip
there as well...

Cheers,

Rodolfo


From d.p.carlisle at gmail.com  Fri Jun 21 14:29:13 2019
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Fri, 21 Jun 2019 13:29:13 +0100
Subject: How to prevent strechtability?
In-Reply-To: <878stv6sbg.fsf@lenovo>
References: <87r27n6ujz.fsf@lenovo>
 <54529b29-b9e2-2b28-e60f-ff84eea56574@googlemail.com>
 <878stv6sbg.fsf@lenovo>
Message-ID: <CAEW6iOi58qD-HefrAaG0=J1jN32j1QYDbV0_kR=-OwRqQiGSLw@mail.gmail.com>

> \raggebottom is not what I want,

not even at a forced page break? You are using \eject to force a page
break, specifying that the last baseline of the page must be at the
bottom of the page and then removing the last remaining stretch glue
to ensure that constraint can not be achieved?  This ensures that the
page is underfull with an infinitely bad box warning.

> not between `hallo' and the following `\hrule'?  There should be a \parskip
there as well...

\parskip is added bfore paragraphs, \hrule does not start a paragraph
it is directlt added to the vertical list. the letter h of hallo,
being a horizontal mode construct does force a paragraph to start.

David




On Fri, 21 Jun 2019 at 13:24, Rodolfo Medina <rodolfo.medina at gmail.com> wrote:
>
> Heiko Oberdiek via texhax <texhax at tug.org> writes:
>
> > On 2019-06-21 13:34, Rodolfo Medina wrote:
> >>
> >> in the following example, to process with simply `tex test', I'd like that
> >> `hallo' was not so far from the hrule above.  How can I prevent
> >> stretchability in that place?
> >
> >>    \hrule\vskip.1in
> >> hallo
> >>    \vskip .1in\hrule\vskip 1cm
> >
> > The stretchability is inserted by \parskip (0pt plus 1pt), when "hallo"
> > starts a new paragraph. This can be prevented by locally removing the
> > stretchable component of \parskip when starting the paragraph for "hallo":
> >
> > \hrule
> > \vskip.1in
> > \begingroup\parskip=0pt \leavevmode\endgroup
> > hallo
> > \vskip .1in
> > \hrule
> > \vskip 1cm
>
>
> Thanks, David and Heiko...
>
> \raggebottom is not what I want, \parskip=0pt is ok.  But, out of curiosity:
> why does TeX choose to stretch only there, between `\hrule' and `hallo', and
> not between `hallo' and the following `\hrule'?  There should be a \parskip
> there as well...
>
> Cheers,
>
> Rodolfo
>

From rodolfo.medina at gmail.com  Fri Jun 21 15:44:04 2019
From: rodolfo.medina at gmail.com (Rodolfo Medina)
Date: Fri, 21 Jun 2019 13:44:04 +0000
Subject: [solved] Re: How to prevent strechtability?
References: <87r27n6ujz.fsf@lenovo>
 <54529b29-b9e2-2b28-e60f-ff84eea56574@googlemail.com>
 <878stv6sbg.fsf@lenovo>
 <CAEW6iOi58qD-HefrAaG0=J1jN32j1QYDbV0_kR=-OwRqQiGSLw@mail.gmail.com>
Message-ID: <87wohf59zv.fsf_-_@lenovo>

David Carlisle <d.p.carlisle at gmail.com> writes:

>> \raggebottom is not what I want,
>
> not even at a forced page break? You are using \eject to force a page
> break, specifying that the last baseline of the page must be at the
> bottom of the page and then removing the last remaining stretch glue
> to ensure that constraint can not be achieved?  This ensures that the
> page is underfull with an infinitely bad box warning.

Yes, because I was trying to artificially reproduce an effect spontaneously
occurring in another file, too complicated to be posted here, a MusiXTeX file,
with a lot of macros inputted in it.


>> not between `hallo' and the following `\hrule'?  There should be a \parskip
> there as well...
>
> \parskip is added bfore paragraphs, \hrule does not start a paragraph
> it is directlt added to the vertical list. the letter h of hallo,
> being a horizontal mode construct does force a paragraph to start.


All is clear now...

Thanks indeed.

Rodolfo


From d.p.carlisle at gmail.com  Fri Jun 21 16:31:54 2019
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Fri, 21 Jun 2019 15:31:54 +0100
Subject: [solved] Re: How to prevent strechtability?
In-Reply-To: <87wohf59zv.fsf_-_@lenovo>
References: <87r27n6ujz.fsf@lenovo>
 <54529b29-b9e2-2b28-e60f-ff84eea56574@googlemail.com>
 <878stv6sbg.fsf@lenovo>
 <CAEW6iOi58qD-HefrAaG0=J1jN32j1QYDbV0_kR=-OwRqQiGSLw@mail.gmail.com>
 <87wohf59zv.fsf_-_@lenovo>
Message-ID: <CAEW6iOgONGd0bK1Akb1nrM2+dcxER8dTax0UbydedZPDXKMqBw@mail.gmail.com>

Yes, because I was trying to artificially reproduce an effect spontaneously
occurring in another file, too complicated to be posted here, a MusiXTeX file,
with a lot of macros inputted in it.

Stilll better to have done \vfill\eject  so tex fills the rest of the
page at the forced break rather than leaving it infinitely underrfull,
but getting the same output via an error recovery fallback typesetting
after removing all stretch glue.

David

From rodolfo.medina at gmail.com  Fri Jun 21 17:03:38 2019
From: rodolfo.medina at gmail.com (Rodolfo Medina)
Date: Fri, 21 Jun 2019 15:03:38 +0000
Subject: [solved] Re: How to prevent strechtability?
References: <87r27n6ujz.fsf@lenovo>
 <54529b29-b9e2-2b28-e60f-ff84eea56574@googlemail.com>
 <878stv6sbg.fsf@lenovo>
 <CAEW6iOi58qD-HefrAaG0=J1jN32j1QYDbV0_kR=-OwRqQiGSLw@mail.gmail.com>
 <87wohf59zv.fsf_-_@lenovo>
 <CAEW6iOgONGd0bK1Akb1nrM2+dcxER8dTax0UbydedZPDXKMqBw@mail.gmail.com>
Message-ID: <87ef3n56b9.fsf@lenovo>

David Carlisle <d.p.carlisle at gmail.com> writes:

> Stilll better to have done \vfill\eject  so tex fills the rest of the
> page at the forced break rather than leaving it infinitely underrfull,
> but getting the same output via an error recovery fallback typesetting
> after removing all stretch glue.

You mean putting \vfill\eject instead of simply \eject as I did in the example?
With \vfill\eject the undesired effect I wanted to eliminate does not occur...
And I had to show it in order to ask for help...

Rodolfo


From doug at mathemaesthetics.com  Tue Jun 25 02:47:09 2019
From: doug at mathemaesthetics.com (Doug McKenna)
Date: Mon, 24 Jun 2019 18:47:09 -0600 (MDT)
Subject: Programming literature: "Hilbert Curves"
In-Reply-To: <42E80922-014E-4E3D-A13E-CF277E5E4D3F@uoregon.edu>
References: <42E80922-014E-4E3D-A13E-CF277E5E4D3F@uoregon.edu>
Message-ID: <1106010008.8140359.1561423629602.JavaMail.zimbra@mathemaesthetics.com>

Well, what a long and strange trip (test) it's been!

After many years of both concentrated and sporadic efforts on a variety of fronts, my combined application and/or electronic book ("Hilbert Curves" and/or "Outside-In and Inside-Gone") is now available (for $8) in Apple's App Store for Apple's iPad (and iPhone, but more screen real estate is better).

Of interest to readers of this list, this app/book is, I believe, a first: it is self-typesetting on the user's device from TeX source code.  See <http://www.mathemaesthetics.com/HilbertCurves.html> for a few screen shots.  The typeset math of course looks great, though it is not very complicated (high-school level).

The app contains its own high-performance TeX-language interpreter, which I've been calling JSBox.  The TUGboat article I wrote a while back on how it traces itself is here:

<https://tug.org/TUGboat/tb35-2/tb110mckenna.pdf>

(although in this dedicated eBook's case, none of the tracing code is ever needed, so all the tracing code is conditionally compiled out to save quite a lot of space).

JSBox is a from-the-ground-up rewrite of TeX/e-TeX's engine, but (currently) without any of the back-end primitives for various types of import/export of PDF data.  JSBox is not open source (maybe some day).  It is a static library written in C that is designed to be incorporated into any other piece of software, such as an iOS or Mac or other GUI application that simulates a document of pages with illustrations.

Lots of work still to be done on it, but I had to get this proof-of-concept eBook/app done before continuing.  With respect to this TeX language interpreter's development, I'm still in what's technically called the "eating your own dog food" phase.  Sales of my app/eBook will help support further work on JSBox, especially getting LaTeX and the TDS working with it.

Under the hood, each time this iOS application launches, the 160-page simulated book (pages are logically 8.5" by 18"), with its 135+ non-file-based illustrations, is typeset anew, in under a half-second.  The book's TeX source code starts by reading and executing a copy of the "plain.tex" macros, followed by the "opmac.tex" (Olsak's Plain Macros) lightweight markup library (with some added override hacks), and another related file of math symbol definitions.  There is no format initialization relied upon, needed, or desired.  The glyphs and metrics used are from Computer Modern.  And when the job is done, all the TeX layout data structures remain in memory for every page, for later use by the app.

The point of it all, over and above the intellectual exercise, was to do an end-run around all static illustration files, most of which are inadequate for my eBook's topic of interest: space-filling curve illustrations each comprising self-avoiding paths of literally (numerically?) tens of millions of tiny line segments in each picture.  Every illustration is resolution-independent and zoom-able up to about 300x.  There are no accompanying EPSF, PDF, SVG, or MOV illustration files.  The app's code is in charge of drawing (and in some cases, animating) each illustration into its anointed reserved box space on a page.

Most illustrations have a set of interactive controls to allow the user/reader to play with various graphic or other parameters.  One particular illustration comprises over 77,000 sub-illustrations (a complete enumeration of all possibilities from which the user/reader chooses).  Another illustration animates an actual backtrack search as the algorithm runs, to find all solutions to the problem at hand.  The reader/user can change pruning strategies as it searches.

All the illustrations are dynamically built by compiled code and drawn at read-time, not at typesetting time.  The book's TeX source code thinks it is incorporating PDF files, but the PDF file names are mapped into objects compiled into the client app.  Each such illustration object reports back what its bounding box is on any page, and the the JSBox interpreter reserves the space and continues typesetting away in its usual TeX way.  The illustrations and all their attendant interactive controls are built and drawn later in the reserved area when the user first turns to that page.  Each illustration is zoom-able independently of the simulated page it is on, which nicety PDF doesn't do.

This design allows my app to be distributed as a (mere!) 7MB download in size (and 2MB of that was added by Apple), whereas an equivalent eBook app with PDF or SVG illustrations and MOV animations (for my particular purposes), would otherwise be many, many gigabytes of data.

The idea is to allow a GUI app, coded to draw anything on the device screen in some view, and having any kind of user interface controls and gestures with respect to that interface, to simultaneously surround itself with a set of book (or manual) pages having TeX-quality layout and math.

I've signed up to give a demo of this self-typesetting app/book, and talk about some interesting TeX-related issues, at the upcoming 2019 TUG conference in August.

Onward, into the fog ...


- Doug McKenna
Mathemaesthetics, Inc.

From P.Taylor at rhul.ac.uk  Tue Jun 25 10:39:08 2019
From: P.Taylor at rhul.ac.uk (Taylor, P)
Date: Tue, 25 Jun 2019 08:39:08 +0000
Subject: Programming literature: "Hilbert Curves"
In-Reply-To: <1106010008.8140359.1561423629602.JavaMail.zimbra@mathemaesthetics.com>
References: <42E80922-014E-4E3D-A13E-CF277E5E4D3F@uoregon.edu>
 <1106010008.8140359.1561423629602.JavaMail.zimbra@mathemaesthetics.com>
Message-ID: <8fb09cb0-83ff-c1d4-d2b0-c67ba88b8364@Rhul.Ac.Uk>

Doug McKenna wrote:

> After many years of both concentrated and sporadic efforts on a variety of fronts, my combined application and/or electronic book ("Hilbert Curves" and/or "Outside-In and Inside-Gone") is now available  in Apple's App Store for Apple's iPad (and iPhone, but more screen real estate is better).  Of interest to readers of this list, this app/book is, I believe, a first: it is self-typesetting on the user's device from TeX source code.  See <http://www.mathemaesthetics.com/HilbertCurves.html> for a few screen shots.  The typeset math of course looks great, though it is not very complicated (high-school level).  The app contains its own high-performance TeX-language interpreter, which I've been calling JSBox.  The TUGboat article I wrote a while back on how it traces itself is here:
An interesting and innovative approach, Doug, but do you have plans to 
develop it for other platforms (Windows, Android, whatever).? I have no 
Apple devices, nor have I any interest in the same, but I am interested 
in your work and would be interested in trying it (even paying for it !) 
if it were available for platforms in which I have some interest.

Philip Taylor


From marchywka at hotmail.com  Tue Jun 25 11:27:27 2019
From: marchywka at hotmail.com (Mike Marchywka)
Date: Tue, 25 Jun 2019 09:27:27 +0000
Subject: Programming literature: "Hilbert Curves"
In-Reply-To: <8fb09cb0-83ff-c1d4-d2b0-c67ba88b8364@Rhul.Ac.Uk>
References: <42E80922-014E-4E3D-A13E-CF277E5E4D3F@uoregon.edu>
 <1106010008.8140359.1561423629602.JavaMail.zimbra@mathemaesthetics.com>
 <8fb09cb0-83ff-c1d4-d2b0-c67ba88b8364@Rhul.Ac.Uk>
Message-ID: <DM6PR08MB6042BEF866B5231856AE4467BEE30@DM6PR08MB6042.namprd08.prod.outlook.com>

On Tue, Jun 25, 2019 at 08:39:08AM +0000, Taylor, P wrote:
> Doug McKenna wrote:
> 
> > After many years of both concentrated and sporadic efforts on a variety of fronts, my combined application and/or electronic book ("Hilbert Curves" and/or "Outside-In and Inside-Gone") is now available  in Apple's App Store for Apple's iPad (and iPhone, but more screen real estate is better).  Of interest to readers of this list, this app/book is, I believe, a first: it is self-typesetting on the user's device from TeX source code.  See <http://www.mathemaesthetics.com/HilbertCurves.html> for a few screen shots.  The typeset math of course looks great, though it is not very complicated (high-school level).  The app contains its own high-performance TeX-language interpreter, which I've been calling JSBox.  The TUGboat article I wrote a while back on how it traces itself is here:
> An interesting and innovative approach, Doug, but do you have plans to 
> develop it for other platforms (Windows, Android, whatever).? I have no 
> Apple devices, nor have I any interest in the same, but I am interested 
> in your work and would be interested in trying it (even paying for it !) 
> if it were available for platforms in which I have some interest.

There were a number of features mentioned that I thought were interesting. The idea that something compiled
is somehow inherently faster to display needs better exploration- maybe this is the beginning of the end
of blaoted binary formats :) It is often the case that calculations are faster than equivalent 
main memory accesses and smaller "code" may be faster to display- plus it is human readable if you
want to look at text instead of the fancy graphics. Interactive viewing, collapsing sections you 
don't care about into small titles instead full text is helpful with limited displays but
even with big displays and cluttered compositions that you may get in more spontaneous
genres like email. Image formats are another issue- models are much more versatile than
rendered stuff and you have to wonder how often jpeg, requiring some processing, is faster
than say bitmapped images or tiffs. Curious what you are using for models here. There are
a variety of image compression techniques that try to generate images from parameerized
models but if you have meaningful equations that is much better :) SVG may or may
not be the best sarting point. 

Curious to see what you found playing with this so far. 

I started something like this much more primitive just to see how selective display would work
for email and was happy even with that small improvement. 


> 
> Philip Taylor
> 

-- 

mike marchywka
306 charles cox
canton GA 30115
USA, Earth 
marchywka at hotmail.com
404-788-1216
ORCID: 0000-0001-9237-455X


From will.adams at frycomm.com  Tue Jun 25 15:26:12 2019
From: will.adams at frycomm.com (William Adams)
Date: Tue, 25 Jun 2019 09:26:12 -0400
Subject: [OS X TeX] Programming literature: "Hilbert Curves"
In-Reply-To: <1106010008.8140359.1561423629602.JavaMail.zimbra@mathemaesthetics.com>
References: <42E80922-014E-4E3D-A13E-CF277E5E4D3F@uoregon.edu>
 <1106010008.8140359.1561423629602.JavaMail.zimbra@mathemaesthetics.com>
Message-ID: <CAENrYJCTaQY7BKGT7=ZAyaR9yNaX0koXyL-iUpCZ3ZV6ECvxuQ@mail.gmail.com>

At last! A worthy successor to:
https://mathcs.clarku.edu/~djoyce/java/elements/elements.html

Really looking forward to your presentation!

William



On Mon, Jun 24, 2019 at 8:47 PM Doug McKenna <doug at mathemaesthetics.com>
wrote:

> Well, what a long and strange trip (test) it's been!
>
> After many years of both concentrated and sporadic efforts on a variety of
> fronts, my combined application and/or electronic book ("Hilbert Curves"
> and/or "Outside-In and Inside-Gone") is now available (for $8) in Apple's
> App Store for Apple's iPad (and iPhone, but more screen real estate is
> better).
>
> Of interest to readers of this list, this app/book is, I believe, a first:
> it is self-typesetting on the user's device from TeX source code.  See <
> http://www.mathemaesthetics.com/HilbertCurves.html> for a few screen
> shots.  The typeset math of course looks great, though it is not very
> complicated (high-school level).
>
> The app contains its own high-performance TeX-language interpreter, which
> I've been calling JSBox.  The TUGboat article I wrote a while back on how
> it traces itself is here:
>
> <https://tug.org/TUGboat/tb35-2/tb110mckenna.pdf>
>
> (although in this dedicated eBook's case, none of the tracing code is ever
> needed, so all the tracing code is conditionally compiled out to save quite
> a lot of space).
>
> JSBox is a from-the-ground-up rewrite of TeX/e-TeX's engine, but
> (currently) without any of the back-end primitives for various types of
> import/export of PDF data.  JSBox is not open source (maybe some day).  It
> is a static library written in C that is designed to be incorporated into
> any other piece of software, such as an iOS or Mac or other GUI application
> that simulates a document of pages with illustrations.
>
> Lots of work still to be done on it, but I had to get this
> proof-of-concept eBook/app done before continuing.  With respect to this
> TeX language interpreter's development, I'm still in what's technically
> called the "eating your own dog food" phase.  Sales of my app/eBook will
> help support further work on JSBox, especially getting LaTeX and the TDS
> working with it.
>
> Under the hood, each time this iOS application launches, the 160-page
> simulated book (pages are logically 8.5" by 18"), with its 135+
> non-file-based illustrations, is typeset anew, in under a half-second.  The
> book's TeX source code starts by reading and executing a copy of the
> "plain.tex" macros, followed by the "opmac.tex" (Olsak's Plain Macros)
> lightweight markup library (with some added override hacks), and another
> related file of math symbol definitions.  There is no format initialization
> relied upon, needed, or desired.  The glyphs and metrics used are from
> Computer Modern.  And when the job is done, all the TeX layout data
> structures remain in memory for every page, for later use by the app.
>
> The point of it all, over and above the intellectual exercise, was to do
> an end-run around all static illustration files, most of which are
> inadequate for my eBook's topic of interest: space-filling curve
> illustrations each comprising self-avoiding paths of literally
> (numerically?) tens of millions of tiny line segments in each picture.
> Every illustration is resolution-independent and zoom-able up to about
> 300x.  There are no accompanying EPSF, PDF, SVG, or MOV illustration
> files.  The app's code is in charge of drawing (and in some cases,
> animating) each illustration into its anointed reserved box space on a page.
>
> Most illustrations have a set of interactive controls to allow the
> user/reader to play with various graphic or other parameters.  One
> particular illustration comprises over 77,000 sub-illustrations (a complete
> enumeration of all possibilities from which the user/reader chooses).
> Another illustration animates an actual backtrack search as the algorithm
> runs, to find all solutions to the problem at hand.  The reader/user can
> change pruning strategies as it searches.
>
> All the illustrations are dynamically built by compiled code and drawn at
> read-time, not at typesetting time.  The book's TeX source code thinks it
> is incorporating PDF files, but the PDF file names are mapped into objects
> compiled into the client app.  Each such illustration object reports back
> what its bounding box is on any page, and the the JSBox interpreter
> reserves the space and continues typesetting away in its usual TeX way.
> The illustrations and all their attendant interactive controls are built
> and drawn later in the reserved area when the user first turns to that
> page.  Each illustration is zoom-able independently of the simulated page
> it is on, which nicety PDF doesn't do.
>
> This design allows my app to be distributed as a (mere!) 7MB download in
> size (and 2MB of that was added by Apple), whereas an equivalent eBook app
> with PDF or SVG illustrations and MOV animations (for my particular
> purposes), would otherwise be many, many gigabytes of data.
>
> The idea is to allow a GUI app, coded to draw anything on the device
> screen in some view, and having any kind of user interface controls and
> gestures with respect to that interface, to simultaneously surround itself
> with a set of book (or manual) pages having TeX-quality layout and math.
>
> I've signed up to give a demo of this self-typesetting app/book, and talk
> about some interesting TeX-related issues, at the upcoming 2019 TUG
> conference in August.
>
> Onward, into the fog ...
>
>
> - Doug McKenna
> Mathemaesthetics, Inc.
> ----------- Please Consult the Following Before Posting -----------
> TeX FAQ: http://www.tex.ac.uk/faq
> List Reminders and Etiquette: https://sites.esm.psu.edu/~gray/tex/
> List Archives: http://dir.gmane.org/gmane.comp.tex.macosx
>                 https://email.esm.psu.edu/pipermail/macosx-tex/
> TeX on Mac OS X Website: http://mactex-wiki.tug.org/
> List Info: https://email.esm.psu.edu/mailman/listinfo/macosx-tex
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://tug.org/pipermail/texhax/attachments/20190625/51c7677c/attachment.html>

From murrayeisenberg at gmail.com  Tue Jun 25 15:32:12 2019
From: murrayeisenberg at gmail.com (Murray Eisenberg)
Date: Tue, 25 Jun 2019 09:32:12 -0400
Subject: [OS X TeX] Programming literature: "Hilbert Curves"
In-Reply-To: <CAENrYJCTaQY7BKGT7=ZAyaR9yNaX0koXyL-iUpCZ3ZV6ECvxuQ@mail.gmail.com>
References: <42E80922-014E-4E3D-A13E-CF277E5E4D3F@uoregon.edu>
 <1106010008.8140359.1561423629602.JavaMail.zimbra@mathemaesthetics.com>
 <CAENrYJCTaQY7BKGT7=ZAyaR9yNaX0koXyL-iUpCZ3ZV6ECvxuQ@mail.gmail.com>
Message-ID: <16347C2C-ABEB-42DA-BCBC-0FEEBECEE992@gmail.com>

Alas, that old Java Geometry Applet with this edition of Euclid?s Elements is in Java, and at least with security defaults of the current versions of macOS and Safari, it?s absolute torture to try to get the Java applet to be allowed to run.

> On 25 Jun2019, at 9:26 AM, William Adams <will.adams at frycomm.com> wrote:
> 
> At last! A worthy successor to: https://mathcs.clarku.edu/~djoyce/java/elements/elements.html <https://mathcs.clarku.edu/~djoyce/java/elements/elements.html>
> 
> Really looking forward to your presentation!
> 
> William
> 
> 
> 
> On Mon, Jun 24, 2019 at 8:47 PM Doug McKenna <doug at mathemaesthetics.com <mailto:doug at mathemaesthetics.com>> wrote:
> Well, what a long and strange trip (test) it's been!
> 
> After many years of both concentrated and sporadic efforts on a variety of fronts, my combined application and/or electronic book ("Hilbert Curves" and/or "Outside-In and Inside-Gone") is now available (for $8) in Apple's App Store for Apple's iPad (and iPhone, but more screen real estate is better).
> 
> Of interest to readers of this list, this app/book is, I believe, a first: it is self-typesetting on the user's device from TeX source code.  See <http://www.mathemaesthetics.com/HilbertCurves.html <http://www.mathemaesthetics.com/HilbertCurves.html>> for a few screen shots.  The typeset math of course looks great, though it is not very complicated (high-school level).
> 
> The app contains its own high-performance TeX-language interpreter, which I've been calling JSBox.  The TUGboat article I wrote a while back on how it traces itself is here:
> 
> <https://tug.org/TUGboat/tb35-2/tb110mckenna.pdf <https://tug.org/TUGboat/tb35-2/tb110mckenna.pdf>>
> 
> (although in this dedicated eBook's case, none of the tracing code is ever needed, so all the tracing code is conditionally compiled out to save quite a lot of space).
> 
> JSBox is a from-the-ground-up rewrite of TeX/e-TeX's engine, but (currently) without any of the back-end primitives for various types of import/export of PDF data.  JSBox is not open source (maybe some day).  It is a static library written in C that is designed to be incorporated into any other piece of software, such as an iOS or Mac or other GUI application that simulates a document of pages with illustrations.
> 
> Lots of work still to be done on it, but I had to get this proof-of-concept eBook/app done before continuing.  With respect to this TeX language interpreter's development, I'm still in what's technically called the "eating your own dog food" phase.  Sales of my app/eBook will help support further work on JSBox, especially getting LaTeX and the TDS working with it.
> 
> Under the hood, each time this iOS application launches, the 160-page simulated book (pages are logically 8.5" by 18"), with its 135+ non-file-based illustrations, is typeset anew, in under a half-second.  The book's TeX source code starts by reading and executing a copy of the "plain.tex" macros, followed by the "opmac.tex" (Olsak's Plain Macros) lightweight markup library (with some added override hacks), and another related file of math symbol definitions.  There is no format initialization relied upon, needed, or desired.  The glyphs and metrics used are from Computer Modern.  And when the job is done, all the TeX layout data structures remain in memory for every page, for later use by the app.
> 
> The point of it all, over and above the intellectual exercise, was to do an end-run around all static illustration files, most of which are inadequate for my eBook's topic of interest: space-filling curve illustrations each comprising self-avoiding paths of literally (numerically?) tens of millions of tiny line segments in each picture.  Every illustration is resolution-independent and zoom-able up to about 300x.  There are no accompanying EPSF, PDF, SVG, or MOV illustration files.  The app's code is in charge of drawing (and in some cases, animating) each illustration into its anointed reserved box space on a page.
> 
> Most illustrations have a set of interactive controls to allow the user/reader to play with various graphic or other parameters.  One particular illustration comprises over 77,000 sub-illustrations (a complete enumeration of all possibilities from which the user/reader chooses).  Another illustration animates an actual backtrack search as the algorithm runs, to find all solutions to the problem at hand.  The reader/user can change pruning strategies as it searches.
> 
> All the illustrations are dynamically built by compiled code and drawn at read-time, not at typesetting time.  The book's TeX source code thinks it is incorporating PDF files, but the PDF file names are mapped into objects compiled into the client app.  Each such illustration object reports back what its bounding box is on any page, and the the JSBox interpreter reserves the space and continues typesetting away in its usual TeX way.  The illustrations and all their attendant interactive controls are built and drawn later in the reserved area when the user first turns to that page.  Each illustration is zoom-able independently of the simulated page it is on, which nicety PDF doesn't do.
> 
> This design allows my app to be distributed as a (mere!) 7MB download in size (and 2MB of that was added by Apple), whereas an equivalent eBook app with PDF or SVG illustrations and MOV animations (for my particular purposes), would otherwise be many, many gigabytes of data.
> 
> The idea is to allow a GUI app, coded to draw anything on the device screen in some view, and having any kind of user interface controls and gestures with respect to that interface, to simultaneously surround itself with a set of book (or manual) pages having TeX-quality layout and math.
> 
> I've signed up to give a demo of this self-typesetting app/book, and talk about some interesting TeX-related issues, at the upcoming 2019 TUG conference in August.
> 
> Onward, into the fog ...
> 
> 
> - Doug McKenna
> Mathemaesthetics, Inc.
> ----------- Please Consult the Following Before Posting -----------
> TeX FAQ: http://www.tex.ac.uk/faq <http://www.tex.ac.uk/faq>
> List Reminders and Etiquette: https://sites.esm.psu.edu/~gray/tex/ <https://sites.esm.psu.edu/~gray/tex/>
> List Archives: http://dir.gmane.org/gmane.comp.tex.macosx <http://dir.gmane.org/gmane.comp.tex.macosx>
>                 https://email.esm.psu.edu/pipermail/macosx-tex/ <https://email.esm.psu.edu/pipermail/macosx-tex/>
> TeX on Mac OS X Website: http://mactex-wiki.tug.org/ <http://mactex-wiki.tug.org/>
> List Info: https://email.esm.psu.edu/mailman/listinfo/macosx-tex <https://email.esm.psu.edu/mailman/listinfo/macosx-tex>
> ----------- Please Consult the Following Before Posting -----------
> TeX FAQ: http://www.tex.ac.uk/faq
> List Reminders and Etiquette: https://sites.esm.psu.edu/~gray/tex/
> List Archives: http://dir.gmane.org/gmane.comp.tex.macosx
>                https://email.esm.psu.edu/pipermail/macosx-tex/
> TeX on Mac OS X Website: http://mactex-wiki.tug.org/
> List Info: https://email.esm.psu.edu/mailman/listinfo/macosx-tex

---
Murray Eisenberg			murrayeisenberg at gmail.com
503 King Farm Blvd #101	Home (240)-246-7240
Rockville, MD 20850-6667	Mobile (413)-427-5334


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://tug.org/pipermail/texhax/attachments/20190625/7f4e2f09/attachment-0001.html>

From will.adams at frycomm.com  Tue Jun 25 15:34:01 2019
From: will.adams at frycomm.com (William Adams)
Date: Tue, 25 Jun 2019 09:34:01 -0400
Subject: [OS X TeX] Programming literature: "Hilbert Curves"
In-Reply-To: <16347C2C-ABEB-42DA-BCBC-0FEEBECEE992@gmail.com>
References: <42E80922-014E-4E3D-A13E-CF277E5E4D3F@uoregon.edu>
 <1106010008.8140359.1561423629602.JavaMail.zimbra@mathemaesthetics.com>
 <CAENrYJCTaQY7BKGT7=ZAyaR9yNaX0koXyL-iUpCZ3ZV6ECvxuQ@mail.gmail.com>
 <16347C2C-ABEB-42DA-BCBC-0FEEBECEE992@gmail.com>
Message-ID: <CAENrYJA7cwMgYwhYjQ-Td9X-0=F7tmSQD6dODdi5Zu+zK8mT-Q@mail.gmail.com>

That's unfortunate.

Hopefully someone will update that as an app so that it's readily available.

William

On Tue, Jun 25, 2019 at 9:32 AM Murray Eisenberg <murrayeisenberg at gmail.com>
wrote:

> Alas, that old Java Geometry Applet with this edition of Euclid?s Elements
> is in Java, and at least with security defaults of the current versions of
> macOS and Safari, it?s absolute torture to try to get the Java applet to be
> allowed to run.
>
> On 25 Jun2019, at 9:26 AM, William Adams <will.adams at frycomm.com> wrote:
>
> At last! A worthy successor to:
> https://mathcs.clarku.edu/~djoyce/java/elements/elements.html
>
> Really looking forward to your presentation!
>
> William
>
>
>
> On Mon, Jun 24, 2019 at 8:47 PM Doug McKenna <doug at mathemaesthetics.com>
> wrote:
>
>> Well, what a long and strange trip (test) it's been!
>>
>> After many years of both concentrated and sporadic efforts on a variety
>> of fronts, my combined application and/or electronic book ("Hilbert Curves"
>> and/or "Outside-In and Inside-Gone") is now available (for $8) in Apple's
>> App Store for Apple's iPad (and iPhone, but more screen real estate is
>> better).
>>
>> Of interest to readers of this list, this app/book is, I believe, a
>> first: it is self-typesetting on the user's device from TeX source code.
>> See <http://www.mathemaesthetics.com/HilbertCurves.html> for a few
>> screen shots.  The typeset math of course looks great, though it is not
>> very complicated (high-school level).
>>
>> The app contains its own high-performance TeX-language interpreter, which
>> I've been calling JSBox.  The TUGboat article I wrote a while back on how
>> it traces itself is here:
>>
>> <https://tug.org/TUGboat/tb35-2/tb110mckenna.pdf>
>>
>> (although in this dedicated eBook's case, none of the tracing code is
>> ever needed, so all the tracing code is conditionally compiled out to save
>> quite a lot of space).
>>
>> JSBox is a from-the-ground-up rewrite of TeX/e-TeX's engine, but
>> (currently) without any of the back-end primitives for various types of
>> import/export of PDF data.  JSBox is not open source (maybe some day).  It
>> is a static library written in C that is designed to be incorporated into
>> any other piece of software, such as an iOS or Mac or other GUI application
>> that simulates a document of pages with illustrations.
>>
>> Lots of work still to be done on it, but I had to get this
>> proof-of-concept eBook/app done before continuing.  With respect to this
>> TeX language interpreter's development, I'm still in what's technically
>> called the "eating your own dog food" phase.  Sales of my app/eBook will
>> help support further work on JSBox, especially getting LaTeX and the TDS
>> working with it.
>>
>> Under the hood, each time this iOS application launches, the 160-page
>> simulated book (pages are logically 8.5" by 18"), with its 135+
>> non-file-based illustrations, is typeset anew, in under a half-second.  The
>> book's TeX source code starts by reading and executing a copy of the
>> "plain.tex" macros, followed by the "opmac.tex" (Olsak's Plain Macros)
>> lightweight markup library (with some added override hacks), and another
>> related file of math symbol definitions.  There is no format initialization
>> relied upon, needed, or desired.  The glyphs and metrics used are from
>> Computer Modern.  And when the job is done, all the TeX layout data
>> structures remain in memory for every page, for later use by the app.
>>
>> The point of it all, over and above the intellectual exercise, was to do
>> an end-run around all static illustration files, most of which are
>> inadequate for my eBook's topic of interest: space-filling curve
>> illustrations each comprising self-avoiding paths of literally
>> (numerically?) tens of millions of tiny line segments in each picture.
>> Every illustration is resolution-independent and zoom-able up to about
>> 300x.  There are no accompanying EPSF, PDF, SVG, or MOV illustration
>> files.  The app's code is in charge of drawing (and in some cases,
>> animating) each illustration into its anointed reserved box space on a page.
>>
>> Most illustrations have a set of interactive controls to allow the
>> user/reader to play with various graphic or other parameters.  One
>> particular illustration comprises over 77,000 sub-illustrations (a complete
>> enumeration of all possibilities from which the user/reader chooses).
>> Another illustration animates an actual backtrack search as the algorithm
>> runs, to find all solutions to the problem at hand.  The reader/user can
>> change pruning strategies as it searches.
>>
>> All the illustrations are dynamically built by compiled code and drawn at
>> read-time, not at typesetting time.  The book's TeX source code thinks it
>> is incorporating PDF files, but the PDF file names are mapped into objects
>> compiled into the client app.  Each such illustration object reports back
>> what its bounding box is on any page, and the the JSBox interpreter
>> reserves the space and continues typesetting away in its usual TeX way.
>> The illustrations and all their attendant interactive controls are built
>> and drawn later in the reserved area when the user first turns to that
>> page.  Each illustration is zoom-able independently of the simulated page
>> it is on, which nicety PDF doesn't do.
>>
>> This design allows my app to be distributed as a (mere!) 7MB download in
>> size (and 2MB of that was added by Apple), whereas an equivalent eBook app
>> with PDF or SVG illustrations and MOV animations (for my particular
>> purposes), would otherwise be many, many gigabytes of data.
>>
>> The idea is to allow a GUI app, coded to draw anything on the device
>> screen in some view, and having any kind of user interface controls and
>> gestures with respect to that interface, to simultaneously surround itself
>> with a set of book (or manual) pages having TeX-quality layout and math.
>>
>> I've signed up to give a demo of this self-typesetting app/book, and talk
>> about some interesting TeX-related issues, at the upcoming 2019 TUG
>> conference in August.
>>
>> Onward, into the fog ...
>>
>>
>> - Doug McKenna
>> Mathemaesthetics, Inc.
>> ----------- Please Consult the Following Before Posting -----------
>> TeX FAQ: http://www.tex.ac.uk/faq
>> List Reminders and Etiquette: https://sites.esm.psu.edu/~gray/tex/
>> List Archives: http://dir.gmane.org/gmane.comp.tex.macosx
>>                 https://email.esm.psu.edu/pipermail/macosx-tex/
>> TeX on Mac OS X Website: http://mactex-wiki.tug.org/
>> List Info: https://email.esm.psu.edu/mailman/listinfo/macosx-tex
>>
> ----------- Please Consult the Following Before Posting -----------
> TeX FAQ: http://www.tex.ac.uk/faq
> List Reminders and Etiquette: https://sites.esm.psu.edu/~gray/tex/
> List Archives: http://dir.gmane.org/gmane.comp.tex.macosx
>                https://email.esm.psu.edu/pipermail/macosx-tex/
> TeX on Mac OS X Website: http://mactex-wiki.tug.org/
> List Info: https://email.esm.psu.edu/mailman/listinfo/macosx-tex
>
>
> ---
> Murray Eisenberg murrayeisenberg at gmail.com
> 503 King Farm Blvd #101 Home (240)-246-7240
> Rockville, MD 20850-6667 Mobile (413)-427-5334
>
>
> ----------- Please Consult the Following Before Posting -----------
> TeX FAQ: http://www.tex.ac.uk/faq
> List Reminders and Etiquette: https://sites.esm.psu.edu/~gray/tex/
> List Archives: http://dir.gmane.org/gmane.comp.tex.macosx
>                 https://email.esm.psu.edu/pipermail/macosx-tex/
> TeX on Mac OS X Website: http://mactex-wiki.tug.org/
> List Info: https://email.esm.psu.edu/mailman/listinfo/macosx-tex
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://tug.org/pipermail/texhax/attachments/20190625/08ffa184/attachment.html>

From rokicki at gmail.com  Tue Jun 25 17:54:53 2019
From: rokicki at gmail.com (Tomas Rokicki)
Date: Tue, 25 Jun 2019 08:54:53 -0700
Subject: [OS X TeX] Programming literature: "Hilbert Curves"
In-Reply-To: <CAENrYJA7cwMgYwhYjQ-Td9X-0=F7tmSQD6dODdi5Zu+zK8mT-Q@mail.gmail.com>
References: <42E80922-014E-4E3D-A13E-CF277E5E4D3F@uoregon.edu>
 <1106010008.8140359.1561423629602.JavaMail.zimbra@mathemaesthetics.com>
 <CAENrYJCTaQY7BKGT7=ZAyaR9yNaX0koXyL-iUpCZ3ZV6ECvxuQ@mail.gmail.com>
 <16347C2C-ABEB-42DA-BCBC-0FEEBECEE992@gmail.com>
 <CAENrYJA7cwMgYwhYjQ-Td9X-0=F7tmSQD6dODdi5Zu+zK8mT-Q@mail.gmail.com>
Message-ID: <CAGia-=VbwKBLX0czeaDJ-hDDgB9ir84z0PeW7sUgKp5WkMROCg@mail.gmail.com>

Or, instead of an app, platform-independent JavaScript with HTML5.

On Tue, Jun 25, 2019 at 6:36 AM William Adams <will.adams at frycomm.com>
wrote:

> That's unfortunate.
>
> Hopefully someone will update that as an app so that it's readily
> available.
>
> William
>
> On Tue, Jun 25, 2019 at 9:32 AM Murray Eisenberg <
> murrayeisenberg at gmail.com> wrote:
>
>> Alas, that old Java Geometry Applet with this edition of Euclid?s
>> Elements is in Java, and at least with security defaults of the current
>> versions of macOS and Safari, it?s absolute torture to try to get the Java
>> applet to be allowed to run.
>>
>> On 25 Jun2019, at 9:26 AM, William Adams <will.adams at frycomm.com> wrote:
>>
>> At last! A worthy successor to:
>> https://mathcs.clarku.edu/~djoyce/java/elements/elements.html
>>
>> Really looking forward to your presentation!
>>
>> William
>>
>>
>>
>> On Mon, Jun 24, 2019 at 8:47 PM Doug McKenna <doug at mathemaesthetics.com>
>> wrote:
>>
>>> Well, what a long and strange trip (test) it's been!
>>>
>>> After many years of both concentrated and sporadic efforts on a variety
>>> of fronts, my combined application and/or electronic book ("Hilbert Curves"
>>> and/or "Outside-In and Inside-Gone") is now available (for $8) in Apple's
>>> App Store for Apple's iPad (and iPhone, but more screen real estate is
>>> better).
>>>
>>> Of interest to readers of this list, this app/book is, I believe, a
>>> first: it is self-typesetting on the user's device from TeX source code.
>>> See <http://www.mathemaesthetics.com/HilbertCurves.html> for a few
>>> screen shots.  The typeset math of course looks great, though it is not
>>> very complicated (high-school level).
>>>
>>> The app contains its own high-performance TeX-language interpreter,
>>> which I've been calling JSBox.  The TUGboat article I wrote a while back on
>>> how it traces itself is here:
>>>
>>> <https://tug.org/TUGboat/tb35-2/tb110mckenna.pdf>
>>>
>>> (although in this dedicated eBook's case, none of the tracing code is
>>> ever needed, so all the tracing code is conditionally compiled out to save
>>> quite a lot of space).
>>>
>>> JSBox is a from-the-ground-up rewrite of TeX/e-TeX's engine, but
>>> (currently) without any of the back-end primitives for various types of
>>> import/export of PDF data.  JSBox is not open source (maybe some day).  It
>>> is a static library written in C that is designed to be incorporated into
>>> any other piece of software, such as an iOS or Mac or other GUI application
>>> that simulates a document of pages with illustrations.
>>>
>>> Lots of work still to be done on it, but I had to get this
>>> proof-of-concept eBook/app done before continuing.  With respect to this
>>> TeX language interpreter's development, I'm still in what's technically
>>> called the "eating your own dog food" phase.  Sales of my app/eBook will
>>> help support further work on JSBox, especially getting LaTeX and the TDS
>>> working with it.
>>>
>>> Under the hood, each time this iOS application launches, the 160-page
>>> simulated book (pages are logically 8.5" by 18"), with its 135+
>>> non-file-based illustrations, is typeset anew, in under a half-second.  The
>>> book's TeX source code starts by reading and executing a copy of the
>>> "plain.tex" macros, followed by the "opmac.tex" (Olsak's Plain Macros)
>>> lightweight markup library (with some added override hacks), and another
>>> related file of math symbol definitions.  There is no format initialization
>>> relied upon, needed, or desired.  The glyphs and metrics used are from
>>> Computer Modern.  And when the job is done, all the TeX layout data
>>> structures remain in memory for every page, for later use by the app.
>>>
>>> The point of it all, over and above the intellectual exercise, was to do
>>> an end-run around all static illustration files, most of which are
>>> inadequate for my eBook's topic of interest: space-filling curve
>>> illustrations each comprising self-avoiding paths of literally
>>> (numerically?) tens of millions of tiny line segments in each picture.
>>> Every illustration is resolution-independent and zoom-able up to about
>>> 300x.  There are no accompanying EPSF, PDF, SVG, or MOV illustration
>>> files.  The app's code is in charge of drawing (and in some cases,
>>> animating) each illustration into its anointed reserved box space on a page.
>>>
>>> Most illustrations have a set of interactive controls to allow the
>>> user/reader to play with various graphic or other parameters.  One
>>> particular illustration comprises over 77,000 sub-illustrations (a complete
>>> enumeration of all possibilities from which the user/reader chooses).
>>> Another illustration animates an actual backtrack search as the algorithm
>>> runs, to find all solutions to the problem at hand.  The reader/user can
>>> change pruning strategies as it searches.
>>>
>>> All the illustrations are dynamically built by compiled code and drawn
>>> at read-time, not at typesetting time.  The book's TeX source code thinks
>>> it is incorporating PDF files, but the PDF file names are mapped into
>>> objects compiled into the client app.  Each such illustration object
>>> reports back what its bounding box is on any page, and the the JSBox
>>> interpreter reserves the space and continues typesetting away in its usual
>>> TeX way.  The illustrations and all their attendant interactive controls
>>> are built and drawn later in the reserved area when the user first turns to
>>> that page.  Each illustration is zoom-able independently of the simulated
>>> page it is on, which nicety PDF doesn't do.
>>>
>>> This design allows my app to be distributed as a (mere!) 7MB download in
>>> size (and 2MB of that was added by Apple), whereas an equivalent eBook app
>>> with PDF or SVG illustrations and MOV animations (for my particular
>>> purposes), would otherwise be many, many gigabytes of data.
>>>
>>> The idea is to allow a GUI app, coded to draw anything on the device
>>> screen in some view, and having any kind of user interface controls and
>>> gestures with respect to that interface, to simultaneously surround itself
>>> with a set of book (or manual) pages having TeX-quality layout and math.
>>>
>>> I've signed up to give a demo of this self-typesetting app/book, and
>>> talk about some interesting TeX-related issues, at the upcoming 2019 TUG
>>> conference in August.
>>>
>>> Onward, into the fog ...
>>>
>>>
>>> - Doug McKenna
>>> Mathemaesthetics, Inc.
>>> ----------- Please Consult the Following Before Posting -----------
>>> TeX FAQ: http://www.tex.ac.uk/faq
>>> List Reminders and Etiquette: https://sites.esm.psu.edu/~gray/tex/
>>> List Archives: http://dir.gmane.org/gmane.comp.tex.macosx
>>>                 https://email.esm.psu.edu/pipermail/macosx-tex/
>>> TeX on Mac OS X Website: http://mactex-wiki.tug.org/
>>> List Info: https://email.esm.psu.edu/mailman/listinfo/macosx-tex
>>>
>> ----------- Please Consult the Following Before Posting -----------
>> TeX FAQ: http://www.tex.ac.uk/faq
>> List Reminders and Etiquette: https://sites.esm.psu.edu/~gray/tex/
>> List Archives: http://dir.gmane.org/gmane.comp.tex.macosx
>>                https://email.esm.psu.edu/pipermail/macosx-tex/
>> TeX on Mac OS X Website: http://mactex-wiki.tug.org/
>> List Info: https://email.esm.psu.edu/mailman/listinfo/macosx-tex
>>
>>
>> ---
>> Murray Eisenberg murrayeisenberg at gmail.com
>> 503 King Farm Blvd #101 Home (240)-246-7240
>> Rockville, MD 20850-6667 Mobile (413)-427-5334
>>
>>
>> ----------- Please Consult the Following Before Posting -----------
>> TeX FAQ: http://www.tex.ac.uk/faq
>> List Reminders and Etiquette: https://sites.esm.psu.edu/~gray/tex/
>> List Archives: http://dir.gmane.org/gmane.comp.tex.macosx
>>                 https://email.esm.psu.edu/pipermail/macosx-tex/
>> TeX on Mac OS X Website: http://mactex-wiki.tug.org/
>> List Info: https://email.esm.psu.edu/mailman/listinfo/macosx-tex
>>
>

-- 
--  http://cube20.org/  --  http://golly.sf.net/  --
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://tug.org/pipermail/texhax/attachments/20190625/a6ee0d22/attachment-0001.html>

From doug at mathemaesthetics.com  Tue Jun 25 19:48:45 2019
From: doug at mathemaesthetics.com (Doug McKenna)
Date: Tue, 25 Jun 2019 11:48:45 -0600 (MDT)
Subject: Programming literature: "Hilbert Curves"
In-Reply-To: <8fb09cb0-83ff-c1d4-d2b0-c67ba88b8364@Rhul.Ac.Uk>
References: <42E80922-014E-4E3D-A13E-CF277E5E4D3F@uoregon.edu>
 <1106010008.8140359.1561423629602.JavaMail.zimbra@mathemaesthetics.com>
 <8fb09cb0-83ff-c1d4-d2b0-c67ba88b8364@Rhul.Ac.Uk>
Message-ID: <11839617.8579716.1561484925042.JavaMail.zimbra@mathemaesthetics.com>

Phil Taylor wrote -

>| An interesting and innovative approach, Doug, but
>| do you have plans to develop it for other platforms
>| (Windows, Android, whatever).? I have no  Apple
>| devices, nor have I any interest in the same, but I
>| am interested  in your work and would be interested
>| in trying it (even paying for it !)  if it were
>| available for platforms in which I have some interest.

I would love to get it all working on other platforms (including paper, except that for my particular subject, that medium is really third-rate).  One step at a time, though.  Otherwise, my head might explode. :-)

I understand that lots of TeX folk eschew Apple.  And many don't.  It is what it is.

My expertise is in the Apple world, whose Core Graphics drawing model is very PostScript-like and whose technology making deep zooms into resolution-independent graphics I understand better.  I'm not sure to what degree I can do what I'm doing (the graphics part) easily on other platforms, based on various attempts to read up on their graphics drawing models.

The TeX language interpreter part, on the other hand, should be a cinch to port.

Doug McKenna


