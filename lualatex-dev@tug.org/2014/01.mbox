From mailing_list at arcor.de  Wed Jan 15 18:26:04 2014
From: mailing_list at arcor.de (Stephan Hennig)
Date: Wed, 15 Jan 2014 18:26:04 +0100
Subject: [lltx] hyphenation with ligatures in input
Message-ID: <52D6C4AC.2010201@arcor.de>

[CC: lualatex-dev at tug.org
Please reply to tex-hyphen at tug.org]

Hi,

in the following, I'm only considering LuaTeX with UTF-8 encoded input.

When a ligature character, e.g., ?, is already present in the input
stream, LuaTeX won't hyphenate that word correctly.

\showhyphens{financial ?nancial}
\bye

> This is LuaTeX, Version beta-0.76.0-2013120414 (rev 4627)  (format=luatex 2013.12.11)  15 JAN 2014 18:17
> [...]
> [][] \tenrm fi-nan-cial ?nan-cial


The same is true for LuaLaTeX, by default, or when activating US
hyphenation patterns with either Babel or Polyglossia.

However, when activating UK hyphenation patterns the word containing the
ligature is also hyphenated (code attached at the end).

> This is LuaTeX, Version beta-0.76.0-2013120414 (rev 4627)  (format=lualatex 2013.12.11)  15 JAN 2014 18:20
> [...]
> [][] \EU2/lmr/m/n/10 fin-an-cial ?n-an-cial


Why is that?  I can't find an ? ligature character neither in UK
hyphenation patterns nor in the exception list (hyph-en-gb.pat.txt,
hyph-en-gb.hyp.txt).

What set of (ligature) characters is handled such a special way?

Does the handling depend on the fonts used?

Best regards,
Stephan Hennig


% -*- coding: utf-8 -*-
\documentclass{article}
%\usepackage[USenglish]{babel}
%\usepackage[UKenglish]{babel}
\usepackage{polyglossia}
%\setmainlanguage[variant=us]{english}
\setmainlanguage[variant=uk]{english}
\begin{document}
\showhyphens{financial ?nancial}
\end{document}

From arthur.reutenauer at normalesup.org  Wed Jan 15 19:18:16 2014
From: arthur.reutenauer at normalesup.org (Arthur Reutenauer)
Date: Wed, 15 Jan 2014 18:18:16 +0000
Subject: [lltx] [tex-hyphen] hyphenation with ligatures in input
In-Reply-To: <52D6C4AC.2010201@arcor.de>
References: <52D6C4AC.2010201@arcor.de>
Message-ID: <20140115181816.GY3937@phare.normalesup.org>

> However, when activating UK hyphenation patterns the word containing the
> ligature is also hyphenated (code attached at the end).
> 
> > This is LuaTeX, Version beta-0.76.0-2013120414 (rev 4627)  (format=lualatex 2013.12.11)  15 JAN 2014 18:20
> > [...]
> > [][] \EU2/lmr/m/n/10 fin-an-cial ?n-an-cial
> 
> 
> Why is that?

  Try with "nancial".

	Arthur

From pragma at wxs.nl  Wed Jan 15 19:24:28 2014
From: pragma at wxs.nl (Hans Hagen)
Date: Wed, 15 Jan 2014 19:24:28 +0100
Subject: [lltx] [tex-hyphen] hyphenation with ligatures in input
In-Reply-To: <20140115181816.GY3937@phare.normalesup.org>
References: <52D6C4AC.2010201@arcor.de>
 <20140115181816.GY3937@phare.normalesup.org>
Message-ID: <52D6D25C.1060208@wxs.nl>

On 1/15/2014 7:18 PM, Arthur Reutenauer wrote:
>> However, when activating UK hyphenation patterns the word containing the
>> ligature is also hyphenated (code attached at the end).
>>
>>> This is LuaTeX, Version beta-0.76.0-2013120414 (rev 4627)  (format=lualatex 2013.12.11)  15 JAN 2014 18:20
>>> [...]
>>> [][] \EU2/lmr/m/n/10 fin-an-cial ?n-an-cial
>>
>>
>> Why is that?
>
>    Try with "nancial".

or

\hsize 2mm

financial \par
?nancial  \par


-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From mailing_list at arcor.de  Wed Jan 15 19:29:13 2014
From: mailing_list at arcor.de (Stephan Hennig)
Date: Wed, 15 Jan 2014 19:29:13 +0100
Subject: [lltx] [tex-hyphen] hyphenation with ligatures in input
In-Reply-To: <20140115181816.GY3937@phare.normalesup.org>
References: <52D6C4AC.2010201@arcor.de>
 <20140115181816.GY3937@phare.normalesup.org>
Message-ID: <52D6D379.7040808@arcor.de>

Am 15.01.2014 19:18, schrieb Arthur Reutenauer:
>> However, when activating UK hyphenation patterns the word containing the
>> ligature is also hyphenated (code attached at the end).
>> 
>> > This is LuaTeX, Version beta-0.76.0-2013120414 (rev 4627)  (format=lualatex 2013.12.11)  15 JAN 2014 18:20
>> > [...]
>> > [][] \EU2/lmr/m/n/10 fin-an-cial ?n-an-cial
>> 
>> 
>> Why is that?
> 
>   Try with "nancial".

I see.  With

\lefthyphenmin=1
\showhyphens{financial ?nancial}
\bye

the latter word is happily hyphenated.

> [][] \tenrm fi-nan-cial ?-nan-cial

Best regards,
Stephan Hennig


From khaledhosny at eglug.org  Wed Jan 15 21:09:55 2014
From: khaledhosny at eglug.org (Khaled Hosny)
Date: Wed, 15 Jan 2014 22:09:55 +0200
Subject: [lltx] hyphenation with ligatures in input
In-Reply-To: <52D6C4AC.2010201@arcor.de>
References: <52D6C4AC.2010201@arcor.de>
Message-ID: <20140115200955.GA29367@khaled-laptop>

On Wed, Jan 15, 2014 at 06:26:04PM +0100, Stephan Hennig wrote:
> When a ligature character, e.g., ?, is already present in the input
> stream,

Don?t do that. It is a compatibility character and should not be used
for text input.

Regards,
Khaled

From mailing_list at arcor.de  Sun Jan 26 18:39:48 2014
From: mailing_list at arcor.de (Stephan Hennig)
Date: Sun, 26 Jan 2014 18:39:48 +0100
Subject: [lltx] towards non-standard hyphenation support in LuaTeX
Message-ID: <52E54864.3040301@arcor.de>

[ To tex-hyphen at tug.org
  CC luatex at tug.org
  CC lualatex-dev at tug.org
  Please keep tex-hyphen copied in your replies.]


Hi,

I'd like to invite you to checkout
<URL:https://github.com/sh2d/padrinoma>.  The repository contains a
package that provides support for pattern driven node list manipulations
in LuaTeX.

There are a handful of typographic features missing in TeX that involve
certain kinds of glyph replacement and in principle can be implemented
at the node list level in LuaTeX.  Examples are non-standard
hyphenation, smart ligature building or long/round s handling in
black-letter fonts.  There's two main questions that need to be answered
when doing low-level operations like this on node lists:

  a) Where to apply manipulations?

  b) What manipulations to apply?

The purpose of the padrinoma package is to give a higher-level answer to
the first question.  Given suitable patterns (that look like ordinary
Liang patterns), the package can scan a node list, apply the patterns to
the words found and return data structures that contain the results of
the pattern matching.

Some basic, illustrative examples of how that can be used can be found
in directory examples/pdnm/.  Document hyph-mark-color.tex colours all
letter pairs surrounding valid hyphenation points in a word (without
falling-back to LuaTeX's lang.hyphenate function).  Document
hyph-mark-explicit.tex is similar, but inserts a certain character at a
valid hyphenation position instead of the colouring.  Document
german-nstd-hyph.tex is a bit more ambitious and shows an attempt to
bring non-standard ck hyphenation to German users.  Example patterns are
provided.

Quick start:  To compile the sample documents, the following files

  lua-classes/cls_pdnm*.lua
  lua-modules/pdnm*.lua

have to be placed in a local TEXMF tree.  In general, mktexlsr needs to
be run afterwards.  Then move to the example documents and compile them
using LuaLaTeX.

There's not much user-level documentation, currently.  That's because
the package doesn't contain user-level code. :-)  The API of Lua modules
and classes is documented in LuaDoc format.  Documentation of examples,
on the other hand, is terse or non-existent.  If you want to play with
the example documents, look for a line

>   nlm.register_manipulation('hyph-la.pat.txt', 'pdnm_hyph-mark-explicit')

or similar.  The first argument to the function call is the name of an
ordinary pattern file (plain UTF-8 text) and the second argument is the
name of a Lua module implementing a particular kind of node list
manipulation.

Directory lua-classes/ contains basic data structures needed for the
pattern matching.  Pure TeX hackers need not care about the code there.
 Directory lua-modules/ contains modules that apply the data structures
from the former directory to LuaTeX's node lists.

What works: The example documents, see above.

What's missing: Much!

I'm announcing the package here, because it is at a point where input
and code contributions from people more firm in TeX and LaTeX internals
than me is desired.

Format:

  * A user-level TeX and LaTeX interface is missing.

  * How should a low-level LuaTeX interface look like?
    If the approach shown here proves useful, I think
    non-standard hyphenation and other application should get
    first class support similar to regular hyphenation by formats.

  * What about Babel/Polyglossia/hyph-utf8 integration?

Plain TeX:

  * Currently, only a very basic notion of a "word" is implemented.
    Basically, a word is a series of glyph, discretionary or
    user-defined whatsit nodes.  Plain TeX has a much more sophisticated
    notion of a "word subject to hyphenation".
      => see file lua-modules/pdnm_nl_iterate_words.lua

  * The language of a "word" is currently completely ignored.

  * "Words" are currently not checked against the list of hyphenation
    exceptions.

  * There's no way to locally switch off a particular manipulation for
    a single word or phrase.  This is needed for words where certain
    glyph replacements might not be desirable, e.g., names for better
    recognition.

  * And much more ...

Prospectively, I hope that LuaTeX gets means to apply more than one type
of patterns and custom manipulations to a node list built-in so that
this package renders superfluous.  (Well, if this approach works out,
Hans and Taco might as well get reluctant adding that functionality to
the core. :-)  Until then, please share your ideas and -- more important
-- your coding skills!

Happy TeXing!
Stephan Hennig

From taco at docwolves.nl  Mon Jan 27 13:28:06 2014
From: taco at docwolves.nl (Taco Hoekwater)
Date: Mon, 27 Jan 2014 13:28:06 +0100
Subject: [lltx] [luatex] towards non-standard hyphenation support in
	LuaTeX
In-Reply-To: <52E54864.3040301@arcor.de>
References: <52E54864.3040301@arcor.de>
Message-ID: <52E650D6.4090207@docwolves.nl>


Hi Stephan,

On 01/26/2014 06:39 PM, Stephan Hennig wrote:
>
> Prospectively, I hope that LuaTeX gets means to apply more than one type
> of patterns and custom manipulations to a node list built-in so that
> this package renders superfluous.

Having a built-in could defeat its own purpose, depending on what it
actually has to do. You want to keep the special lua code anyway, so
there could be a lot of going back and forth between C and lua, which
is not the best in terms of efficiency (put mildly). OTOH, I can imagine
a helper function that somehow produces the words & associated language
of a node list, and that may be helpful, I do not know?

Best wishes,
Taco




From mailing_list at arcor.de  Mon Jan 27 15:33:57 2014
From: mailing_list at arcor.de (Stephan Hennig)
Date: Mon, 27 Jan 2014 15:33:57 +0100
Subject: [lltx] [luatex] towards non-standard hyphenation support in
	LuaTeX
In-Reply-To: <52E650D6.4090207@docwolves.nl>
References: <52E54864.3040301@arcor.de> <52E650D6.4090207@docwolves.nl>
Message-ID: <52E66E55.1080504@arcor.de>

Am 27.01.2014 13:28, schrieb Taco Hoekwater:
> On 01/26/2014 06:39 PM, Stephan Hennig wrote:
>>
>> Prospectively, I hope that LuaTeX gets means to apply more than one type
>> of patterns and custom manipulations to a node list built-in so that
>> this package renders superfluous.
> 
> Having a built-in could defeat its own purpose, depending on what it
> actually has to do. You want to keep the special lua code anyway, so
> there could be a lot of going back and forth between C and lua, which
> is not the best in terms of efficiency (put mildly).

True.  One concern is/was also speed, but having read the node access
chapter in the latest LuaTeX manual

>> When implementing this direct approach the regular index by key 
>> variant was also optimized, so direct access only makes sense when 
>> we?re accessing nodes millions of times (which happens in some
>> font processing for instance).

the node list manipulations considered here are perhaps cheap compared
to some font handling. :-)


> OTOH, I can imagine a helper function that somehow produces the words
> & associated language of a node list, and that may be helpful, I do
> not know?

Yeah, a built-in iterator over words of a certain property would be most
welcome.  I have two kinds of properties in mind:

  * any word subject to regular hyphenation

    When applying non-standard hyphenation, I think that should apply
    to words subject to regular hyphenation only.  Same for weighted
    hyphenation.  (I have a vague idea about how the latter can be
    tackled, but that needs some more discussion.  I'll write another
    mail about that.)

  * any word

    Such an iterator is needed for arbitrary glyph substitutions, e.g.,
    non-greedy ligature building or round/long-s handling.

Can't say, if there's a demand for other properties as well.

But one thing to consider for such iterators:  One might want to
consider other than "word" nodes as well during node list traversal to
control manipulations (switch it off locally).  That could be difficult
if an iterator only returns glyph and discretionary nodes.  It could
make sense to be able to iterate over words as well as non-word nodes
like this:

  for n1,n2 in words(head) do
     Operate on list head with n1 and n2 being references to
     the first and last node of the current word.
  end

  for n1,n2 in words(head, true) do
     As above, but n1 can be any type of node (an inter-word node)
     and n2 is nil in that case.
  end

Just an idea.  One use-case is to take action on certain (user_defined
or late_lua) whatsit nodes in a list.  I know that there's also
attributes to store secondary information in node lists, which perhaps
renders this proposed second syntax useless ...

Best regards,
Stephan Hennig


From mailing_list at arcor.de  Mon Jan 27 19:01:13 2014
From: mailing_list at arcor.de (Stephan Hennig)
Date: Mon, 27 Jan 2014 19:01:13 +0100
Subject: [lltx] [tex-hyphen] [luatex] towards non-standard hyphenation
 support in LuaTeX
In-Reply-To: <52E66E55.1080504@arcor.de>
References: <52E54864.3040301@arcor.de> <52E650D6.4090207@docwolves.nl>
 <52E66E55.1080504@arcor.de>
Message-ID: <52E69EE9.2040702@arcor.de>

Am 27.01.2014 15:33, schrieb Stephan Hennig:

> But one thing to consider for such iterators:

Another thing, the iterator should be robust in the sense that a user
can replace first and last node of the current word, e.g., during
ligature building.

There can even be times when a manipulation needs to change nodes
outside the current word, e.g., insert a node before the first or after
the last node of a word.  For that reason, when returning two word nodes
n1,n2, the iterator should not save n2.next in the state, but rather the
next node returned as n1.  That way, on could insert/replace inter-word
nodes without wrecking havoc.

Best regards,
Stephan Hennig


From nomosnomos at gmail.com  Tue Jan 28 02:58:53 2014
From: nomosnomos at gmail.com (Dohyun Kim)
Date: Tue, 28 Jan 2014 10:58:53 +0900
Subject: [lltx] luamplib + lualatex
In-Reply-To: <CAFzmAm1Gzhn=nYVVO1+FZ7Qv8wq5NPHLQZ1ci6=u7CBwhtFRkA@mail.gmail.com>
References: <CAFP+xFLzK64iet2hjJnv1bAhykG3FXoeXfBUqbkBUhchPfE4jw@mail.gmail.com>
 <51F03133.1090902@telecom-bretagne.eu>
 <CAFP+xFL2ZbFZYZt3xCw0COurOzO-QR0vjkUDF+dezBodbaS=0g@mail.gmail.com>
 <CAFzmAm3K7zDonHyfJLkf5uKbFRhXN8FBiqWuPUWcHEXamTk9wg@mail.gmail.com>
 <CAFP+xFJDRy9-Xi2DiEWz7pSqx9t-tNsrxBhnP=fP3gtjcBihGg@mail.gmail.com>
 <CAFzmAm1MULTpHrTexE859RSTtO54i4=2ypUZsUvhtggifTuQ+w@mail.gmail.com>
 <CAFP+xFL-gM6kdZfH2wUXXVrSgO8rJCb+D_-1yU9Nnvfkz2=8ew@mail.gmail.com>
 <CAFzmAm1Gzhn=nYVVO1+FZ7Qv8wq5NPHLQZ1ci6=u7CBwhtFRkA@mail.gmail.com>
Message-ID: <CAFzmAm0jWFEK1spEXG_-wR1uQuNKrF8+VU_AZDYTjYk0H0=1KA@mail.gmail.com>

It's been long time since last mail on this thread. Now at last I seem
have a solution on this issue. As luamplib has been upgraded recently,
the issue Troy raised can be solved as follows:

\documentclass{article}
\usepackage{luamplib}
\everymplib{
  if (readfrom "mymplibtmp.mp" <> EOF):
    input mymplibtmp;
  fi;
  closefrom "mymplibtmp.mp";
  if unknown u: u := 1; fi;
  beginfig(0);
}
\everyendmplib{
  endfig;
  write "u := " & decimal u &";" to "mymplibtmp.mp";
  write EOF to "mymplibtmp.mp";
}
\begin{document}
\raggedright\leavevmode
\newcount\n \n=0
\loop \ifnum\n<20 \advance\n by 1
\begin{mplibcode}
  draw fullcircle scaled u;
  u := 1.1u;
  if u > 100: u := 1 fi;
\end{mplibcode}
\repeat
\end{document}

Regards,
Dohyun Kim

2013-07-25 Dohyun Kim <nomosnomos at gmail.com>:
> 2013/7/25 Troy Henderson <thenders at gmail.com>:
>> This works very well.  The only issue I see is if I update the value
>> of a variable, then that updated value is not remembered by another
>> \begin{mplibcode} ... \end{mplibcode}.  For example,
>>
>>         \begin{mplibpreamble}
>>                 u:=54;
>>         \end{mplibpreamble}
>>         \begin{mplibcode}
>>                 beginfig(1);
>>                         draw fullcircle scaled (2*u);
>>                         u:=2*u;
>>                 endfig;
>>                 beginfig(2);
>>                         draw fullcircle scaled (2*u);
>>                 endfig;
>>         \end{mplibcode}
>>
>> draws two circles where the second circle has twice the diameter as
>> the first.  However,
>>
>>         \begin{mplibpreamble}
>>                 u:=54;
>>         \end{mplibpreamble}
>>         \begin{mplibcode}
>>                 beginfig(1);
>>                         draw fullcircle scaled (2*u);
>>                         u:=2*u;
>>                 endfig;
>>         \end{mplibcode}
>>         \begin{mplibcode}
>>                 beginfig(2);
>>                         draw fullcircle scaled (2*u);
>>                 endfig;
>>         \end{mplibcode}
>>
>> draws two circles of the same diameter (namely 54bp).  Perhaps there
>> could be an optional argument to \begin{mplibcode} that would NOT use
>> the preamble, or perhaps there's a better solution than the optional
>> argument.
>>
>
> Currently, I have no idea about how to inherit the variables of
> previous environment.

