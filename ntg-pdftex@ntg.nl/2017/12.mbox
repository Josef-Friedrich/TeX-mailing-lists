From karl at freefriends.org  Fri Dec 15 18:13:22 2017
From: karl at freefriends.org (Karl Berry)
Date: Fri, 15 Dec 2017 17:13:22 GMT
Subject: [NTG-pdftex] [PATCH v4] Allow .enc files for bitmap PK fonts
In-Reply-To: <201708191602.17386@pali>
Message-ID: <201712151713.vBFHDMI6023151@freefriends.org>

(Sorry for the delayed reply.)

    Date: Sat, 19 Aug 2017 16:02:17 +0200
    From: Pali Rohï¿½ï¿½r <pali.rohar at gmail.com>
    Subject: [PATCH v4] Allow .enc files for bitmap PK fonts

Thanks for splitting the patch into those separate pieces, Pali, and
doing the test and documentation updates. Very helpful. Reading through
the changes, they generally look fine.

My only question at the moment is, why do duplicate glyph names have to
be removed in advance (in patch 3)? Otherwise we'll try to put two
glyphs by the same (PostScript/PDF) name in the output font? Or
something else? --thanks, karl.

From pali.rohar at gmail.com  Fri Dec 15 19:12:14 2017
From: pali.rohar at gmail.com (Pali =?utf-8?B?Um9ow6Fy?=)
Date: Fri, 15 Dec 2017 19:12:14 +0100
Subject: [NTG-pdftex] [PATCH v4] Allow .enc files for bitmap PK fonts
In-Reply-To: <201712151713.vBFHDMI6023151@freefriends.org>
References: <201708191602.17386@pali>
 <201712151713.vBFHDMI6023151@freefriends.org>
Message-ID: <20171215181214.3uuehmhw2tqcme2w@pali>

On Friday 15 December 2017 17:13:22 Karl Berry wrote:
> (Sorry for the delayed reply.)
> 
>     Date: Sat, 19 Aug 2017 16:02:17 +0200
>     From: Pali RohÃ¡r <pali.rohar at gmail.com>
>     Subject: [PATCH v4] Allow .enc files for bitmap PK fonts
> 
> Thanks for splitting the patch into those separate pieces, Pali, and
> doing the test and documentation updates. Very helpful. Reading through
> the changes, they generally look fine.
> 
> My only question at the moment is, why do duplicate glyph names have to
> be removed in advance (in patch 3)? Otherwise we'll try to put two
> glyphs by the same (PostScript/PDF) name in the output font? Or
> something else? --thanks, karl.

Hi! Glyph names are put into /Differences PDF table and also glyphs
itself are identified in PDF by its names. So we cannot have two
different glyphs in PDF file with same name.

Function remove_duplicate_glyph_names() just remove duplicate glyph
names from enc file and later function writet3() for glyph index uses
either glyph name or if is not available (e.g. because of duplicates),
then it use name "a<glyph_index>" (like before). This ensures that every
glyph has a unique name in PDF file.

If you comment that remove_duplicate_glyph_names() then you would see
what happen. pdftex would not be able to create PDF file with two
different glyphs with same name and would store just one glyph. That
would result in damaged PDF font, one glyph would be used for all
characters which had associated that one glyph name in enc file.
Probably it would be the glyph with highest index.

Test case for reproducing should be easy:

File my.enc:
============
/my [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef
/mychar /mychar
/.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
] def
============

File test.tex:
============
\pdfglyphtounicode{mychar}{269}
\pdfgentounicode=1
\pdfmapline{cmb10 <my.enc}
\font\cmb=cmb10
\cmb
a b
\bye
============

And result PDF file would not render glyph 'a' if function
remove_duplicate_glyph_names() is disabled. There would be two glyphs 'b'.

-- 
Pali RohÃ¡r
pali.rohar at gmail.com

From pragma at wxs.nl  Fri Dec 15 20:47:30 2017
From: pragma at wxs.nl (Hans Hagen)
Date: Fri, 15 Dec 2017 20:47:30 +0100
Subject: [NTG-pdftex] [PATCH v4] Allow .enc files for bitmap PK fonts
In-Reply-To: <20171215181214.3uuehmhw2tqcme2w@pali>
References: <201708191602.17386@pali>
 <201712151713.vBFHDMI6023151@freefriends.org>
 <20171215181214.3uuehmhw2tqcme2w@pali>
Message-ID: <6a3b2251-bb59-fc40-b6fe-9646a8883636@wxs.nl>

On 12/15/2017 7:12 PM, Pali RohÃ¡r wrote:
> On Friday 15 December 2017 17:13:22 Karl Berry wrote:
>> (Sorry for the delayed reply.)
>>
>>      Date: Sat, 19 Aug 2017 16:02:17 +0200
>>      From: Pali RohÃ¡r <pali.rohar at gmail.com>
>>      Subject: [PATCH v4] Allow .enc files for bitmap PK fonts
>>
>> Thanks for splitting the patch into those separate pieces, Pali, and
>> doing the test and documentation updates. Very helpful. Reading through
>> the changes, they generally look fine.
>>
>> My only question at the moment is, why do duplicate glyph names have to
>> be removed in advance (in patch 3)? Otherwise we'll try to put two
>> glyphs by the same (PostScript/PDF) name in the output font? Or
>> something else? --thanks, karl.
> 
> Hi! Glyph names are put into /Differences PDF table and also glyphs
> itself are identified in PDF by its names. So we cannot have two
> different glyphs in PDF file with same name.

Where does the pdf standard mention that limitation? Why should glyph 
names be unique? If there is some nencoding issue it more looks like 
there is a shared Differences related dictionary / array that should not 
be shared

> Function remove_duplicate_glyph_names() just remove duplicate glyph
> names from enc file and later function writet3() for glyph index uses
> either glyph name or if is not available (e.g. because of duplicates),
> then it use name "a<glyph_index>" (like before). This ensures that every
> glyph has a unique name in PDF file.
> 
> If you comment that remove_duplicate_glyph_names() then you would see
> what happen. pdftex would not be able to create PDF file with two
> different glyphs with same name and would store just one glyph. That
> would result in damaged PDF font, one glyph would be used for all
> characters which had associated that one glyph name in enc file.
> Probably it would be the glyph with highest index.

> Test case for reproducing should be easy:
> 
> File my.enc:
> ============
> /my [
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef
> /mychar /mychar
> /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> ] def
> ============

Ok, but that is not related to pdf (as format) but to a bad vector 
and/or pdftex not taking the right one ... is messing around with names 
(thereby obscuring the problem) better than fixing the enc file? After 
all, now one of the glyphs will still have the wrong name.

> File test.tex:
> ============
> \pdfglyphtounicode{mychar}{269}
> \pdfgentounicode=1
> \pdfmapline{cmb10 <my.enc}
> \font\cmb=cmb10
> \cmb
> a b
> \bye
> ============
> 
> And result PDF file would not render glyph 'a' if function
> remove_duplicate_glyph_names() is disabled. There would be two glyphs 'b'.
> 


-- 

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From pali.rohar at gmail.com  Fri Dec 15 21:27:03 2017
From: pali.rohar at gmail.com (Pali =?utf-8?B?Um9ow6Fy?=)
Date: Fri, 15 Dec 2017 21:27:03 +0100
Subject: [NTG-pdftex] [PATCH v4] Allow .enc files for bitmap PK fonts
In-Reply-To: <6a3b2251-bb59-fc40-b6fe-9646a8883636@wxs.nl>
References: <201708191602.17386@pali>
 <201712151713.vBFHDMI6023151@freefriends.org>
 <20171215181214.3uuehmhw2tqcme2w@pali>
 <6a3b2251-bb59-fc40-b6fe-9646a8883636@wxs.nl>
Message-ID: <20171215202703.nbapi75ioctpxh6f@pali>

On Friday 15 December 2017 20:47:30 Hans Hagen wrote:
> On 12/15/2017 7:12 PM, Pali RohÃ¡r wrote:
> > On Friday 15 December 2017 17:13:22 Karl Berry wrote:
> > > (Sorry for the delayed reply.)
> > > 
> > >      Date: Sat, 19 Aug 2017 16:02:17 +0200
> > >      From: Pali RohÃ¡r <pali.rohar at gmail.com>
> > >      Subject: [PATCH v4] Allow .enc files for bitmap PK fonts
> > > 
> > > Thanks for splitting the patch into those separate pieces, Pali, and
> > > doing the test and documentation updates. Very helpful. Reading through
> > > the changes, they generally look fine.
> > > 
> > > My only question at the moment is, why do duplicate glyph names have to
> > > be removed in advance (in patch 3)? Otherwise we'll try to put two
> > > glyphs by the same (PostScript/PDF) name in the output font? Or
> > > something else? --thanks, karl.
> > 
> > Hi! Glyph names are put into /Differences PDF table and also glyphs
> > itself are identified in PDF by its names. So we cannot have two
> > different glyphs in PDF file with same name.
> 
> Where does the pdf standard mention that limitation? Why should glyph names
> be unique? If there is some nencoding issue it more looks like there is a
> shared Differences related dictionary / array that should not be shared

In /Differences table you assign character code for each glyph name.
Then in /CharProcs (for Type 3 font) you assign glyph definition for
each glyph name.

/CharProcs is of type PDF dictionary (page 421 in PDF Reference version
1.7). And it is undefined what happen if PDF dictionary contains one key
two times (page 59).

Basically glyph is identified by its name, not by character code, so two
different character codes needs to have two different glyph names (if
those characters code renders differently).

> > Function remove_duplicate_glyph_names() just remove duplicate glyph
> > names from enc file and later function writet3() for glyph index uses
> > either glyph name or if is not available (e.g. because of duplicates),
> > then it use name "a<glyph_index>" (like before). This ensures that every
> > glyph has a unique name in PDF file.
> > 
> > If you comment that remove_duplicate_glyph_names() then you would see
> > what happen. pdftex would not be able to create PDF file with two
> > different glyphs with same name and would store just one glyph. That
> > would result in damaged PDF font, one glyph would be used for all
> > characters which had associated that one glyph name in enc file.
> > Probably it would be the glyph with highest index.
> 
> > Test case for reproducing should be easy:
> > 
> > File my.enc:
> > ============
> > /my [
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef
> > /mychar /mychar
> > /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
> > ] def
> > ============
> 
> Ok, but that is not related to pdf (as format)

It is related to PDF format, see above. And more details are in PDF
Specification itself. In version 1.7 it is in section "5.5 Simple Fonts"
starting at page 412.

> but to a bad vector and/or
> pdftex not taking the right one ... is messing around with names (thereby
> obscuring the problem) better than fixing the enc file? After all, now one
> of the glyphs will still have the wrong name.

Basically there are two different things:

1) Glyph names

2) CMap encoding table

In CMap table is mapping from the character code to Unicode (codepoint)
sequence. And PDF viewers should use this mapping table to assign
Unicode codepoint for particular glyph which render.

But reality is that there are "not so good" PDF viewers which ignores
CMap table stored in PDF file and do some mapping from glyph name to
Unicode codepoint.

It looks like that currently pdftex generates CMap from glyph names.
Theoretically it should be possible to assign fully unique glyph names
for every one glyph, possible fully random and then into CMap table put
correct mapping for all character codes (as CMap table does not use
glyph names) according to enc file.

Correct PDF viewers which use CMap table will load character ==> Unicode
mapping from CMap table. "not so good" PDF viewers stay broken.

> > File test.tex:
> > ============
> > \pdfglyphtounicode{mychar}{269}
> > \pdfgentounicode=1
> > \pdfmapline{cmb10 <my.enc}
> > \font\cmb=cmb10
> > \cmb
> > a b
> > \bye
> > ============
> > 
> > And result PDF file would not render glyph 'a' if function
> > remove_duplicate_glyph_names() is disabled. There would be two glyphs 'b'.
> > 
> 
> 

-- 
Pali RohÃ¡r
pali.rohar at gmail.com

From pragma at wxs.nl  Mon Dec 18 11:17:45 2017
From: pragma at wxs.nl (Hans Hagen)
Date: Mon, 18 Dec 2017 11:17:45 +0100
Subject: [NTG-pdftex] [PATCH v4] Allow .enc files for bitmap PK fonts
In-Reply-To: <20171215202703.nbapi75ioctpxh6f@pali>
References: <201708191602.17386@pali>
 <201712151713.vBFHDMI6023151@freefriends.org>
 <20171215181214.3uuehmhw2tqcme2w@pali>
 <6a3b2251-bb59-fc40-b6fe-9646a8883636@wxs.nl>
 <20171215202703.nbapi75ioctpxh6f@pali>
Message-ID: <4ba0ba7d-da34-032a-a5f4-477c43eed7cd@wxs.nl>

On 12/15/2017 9:27 PM, Pali RohÃ¡r wrote:

> 1) Glyph names
> 
> 2) CMap encoding table
> 
> In CMap table is mapping from the character code to Unicode (codepoint)
> sequence. And PDF viewers should use this mapping table to assign
> Unicode codepoint for particular glyph which render.
> 
> But reality is that there are "not so good" PDF viewers which ignores
> CMap table stored in PDF file and do some mapping from glyph name to
> Unicode codepoint.

As type 1 can be mapped onto a wide font the glyph name is probably less 
an issue there so there most of the encoding data can be omitted. In cff 
2 even less is needed.

For copy paste the tounicode is needed and when absent glyph names play 
an (unreliable) role. My experience is that acrobat normally does things 
right (but has some weird limitations in the renderer), mupdf based 
viewers render perfect and do a reasonable cut and paste and that xpdf 
and friends are unreliable with cut and paste and have rendering issues 
too. So, when you create extra glyph names for type 3 they need to 
(somehow) obey the adobe logic (alpha.foo alongside alpha) as appending 
some number or character will spoil the cut and paste (depending on the 
viewer).

> It looks like that currently pdftex generates CMap from glyph names.
> Theoretically it should be possible to assign fully unique glyph names
> for every one glyph, possible fully random and then into CMap table put
> correct mapping for all character codes (as CMap table does not use
> glyph names) according to enc file.

that would confuse some viewers too (i remember some thread about non 
standard ffi ligature names and resolving hard coded in some viewer and 
the request for tex related fonts to conform to that bad practice too)

> Correct PDF viewers which use CMap table will load character ==> Unicode
> mapping from CMap table. "not so good" PDF viewers stay broken.

indeed, or worse: behave inconsistent over releases (which makes it hard 
to predict)

>>> File test.tex:
>>> ============
>>> \pdfglyphtounicode{mychar}{269}
>>> \pdfgentounicode=1
>>> \pdfmapline{cmb10 <my.enc}
>>> \font\cmb=cmb10
>>> \cmb
>>> a b
>>> \bye
>>> ============
>>>
>>> And result PDF file would not render glyph 'a' if function
>>> remove_duplicate_glyph_names() is disabled. There would be two glyphs 'b'.
but still i think that the fact that there are duplicate names in my.enc 
file is the real problem: if two b's refer to different shapes then what 
is the real 'b'? And what is the right new name: b.one, b.two ? What 
does one expect with cut and paste? If two names are the same and they 
refer to the same font program then there is no problem and the first 
one encountered when embedding should be used.

If remove duplicates is an option in pdftex then at least make sure that 
it's off by default (better complain loudly on the console that the enc 
is broken) so that the user knows that enabling that option is not 
solving the problem (and in tex distributions the fixed enc should be 
used). Heuristics and fixes for bugged fonts are nice but not being able
to bypass them is bad.

(multiple .notdef is an exception)

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From pali.rohar at gmail.com  Mon Dec 18 12:40:36 2017
From: pali.rohar at gmail.com (Pali =?utf-8?B?Um9ow6Fy?=)
Date: Mon, 18 Dec 2017 12:40:36 +0100
Subject: [NTG-pdftex] [PATCH v4] Allow .enc files for bitmap PK fonts
In-Reply-To: <4ba0ba7d-da34-032a-a5f4-477c43eed7cd@wxs.nl>
References: <201708191602.17386@pali>
 <201712151713.vBFHDMI6023151@freefriends.org>
 <20171215181214.3uuehmhw2tqcme2w@pali>
 <6a3b2251-bb59-fc40-b6fe-9646a8883636@wxs.nl>
 <20171215202703.nbapi75ioctpxh6f@pali>
 <4ba0ba7d-da34-032a-a5f4-477c43eed7cd@wxs.nl>
Message-ID: <20171218114036.wybu5xtjjux5w3da@pali>

On Monday 18 December 2017 11:17:45 Hans Hagen wrote:
> > It looks like that currently pdftex generates CMap from glyph names.
> > Theoretically it should be possible to assign fully unique glyph names
> > for every one glyph, possible fully random and then into CMap table put
> > correct mapping for all character codes (as CMap table does not use
> > glyph names) according to enc file.
> 
> that would confuse some viewers too (i remember some thread about non
> standard ffi ligature names and resolving hard coded in some viewer and the
> request for tex related fonts to conform to that bad practice too)

First occurrence of duplicate can use originally specified glyph name
and second, third, ... occurrences can use newly unique glyph name (with
proper CMap table). Yes, that would not fix problem for those "some"
viewers but in this situation it is better then nothing.

> > > > File test.tex:
> > > > ============
> > > > \pdfglyphtounicode{mychar}{269}
> > > > \pdfgentounicode=1
> > > > \pdfmapline{cmb10 <my.enc}
> > > > \font\cmb=cmb10
> > > > \cmb
> > > > a b
> > > > \bye
> > > > ============
> > > > 
> > > > And result PDF file would not render glyph 'a' if function
> > > > remove_duplicate_glyph_names() is disabled. There would be two glyphs 'b'.
> but still i think that the fact that there are duplicate names in my.enc
> file is the real problem: if two b's refer to different shapes then what is
> the real 'b'? And what is the right new name: b.one, b.two ?

If you have two shapes for b, then you can assign glyph name 'b' only
just for one shape in final PDF. What you can do is to create CMap table
where both characters would be mapped to unicode code point for 'b'.

PDF viewers which do not use CMap would not be able to copy+paste
properly. But this is current situation as /ToUnicode is not supported
for Type3 fonts yet.

Anyway, exactly same problem is for Type 1 fonts. If you have two
different shapes for b in Type 1 font, then only one can have glyph name
'b'.

> What does one expect with cut and paste?

The expected behavior for ordinary user is simple: Both glyphs which are
marked as 'b' should be copied as character 'b'.

It can work only in PDF viewers with correct CMap support. But with
current pdftex code it is not possible.

But you are right that this is a real problem. Some calligraphic fonts
have more glyphs for one character. And decision which glyph needs to be
used is based on previous or next characters.

> If two names are the same and they refer to the
> same font program then there is no problem and the first one encountered
> when embedding should be used.
> 
> If remove duplicates is an option in pdftex then at least make sure that
> it's off by default (better complain loudly on the console that the enc is
> broken)

Do you want to be this problem a fatal error?

> so that the user knows that enabling that option is not solving the
> problem (and in tex distributions the fixed enc should be used). Heuristics
> and fixes for bugged fonts are nice but not being able
> to bypass them is bad.

I thought it would be better to produce PDF file as enc file itself does
not change how PDF file is rendered. It affects only copy+paste from PDF
file.

> (multiple .notdef is an exception)

Different, but maybe more interesting question is: What happens for
other font formats if supplied enc file contains duplicate names?

-- 
Pali RohÃ¡r
pali.rohar at gmail.com

From pragma at wxs.nl  Mon Dec 18 13:11:20 2017
From: pragma at wxs.nl (Hans Hagen)
Date: Mon, 18 Dec 2017 13:11:20 +0100
Subject: [NTG-pdftex] [PATCH v4] Allow .enc files for bitmap PK fonts
In-Reply-To: <20171218114036.wybu5xtjjux5w3da@pali>
References: <201708191602.17386@pali>
 <201712151713.vBFHDMI6023151@freefriends.org>
 <20171215181214.3uuehmhw2tqcme2w@pali>
 <6a3b2251-bb59-fc40-b6fe-9646a8883636@wxs.nl>
 <20171215202703.nbapi75ioctpxh6f@pali>
 <4ba0ba7d-da34-032a-a5f4-477c43eed7cd@wxs.nl>
 <20171218114036.wybu5xtjjux5w3da@pali>
Message-ID: <ebd09cdc-d968-ad51-5985-3ca3a5e84bde@wxs.nl>

On 12/18/2017 12:40 PM, Pali RohÃ¡r wrote:
> On Monday 18 December 2017 11:17:45 Hans Hagen wrote:
>>> It looks like that currently pdftex generates CMap from glyph names.
>>> Theoretically it should be possible to assign fully unique glyph names
>>> for every one glyph, possible fully random and then into CMap table put
>>> correct mapping for all character codes (as CMap table does not use
>>> glyph names) according to enc file.
>>
>> that would confuse some viewers too (i remember some thread about non
>> standard ffi ligature names and resolving hard coded in some viewer and the
>> request for tex related fonts to conform to that bad practice too)
> 
> First occurrence of duplicate can use originally specified glyph name
> and second, third, ... occurrences can use newly unique glyph name (with
> proper CMap table). Yes, that would not fix problem for those "some"
> viewers but in this situation it is better then nothing.

Two 'same' names in an enc file not referring to the same glyph is a 
bugged enc file. Personally I would not use such a font.

>>>>> File test.tex:
>>>>> ============
>>>>> \pdfglyphtounicode{mychar}{269}
>>>>> \pdfgentounicode=1
>>>>> \pdfmapline{cmb10 <my.enc}
>>>>> \font\cmb=cmb10
>>>>> \cmb
>>>>> a b
>>>>> \bye
>>>>> ============
>>>>>
>>>>> And result PDF file would not render glyph 'a' if function
>>>>> remove_duplicate_glyph_names() is disabled. There would be two glyphs 'b'.
>> but still i think that the fact that there are duplicate names in my.enc
>> file is the real problem: if two b's refer to different shapes then what is
>> the real 'b'? And what is the right new name: b.one, b.two ?
> 
> If you have two shapes for b, then you can assign glyph name 'b' only
> just for one shape in final PDF. What you can do is to create CMap table
> where both characters would be mapped to unicode code point for 'b'.

in that case the enc file should have dollar and dollar.oldstyle or b 
and b.smallcaps i.e. a proper name, not something arbitrary

> PDF viewers which do not use CMap would not be able to copy+paste
> properly. But this is current situation as /ToUnicode is not supported
> for Type3 fonts yet.

if one follows the adobe glyph name convention it should work ok (at 
least in acrobat, mupdf)

> Anyway, exactly same problem is for Type 1 fonts. If you have two
> different shapes for b in Type 1 font, then only one can have glyph name
> 'b'.

i've never seen a type 1 font with two 'same names' for different shapes 
... it would qualify as 'a font to avoid'

>> What does one expect with cut and paste?
> 
> The expected behavior for ordinary user is simple: Both glyphs which are
> marked as 'b' should be copied as character 'b'.
> 
> It can work only in PDF viewers with correct CMap support. But with
> current pdftex code it is not possible.

viewers can yuse the names instead

> But you are right that this is a real problem. Some calligraphic fonts
> have more glyphs for one character. And decision which glyph needs to be
> used is based on previous or next characters.

then there's something a.varianta, a.variantb, a.variantc and a cut and 
paste will use the 'a' part to identity the name, just like f_f_i is a 
convention for a ligature

>> If two names are the same and they refer to the
>> same font program then there is no problem and the first one encountered
>> when embedding should be used.
>>
>> If remove duplicates is an option in pdftex then at least make sure that
>> it's off by default (better complain loudly on the console that the enc is
>> broken)
> 
> Do you want to be this problem a fatal error?

Fatal in the sense that a viewer crashes? Sure. Then at least I know 
that the  'b' in a font is probably not a 'b'. Also, in that case it's a 
signal to avoid that font. (The same can be true for embedding fonts 
with bad font names that clash.)

FYI: I decided (in context with luatex at least) to *not* use the 
fontloader but write one on lua that stays close to the original font 
and avoids the usual heuristics ... it's hard to fight (bad or fuzzy) 
heuristics as they obscure problems.

>> so that the user knows that enabling that option is not solving the
>> problem (and in tex distributions the fixed enc should be used). Heuristics
>> and fixes for bugged fonts are nice but not being able
>> to bypass them is bad.
> 
> I thought it would be better to produce PDF file as enc file itself does
> not change how PDF file is rendered. It affects only copy+paste from PDF
> file.

But why not fix the enc file?

>> (multiple .notdef is an exception)
> 
> Different, but maybe more interesting question is: What happens for
> other font formats if supplied enc file contains duplicate names?
I can only speak for luatex: we don't use enc files for type 1 and 
opentype. And even for type 3 (which i never use) I'd avoid them. In 
fact, everything related to encodings is already dealt with when the 
font is defined (loaded), and an afm or pfb file is normally ok. Makes 
me wonder how these bad enc files can show up at all, as those type 3 
fonts are very old school and therefore the problem of duplicate names 
for different shaped should also have been seen with dvips and so.

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From pali.rohar at gmail.com  Mon Dec 18 13:37:11 2017
From: pali.rohar at gmail.com (Pali =?utf-8?B?Um9ow6Fy?=)
Date: Mon, 18 Dec 2017 13:37:11 +0100
Subject: [NTG-pdftex] [PATCH v4] Allow .enc files for bitmap PK fonts
In-Reply-To: <ebd09cdc-d968-ad51-5985-3ca3a5e84bde@wxs.nl>
References: <201708191602.17386@pali>
 <201712151713.vBFHDMI6023151@freefriends.org>
 <20171215181214.3uuehmhw2tqcme2w@pali>
 <6a3b2251-bb59-fc40-b6fe-9646a8883636@wxs.nl>
 <20171215202703.nbapi75ioctpxh6f@pali>
 <4ba0ba7d-da34-032a-a5f4-477c43eed7cd@wxs.nl>
 <20171218114036.wybu5xtjjux5w3da@pali>
 <ebd09cdc-d968-ad51-5985-3ca3a5e84bde@wxs.nl>
Message-ID: <20171218123711.c3p5ae2qygkzqikc@pali>

On Monday 18 December 2017 13:11:20 Hans Hagen wrote:
> > Anyway, exactly same problem is for Type 1 fonts. If you have two
> > different shapes for b in Type 1 font, then only one can have glyph name
> > 'b'.
> 
> i've never seen a type 1 font with two 'same names' for different shapes ...
> it would qualify as 'a font to avoid'

Yes, two 'same names' for different shapes is not something which is
supported in Type1 (and maybe it is not possible... have not looked at
specification in details).

But... I mean this: how to handle situation if you create font in which
there are two different shapes for character 'b' and you want to store
this font in Type1 format? You need to choose something like b.variant1
and b.variant2...

> > > What does one expect with cut and paste?
> > 
> > The expected behavior for ordinary user is simple: Both glyphs which are
> > marked as 'b' should be copied as character 'b'.
> > 
> > It can work only in PDF viewers with correct CMap support. But with
> > current pdftex code it is not possible.
> 
> viewers can yuse the names instead
> 
> > But you are right that this is a real problem. Some calligraphic fonts
> > have more glyphs for one character. And decision which glyph needs to be
> > used is based on previous or next characters.
> 
> then there's something a.varianta, a.variantb, a.variantc and a cut and
> paste will use the 'a' part to identity the name, just like f_f_i is a
> convention for a ligature
> 
> > > If two names are the same and they refer to the
> > > same font program then there is no problem and the first one encountered
> > > when embedding should be used.
> > > 
> > > If remove duplicates is an option in pdftex then at least make sure that
> > > it's off by default (better complain loudly on the console that the enc is
> > > broken)
> > 
> > Do you want to be this problem a fatal error?
> 
> Fatal in the sense that a viewer crashes?

I mean in context of pdftex. What should pdftex do if its gets such enc
file on input?

> Sure. Then at least I know that
> the  'b' in a font is probably not a 'b'. Also, in that case it's a signal
> to avoid that font. (The same can be true for embedding fonts with bad font
> names that clash.)
> 
> FYI: I decided (in context with luatex at least) to *not* use the fontloader
> but write one on lua that stays close to the original font and avoids the
> usual heuristics ... it's hard to fight (bad or fuzzy) heuristics as they
> obscure problems.
> 
> > > so that the user knows that enabling that option is not solving the
> > > problem (and in tex distributions the fixed enc should be used). Heuristics
> > > and fixes for bugged fonts are nice but not being able
> > > to bypass them is bad.
> > 
> > I thought it would be better to produce PDF file as enc file itself does
> > not change how PDF file is rendered. It affects only copy+paste from PDF
> > file.
> 
> But why not fix the enc file?

Yes, proper way is to fix enc file. I think we have no doubts about it.

But the whole discussion is... what should pdftex do if user puts such
buggy enc file for particular font?

> Makes me wonder how these
> bad enc files can show up at all, as those type 3 fonts are very old school
> and therefore the problem of duplicate names for different shaped should
> also have been seen with dvips and so.

Personally, I do not know how many enc files contains duplicates and
even if they are any widely used.

For pdftex patches, I specially prepared different enc files to test
that pdftex with my patches does not crash (either print fatal warning
or produce PDF) and that I always get PDF file rendered in same way as
enc files must not affect how PDF file is rendered. And I observed
problem when enc file contain one glyph name more times, therefore I
added that code which deals with duplicates.

-- 
Pali RohÃ¡r
pali.rohar at gmail.com

From pragma at wxs.nl  Mon Dec 18 15:46:13 2017
From: pragma at wxs.nl (Hans Hagen)
Date: Mon, 18 Dec 2017 15:46:13 +0100
Subject: [NTG-pdftex] [PATCH v4] Allow .enc files for bitmap PK fonts
In-Reply-To: <20171218123711.c3p5ae2qygkzqikc@pali>
References: <201708191602.17386@pali>
 <201712151713.vBFHDMI6023151@freefriends.org>
 <20171215181214.3uuehmhw2tqcme2w@pali>
 <6a3b2251-bb59-fc40-b6fe-9646a8883636@wxs.nl>
 <20171215202703.nbapi75ioctpxh6f@pali>
 <4ba0ba7d-da34-032a-a5f4-477c43eed7cd@wxs.nl>
 <20171218114036.wybu5xtjjux5w3da@pali>
 <ebd09cdc-d968-ad51-5985-3ca3a5e84bde@wxs.nl>
 <20171218123711.c3p5ae2qygkzqikc@pali>
Message-ID: <27ec061e-0f48-454c-ff51-b47a3599b8bf@wxs.nl>

On 12/18/2017 1:37 PM, Pali RohÃ¡r wrote:
> On Monday 18 December 2017 13:11:20 Hans Hagen wrote:
>>> Anyway, exactly same problem is for Type 1 fonts. If you have two
>>> different shapes for b in Type 1 font, then only one can have glyph name
>>> 'b'.
>>
>> i've never seen a type 1 font with two 'same names' for different shapes ...
>> it would qualify as 'a font to avoid'
> 
> Yes, two 'same names' for different shapes is not something which is
> supported in Type1 (and maybe it is not possible... have not looked at
> specification in details).
> 
> But... I mean this: how to handle situation if you create font in which
> there are two different shapes for character 'b' and you want to store
> this font in Type1 format? You need to choose something like b.variant1
> and b.variant2...

indeed, and given that both are named 'b' you can use that as prefix ... 
it doesn't matter what the suffix(es) are

> I mean in context of pdftex. What should pdftex do if its gets such enc
> file on input?

probably what it does now (ok, it could complain that it has two b's but 
if these two b's refer to the same type 1 font program (glyph sub) then 
it's quite ok and one can remap the second one onto the first ... but 
actually one might wonder if the front end code should be fixed i.e. who 
can guarantee that the matching tfm file is ok? Two variants in a simple 
font (t3 / 8bit type1) are quite confusing anyway.

> Yes, proper way is to fix enc file. I think we have no doubts about it.
> 
> But the whole discussion is... what should pdftex do if user puts such
> buggy enc file for particular font?

complain and quit

>> Makes me wonder how these
>> bad enc files can show up at all, as those type 3 fonts are very old school
>> and therefore the problem of duplicate names for different shaped should
>> also have been seen with dvips and so.
> 
> Personally, I do not know how many enc files contains duplicates and
> even if they are any widely used.

ok, so actually there not a problem

> For pdftex patches, I specially prepared different enc files to test
> that pdftex with my patches does not crash (either print fatal warning
> or produce PDF) and that I always get PDF file rendered in same way as
> enc files must not affect how PDF file is rendered. And I observed
> problem when enc file contain one glyph name more times, therefore I
> added that code which deals with duplicates.

well, if you apply that patch, then at least let pdftex complain very 
loud on the console and in the log that the resulting pdf is probably 
bugged (even with the patch) due to conflicts in the encoding

(i don't mind that much about a patch because i don't use pdftex so i'm 
unlikely to be a victim of such a bad font .. so in the end it's karl 
who has to agree)

Hans


-- 

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From pali.rohar at gmail.com  Mon Dec 18 15:50:57 2017
From: pali.rohar at gmail.com (Pali =?utf-8?B?Um9ow6Fy?=)
Date: Mon, 18 Dec 2017 15:50:57 +0100
Subject: [NTG-pdftex] [PATCH v4] Allow .enc files for bitmap PK fonts
In-Reply-To: <27ec061e-0f48-454c-ff51-b47a3599b8bf@wxs.nl>
References: <201708191602.17386@pali>
 <201712151713.vBFHDMI6023151@freefriends.org>
 <20171215181214.3uuehmhw2tqcme2w@pali>
 <6a3b2251-bb59-fc40-b6fe-9646a8883636@wxs.nl>
 <20171215202703.nbapi75ioctpxh6f@pali>
 <4ba0ba7d-da34-032a-a5f4-477c43eed7cd@wxs.nl>
 <20171218114036.wybu5xtjjux5w3da@pali>
 <ebd09cdc-d968-ad51-5985-3ca3a5e84bde@wxs.nl>
 <20171218123711.c3p5ae2qygkzqikc@pali>
 <27ec061e-0f48-454c-ff51-b47a3599b8bf@wxs.nl>
Message-ID: <20171218145057.rkabzh2oc7l3xlhq@pali>

On Monday 18 December 2017 15:46:13 Hans Hagen wrote:
> > For pdftex patches, I specially prepared different enc files to test
> > that pdftex with my patches does not crash (either print fatal warning
> > or produce PDF) and that I always get PDF file rendered in same way as
> > enc files must not affect how PDF file is rendered. And I observed
> > problem when enc file contain one glyph name more times, therefore I
> > added that code which deals with duplicates.
> 
> well, if you apply that patch, then at least let pdftex complain very loud
> on the console and in the log that the resulting pdf is probably bugged
> (even with the patch) due to conflicts in the encoding

In my patch is pdftex_warn() which cause warning on console. Resulting
PDF is not buggy as duplicate glyph names are replaced by "a<num>" (same
glyph name as before my patch).

> (i don't mind that much about a patch because i don't use pdftex so i'm
> unlikely to be a victim of such a bad font .. so in the end it's karl who
> has to agree)

Ok, so it is up to Karl now. Changing pdftex_warn() to fatal error is
trivial if is better to disallow usage of such broken enc files.

-- 
Pali RohÃ¡r
pali.rohar at gmail.com

From Markus.Kuhn at cl.cam.ac.uk  Mon Dec 18 16:42:15 2017
From: Markus.Kuhn at cl.cam.ac.uk (Markus Kuhn)
Date: Mon, 18 Dec 2017 15:42:15 +0000
Subject: [NTG-pdftex] Using CFF (Type 1C) instead of Type 1 fonts
Message-ID: <e69c6af8-0ac9-3d73-a74a-e2ed80bf6c07@cl.cam.ac.uk>

PDFs produced by pdftex can shrink significantly in size
when processed through ghostscript's pdfwrite driver.

I understand a main reason for that is that ghostscript
converts any Type 1 fonts that it finds into CFF (aka Type 1C)
fonts.

I also understand that

  - Type 1 fonts are eexec-encrypted, and such ciphertext cannot
    benefit from PDF's (de)flate compression.

  - CFF fonts, on the other hand, are a compacter plain-text
    format and compress well.

  - CFF fonts are also compatible with Type1, i.e. it
    is possible to convert any Type 1 font into a CFF font
    without loss of information.

Is all of this correct? If so, isn't the continued use of
Type 1 fonts in the TeX ecosystem an anachronism?

Shouldn't TeXLive ship instead CFF/Type 1C versions of the
BlueSky Computer Modern fonts and shouldn't tools like pdftex
switch to using them directly?

Has someone looked into what would be involved with a Type 1
to CFF migration for pdftex?

It seems at the moment, pdftex is actually replacing any
Type 1C glyphs that it finds in a PDF file embedded with
\pdfximage with the much less space-efficient Type 1 glyphs
that it find in its font map files.

Has there been any progress on this since:

   https://tex.stackexchange.com/questions/38145/why-does-pdflatex-produce-bigger-output-files-than-latexdvipdfm

?

Markus

-- 
Markus Kuhn, Computer Laboratory, University of Cambridge
http://www.cl.cam.ac.uk/~mgk25/ || CB3 0FD, Great Britain

From reinhard.kotucha at web.de  Tue Dec 19 00:56:56 2017
From: reinhard.kotucha at web.de (Reinhard Kotucha)
Date: Tue, 19 Dec 2017 00:56:56 +0100
Subject: [NTG-pdftex] Using CFF (Type 1C) instead of Type 1 fonts
In-Reply-To: <e69c6af8-0ac9-3d73-a74a-e2ed80bf6c07@cl.cam.ac.uk>
References: <e69c6af8-0ac9-3d73-a74a-e2ed80bf6c07@cl.cam.ac.uk>
Message-ID: <23096.21960.614256.34822@gargle.gargle.HOWL>

On 2017-12-18 at 15:42:15 +0000, Markus Kuhn wrote:

 > PDFs produced by pdftex can shrink significantly in size
 > when processed through ghostscript's pdfwrite driver.
 > 
 > I understand a main reason for that is that ghostscript
 > converts any Type 1 fonts that it finds into CFF (aka Type 1C)
 > fonts.
 > 
 > I also understand that
 > 
 >   - Type 1 fonts are eexec-encrypted, and such ciphertext cannot
 >     benefit from PDF's (de)flate compression.
 > 
 >   - CFF fonts, on the other hand, are a compacter plain-text
 >     format and compress well.
 > 
 >   - CFF fonts are also compatible with Type1, i.e. it
 >     is possible to convert any Type 1 font into a CFF font
 >     without loss of information.
 > 
 > Is all of this correct?

Hi Markus,
yes, but CFF doesn't compress plain-text.  The keywords you see in
a disassembled font are replaced by op-codes (small numbers) like

   00 version
   01 Notice
   02 FullName
   03 FamilyName
   04 Weight
   05 FontBBox

Thus a CFF font is quite compact even before it's compressed.

 > If so, isn't the continued use of Type 1 fonts in the TeX ecosystem
 > an anachronism?
 >
 > Shouldn't TeXLive ship instead CFF/Type 1C versions of the BlueSky
 > Computer Modern fonts and shouldn't tools like pdftex switch to
 > using them directly?

TeX Live just provides what people upload to CTAN.  It's not possible
to modify any packages.  Even if we could write a script which
converts all Type 1 fonts to CFF, we still have to adapt the .map
files.  But this isn't enough, see below.
 
 > Has someone looked into what would be involved with a Type 1
 > to CFF migration for pdftex?

pdftex and dvips create subsets of fonts and thus have to understand
the font format.  AFAIK they only understand Type 1 and Type 3 and
pdftex also understands TTF.  In order to support CFF, pdftex and
dvips (which fortunately share the same code for Type 1 subsetting)
must be enabled to convert Type 1 to CFF on the fly.  If such code
already exists in dvipdfm, all we need is a volunteer who does the
work.

 > It seems at the moment, pdftex is actually replacing any
 > Type 1C glyphs that it finds in a PDF file embedded with
 > \pdfximage with the much less space-efficient Type 1 glyphs
 > that it find in its font map files.

I don't think that pdftex replaces glyphs.  That would require that
pdftex understands CFF.  I assume that pdftex first determines whether
a font with the same name exists within the TEXMF tree.  If true, it
drops the embedded font and creates a common subset of the glyphs used
in the embedded file and the main document.  But the actual glyphs
come from the font found in the TEXMF tree.

Markus, I'm glad that you asked.  I'm convinced that Type 1 fonts can
be converted to CFF on the fly reliably and that many people enjoy the
smaller PDF files.  I don't see any technical restrictions.  We just
need volunteers.

Regards,
  Reinhard

-- 
------------------------------------------------------------------
Reinhard Kotucha                            Phone: +49-511-3373112
Marschnerstr. 25
D-30167 Hannover                    mailto:reinhard.kotucha at web.de
------------------------------------------------------------------

From pragma at wxs.nl  Tue Dec 19 16:13:25 2017
From: pragma at wxs.nl (Hans Hagen)
Date: Tue, 19 Dec 2017 16:13:25 +0100
Subject: [NTG-pdftex] Using CFF (Type 1C) instead of Type 1 fonts
In-Reply-To: <23096.21960.614256.34822@gargle.gargle.HOWL>
References: <e69c6af8-0ac9-3d73-a74a-e2ed80bf6c07@cl.cam.ac.uk>
 <23096.21960.614256.34822@gargle.gargle.HOWL>
Message-ID: <3682f725-f266-587a-136b-136f0c85c672@wxs.nl>

On 12/19/2017 12:56 AM, Reinhard Kotucha wrote:

> I don't think that pdftex replaces glyphs.  That would require that
> pdftex understands CFF.  I assume that pdftex first determines whether
> a font with the same name exists within the TEXMF tree.  If true, it
> drops the embedded font and creates a common subset of the glyphs used
> in the embedded file and the main document.  But the actual glyphs
> come from the font found in the TEXMF tree.
replacing/merging glyphs is tricky ... i remember seeing bugged 
presentations due to this fact (irr very old pdftex was able to do such 
things) for instance because lucida fonts were merged where the names 
were the same but the glyphs actually not (it all depends on where the 
embedded files come from) .. so, a merge would also involve checkign if 
the font programs (subrs for glyphs etc) are the same

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From pragma at wxs.nl  Tue Dec 19 16:15:30 2017
From: pragma at wxs.nl (Hans Hagen)
Date: Tue, 19 Dec 2017 16:15:30 +0100
Subject: [NTG-pdftex] Using CFF (Type 1C) instead of Type 1 fonts
In-Reply-To: <23096.21960.614256.34822@gargle.gargle.HOWL>
References: <e69c6af8-0ac9-3d73-a74a-e2ed80bf6c07@cl.cam.ac.uk>
 <23096.21960.614256.34822@gargle.gargle.HOWL>
Message-ID: <38fd26fa-409f-4701-b273-388b9e8bece4@wxs.nl>

On 12/19/2017 12:56 AM, Reinhard Kotucha wrote:

> Markus, I'm glad that you asked.  I'm convinced that Type 1 fonts can
> be converted to CFF on the fly reliably and that many people enjoy the
> smaller PDF files.  I don't see any technical restrictions.  We just
> need volunteers.
Honestly, I don't care about an already large pdf being a few hundred k 
larger ... not in these days of 100 MB flac and 2 GB mp4 files, not to 
speak of crappy pictures being megapixels. On my machine the pdf's are 
not the large files.

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From Markus.Kuhn at cl.cam.ac.uk  Tue Dec 19 16:51:50 2017
From: Markus.Kuhn at cl.cam.ac.uk (Markus Kuhn)
Date: Tue, 19 Dec 2017 15:51:50 +0000
Subject: [NTG-pdftex] Using CFF (Type 1C) instead of Type 1 fonts
In-Reply-To: <38fd26fa-409f-4701-b273-388b9e8bece4@wxs.nl>
References: <e69c6af8-0ac9-3d73-a74a-e2ed80bf6c07@cl.cam.ac.uk>
 <23096.21960.614256.34822@gargle.gargle.HOWL>
 <38fd26fa-409f-4701-b273-388b9e8bece4@wxs.nl>
Message-ID: <caed732f-5f8e-9bd7-b6d0-a8ba0fa145f1@cl.cam.ac.uk>

On 19/12/17 15:15, Hans Hagen wrote:> On 12/19/2017 12:56 AM, Reinhard Kotucha wrote:
> 
>> Markus, I'm glad that you asked.  I'm convinced that Type 1 fonts
>> can be converted to CFF on the fly reliably and that many people
>> enjoy the smaller PDF files.  I don't see any technical
>> restrictions.  We just need volunteers.
>
> Honestly, I don't care about an already large pdf being a few hundred
> k larger ... not in these days of 100 MB flac and 2 GB mp4 files, not
> to speak of crappy pictures being megapixels. On my machine the pdf's
> are not the large files.

I maintain archives of thousands of PDFs (departmental technical reports,
student project dissertations, PhD theses, etc.). Many of these files
contain exactly the same font information, and for many of these documents,
the embedded Type 1 fonts dominate the file size. Not exactly elegant.

Another point in favour of CFF is that Adobe donated in 2013 to the
FreeType project their high-quality Adobe CFF Engine hinter. That
only parses the CFF format, not Type 1. Therefore, you may get today on
many platforms (Android phones, tables, etc. all seem to use FreeType)
better hinting if the fonts are CFF encoded, rather than Type 1.

https://blog.typekit.com/2013/06/19/adobe-cff-font-rasterizer-accepted-by-freetype/
https://opensource.googleblog.com/2013/06/youve-got-cff.html
https://opensource.googleblog.com/2013/05/got-cff.html
https://sourceforge.net/projects/freetype/files/freetype2/2.4.12/

I guess, the first step towards encouraging better Type 1C
font support in the TeX ecosystem would be to get CFF/Type 1C
versions of e.g. the BaKoMa font files onto CTAN.

(I'd prefer the font files to be distributed and loaded in CFF,
rather than having them converted on the fly from an anachronistic and
uselessly encrypted format each time. In other words: best eradicate
Type 1 at the start of the processing pipeline.)

Markus

-- 
Markus Kuhn, Computer Laboratory, University of Cambridge
http://www.cl.cam.ac.uk/~mgk25/ || CB3 0FD, Great Britain

From karl at freefriends.org  Tue Dec 19 23:29:07 2017
From: karl at freefriends.org (Karl Berry)
Date: Tue, 19 Dec 2017 22:29:07 GMT
Subject: [NTG-pdftex] Using CFF (Type 1C) instead of Type 1 fonts
In-Reply-To: <caed732f-5f8e-9bd7-b6d0-a8ba0fa145f1@cl.cam.ac.uk>
Message-ID: <201712192229.vBJMT7sJ024328@freefriends.org>

FWIW, I have nothing against CFF support in pdftex, but it's not
something I can take on implementing myself.

As for getting official CFF versions of the CM fonts, you'd have to talk
to the AMS about that. I am doubtful it is something they would want to
spend company time on, but maybe they would give their blessing for some
other competent person to produce a CFF version. Maybe just running the
fonts through fontforge is enough; I don't know.

Although of course anyone can make CFF versions without anyone else's
permission, I would be loath to change the CM fonts (in TeX Live) used
in most TeX-produced documents without agreement by the AMS.

--best, karl.

