From pali.rohar at gmail.com  Wed May 17 16:40:34 2017
From: pali.rohar at gmail.com (Pali =?utf-8?B?Um9ow6Fy?=)
Date: Wed, 17 May 2017 16:40:34 +0200
Subject: [NTG-pdftex] [PATCH] pdftex - Add new \pdfpkscalable primitive
In-Reply-To: <20170420125842.GL18887@pali>
References: <201704142318.v3ENIiXW003111@freefriends.org>
 <201704150549.24070@pali> <20170420125842.GL18887@pali>
Message-ID: <20170517144034.GI10015@pali>

On Thursday 20 April 2017 14:58:42 Pali RohÃ¡r wrote:
> On Saturday 15 April 2017 05:49:23 Pali RohÃ¡r wrote:
> > On Saturday 15 April 2017 01:18:44 Karl Berry wrote:
> > > I'm sorry, but I am not comfortable with releasing these changes for
> > > the Type 3 fonts + encoding + Unicode.  I realize the features now
> > > work in your cases, but I feel much more testing and understanding
> > > is needed, before inflicting changes to these low-level routines on
> > > the world. I can't undertake this for TL17.
> > > 
> > > The proximate cause is that, in some further testing, I discovered a
> > > case that crashed for me now, but did not crash before:
> > > \pdfmapline{<}
> > 
> > That is because in mapfile.c check_fm_entry() is missing check if 
> > tfm_name is not NULL.
> > 
> > Such thing is possible to hit also without my patches... And is not 
> > related to my patches.
> > 
> > Try:
> > 
> > \pdfmapline{<test.pfb}
> > 
> > and even on old TeX Live 2012 it crashed too:
> > 
> > ../../../texk/web2c/pdftexdir/subfont.c:181: handle_subfont_fm: 
> > Assertion `fm->tfm_name != ((void *)0)' failed.
> > 
> > So it is there for a long time.
> > 
> > > Also, it's unclear to when the new warning
> > >   "invalid entry for `%s': encoding file for type3 missing"
> > > is intended to be given. I could not find any input that caused it.
> > 
> > That was added by Akira.
> > 
> > > I'm sure that it would not be hard to remedy these particular things,
> > > one way or another, but the general principle remains -- I'm simply
> > > too uneasy to release these changes, which have grown and grown. As
> > > I said before, the primary criterion for pdftex nowadays must be
> > > stability.
> > > 
> > > Unfortunately, in that testing, I also discovered other erroneous
> > > mapline cases that were already unhandled (before your patches). I
> > > know I have not found them all yet. Sigh.
> > > 
> > > If Thanh or Martin wants to include these changes in the upcoming
> > > release, and can help with testing/code review, then that is
> > > fine. Otherwise, it will have to wait for another time.
> > > 
> > > For the present, I have reverted the changes in the TL repository.
> > > (Hopefully correctly.)
> > > 
> > > At least you have written the code now, so can compile your own
> > > pdftex and use it for your own work ... --sorry, karl.
> > 
> > So what is needed for inclusion? More testing?
> > 
> > And do we have a case where pdftex behave incorrect (or crash) which is 
> > related to those toUnicode patches for PK fonts? Because I have not 
> > found any problem in current code yet and above crash (which you found) 
> > is there for a long time.
> > 
> > Do you want a fix for above crash?
> 
> Just to note that I sent patch for PK encfile support in Aug 2016...
> So still I would like to hear what is the problem with last version and
> how can I fix it or improve if needed.
> 
> And question about pdftex crash when tfmfile is not specified still
> remind: Should I look at it and propose fix?

PING.

-- 
Pali RohÃ¡r
pali.rohar at gmail.com

From karl at freefriends.org  Wed May 17 23:49:36 2017
From: karl at freefriends.org (Karl Berry)
Date: Wed, 17 May 2017 21:49:36 GMT
Subject: [NTG-pdftex] [PATCH] pdftex - Add new \pdfpkscalable primitive
In-Reply-To: <20170517144034.GI10015@pali>
Message-ID: <201705172149.v4HLna4r007868@freefriends.org>

Pali - I regretfully backed out the new feature long ago, as I said. 
I cannot contemplate this further for TL17. Sorry.

I did my best to fix possible crashes in cases of pathological input in
the current code (in the TL repository for now). --best, karl.


From pali.rohar at gmail.com  Mon May 29 13:18:55 2017
From: pali.rohar at gmail.com (Pali =?utf-8?B?Um9ow6Fy?=)
Date: Mon, 29 May 2017 13:18:55 +0200
Subject: [NTG-pdftex] [PATCH] pdftex - Add new \pdfpkscalable primitive
In-Reply-To: <201705172149.v4HLna4r007868@freefriends.org>
References: <20170517144034.GI10015@pali>
 <201705172149.v4HLna4r007868@freefriends.org>
Message-ID: <20170529111855.GF6102@pali>

On Wednesday 17 May 2017 21:49:36 Karl Berry wrote:
> Pali - I regretfully backed out the new feature long ago, as I said. 
> I cannot contemplate this further for TL17. Sorry.

Ok, then for next year release? One year of testing should be enough.

> I did my best to fix possible crashes in cases of pathological input in
> the current code (in the TL repository for now). --best, karl.

Ok.

-- 
Pali RohÃ¡r
pali.rohar at gmail.com

From karl at freefriends.org  Mon May 29 23:38:28 2017
From: karl at freefriends.org (Karl Berry)
Date: Mon, 29 May 2017 21:38:28 GMT
Subject: [NTG-pdftex] [PATCH] pdftex - Add new \pdfpkscalable primitive
In-Reply-To: <20170529111855.GF6102@pali>
Message-ID: <201705292138.v4TLcSWH031962@freefriends.org>

    Ok, then for next year release? 
    
I suppose. I need to ask you to redo your patch against the current
source (still only in TeX Live for now), with ChangeLog entries.

It would also greatly help me if you provided as-simple-as-possible
source files, along the lines of what is in pdftex/tests/*, exhibiting
the intended changes in behavior. Because that's what I need to
be confident in the changes.

Not as critical, but still quite helpful, would be a draft patch for the
manual. --best, karl.


From ross.moore at mq.edu.au  Tue May 30 08:03:04 2017
From: ross.moore at mq.edu.au (Ross Moore)
Date: Tue, 30 May 2017 06:03:04 +0000
Subject: [NTG-pdftex] Error with \pdfglyphtounicode when surrogates are
	involved.
Message-ID: <A4E43104-C2E4-4F34-A940-7C0B98D0D3BE@mq.edu.au>

Hi all.

Iâve just discovered a problem with  \pdfglyphtounicode
when you are trying to map a character to a  Plane-1  code-point.

Here is a minimal working example that shows the issue.

%%%%%  cut here for test file %%%%%%
\pdfcompresslevel=0
\pdfgentounicode=1
\input glyphtounicode.tex
\pdfglyphtounicode{Z}{D835DC81}   % MATH bold-italic-Z U+1D481 (U+D835 U+DC81)

Z $Z$

\bye

%%%%%  end cut here for test file %%%%%%

Using:
 This is pdfTeX, Version 3.14159265-2.6-1.40.18 (TeX Live 2017) (preloaded format=pdftex)

The two fonts both get a bad entry in their  /ToUnicode  CMap  resource.
viz.

<5A> <36E537DC81>

instead of the intended:

<5A> <D835DC81>


The Hex string <36E537DC81>  is not just wrong it is actually invalid for a CMap entry,
which is supposed to have a multiple of 4 Hex digits, not 10 of them.

A cut&paste of the `Z`s in the PDF output produces chinese glyphs,
which is usually a sign that some UTF-8 sequence has got screwed up.



Of course I donât really want to map all `Z`s into Plane-1.
This is just an easy way to illustrate the problem that I discovered
when trying to support proper Cut/Paste of exotic characters in
 LinLibertine & LinBiolinum  fonts.



Cheers

Ross


Dr Ross Moore
Mathematics Dept | 12 Wallyâs Walk, 734
Macquarie University, NSW 2109, Australia
T: +61 2 9850 8955  |  F: +61 2 9850 8114
M:+61 407 288 255  |  E: ross.moore at mq.edu.au<mailto:ross.moore at mq.edu.au>

http://www.maths.mq.edu.au


[cid:image001.png at 01D030BE.D37A46F0]<http://mq.edu.au/>


CRICOS Provider Number 00002J. Think before you print.
Please consider the environment before printing this email.

This message is intended for the addressee named and may
contain confidential information. If you are not the intended
recipient, please delete it and notify the sender. Views expressed
in this message are those of the individual sender, and are not
necessarily the views of Macquarie University.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/ntg-pdftex/attachments/20170530/dd029a0c/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image001.png
Type: image/png
Size: 4605 bytes
Desc: image001.png
URL: <http://mailman.ntg.nl/pipermail/ntg-pdftex/attachments/20170530/dd029a0c/attachment.png>

From kakuto at fuk.kindai.ac.jp  Tue May 30 11:39:14 2017
From: kakuto at fuk.kindai.ac.jp (Akira Kakuto)
Date: Tue, 30 May 2017 18:39:14 +0900
Subject: [NTG-pdftex] Error with \pdfglyphtounicode when surrogates
	areinvolved.
In-Reply-To: <A4E43104-C2E4-4F34-A940-7C0B98D0D3BE@mq.edu.au>
References: <A4E43104-C2E4-4F34-A940-7C0B98D0D3BE@mq.edu.au>
Message-ID: <CF16E3B9FA4549DBAAC9917F035DC492@CJ3001517A>

> Here is a minimal working example that shows the issue.

In the original test.tex, I encountered an assertion error
in tounicode.c. If I change as

\pdfcompresslevel=0
\pdfgentounicode=1
\input glyphtounicode.tex
\pdfglyphtounicode{Z}{1D481}   % MATH bold-italic-Z U+1D481 (U+D835 U+DC81)

Z $Z$

\bye

I obtained an attached test.pdf, in which I can find two strings
<5A> <D835DC81>.

Best,
Akira
-------------- next part --------------
A non-text attachment was scrubbed...
Name: test.pdf
Type: application/pdf
Size: 20604 bytes
Desc: not available
URL: <http://mailman.ntg.nl/pipermail/ntg-pdftex/attachments/20170530/204eaaec/attachment-0001.pdf>

From kakuto at fuk.kindai.ac.jp  Tue May 30 12:30:58 2017
From: kakuto at fuk.kindai.ac.jp (Akira Kakuto)
Date: Tue, 30 May 2017 19:30:58 +0900
Subject: [NTG-pdftex] Error with \pdfglyphtounicode when surrogates
	areinvolved.
In-Reply-To: <A4E43104-C2E4-4F34-A940-7C0B98D0D3BE@mq.edu.au>
References: <A4E43104-C2E4-4F34-A940-7C0B98D0D3BE@mq.edu.au>
Message-ID: <9AF07B992F7142E18659769105B37F13@CJ3001517A>

> In the original test.tex, I encountered an assertion error
> in tounicode.c.

That is assert(code >= 0);.

Probably your "long" is 64bit.  My "long" is 32bit.
I think the type of code should be changed as
int32_t instead of long.

Best,
Akira


From ross.moore at mq.edu.au  Tue May 30 22:30:44 2017
From: ross.moore at mq.edu.au (Ross Moore)
Date: Tue, 30 May 2017 20:30:44 +0000
Subject: [NTG-pdftex] Error with \pdfglyphtounicode when surrogates
 areinvolved.
In-Reply-To: <CF16E3B9FA4549DBAAC9917F035DC492@CJ3001517A>
References: <A4E43104-C2E4-4F34-A940-7C0B98D0D3BE@mq.edu.au>,
 <CF16E3B9FA4549DBAAC9917F035DC492@CJ3001517A>
Message-ID: <59FDFA14-A1AB-4032-B278-541481F03C6D@mq.edu.au>

Hi Akira,

On 30/05/2017, at 19:39, "Akira Kakuto" <kakuto at fuk.kindai.ac.jp> wrote:

>> Here is a minimal working example that shows the issue.
> 
> In the original test.tex, I encountered an assertion error
> in tounicode.c. If I change as
> 
> \pdfcompresslevel=0
> \pdfgentounicode=1
> \input glyphtounicode.tex
> \pdfglyphtounicode{Z}{1D481}   % MATH bold-italic-Z U+1D481 (U+D835 U+DC81)

Yes, I discovered that this works, shortly after posting.
But it doesn't explain why what should be valid input is changed to something invalid.
And what should happen with longer strings?

For example this works fine:

\pdfglyphtounicode{t_t}{00770077}  % break ligature into separate letters

as does adding multiple combining accents (e.g.  0300 etc.) after the Hex for other characters.
But what if it was required to map into multiple higher-plane glyphs?

Is the only documentation on this by reading the source file?    tounicode.c  

> 
> Z $Z$
> 
> \bye
> 
> I obtained an attached test.pdf, in which I can find two strings
> <5A> <D835DC81>.
> 
> Best,
> Akira
> <test.pdf>


Cheers,

      Ross

From karl at freefriends.org  Tue May 30 23:19:29 2017
From: karl at freefriends.org (Karl Berry)
Date: Tue, 30 May 2017 21:19:29 GMT
Subject: [NTG-pdftex] Error with \pdfglyphtounicode when surrogates
 areinvolved.
In-Reply-To: <59FDFA14-A1AB-4032-B278-541481F03C6D@mq.edu.au>
Message-ID: <201705302119.v4ULJTsM006753@freefriends.org>

    Is the only documentation on this by reading the source file?
    tounicode.c

As far as I know yes. -k

From karl at freefriends.org  Wed May 31 00:10:18 2017
From: karl at freefriends.org (Karl Berry)
Date: Tue, 30 May 2017 22:10:18 GMT
Subject: [NTG-pdftex] Error with \pdfglyphtounicode when surrogates
	are	involved.
In-Reply-To: <A4E43104-C2E4-4F34-A940-7C0B98D0D3BE@mq.edu.au>
Message-ID: <201705302210.v4UMAIJb012048@freefriends.org>

Hi Ross,

    \pdfglyphtounicode{Z}{D835DC81}   % MATH bold-italic-Z U+1D481 (U+D835 U+DC81)
    Z $Z$
    ...
    viz.
    <5A> <36E537DC81>
    instead of the intended:
    <5A> <D835DC81>

Call me stupid, but I don't understand why the glyphtounicode value
does not apply to the text `Z' as well as the math `Z'. The glyph name
in cmr10 is /Z just as in cmmi10. Can you, or anyone, elucidate?

(I realize you're reporting a separate bug, that the value gets
misinterpreted.) --thanks, karl.

From ross.moore at mq.edu.au  Wed May 31 05:28:45 2017
From: ross.moore at mq.edu.au (Ross Moore)
Date: Wed, 31 May 2017 03:28:45 +0000
Subject: [NTG-pdftex] Error with \pdfglyphtounicode when surrogates
 areinvolved.
In-Reply-To: <201705302119.v4ULJTsM006753@freefriends.org>
References: <201705302119.v4ULJTsM006753@freefriends.org>
Message-ID: <F03DF214-92F5-45BD-91F5-082EE1A96D10@mq.edu.au>

Hi Karl, Akira and others.

On May 31, 2017, at 7:19 AM, Karl Berry <karl at freefriends.org<mailto:karl at freefriends.org>> wrote:

   Is the only documentation on this by reading the source file?
   tounicode.c

As far as I know yes. -k

OK.
Reading it led me to try with spaces separating the groups of 4 Hex digits.

  \pdfglyphtounicode{Z}{D835 DC81}% MATH bold-italic-Z U+1D481 (U+D835 U+DC81)

This worked!

So it really was just an instance of needing some documentation
to tell what is the supported syntax.


Cheers

Ross


Dr Ross Moore
Mathematics Dept | 12 Wallyâs Walk, 734
Macquarie University, NSW 2109, Australia
T: +61 2 9850 8955  |  F: +61 2 9850 8114
M:+61 407 288 255  |  E: ross.moore at mq.edu.au<mailto:ross.moore at mq.edu.au>

http://www.maths.mq.edu.au


[cid:image001.png at 01D030BE.D37A46F0]<http://mq.edu.au/>


CRICOS Provider Number 00002J. Think before you print.
Please consider the environment before printing this email.

This message is intended for the addressee named and may
contain confidential information. If you are not the intended
recipient, please delete it and notify the sender. Views expressed
in this message are those of the individual sender, and are not
necessarily the views of Macquarie University.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/ntg-pdftex/attachments/20170531/0612f0cf/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image001.png
Type: image/png
Size: 4605 bytes
Desc: image001.png
URL: <http://mailman.ntg.nl/pipermail/ntg-pdftex/attachments/20170531/0612f0cf/attachment-0001.png>

From kakuto at fuk.kindai.ac.jp  Wed May 31 06:59:18 2017
From: kakuto at fuk.kindai.ac.jp (Akira Kakuto)
Date: Wed, 31 May 2017 13:59:18 +0900
Subject: [NTG-pdftex] Error with \pdfglyphtounicode when
	surrogatesare	involved.
In-Reply-To: <201705302210.v4UMAIJb012048@freefriends.org>
References: <201705302210.v4UMAIJb012048@freefriends.org>
Message-ID: <F9D25DED5A3B454586BF331B4BA0A69B@CJ3001517A>

Hi Karl,

> I realize you're reporting a separate bug, that the value gets
> misinterpreted

>> \pdfglyphtounicode{Z}{D835DC81}
>>
>> <5A> <36E537DC81>

I confirmed that Ross's
\pdfglyphtounicode{Z}{D835 DC81}
with a space works ok.

In the case of
\pdfglyphtounicode{Z}{D835DC81}
I encountered an assertion error because
long code = 0XD835DC81 < 0 in my case, where
sizeof(long) = 4.

Ross obtained erroneously vh = 0X36E537, vl = 0XDC81
because long code = 0XD835DC81 > 0, if sizeof(long) = 8.

Is assert(code >= 0 && code <= 0X10FFFF) OK or not OK?


(from tounicode.c)
static char *utf16be_str(long code)
{
    static char buf[SMALL_BUF_SIZE];
    long v;
    unsigned vh, vl;

    assert(code >= 0);

    if (code <= 0xFFFF)
        sprintf(buf, "%04lX", code);
    else {
        v = code - 0x10000;
        vh = v / 0x400 + 0xD800;
        vl = v % 0x400 + 0xDC00;
        sprintf(buf, "%04X%04X", vh, vl);
    }
    return buf;
}

Best,
Akira


From ross.moore at mq.edu.au  Wed May 31 10:03:37 2017
From: ross.moore at mq.edu.au (Ross Moore)
Date: Wed, 31 May 2017 08:03:37 +0000
Subject: [NTG-pdftex] Error with \pdfglyphtounicode when
	surrogatesare	involved.
In-Reply-To: <F9D25DED5A3B454586BF331B4BA0A69B@CJ3001517A>
References: <201705302210.v4UMAIJb012048@freefriends.org>
 <F9D25DED5A3B454586BF331B4BA0A69B@CJ3001517A>
Message-ID: <6ED4B0C3-EF2A-4A6F-A77D-5F59BAD79EA0@mq.edu.au>

Hi Akira,

On May 31, 2017, at 2:59 PM, Akira Kakuto <kakuto at fuk.kindai.ac.jp<mailto:kakuto at fuk.kindai.ac.jp>> wrote:

Hi Karl,

I realize you're reporting a separate bug, that the value gets
misinterpreted

\pdfglyphtounicode{Z}{D835DC81}

<5A> <36E537DC81>

I confirmed that Ross's
\pdfglyphtounicode{Z}{D835 DC81}
with a space works ok.

In the case of
\pdfglyphtounicode{Z}{D835DC81}
I encountered an assertion error because
long code = 0XD835DC81 < 0 in my case, where
sizeof(long) = 4.

Ross obtained erroneously vh = 0X36E537, vl = 0XDC81
because long code = 0XD835DC81 > 0, if sizeof(long) = 8.

Is assert(code >= 0 && code <= 0X10FFFF) OK or not OK?

I'm thinking this is OK, *provided* spaces are used to separate the codes,
when multiple glyphs are required.

Otherwise there should be just a single Unicode point, and the
allowable range for this is    <= 0X10FFFF  .
Indeed the top end of this  ( 0X100000 upwards ) is for âPrivate Useâ only.


My understanding of these pieces of code:

    for (i = 0; i < l; i++) {
        if (p[i] == ' ')
            valid_unistr = 2;   /* if a space occurs we treat this entry as a string */


    if (valid_unistr == 2) {    /* a string with space(s) */
        /* copy p to buf2, ignoring spaces */
        for (q = buf2; *p != 0; p++)
            if (*p != ' ')
                *q++ = *p;
        *q = 0;
        gu->code = UNI_STRING;
        gu->unicode_seq = xstrdup(buf2);

  â¦ is that blocks of 4-6 hex digits are just copied verbatim, without calling   check_unicode_value
so that  assert  is never actually encountered.

Do you agree with this interpretation?



(from tounicode.c)
static char *utf16be_str(long code)
{
  static char buf[SMALL_BUF_SIZE];
  long v;
  unsigned vh, vl;

  assert(code >= 0);

  if (code <= 0xFFFF)
      sprintf(buf, "%04lX", code);
  else {
      v = code - 0x10000;
      vh = v / 0x400 + 0xD800;
      vl = v % 0x400 + 0xDC00;
      sprintf(buf, "%04X%04X", vh, vl);
  }
  return buf;
}

Best,
Akira


Cheers,

Ross


Dr Ross Moore
Mathematics Dept | 12 Wallyâs Walk, 734
Macquarie University, NSW 2109, Australia
T: +61 2 9850 8955  |  F: +61 2 9850 8114
M:+61 407 288 255  |  E: ross.moore at mq.edu.au<mailto:ross.moore at mq.edu.au>

http://www.maths.mq.edu.au


[cid:image001.png at 01D030BE.D37A46F0]<http://mq.edu.au/>


CRICOS Provider Number 00002J. Think before you print.
Please consider the environment before printing this email.

This message is intended for the addressee named and may
contain confidential information. If you are not the intended
recipient, please delete it and notify the sender. Views expressed
in this message are those of the individual sender, and are not
necessarily the views of Macquarie University.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mailman.ntg.nl/pipermail/ntg-pdftex/attachments/20170531/ca3a29f3/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image001.png
Type: image/png
Size: 4605 bytes
Desc: image001.png
URL: <http://mailman.ntg.nl/pipermail/ntg-pdftex/attachments/20170531/ca3a29f3/attachment.png>

From kakuto at fuk.kindai.ac.jp  Wed May 31 10:26:59 2017
From: kakuto at fuk.kindai.ac.jp (Akira Kakuto)
Date: Wed, 31 May 2017 17:26:59 +0900
Subject: [NTG-pdftex] Error with \pdfglyphtounicode when
	surrogatesareinvolved.
In-Reply-To: <6ED4B0C3-EF2A-4A6F-A77D-5F59BAD79EA0@mq.edu.au>
References: <201705302210.v4UMAIJb012048@freefriends.org>
 <F9D25DED5A3B454586BF331B4BA0A69B@CJ3001517A>
 <6ED4B0C3-EF2A-4A6F-A77D-5F59BAD79EA0@mq.edu.au>
Message-ID: <0496405FE8544691BD9C3D79F66FCF43@CJ3001517A>

Dear Ross,

> Do you agree with this interpretation?

I agree with your interpretation.
Karl or I will rewrite the assert() for a failsafe
after the release of TeX Live 2017.

Best,
Akira


