From vvv at vsu.ru  Fri Jun  1 04:16:59 2007
From: vvv at vsu.ru (Vladimir Volovich)
Date: Thu, 31 May 2007 19:16:59 -0700
Subject: [NTG-pdftex] different rendering of pdftex-generated document in
	AR4 and AR7
Message-ID: <874plss9k4.fsf@external.prs-office.com>

A non-text attachment was scrubbed...
Name: acro4.png
Type: image/png
Size: 2527 bytes
Desc: not available
Url : http://www.ntg.nl/pipermail/ntg-pdftex/attachments/20070531/9b328540/attachment.png 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: acro7.png
Type: image/png
Size: 3136 bytes
Desc: not available
Url : http://www.ntg.nl/pipermail/ntg-pdftex/attachments/20070531/9b328540/attachment-0001.png 

From hanthethanh at gmail.com  Fri Jun  1 07:55:24 2007
From: hanthethanh at gmail.com (Thanh Han The)
Date: Fri, 1 Jun 2007 07:55:24 +0200
Subject: [NTG-pdftex] different rendering of pdftex-generated document
	in AR4 and AR7
Message-ID: <74f506dc0705312255n4dfefd21k3a210054b1323626@mail.gmail.com>

Hi Vladimir,

this was discussed here:
http://www.ntg.nl/pipermail/ntg-pdftex/2007-February/002756.html

this is indeed a bug of Acrobat Reader from the very
beginning and remained there at least until versionn 4.05.
Older pdftex had a workaround for this bug, which was
removed in later versions as well (since 1.40 IIRC).

If you run your test file with an old pdftex, for example
0.14h, the pdf displays correctly with AR4 as well.


HTH,
Thanh


On Thu, May 31, 2007 at 07:16:59PM -0700, Vladimir Volovich wrote:
> Hi!
>
> i'm reporting a problem (found not by me). consider this document:
>
> =====================================
> \documentclass{article}
> \usepackage{color}
> \begin{document}
>
> \makebox[2cm][r]{c}\hspace{-2cm}ab
>
> \makebox[2cm][r]{c}\hspace{-2cm}a\textcolor{red}{b}
>
> \end{document}
> =====================================
>
> when processed with pdflatex, the generated PDF file is rendered
> differently by Acrobat Reader 4 and 7 - see the attached files
> acro4.png and acro7.png.
>
> Acrobat 4's rendering seems to be buggy, but i wonder whether it is a
> real bug in Acrobat 4 or it is caused by a buggy PDF generated by pdftex?
>
> Best,
> v.



> _______________________________________________
> ntg-pdftex mailing list
> ntg-pdftex at ntg.nl
> http://www.ntg.nl/mailman/listinfo/ntg-pdftex

From oberdiek at uni-freiburg.de  Fri Jun  1 08:46:26 2007
From: oberdiek at uni-freiburg.de (Heiko Oberdiek)
Date: Fri, 1 Jun 2007 08:46:26 +0200
Subject: [NTG-pdftex] different rendering of pdftex-generated document
	in AR4 and AR7
In-Reply-To: <874plss9k4.fsf@external.prs-office.com>
References: <874plss9k4.fsf@external.prs-office.com>
Message-ID: <20070601064625.GA8631@irwin.vpn.uni-freiburg.de>

On Thu, May 31, 2007 at 07:16:59PM -0700, Vladimir Volovich wrote:

> i'm reporting a problem (found not by me). consider this document:
> 
> =====================================
> \documentclass{article}
> \usepackage{color}
> \begin{document}
> 
> \makebox[2cm][r]{c}\hspace{-2cm}ab
> 
> \makebox[2cm][r]{c}\hspace{-2cm}a\textcolor{red}{b}
> 
> \end{document}
> =====================================
> 
> when processed with pdflatex, the generated PDF file is rendered
> differently by Acrobat Reader 4 and 7 - see the attached files
> acro4.png and acro7.png.
> 
> Acrobat 4's rendering seems to be buggy, but i wonder whether it is a
> real bug in Acrobat 4 or it is caused by a buggy PDF generated by pdftex?

It's a bug in AR4. See thread `problem of acrobat reader 4.0 or pdftex?'
in mailing list `ntg-pdftex' in February 2007.

pdftex.def now writes the color directly without ending
text blocks and positioning -> "\pdfliteral direct{}" instead
of "\pdfliteral{}". Thus the page streams are smaller.
The outcome of the thread was that nowadays the people should
rather update their AR.

You can drop the keyword "direct" by:

\documentclass{article}
\usepackage{color}
\makeatletter
\chardef\main at pdfcolorstack=\pdfcolorstackinit page{0 g 0 G}\relax
\makeatother

"page" doesn't not have same meaning of \pdfliteral's keyword,
only the behaviour of "\pdfliteral{}" and "\pdfliteral direct{}"
are available for the color stack. I have suggested a new
keyword `directpage' for \pdfcolorstackinit to get the
behaviour of "\pdfliteral page{}" in the thread, but an answer
of the pdfTeX maintainers is still missing.

Yours sincerely
  Heiko <oberdiek at uni-freiburg.de>
-- 

From noreply at sarovar.org  Sat Jun  9 16:03:20 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Sat, 09 Jun 2007 19:33:20 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-806 ] no file extentions
Message-ID: <E1Hx1XE-00061x-00@sarovar.org>

Bugs item #806, was opened at 2007-06-09 10:03
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=806&group_id=106

Category: None
Group: None
Status: Open
Resolution: None
Priority: 5
Submitted By: Tristan Blach-Lafl?che (the_fleche)
Assigned to: Nobody (None)
Summary: no file extentions

Initial Comment:
After downloading "pdftex-1.40.3.zip", most of the
folder's files did not have any extentions.
How is that possible?

the_fleche-->

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=806&group_id=106

From noreply at sarovar.org  Sat Jun  9 17:30:47 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Sat, 09 Jun 2007 21:00:47 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-806 ] no file extentions
Message-ID: <E1Hx2tr-0001y0-00@sarovar.org>

Bugs item #806, was opened at 2007-06-09 16:03
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=806&group_id=106

Category: None
>Group: v1.40.3
>Status: Closed
>Resolution: Invalid
Priority: 5
Submitted By: Tristan Blach-Lafl?che (the_fleche)
Assigned to: Nobody (None)
Summary: no file extentions

Initial Comment:
After downloading "pdftex-1.40.3.zip", most of the
folder's files did not have any extentions.
How is that possible?

the_fleche-->

----------------------------------------------------------------------

>Comment By: Martin Schr?der (oneiros)
Date: 2007-06-09 17:30

Message:
Logged In: YES 
user_id=421

Please read the files README and INSTALL. You got the
sources of pdftex, no executables.

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=806&group_id=106

From vvv at vsu.ru  Mon Jun 11 10:36:17 2007
From: vvv at vsu.ru (Vladimir Volovich)
Date: Mon, 11 Jun 2007 01:36:17 -0700
Subject: [NTG-pdftex] possible bug in eTeX related to \savinghyphcodes
Message-ID: <87tztec2gu.fsf@external.prs-office.com>

Hi!

it seems there might me a bug in eTeX related to \savinghyphcodes.

consider the following file, init.tex:

=======================
\input plain

\begingroup
\language=1
\patterns{a1}
\endgroup

\begingroup
\language=2
\savinghyphcodes=1
\lccode`\a=`\A
\lccode`\A=`\A
\patterns{a1}
\endgroup

\dump
=======================

generate a format file with it:

pdftex -ini -etex init.tex

now, run the following:

pdftex \&init test.tex 

where test.tex is:

=======================
%\tracingall

\hsize=1sp

\language1

\noindent
a bbbabbbabbbabbb bbbabbbabbbabbb
{\language=2 bbbabbb}.
bbbabbbabbbabbb bbbabbbabbbabbb

\noindent
a bbbabbbabbbabbb bbbabbbabbbabbb
{\language=2 bbbabbb}
bbbabbbabbbabbb bbbabbbabbbabbb

\bye
=======================

there are two paragraphs in the text, the only difference is that the
first one has a period after a group.

in the first paragraph, however, eTeX does not find any hyphenation
points after the group, but it does find them in the second paragraph
where there is no dot.

this behavior looks like a bug. in particular, when i try to use the
\savinghyphcodes feature, i get no hyphenation in the rest of a
paragraph after temporarily switching to some language for which there
was a \savinghyphcodes. i don't know why it is triggered by the
presence of a period, - i just noticed that in the absense of a period
(or maybe any other non-space character) the bug disappears; but if
the group is followed by a non-space character such as a period, the
bug is present.

Best,
v.


From noreply at sarovar.org  Wed Jun 20 11:51:30 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Wed, 20 Jun 2007 15:21:30 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-809 ] Incorrect FontFlags for Symbol
	font (34 instead of 4)
Message-ID: <E1I0wqY-0005oQ-00@sarovar.org>

Bugs item #809, was opened at 2007-06-20 09:51
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=809&group_id=106

Category: None
Group: None
Status: Open
Resolution: None
Priority: 5
Submitted By: Till Tantau (tantau)
Assigned to: Nobody (None)
Summary: Incorrect FontFlags for Symbol font (34 instead of 4)

Initial Comment:
Hi!

with version 1.40.3 of pdftex I have the following problem: When the 
standard PDF-Font "Symbol" is used in the pdf-file, then the /Flags 
entry of the FontDescriptor is set to 34 rather than to 4.

This is incorrect and causes the resulting files to be displayed 
incorrectly by the Acrobat Reader.

To reproduce the problem, I use the following LaTeX-code:


\documentclass{article}

\pdfcompresslevel0
\font\myfont=psyr\relax

\begin{document}

\pagestyle{empty}
\myfont SG

\end{document}


My pdftex.map is standard and contains the following line:

psyr Symbol


According to the pdftex manual, this should cause the /Flags entry of 
the font in the PDF-file to be set to 4 (which would be correct and 
which would be the Flags value of a Symbol font). However, on my 
system the resulting pdf file (which I attach) contains a /Flags entry of 
34 (which is incorrect here and which is the Flags value of a serif 
standard font).


I hope this report is reasonably clear...


Any help on this would be greatly appreciated,
Till Tantau


----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=809&group_id=106

From noreply at sarovar.org  Wed Jun 20 12:00:45 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Wed, 20 Jun 2007 15:30:45 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-809 ] Incorrect FontFlags for Symbol
	font (34 instead of 4)
Message-ID: <E1I0wzV-0007D7-00@sarovar.org>

Bugs item #809, was opened at 2007-06-20 09:51
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=809&group_id=106

Category: None
Group: None
Status: Open
Resolution: None
Priority: 5
Submitted By: Till Tantau (tantau)
Assigned to: Nobody (None)
Summary: Incorrect FontFlags for Symbol font (34 instead of 4)

Initial Comment:
Hi!

with version 1.40.3 of pdftex I have the following problem: When the 
standard PDF-Font "Symbol" is used in the pdf-file, then the /Flags 
entry of the FontDescriptor is set to 34 rather than to 4.

This is incorrect and causes the resulting files to be displayed 
incorrectly by the Acrobat Reader.

To reproduce the problem, I use the following LaTeX-code:


\documentclass{article}

\pdfcompresslevel0
\font\myfont=psyr\relax

\begin{document}

\pagestyle{empty}
\myfont SG

\end{document}


My pdftex.map is standard and contains the following line:

psyr Symbol


According to the pdftex manual, this should cause the /Flags entry of 
the font in the PDF-file to be set to 4 (which would be correct and 
which would be the Flags value of a Symbol font). However, on my 
system the resulting pdf file (which I attach) contains a /Flags entry of 
34 (which is incorrect here and which is the Flags value of a serif 
standard font).


I hope this report is reasonably clear...


Any help on this would be greatly appreciated,
Till Tantau


----------------------------------------------------------------------

>Comment By: Till Tantau (tantau)
Date: 2007-06-20 10:00

Message:
Logged In: YES 
user_id=4566

Hello again,

I toyed around with this some more. It turns out that if I change the line in 
the pdftex.map file to

psyr Symbol 6

then the /Flags field in the resulting .pdf file is set to 6 (which is "not quite 
correct", but then the text is rendered correctly, at least).

Now, trying other values than 6, it seems that pdftex specifically replaces 
exactly the number 4 by 34, all other values are left as they are. I presume 
this was done at some time for some other font that is not a symbol font and 
whose font flags were missing/incorrect. However, this behaviour is a bit 
problematic for the Symbol font.

Best regards,
Till

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=809&group_id=106

From noreply at sarovar.org  Wed Jun 20 14:24:20 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Wed, 20 Jun 2007 17:54:20 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-809 ] Incorrect FontFlags for Symbol
	font (34 instead of 4)
Message-ID: <E1I0zES-0003ur-00@sarovar.org>

Bugs item #809, was opened at 2007-06-20 09:51
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=809&group_id=106

Category: None
Group: None
Status: Open
Resolution: None
Priority: 5
Submitted By: Till Tantau (tantau)
Assigned to: Nobody (None)
Summary: Incorrect FontFlags for Symbol font (34 instead of 4)

Initial Comment:
Hi!

with version 1.40.3 of pdftex I have the following problem: When the 
standard PDF-Font "Symbol" is used in the pdf-file, then the /Flags 
entry of the FontDescriptor is set to 34 rather than to 4.

This is incorrect and causes the resulting files to be displayed 
incorrectly by the Acrobat Reader.

To reproduce the problem, I use the following LaTeX-code:


\documentclass{article}

\pdfcompresslevel0
\font\myfont=psyr\relax

\begin{document}

\pagestyle{empty}
\myfont SG

\end{document}


My pdftex.map is standard and contains the following line:

psyr Symbol


According to the pdftex manual, this should cause the /Flags entry of 
the font in the PDF-file to be set to 4 (which would be correct and 
which would be the Flags value of a Symbol font). However, on my 
system the resulting pdf file (which I attach) contains a /Flags entry of 
34 (which is incorrect here and which is the Flags value of a serif 
standard font).


I hope this report is reasonably clear...


Any help on this would be greatly appreciated,
Till Tantau


----------------------------------------------------------------------

>Comment By: Till Tantau (tantau)
Date: 2007-06-20 12:24

Message:
Logged In: YES 
user_id=4566

Hi yet again,

I now had a look at the code, namely at teh function write_fontdescriptor in 
writefont.c.

Now, in that file it says

    if (!fd->ff_found && fd->fm->fd_flags == 4)
        pdf_puts("/Flags 34\n");        /* assumes a roman sans serif font */
    else
        pdf_printf("/Flags %i\n", (int) fd->fm->fd_flags);

which obviously causes the problems.

Now, it is not quite clear to me how to solve this. In older versions of pdftex 
(1.30) the built-in fonts did not their own FontDescription object, so this 
problem did not arise. However, in pdftex 1.40 they do for some reason (it 
says in create_fontdictionary:

        /* builtin fonts still need the /Widths array and /FontDescriptor
         * (to avoid error 'font FOO contains bad /BBox')
         */

I could not track this "contains bad /BBox" problem. According to the PDF-
Specification, a builtin font does not need a FontDescriptor.

Be that as it may, I think the the Flags entries of the buildin fonts should be 
correct (actually, they have to be correct, Acrobat does not render them 
otherwise). This means, at the very least, that write_fontdescriptor should 
treat Symbol and ZapfDingbats specially (namely setting the Flags to 4). 
However, the Flags should also be set correctly for, say, Helvetica, which is 
not a serif font and for Courier, which is monospaced and so on.


Best regards,
Till

----------------------------------------------------------------------

Comment By: Till Tantau (tantau)
Date: 2007-06-20 10:00

Message:
Logged In: YES 
user_id=4566

Hello again,

I toyed around with this some more. It turns out that if I change the line in 
the pdftex.map file to

psyr Symbol 6

then the /Flags field in the resulting .pdf file is set to 6 (which is "not quite 
correct", but then the text is rendered correctly, at least).

Now, trying other values than 6, it seems that pdftex specifically replaces 
exactly the number 4 by 34, all other values are left as they are. I presume 
this was done at some time for some other font that is not a symbol font and 
whose font flags were missing/incorrect. However, this behaviour is a bit 
problematic for the Symbol font.

Best regards,
Till

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=809&group_id=106

From noreply at sarovar.org  Wed Jun 20 15:14:10 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Wed, 20 Jun 2007 18:44:10 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-809 ] Incorrect FontFlags for Symbol
	font (34 instead of 4)
Message-ID: <E1I100g-0001Rm-00@sarovar.org>

Bugs item #809, was opened at 2007-06-20 11:51
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=809&group_id=106

>Category: Fonts
>Group: v1.40.3
>Status: Closed
>Resolution: Duplicate
Priority: 5
Submitted By: Till Tantau (tantau)
>Assigned to: Martin Schr?der (oneiros)
Summary: Incorrect FontFlags for Symbol font (34 instead of 4)

Initial Comment:
Hi!

with version 1.40.3 of pdftex I have the following problem: When the 
standard PDF-Font "Symbol" is used in the pdf-file, then the /Flags 
entry of the FontDescriptor is set to 34 rather than to 4.

This is incorrect and causes the resulting files to be displayed 
incorrectly by the Acrobat Reader.

To reproduce the problem, I use the following LaTeX-code:


\documentclass{article}

\pdfcompresslevel0
\font\myfont=psyr\relax

\begin{document}

\pagestyle{empty}
\myfont SG

\end{document}


My pdftex.map is standard and contains the following line:

psyr Symbol


According to the pdftex manual, this should cause the /Flags entry of 
the font in the PDF-file to be set to 4 (which would be correct and 
which would be the Flags value of a Symbol font). However, on my 
system the resulting pdf file (which I attach) contains a /Flags entry of 
34 (which is incorrect here and which is the Flags value of a serif 
standard font).


I hope this report is reasonably clear...


Any help on this would be greatly appreciated,
Till Tantau


----------------------------------------------------------------------

>Comment By: Martin Schr?der (oneiros)
Date: 2007-06-20 15:14

Message:
Logged In: YES 
user_id=421

Till,
your bug report is a duplicate of #762 (see also #794); both
will be fixed in the next interim release.

----------------------------------------------------------------------

Comment By: Till Tantau (tantau)
Date: 2007-06-20 14:24

Message:
Logged In: YES 
user_id=4566

Hi yet again,

I now had a look at the code, namely at teh function write_fontdescriptor in 
writefont.c.

Now, in that file it says

    if (!fd->ff_found && fd->fm->fd_flags == 4)
        pdf_puts("/Flags 34\n");        /* assumes a roman sans serif font */
    else
        pdf_printf("/Flags %i\n", (int) fd->fm->fd_flags);

which obviously causes the problems.

Now, it is not quite clear to me how to solve this. In older versions of pdftex 
(1.30) the built-in fonts did not their own FontDescription object, so this 
problem did not arise. However, in pdftex 1.40 they do for some reason (it 
says in create_fontdictionary:

        /* builtin fonts still need the /Widths array and /FontDescriptor
         * (to avoid error 'font FOO contains bad /BBox')
         */

I could not track this "contains bad /BBox" problem. According to the PDF-
Specification, a builtin font does not need a FontDescriptor.

Be that as it may, I think the the Flags entries of the buildin fonts should be 
correct (actually, they have to be correct, Acrobat does not render them 
otherwise). This means, at the very least, that write_fontdescriptor should 
treat Symbol and ZapfDingbats specially (namely setting the Flags to 4). 
However, the Flags should also be set correctly for, say, Helvetica, which is 
not a serif font and for Courier, which is monospaced and so on.


Best regards,
Till

----------------------------------------------------------------------

Comment By: Till Tantau (tantau)
Date: 2007-06-20 12:00

Message:
Logged In: YES 
user_id=4566

Hello again,

I toyed around with this some more. It turns out that if I change the line in 
the pdftex.map file to

psyr Symbol 6

then the /Flags field in the resulting .pdf file is set to 6 (which is "not quite 
correct", but then the text is rendered correctly, at least).

Now, trying other values than 6, it seems that pdftex specifically replaces 
exactly the number 4 by 34, all other values are left as they are. I presume 
this was done at some time for some other font that is not a symbol font and 
whose font flags were missing/incorrect. However, this behaviour is a bit 
problematic for the Symbol font.

Best regards,
Till

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=809&group_id=106

From noreply at sarovar.org  Fri Jun 22 13:49:10 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Fri, 22 Jun 2007 17:19:10 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-810 ] Mixed up font descriptor from pdf
	inclusion
Message-ID: <E1I1hdW-0004L2-00@sarovar.org>

Bugs item #810, was opened at 2007-06-22 13:49
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=810&group_id=106

Category: Fonts
Group: v1.40.3
Status: Open
Resolution: None
Priority: 5
Submitted By: Martin Schr?der (oneiros)
Assigned to: The Thanh Han (hanthethanh)
Summary: Mixed up font descriptor from pdf inclusion

Initial Comment:
Ulrich Dirr reported a bug with pdf inclusion where
font information is not copied correctly (see
http://tug.org/pipermail/pdftex/2007-June/007197.html).

Thanh analysed thus:

the issue with "Strange problems with graphics inclusion"
has the following reason :

- CMSS10 is used in a pdf figure (let's call it f1.pdf)

- that f1.pdf is included in another pdf (eg f2.pdf)

- when f2.pdf includes f1.pdf and a map entry for CMSS10 is
 avail., a font descriptor for CMSS10 is created by
 epdf_create_fontdescriptor()

- the preset_fontmetrics() function is not called for
CMSS10
 (it's there in epdf_create_fontdescriptor(), but commented
 out -- no f to use with preset_fontmetrics() there)

- when pdftex writes out the font descriptor for CMSS10,
 some font metrics are not set, since CMSS10.pfb doesn't
 have them

- so f2.pdf ends up with a font descriptor for CMSS10 where
 some font metrics are missing (Ascent, CapHeight, XHeight
 etc.)

- f2.pdf seems to be ok with most pdf browser, but not with
 Preflight in Acrobat7 (and perhaps with PitStop -- I don't
 have PitStop to test)

A patch by Thanh is attached.

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=810&group_id=106

From noreply at sarovar.org  Fri Jun 22 17:21:51 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Fri, 22 Jun 2007 20:51:51 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-774 ] UniqueID in subsetted Type1 fonts
Message-ID: <E1I1kxL-0002bF-00@sarovar.org>

Bugs item #774, was opened at 2007-04-15 21:20
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=774&group_id=106

Category: Fonts
Group: v1.40.3
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Reinhard Kotucha (reinhard)
Assigned to: Hartmut Henkel (hhenkel)
Summary: UniqueID in subsetted Type1 fonts

Initial Comment:
The currant version of pdftex removes the UniqueID from
the font dictionary when a subset of a Type1 font is
included.  However, there is still a UniqueID in the
Private dictionary which should be removed too.

>From the PostScript Language Reference Manual (p. 336):

> When you copy a font dictionary for the purpose of 
> creating a modified font, you should not copy the 
> UniqueID or XUID entry. As an exception to this 
> general rule, it is acceptable (and preferable) to 
> retain the original UniqueID or XUID entry if
> the only modified entries are FontName, FontInfo, 
> FontMatrix, or Encoding, because those changes do not
> affect the glyphs? appearance or metrics.

Regards,
  Reinhard

----------------------------------------------------------------------

>Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-22 15:21

Message:
Logged In: YES 
user_id=710

here is a patch for this bug

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=774&group_id=106

From noreply at sarovar.org  Fri Jun 22 18:55:38 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Fri, 22 Jun 2007 22:25:38 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-774 ] UniqueID in subsetted Type1 fonts
Message-ID: <E1I1mQ6-00009c-00@sarovar.org>

Bugs item #774, was opened at 2007-04-15 23:20
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=774&group_id=106

Category: Fonts
Group: v1.40.3
>Status: Closed
>Resolution: Fixed
Priority: 5
Submitted By: Reinhard Kotucha (reinhard)
Assigned to: Hartmut Henkel (hhenkel)
Summary: UniqueID in subsetted Type1 fonts

Initial Comment:
The currant version of pdftex removes the UniqueID from
the font dictionary when a subset of a Type1 font is
included.  However, there is still a UniqueID in the
Private dictionary which should be removed too.

>From the PostScript Language Reference Manual (p. 336):

> When you copy a font dictionary for the purpose of 
> creating a modified font, you should not copy the 
> UniqueID or XUID entry. As an exception to this 
> general rule, it is acceptable (and preferable) to 
> retain the original UniqueID or XUID entry if
> the only modified entries are FontName, FontInfo, 
> FontMatrix, or Encoding, because those changes do not
> affect the glyphs? appearance or metrics.

Regards,
  Reinhard

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-22 18:55

Message:
Logged In: YES 
user_id=421

A fix for this will be included in the next release (1.40.4/1.50.0).

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-22 17:21

Message:
Logged In: YES 
user_id=710

here is a patch for this bug

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=774&group_id=106

From noreply at sarovar.org  Fri Jun 22 18:56:09 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Fri, 22 Jun 2007 22:26:09 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-799 ] \pdfstartlink duplicate objects
	when copying boxes
Message-ID: <E1I1mQb-00009n-00@sarovar.org>

Bugs item #799, was opened at 2007-05-27 12:07
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=799&group_id=106

Category: Annotations
Group: v1.40.3
>Status: Closed
Resolution: Fixed
Priority: 5
Submitted By: Hartmut Henkel (hhenkel)
Assigned to: Hartmut Henkel (hhenkel)
Summary: \pdfstartlink duplicate objects when copying boxes

Initial Comment:
When \pdfstartlink is used inside a \hbox, repeated
\copy of that box produces the same /Link annotation
object multiply, with same object number and identical
coordinates on the page. That's wrong, and it gives
also problems with object streams, as reported by Luigi
Scarso. The tiny patch tries to solve this.

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-22 18:56

Message:
Logged In: YES 
user_id=421

A fix for this will be included in the next release (1.40.4/1.50.0).

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-05-30 16:45

Message:
Logged In: NO 

test files work too.
Luigi Scarso

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-05-30 16:27

Message:
Logged In: NO 

It works ; Acrobat Reader 7.0.8 now read my test without errors

----------------------------------------------------------------------

Comment By: Hartmut Henkel (hhenkel)
Date: 2007-05-29 23:26

Message:
Logged In: YES 
user_id=929

Now for each \pdfstartlink and \pdfannot node in the case of
multiple \copy a new object is generated. This gives each of
multiple annotation copies a new correctly placed rectangle
on the page. New is that now in the case of duplicate
\pdfrefobj only the 1st one will be written, copies are
silently ignored. New patch for testing/discussion.

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-05-28 22:56

Message:
Logged In: YES 
user_id=421

A fix for this will be included in the next release (1.40.4/1.50.0).

----------------------------------------------------------------------

Comment By: Hartmut Henkel (hhenkel)
Date: 2007-05-27 23:06

Message:
Logged In: YES 
user_id=929

same simple patch on pdftex.web. The suspicion of an
"obscure possible bug" was wrong. Sorry for the noise.

----------------------------------------------------------------------

Comment By: Hartmut Henkel (hhenkel)
Date: 2007-05-27 22:49

Message:
Logged In: YES 
user_id=929

sorry, that was wrong.

----------------------------------------------------------------------

Comment By: Hartmut Henkel (hhenkel)
Date: 2007-05-27 22:31

Message:
Logged In: YES 
user_id=929

much simpler patch, only on pdftex.web, no need for yet
another AVL tree. And maybe some obscure possible bug with
object streams caught.

----------------------------------------------------------------------

Comment By: Hartmut Henkel (hhenkel)
Date: 2007-05-27 14:56

Message:
Logged In: YES 
user_id=929

patch extended to general \pdfannot. Without the patch
acroread 7.0.9 (linux) refuses to display test4.pdf.

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=799&group_id=106

From noreply at sarovar.org  Fri Jun 22 21:53:17 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Sat, 23 Jun 2007 01:23:17 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-774 ] UniqueID in subsetted Type1 fonts
Message-ID: <E1I1pC1-0000vr-00@sarovar.org>

Bugs item #774, was opened at 2007-04-15 21:20
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=774&group_id=106

Category: Fonts
Group: v1.40.3
Status: Closed
Resolution: Fixed
Priority: 5
Submitted By: Reinhard Kotucha (reinhard)
Assigned to: Hartmut Henkel (hhenkel)
Summary: UniqueID in subsetted Type1 fonts

Initial Comment:
The currant version of pdftex removes the UniqueID from
the font dictionary when a subset of a Type1 font is
included.  However, there is still a UniqueID in the
Private dictionary which should be removed too.

>From the PostScript Language Reference Manual (p. 336):

> When you copy a font dictionary for the purpose of 
> creating a modified font, you should not copy the 
> UniqueID or XUID entry. As an exception to this 
> general rule, it is acceptable (and preferable) to 
> retain the original UniqueID or XUID entry if
> the only modified entries are FontName, FontInfo, 
> FontMatrix, or Encoding, because those changes do not
> affect the glyphs? appearance or metrics.

Regards,
  Reinhard

----------------------------------------------------------------------

>Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-22 19:53

Message:
Logged In: YES 
user_id=710

sorry, my fault, I didn't see that Hartmut has already
uploaded a fix for this bug. Both patches are identical, though.

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-22 16:55

Message:
Logged In: YES 
user_id=421

A fix for this will be included in the next release (1.40.4/1.50.0).

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-22 15:21

Message:
Logged In: YES 
user_id=710

here is a patch for this bug

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=774&group_id=106

From noreply at sarovar.org  Fri Jun 22 22:41:38 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Sat, 23 Jun 2007 02:11:38 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-762 ] symbolic font gets /Flags as
	nonsymbolic
Message-ID: <E1I1pwo-0007Rf-00@sarovar.org>

Bugs item #762, was opened at 2007-04-04 17:31
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=762&group_id=106

Category: Fonts
Group: v1.40.0
Status: Closed
Resolution: Fixed
Priority: 7
Submitted By: Martin Schr?der (oneiros)
Assigned to: Hartmut Henkel (hhenkel)
Summary: symbolic font gets /Flags as nonsymbolic

Initial Comment:
The input file

\pdfcompresslevel=0
\pdfmapline{psyr Symbol}
\nopagenumbers
\font\sy=psyr
\sy a
\end

results in a pdf with a Font Descriptor with /Flags 34
for the Symbol font, which is wrong; it should be 4.

The flags are initialized as 4 in mapfile.c and
writefont.c sees this as the default value and writes
34 to the pdf.

Reported by TeX Guy <pdftexlist at gmail.com> and analyzed
by George N. White III <gnwiii at gmail.com>; see the
thread starting at
http://tug.org/pipermail/pdftex/2007-April/007133.html

----------------------------------------------------------------------

>Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-22 20:41

Message:
Logged In: YES 
user_id=710

Martin, can you please upload the fix here so other can test
it too? thanks.

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-05-25 17:47

Message:
Logged In: YES 
user_id=421

A fix for this will be included in the next release (1.40.4/1.50.0).

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-04-04 17:42

Message:
Logged In: YES 
user_id=421

The default might be reasonable, but even setting the
fontflags as 4 (symbol) doesn't work, as this is interpreted
as being the default and changed to 34. :-(

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=762&group_id=106

From noreply at sarovar.org  Sat Jun 23 02:11:37 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Sat, 23 Jun 2007 05:41:37 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-762 ] symbolic font gets /Flags as
	nonsymbolic
Message-ID: <E1I1tE1-0004en-00@sarovar.org>

Bugs item #762, was opened at 2007-04-04 19:31
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=762&group_id=106

Category: Fonts
Group: v1.40.0
Status: Closed
Resolution: Fixed
Priority: 7
Submitted By: Martin Schr?der (oneiros)
Assigned to: Hartmut Henkel (hhenkel)
Summary: symbolic font gets /Flags as nonsymbolic

Initial Comment:
The input file

\pdfcompresslevel=0
\pdfmapline{psyr Symbol}
\nopagenumbers
\font\sy=psyr
\sy a
\end

results in a pdf with a Font Descriptor with /Flags 34
for the Symbol font, which is wrong; it should be 4.

The flags are initialized as 4 in mapfile.c and
writefont.c sees this as the default value and writes
34 to the pdf.

Reported by TeX Guy <pdftexlist at gmail.com> and analyzed
by George N. White III <gnwiii at gmail.com>; see the
thread starting at
http://tug.org/pipermail/pdftex/2007-April/007133.html

----------------------------------------------------------------------

>Comment By: Martin Schr?der (oneiros)
Date: 2007-06-23 02:11

Message:
Logged In: YES 
user_id=421

Patch is attached.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-22 22:41

Message:
Logged In: YES 
user_id=710

Martin, can you please upload the fix here so other can test
it too? thanks.

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-05-25 19:47

Message:
Logged In: YES 
user_id=421

A fix for this will be included in the next release (1.40.4/1.50.0).

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-04-04 19:42

Message:
Logged In: YES 
user_id=421

The default might be reasonable, but even setting the
fontflags as 4 (symbol) doesn't work, as this is interpreted
as being the default and changed to 34. :-(

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=762&group_id=106

From noreply at sarovar.org  Sat Jun 23 19:04:04 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Sat, 23 Jun 2007 22:34:04 +0530
Subject: [NTG-pdftex] [ pdftex-Patches-811 ] Patch to change warning mesage
	for conflicting font attributes (given by \pdffontattr)
Message-ID: <E1I291o-0001k9-00@sarovar.org>

Patches item #811, was opened at 2007-06-23 17:04
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=811&group_id=106

Category: None
Group: None
Status: Open
Resolution: None
Priority: 5
Submitted By: The Thanh Han (hanthethanh)
Assigned to: Nobody (None)
Summary: Patch to  change warning mesage for conflicting font attributes (given by \pdffontattr)

Initial Comment:
This is a tiny patch to change the warning message for
conflicting font attributes (as given by \pdffontattr),
to make it clearer what is going on.   

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=811&group_id=106

From noreply at sarovar.org  Sat Jun 23 19:23:24 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Sat, 23 Jun 2007 22:53:24 +0530
Subject: [NTG-pdftex] [ pdftex-Patches-812 ] added \pdfkeeplinedimen
	primitive
Message-ID: <E1I29KW-00066X-00@sarovar.org>

Patches item #812, was opened at 2007-06-23 17:23
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=812&group_id=106

Category: None
Group: None
Status: Open
Resolution: None
Priority: 5
Submitted By: The Thanh Han (hanthethanh)
Assigned to: Nobody (None)
Summary: added \pdfkeeplinedimen primitive

Initial Comment:
This patch introduces a new primitive
\pdfkeepdimenline, which is an addon to bring some more
flexibity to the existing \pdflastlinedepth,
\pdffirstlineheight, \pdfeachlinedepth and
\pdfeachlineheight primitives. Those primitives are set
to 0 by default, and they take effect only if the user
sets them to a non-zero value (as one can guess from
their names, they fix line dimensions of a paragraph). 

The issue with those primitives is that it's impossible
to use them with 0, as this value means "don't change
line dimens". So this patch introduces
\pdfkeepdimenline, a dimen register keeping the value
for "don't change line dimens". By default all are set
to 0, so the default behaviour is unchanged. 

For example, to set depth of each line after line
breaking to zero, one can say:

    \pdfkeeplinedimen=\maxdimen
    \pdfeachlineheight=\pdfkeeplinedimen  
    \pdffirstlineheight=\pdfkeeplinedimen
    \pdflastlinedepth=\pdfkeeplinedimen
    \pdfeachlinedepth=0pt

Testing/comments welcome.

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=812&group_id=106

From noreply at sarovar.org  Sat Jun 23 19:28:23 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Sat, 23 Jun 2007 22:58:23 +0530
Subject: [NTG-pdftex] [ pdftex-Patches-813 ] new primitive
	\pdfinclusioncopyfonts
Message-ID: <E1I29PL-0006Ys-00@sarovar.org>

Patches item #813, was opened at 2007-06-23 17:28
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=813&group_id=106

Category: None
Group: None
Status: Open
Resolution: None
Priority: 5
Submitted By: The Thanh Han (hanthethanh)
Assigned to: Nobody (None)
Summary: new primitive \pdfinclusioncopyfonts

Initial Comment:
this is a replacement for \pdfreplacefont, with the
opposite semantics. When this is set, fonts from
included pdfs are always copied. This is useful to
prevent pdftex from replacing fonts in included pdfs,
without messing around with map files.

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=813&group_id=106

From noreply at sarovar.org  Sat Jun 23 19:29:14 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Sat, 23 Jun 2007 22:59:14 +0530
Subject: [NTG-pdftex] [ pdftex-Patches-812 ] added \pdfkeeplinedimen
	primitive
Message-ID: <E1I29QA-0006Z8-00@sarovar.org>

Patches item #812, was opened at 2007-06-23 22:53
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=812&group_id=106

Category: None
Group: None
Status: Open
Resolution: None
Priority: 5
Submitted By: The Thanh Han (hanthethanh)
Assigned to: Nobody (None)
Summary: added \pdfkeeplinedimen primitive

Initial Comment:
This patch introduces a new primitive
\pdfkeepdimenline, which is an addon to bring some more
flexibity to the existing \pdflastlinedepth,
\pdffirstlineheight, \pdfeachlinedepth and
\pdfeachlineheight primitives. Those primitives are set
to 0 by default, and they take effect only if the user
sets them to a non-zero value (as one can guess from
their names, they fix line dimensions of a paragraph). 

The issue with those primitives is that it's impossible
to use them with 0, as this value means "don't change
line dimens". So this patch introduces
\pdfkeepdimenline, a dimen register keeping the value
for "don't change line dimens". By default all are set
to 0, so the default behaviour is unchanged. 

For example, to set depth of each line after line
breaking to zero, one can say:

    \pdfkeeplinedimen=\maxdimen
    \pdfeachlineheight=\pdfkeeplinedimen  
    \pdffirstlineheight=\pdfkeeplinedimen
    \pdflastlinedepth=\pdfkeeplinedimen
    \pdfeachlinedepth=0pt

Testing/comments welcome.

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-06-23 22:59

Message:
Logged In: NO 

This is completely clunky and awkward.  Instead of having
some magic variable which changes the meaning of _all_
addresses here, how about just using \prevdepth's default
for "no change", namely -1000pt?

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=812&group_id=106

From noreply at sarovar.org  Sat Jun 23 20:09:16 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Sat, 23 Jun 2007 23:39:16 +0530
Subject: [NTG-pdftex] [ pdftex-Patches-811 ] Patch to change warning mesage
	for conflicting font attributes (given by \pdffontattr)
Message-ID: <E1I2A2u-0003im-00@sarovar.org>

Patches item #811, was opened at 2007-06-23 19:04
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=811&group_id=106

>Category: Primitives
>Group: v1.40.0
Status: Open
>Resolution: Accepted
Priority: 5
Submitted By: The Thanh Han (hanthethanh)
>Assigned to: Martin Schr?der (oneiros)
Summary: Patch to  change warning mesage for conflicting font attributes (given by \pdffontattr)

Initial Comment:
This is a tiny patch to change the warning message for
conflicting font attributes (as given by \pdffontattr),
to make it clearer what is going on.   

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=811&group_id=106

From noreply at sarovar.org  Sat Jun 23 20:09:46 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Sat, 23 Jun 2007 23:39:46 +0530
Subject: [NTG-pdftex] [ pdftex-Patches-811 ] Patch to change warning mesage
	for conflicting font attributes (given by \pdffontattr)
Message-ID: <E1I2A3O-0003j5-00@sarovar.org>

Patches item #811, was opened at 2007-06-23 19:04
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=811&group_id=106

Category: Primitives
>Group: v1.50.0
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: The Thanh Han (hanthethanh)
Assigned to: Martin Schr?der (oneiros)
Summary: Patch to  change warning mesage for conflicting font attributes (given by \pdffontattr)

Initial Comment:
This is a tiny patch to change the warning message for
conflicting font attributes (as given by \pdffontattr),
to make it clearer what is going on.   

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=811&group_id=106

From noreply at sarovar.org  Sat Jun 23 20:10:55 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Sat, 23 Jun 2007 23:40:55 +0530
Subject: [NTG-pdftex] [ pdftex-Patches-812 ] added \pdfkeeplinedimen
	primitive
Message-ID: <E1I2A4V-0003jZ-00@sarovar.org>

Patches item #812, was opened at 2007-06-23 19:23
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=812&group_id=106

>Category: Primitives
>Group: v1.50.0
Status: Open
Resolution: None
Priority: 5
Submitted By: The Thanh Han (hanthethanh)
>Assigned to: Hartmut Henkel (hhenkel)
Summary: added \pdfkeeplinedimen primitive

Initial Comment:
This patch introduces a new primitive
\pdfkeepdimenline, which is an addon to bring some more
flexibity to the existing \pdflastlinedepth,
\pdffirstlineheight, \pdfeachlinedepth and
\pdfeachlineheight primitives. Those primitives are set
to 0 by default, and they take effect only if the user
sets them to a non-zero value (as one can guess from
their names, they fix line dimensions of a paragraph). 

The issue with those primitives is that it's impossible
to use them with 0, as this value means "don't change
line dimens". So this patch introduces
\pdfkeepdimenline, a dimen register keeping the value
for "don't change line dimens". By default all are set
to 0, so the default behaviour is unchanged. 

For example, to set depth of each line after line
breaking to zero, one can say:

    \pdfkeeplinedimen=\maxdimen
    \pdfeachlineheight=\pdfkeeplinedimen  
    \pdffirstlineheight=\pdfkeeplinedimen
    \pdflastlinedepth=\pdfkeeplinedimen
    \pdfeachlinedepth=0pt

Testing/comments welcome.

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-06-23 19:29

Message:
Logged In: NO 

This is completely clunky and awkward.  Instead of having
some magic variable which changes the meaning of _all_
addresses here, how about just using \prevdepth's default
for "no change", namely -1000pt?

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=812&group_id=106

From noreply at sarovar.org  Sat Jun 23 20:11:17 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Sat, 23 Jun 2007 23:41:17 +0530
Subject: [NTG-pdftex] [ pdftex-Patches-813 ] new primitive
	\pdfinclusioncopyfonts
Message-ID: <E1I2A4r-0003jl-00@sarovar.org>

Patches item #813, was opened at 2007-06-23 19:28
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=813&group_id=106

>Category: Fonts
>Group: v1.50.0
Status: Open
Resolution: None
Priority: 5
Submitted By: The Thanh Han (hanthethanh)
>Assigned to: Hartmut Henkel (hhenkel)
Summary: new primitive \pdfinclusioncopyfonts

Initial Comment:
this is a replacement for \pdfreplacefont, with the
opposite semantics. When this is set, fonts from
included pdfs are always copied. This is useful to
prevent pdftex from replacing fonts in included pdfs,
without messing around with map files.

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=813&group_id=106

From noreply at sarovar.org  Sat Jun 23 20:11:29 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Sat, 23 Jun 2007 23:41:29 +0530
Subject: [NTG-pdftex] [ pdftex-Patches-811 ] Patch to change warning mesage
	for conflicting font attributes (given by \pdffontattr)
Message-ID: <E1I2A53-0003jw-00@sarovar.org>

Patches item #811, was opened at 2007-06-23 19:04
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=811&group_id=106

>Category: Fonts
Group: v1.50.0
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: The Thanh Han (hanthethanh)
Assigned to: Martin Schr?der (oneiros)
Summary: Patch to  change warning mesage for conflicting font attributes (given by \pdffontattr)

Initial Comment:
This is a tiny patch to change the warning message for
conflicting font attributes (as given by \pdffontattr),
to make it clearer what is going on.   

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=811&group_id=106

From noreply at sarovar.org  Sun Jun 24 10:26:32 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Sun, 24 Jun 2007 13:56:32 +0530
Subject: [NTG-pdftex] [ pdftex-Patches-812 ] added \pdfkeeplinedimen
	primitive
Message-ID: <E1I2NQW-0004Oj-00@sarovar.org>

Patches item #812, was opened at 2007-06-23 17:23
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=812&group_id=106

Category: Primitives
Group: v1.50.0
Status: Open
Resolution: None
Priority: 5
Submitted By: The Thanh Han (hanthethanh)
Assigned to: Hartmut Henkel (hhenkel)
Summary: added \pdfkeeplinedimen primitive

Initial Comment:
This patch introduces a new primitive
\pdfkeepdimenline, which is an addon to bring some more
flexibity to the existing \pdflastlinedepth,
\pdffirstlineheight, \pdfeachlinedepth and
\pdfeachlineheight primitives. Those primitives are set
to 0 by default, and they take effect only if the user
sets them to a non-zero value (as one can guess from
their names, they fix line dimensions of a paragraph). 

The issue with those primitives is that it's impossible
to use them with 0, as this value means "don't change
line dimens". So this patch introduces
\pdfkeepdimenline, a dimen register keeping the value
for "don't change line dimens". By default all are set
to 0, so the default behaviour is unchanged. 

For example, to set depth of each line after line
breaking to zero, one can say:

    \pdfkeeplinedimen=\maxdimen
    \pdfeachlineheight=\pdfkeeplinedimen  
    \pdffirstlineheight=\pdfkeeplinedimen
    \pdflastlinedepth=\pdfkeeplinedimen
    \pdfeachlinedepth=0pt

Testing/comments welcome.

----------------------------------------------------------------------

>Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-24 08:26

Message:
Logged In: YES 
user_id=710

another patch uploaded, so the pdftex team can choose
between them. Hope to make Nobody (None) happy. 

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-06-23 17:29

Message:
Logged In: NO 

This is completely clunky and awkward.  Instead of having
some magic variable which changes the meaning of _all_
addresses here, how about just using \prevdepth's default
for "no change", namely -1000pt?

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=812&group_id=106

From noreply at sarovar.org  Sun Jun 24 10:28:37 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Sun, 24 Jun 2007 13:58:37 +0530
Subject: [NTG-pdftex] [ pdftex-Patches-812 ] added \pdfkeeplinedimen
	primitive
Message-ID: <E1I2NSX-0004PR-00@sarovar.org>

Patches item #812, was opened at 2007-06-23 19:23
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=812&group_id=106

Category: Primitives
Group: v1.50.0
Status: Open
Resolution: None
Priority: 5
Submitted By: The Thanh Han (hanthethanh)
Assigned to: Hartmut Henkel (hhenkel)
Summary: added \pdfkeeplinedimen primitive

Initial Comment:
This patch introduces a new primitive
\pdfkeepdimenline, which is an addon to bring some more
flexibity to the existing \pdflastlinedepth,
\pdffirstlineheight, \pdfeachlinedepth and
\pdfeachlineheight primitives. Those primitives are set
to 0 by default, and they take effect only if the user
sets them to a non-zero value (as one can guess from
their names, they fix line dimensions of a paragraph). 

The issue with those primitives is that it's impossible
to use them with 0, as this value means "don't change
line dimens". So this patch introduces
\pdfkeepdimenline, a dimen register keeping the value
for "don't change line dimens". By default all are set
to 0, so the default behaviour is unchanged. 

For example, to set depth of each line after line
breaking to zero, one can say:

    \pdfkeeplinedimen=\maxdimen
    \pdfeachlineheight=\pdfkeeplinedimen  
    \pdffirstlineheight=\pdfkeeplinedimen
    \pdflastlinedepth=\pdfkeeplinedimen
    \pdfeachlinedepth=0pt

Testing/comments welcome.

----------------------------------------------------------------------

>Comment By: Taco Hoekwater (taco)
Date: 2007-06-24 10:28

Message:
Logged In: YES 
user_id=1608


I see an advantage in having a configurable parameter over
the arbitrary constant that \prevdepth currently uses. But
if that is the case, it makes sense to apply it to
\prevdepth as well.

So how about \pdfignoreddimen instead, that defaults to
-1000pt, and is also used by \prevdepth ?



----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-24 10:26

Message:
Logged In: YES 
user_id=710

another patch uploaded, so the pdftex team can choose
between them. Hope to make Nobody (None) happy. 

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-06-23 19:29

Message:
Logged In: NO 

This is completely clunky and awkward.  Instead of having
some magic variable which changes the meaning of _all_
addresses here, how about just using \prevdepth's default
for "no change", namely -1000pt?

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=812&group_id=106

From noreply at sarovar.org  Sun Jun 24 10:41:43 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Sun, 24 Jun 2007 14:11:43 +0530
Subject: [NTG-pdftex] [ pdftex-Patches-812 ] added \pdfkeeplinedimen
	primitive
Message-ID: <E1I2NfD-0005qj-00@sarovar.org>

Patches item #812, was opened at 2007-06-23 17:23
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=812&group_id=106

Category: Primitives
Group: v1.50.0
Status: Open
Resolution: None
Priority: 5
Submitted By: The Thanh Han (hanthethanh)
Assigned to: Hartmut Henkel (hhenkel)
Summary: added \pdfkeeplinedimen primitive

Initial Comment:
This patch introduces a new primitive
\pdfkeepdimenline, which is an addon to bring some more
flexibity to the existing \pdflastlinedepth,
\pdffirstlineheight, \pdfeachlinedepth and
\pdfeachlineheight primitives. Those primitives are set
to 0 by default, and they take effect only if the user
sets them to a non-zero value (as one can guess from
their names, they fix line dimensions of a paragraph). 

The issue with those primitives is that it's impossible
to use them with 0, as this value means "don't change
line dimens". So this patch introduces
\pdfkeepdimenline, a dimen register keeping the value
for "don't change line dimens". By default all are set
to 0, so the default behaviour is unchanged. 

For example, to set depth of each line after line
breaking to zero, one can say:

    \pdfkeeplinedimen=\maxdimen
    \pdfeachlineheight=\pdfkeeplinedimen  
    \pdffirstlineheight=\pdfkeeplinedimen
    \pdflastlinedepth=\pdfkeeplinedimen
    \pdfeachlinedepth=0pt

Testing/comments welcome.

----------------------------------------------------------------------

>Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-24 08:41

Message:
Logged In: YES 
user_id=710

sounds good to me.

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-24 08:28

Message:
Logged In: YES 
user_id=1608


I see an advantage in having a configurable parameter over
the arbitrary constant that \prevdepth currently uses. But
if that is the case, it makes sense to apply it to
\prevdepth as well.

So how about \pdfignoreddimen instead, that defaults to
-1000pt, and is also used by \prevdepth ?



----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-24 08:26

Message:
Logged In: YES 
user_id=710

another patch uploaded, so the pdftex team can choose
between them. Hope to make Nobody (None) happy. 

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-06-23 17:29

Message:
Logged In: NO 

This is completely clunky and awkward.  Instead of having
some magic variable which changes the meaning of _all_
addresses here, how about just using \prevdepth's default
for "no change", namely -1000pt?

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=812&group_id=106

From noreply at sarovar.org  Sun Jun 24 12:46:32 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Sun, 24 Jun 2007 16:16:32 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-747 ] \letterspacefont and
	\pdffontexpand, again
Message-ID: <E1I2Pc0-0008BW-00@sarovar.org>

Bugs item #747, was opened at 2007-03-09 03:09
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=747&group_id=106

Category: hz
Group: v1.40.1
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robert (schlcht)
Assigned to: The Thanh Han (hanthethanh)
Summary: \letterspacefont and \pdffontexpand, again

Initial Comment:
When expanding a letterspaced font, the base font will
be expanded, too, resulting in the error `font has been
expanded with different parameters' when the base font
is expanded again:

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20 20 5 autoexpand
\pdffontexpand\font   20 20 5 autoexpand
Z\bye


----------------------------------------------------------------------

>Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-24 10:46

Message:
Logged In: YES 
user_id=710

here is a patch that introduces a new primitive
\pdfnewexpandfont. Usage:

\font\f=cmr10
\pdfnewexpandfont\fx \f 20 20 5 autoexpand

Note that \pdfnewexpandfont generates \fx by loading a TFM
corresponding to \f first, then applies font expansion in
the same way like "\pdffontexpand\fx 20 20 5". So when \f is
a font that doesn't have a corresponding TFM (for example,
because it was generated in pdftex memory only), the above
command won't work. In particular, the following doesn't work:

\font\f=cmr10
\letterspacefont\lsfont\f 100
\pdfnewexpandfont\fx \lsfont 20 20 5 autoexpand

since \lsfont doesn't have a corresponding TFM but was
generated by \letterspacefont. To create a
letterspaced+expanded font, one can use:

\font\f=cmr10
\letterspacefont\fx\f 100
\pdffontexpand\fx 20 20 5 autoexpand

things are gettting messy... sorry about that.
Testing/comments welcome.

----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-04-01 00:44

Message:
Logged In: YES 
user_id=2217

Fine for me and microtype. 

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-31 09:52

Message:
Logged In: YES 
user_id=710

either name is ok with me. We need a new pritimive to load a
new font and expand it, since the current one doesn't load a
new font and hence is making trouble. I would wait for a
while to see how Robert sees it before making any change.

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-03-19 11:07

Message:
Logged In: NO 

Hello,

I do not think that \pdfexpandfont is a good name for a new 
primitive, as it is too easy to confuse with \pdffontexpand. 
What about \pdfexpandnewfont, as -- if I understand 
correctly -- a new font is loaded?


Jonathan

P.S: Thank you for creating pdfTeX!

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-10 20:18

Message:
Logged In: YES 
user_id=710

Phil Taylor has a suggestion that seems great to me:
introduce a new primitive \pdfexpandfont instead. How do you
see it?

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-03-10 19:24

Message:
Logged In: YES 
user_id=421

Forget that comment. Of course a change of \pdffontexpand
has to be considered carefully. By you. :-)

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-03-10 19:22

Message:
Logged In: YES 
user_id=421

No. It's an undocumented primitive. ;-)

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-09 17:28

Message:
Logged In: YES 
user_id=710

sigh. A mistake when implementing the \pdffontexpand
primitive: it should load a new font for expansion, instead
of expanding a loaded font. Too late for change now?

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=747&group_id=106

From noreply at sarovar.org  Sun Jun 24 22:40:16 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Mon, 25 Jun 2007 02:10:16 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-721 ] Missing /Font object of PK file
	not found
Message-ID: <E1I2YsZ-0003h5-00@sarovar.org>

Bugs item #721, was opened at 2007-01-23 21:17
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=721&group_id=106

Category: Fonts
Group: v1.40.1
>Status: Closed
Resolution: Accepted
Priority: 7
Submitted By: Hartmut Henkel (hhenkel)
Assigned to: Hartmut Henkel (hhenkel)
Summary: Missing /Font object of PK file not found

Initial Comment:
There are several cases, the buggy one is no. 3. See
test files test1...4.tex in the attached file.

1. No TFM file found in the 1st place. ---> No TeX font
will be started. Ok. See test1.tex.

2. TFM file found, map entry existing, but no PFB font
file in map line ---> "pdfTeX warning: pdftex: font
`CMR' is not a standard font; I suppose it is available
to your PDF viewer then". Ok. See test2.tex.

3. TFM file found, no map entry, and no PK font
available. ---> "pdfTeX warning: pdftex (file
mf-nonexist): Font mf-nonexist at 600 not found". Not
ok. See test3.tex. Here a /Font object is referenced,
which is not existing, rendering the resulting PDF file
buggy. There should be either pdftex_fail() or or at
least a /Font object with a dummy /FontDescriptor
object should be created (the latter filled with
defaults from the TFM file), and the same warning
should be given as in case 4 below, since these cases
are similar: fontfile expected, but not available.

4. TFM file found, map entry with PFB font file
existing, but no PFB font file found. ---> "pdfTeX
warning: pdftex (file t1-nonexist.pfb): cannot open
Type 1 font file for reading". /FontDescriptor without
/FontFile, correct. Ok. See test4.tex.

Regards, Hartmut


----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-24 22:40

Message:
Logged In: YES 
user_id=421

A fix for this will be included in the next release (1.40.4/1.50.0).

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-01 12:48

Message:
Logged In: YES 
user_id=710

patch updated, a typo was in the previous one.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-01 09:58

Message:
Logged In: YES 
user_id=710

Here is a patch to turn some warnings that can lead to
invalid pdf output to fatal errors.

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=721&group_id=106

From noreply at sarovar.org  Sun Jun 24 23:05:30 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Mon, 25 Jun 2007 02:35:30 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-722 ] PDF generation does not support VF
	fonts correctly
Message-ID: <E1I2ZH0-0006rK-00@sarovar.org>

Bugs item #722, was opened at 2007-01-24 09:56
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=722&group_id=106

Category: Fonts
Group: v1.40.1
>Status: Closed
>Resolution: Fixed
Priority: 5
Submitted By: Achim Blumensath (blume)
Assigned to: The Thanh Han (hanthethanh)
Summary: PDF generation does not support VF fonts correctly

Initial Comment:
I've a problem with using VF fonts in PDF mode
(using pdftex 1.40.1, pdftex 1.20b does work correctly).
When using glyphs that are composed of several other
glyphs the various parts appear not at their correct
position.

The following example requires the MnSymbol and the
MinionPro packages.

\documentclass{minimal}
\usepackage[T1]{fontenc}
\usepackage[minionint]{MinionPro}
\begin{document}
$$\iint \quad \oint$$
\end{document}

If you create a DVI and use dvips + ps2pdf the output
is as expected (one double integral and one closed
integral). If you use pdflatex to create a PDF file
directly then the output is wrong. The double integral
consists of just one integral sign and the closed
integral consists of a circle followed by an integral
sign.


----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-24 23:05

Message:
Logged In: YES 
user_id=421

A fix for this will be included in the next release (1.40.4/1.50.0).

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-02-27 23:29

Message:
Logged In: YES 
user_id=710

Bugfix resubmitted, this time without the new primitive
\pdfreplacefont 

----------------------------------------------------------------------

Comment By: Achim Blumensath (blume)
Date: 2007-01-31 09:41

Message:
Logged In: YES 
user_id=4173

The patch seems to work fine. Thanks.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-01-29 20:46

Message:
Logged In: YES 
user_id=710

I made some changes in pdftex. Your test file looks almost
ok now :). Can you please try the patch to see whether it
works for you. Since I don't have exactly the same fonts you
used, it might be helpful if you try the patch with your tex
setup. Thanks.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-01-26 11:55

Message:
Logged In: YES 
user_id=710

indeed this is a bug of pdftex. I found the bug, should be
fixed soon.

----------------------------------------------------------------------

Comment By: Achim Blumensath (blume)
Date: 2007-01-26 09:47

Message:
Logged In: YES 
user_id=4173

Sorry, I forgot to mention that I couldn't include
the pfb for copyright reasons. You need the opticals version
of MinionPro to get MinionPro-ItDisp.pfb.

If you don't have the optical fonts the easiest workaround
is to create a PFB with just one glyph named /integral
of width 310 units.


----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-01-26 08:47

Message:
Logged In: YES 
user_id=710

I still got:

pdfTeX warning: pdftex (file MinionPro-ItDisp.pfb): cannot
open Type 1 font file for reading

I checked out the cvs version of MinionPro and run the
makeall script as described in README-src, but still I
didn't see MinionPro-ItDisp.pfb. 

----------------------------------------------------------------------

Comment By: Achim Blumensath (blume)
Date: 2007-01-26 07:21

Message:
Logged In: YES 
user_id=4173

I've simplified the test case to plain TeX.
The requested files are attached.


----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-01-25 15:01

Message:
Logged In: YES 
user_id=421

Note that the -recorder cmdline switch also works quite well
with kpathsea. :-)

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-01-25 09:43

Message:
Logged In: YES 
user_id=710

I tested the file again with the fonts you uploaded, but
still I cannot reproduce the problem.

I attached a small script that creates a list of all files
opened by tex. Usage: unpack, put list-tex-files.vim under
~/vim and run:

sh list-tex-files pdflatex testfile

it will report the filename of the list, which can be used
then to pack everything needed to rerun the job. You may
want to review the list to remove a few files that are not
relevant, for example the format.


----------------------------------------------------------------------

Comment By: Achim Blumensath (blume)
Date: 2007-01-25 07:54

Message:
Logged In: YES 
user_id=4173

In order to preproduce the bug you need the CVS version
on MinionPro and perhaps also a recent version of the
lcdf-typetools. The problem seems to be that the font
MnSymbolFI10.vf refers again to a virtual font
MinionPro-It-integral.vf. I've attached the corresponding
VPL files.

(I didn't have the time to create the requested PDF files.
Will do so shortly.)


----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-01-24 19:52

Message:
Logged In: YES 
user_id=710

I compiled the test file and got normal output (see attached
screenshot).

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-01-24 15:56

Message:
Logged In: YES 
user_id=421

Please attach the PDFs generated by ps2pdf and pdflatex,
best generated with \pdfcompresslevel=0. And the log from
pdflatex.

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=722&group_id=106

From noreply at sarovar.org  Sun Jun 24 23:06:01 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Mon, 25 Jun 2007 02:36:01 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-721 ] Missing /Font object of PK file
	not found
Message-ID: <E1I2ZHV-0006sE-00@sarovar.org>

Bugs item #721, was opened at 2007-01-23 21:17
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=721&group_id=106

Category: Fonts
Group: v1.40.1
Status: Closed
>Resolution: Fixed
Priority: 7
Submitted By: Hartmut Henkel (hhenkel)
Assigned to: Hartmut Henkel (hhenkel)
Summary: Missing /Font object of PK file not found

Initial Comment:
There are several cases, the buggy one is no. 3. See
test files test1...4.tex in the attached file.

1. No TFM file found in the 1st place. ---> No TeX font
will be started. Ok. See test1.tex.

2. TFM file found, map entry existing, but no PFB font
file in map line ---> "pdfTeX warning: pdftex: font
`CMR' is not a standard font; I suppose it is available
to your PDF viewer then". Ok. See test2.tex.

3. TFM file found, no map entry, and no PK font
available. ---> "pdfTeX warning: pdftex (file
mf-nonexist): Font mf-nonexist at 600 not found". Not
ok. See test3.tex. Here a /Font object is referenced,
which is not existing, rendering the resulting PDF file
buggy. There should be either pdftex_fail() or or at
least a /Font object with a dummy /FontDescriptor
object should be created (the latter filled with
defaults from the TFM file), and the same warning
should be given as in case 4 below, since these cases
are similar: fontfile expected, but not available.

4. TFM file found, map entry with PFB font file
existing, but no PFB font file found. ---> "pdfTeX
warning: pdftex (file t1-nonexist.pfb): cannot open
Type 1 font file for reading". /FontDescriptor without
/FontFile, correct. Ok. See test4.tex.

Regards, Hartmut


----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-24 22:40

Message:
Logged In: YES 
user_id=421

A fix for this will be included in the next release (1.40.4/1.50.0).

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-01 12:48

Message:
Logged In: YES 
user_id=710

patch updated, a typo was in the previous one.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-01 09:58

Message:
Logged In: YES 
user_id=710

Here is a patch to turn some warnings that can lead to
invalid pdf output to fatal errors.

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=721&group_id=106

From noreply at sarovar.org  Sun Jun 24 23:44:17 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Mon, 25 Jun 2007 03:14:17 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-736 ] font expansion leads to wrong log
	output of \kerns.
Message-ID: <E1I2ZsX-00066J-00@sarovar.org>

Bugs item #736, was opened at 2007-02-22 03:56
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=736&group_id=106

Category: hz
Group: v1.40.1
>Status: Closed
>Resolution: Fixed
Priority: 3
Submitted By: Robert (schlcht)
Assigned to: The Thanh Han (hanthethanh)
Summary: font expansion leads to wrong log output of \kerns.

Initial Comment:
When applying font expansion, implicit kerns will be
output *with* a space in the log file, which makes them
appear like explicit kerns.

The following

\tracingoutput1
\pdfadjustspacing2
\pdffontexpand\font 20 20 5 autoexpand
bye\bye

will yield

...\tenrm b
...\kern -0.27779
...\tenrm y
...\kern -0.27779
...etc.

instead of

...\tenrm b
...\kern-0.27779
...\tenrm y
...\kern-0.27779
...etc.



----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-24 23:44

Message:
Logged In: YES 
user_id=421

A fix for this will be included in the next release (1.40.4/1.50.0).

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-02-28 15:16

Message:
Logged In: YES 
user_id=710

Here is an attempt to fix the bug.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-02-22 11:46

Message:
Logged In: YES 
user_id=710

I confirm the bug. Will try to fix it soon.

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=736&group_id=106

From noreply at sarovar.org  Mon Jun 25 01:33:37 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Mon, 25 Jun 2007 05:03:37 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-772 ] Option -recorder does not work for
	Type1 or PK files
Message-ID: <E1I2baL-0004H3-00@sarovar.org>

Bugs item #772, was opened at 2007-04-13 04:54
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=772&group_id=106

Category: web2c
Group: v1.40.0
Status: Open
Resolution: Accepted
Priority: 4
Submitted By: Heiko Oberdiek (oberdiek)
Assigned to: Martin Schr?der (oneiros)
Summary: Option -recorder does not work for Type1 or PK files

Initial Comment:
Hello,

pdfTeX 1.40.3 supports the Web2C feature,
enabled by option -recorder.
However, it does not record all files,
.pfb (Type1) or .pk files are missing.

Yours sincerely
  Heiko <oberdiek at uni-freiburg.de>

PS: texmf.cnf isn't recorded either.


----------------------------------------------------------------------

>Comment By: Martin Schr?der (oneiros)
Date: 2007-06-25 01:33

Message:
Logged In: YES 
user_id=421

Attached is a patch that should fix this. Please test.

----------------------------------------------------------------------

Comment By: Heiko Oberdiek (oberdiek)
Date: 2007-04-17 13:19

Message:
Logged In: YES 
user_id=1276

Hello,

to prevent that it gets lost, a followup of mine in
ntg-pdftex mailing list:

After further testing (sorry) I found other gaps in file
name recording:

\pdfximage{<file>}
\pdffilesize{<file>}
\pdffilemoddate{<file>}
\pdffiledump{<file>}
\pdfmdfivesum file{<file>}

Yours sincerely
  Heiko <oberdiek at uni-freiburg.de>


----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=772&group_id=106

From noreply at sarovar.org  Mon Jun 25 12:41:19 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Mon, 25 Jun 2007 16:11:19 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-772 ] Option -recorder does not work for
	Type1 or PK files
Message-ID: <E1I2m0V-00028h-00@sarovar.org>

Bugs item #772, was opened at 2007-04-13 04:54
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=772&group_id=106

Category: web2c
Group: v1.40.0
Status: Open
Resolution: Accepted
Priority: 4
Submitted By: Heiko Oberdiek (oberdiek)
Assigned to: Martin Schr?der (oneiros)
Summary: Option -recorder does not work for Type1 or PK files

Initial Comment:
Hello,

pdfTeX 1.40.3 supports the Web2C feature,
enabled by option -recorder.
However, it does not record all files,
.pfb (Type1) or .pk files are missing.

Yours sincerely
  Heiko <oberdiek at uni-freiburg.de>

PS: texmf.cnf isn't recorded either.


----------------------------------------------------------------------

>Comment By: Martin Schr?der (oneiros)
Date: 2007-06-25 12:41

Message:
Logged In: YES 
user_id=421

A much simpler patch is attached; it also catches the new
pipe feature.

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-25 01:33

Message:
Logged In: YES 
user_id=421

Attached is a patch that should fix this. Please test.

----------------------------------------------------------------------

Comment By: Heiko Oberdiek (oberdiek)
Date: 2007-04-17 13:19

Message:
Logged In: YES 
user_id=1276

Hello,

to prevent that it gets lost, a followup of mine in
ntg-pdftex mailing list:

After further testing (sorry) I found other gaps in file
name recording:

\pdfximage{<file>}
\pdffilesize{<file>}
\pdffilemoddate{<file>}
\pdffiledump{<file>}
\pdfmdfivesum file{<file>}

Yours sincerely
  Heiko <oberdiek at uni-freiburg.de>


----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=772&group_id=106

From noreply at sarovar.org  Tue Jun 26 00:22:50 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Tue, 26 Jun 2007 03:52:50 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-824 ] Bus error caused by loading an
	image into a format file
Message-ID: <E1I2wxO-0004tw-00@sarovar.org>

Bugs item #824, was opened at 2007-06-25 23:22
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

Category: Image inclusion
Group: v1.40.3
Status: Open
Resolution: None
Priority: 5
Submitted By: Robin Houston (robinhouston)
Assigned to: Martin Schr?der (oneiros)
Summary: Bus error caused by loading an image into a format file

Initial Comment:
I have written a tool that speeds up repeated
compilation of a source file, by generating a format
from the preamble of the document, and then using it to
compile the body.

One user reported a crash when using this tool with a
custom letterhead class; the class in question may be
found at
http://www.soe.ucsc.edu/~elm/LaTeX/ucletter.cls (though
note that a simpler demonstration is attached to this
report).

The bug is triggered by the fact that this class loads
an image during the processing of the preamble (i.e.
during the processing of the .ini file) and saves it in
a box. When this box is used, during the compilation of
the body, pdftex crashes.

This does work with ordinary (non-PDF) TeX, so the
problem is specific to PDFTeX.

The attachment contains a simple demonstration of the
problem. Unpack it and run 'make'.


----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

From noreply at sarovar.org  Tue Jun 26 00:30:09 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Tue, 26 Jun 2007 04:00:09 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-824 ] Bus error caused by loading an
	image into a format file
Message-ID: <E1I2x4T-0006Im-00@sarovar.org>

Bugs item #824, was opened at 2007-06-26 00:22
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

Category: Image inclusion
Group: v1.40.3
Status: Open
>Resolution: Accepted
Priority: 5
Submitted By: Robin Houston (robinhouston)
Assigned to: Martin Schr?der (oneiros)
Summary: Bus error caused by loading an image into a format file

Initial Comment:
I have written a tool that speeds up repeated
compilation of a source file, by generating a format
from the preamble of the document, and then using it to
compile the body.

One user reported a crash when using this tool with a
custom letterhead class; the class in question may be
found at
http://www.soe.ucsc.edu/~elm/LaTeX/ucletter.cls (though
note that a simpler demonstration is attached to this
report).

The bug is triggered by the fact that this class loads
an image during the processing of the preamble (i.e.
during the processing of the .ini file) and saves it in
a box. When this box is used, during the compilation of
the body, pdftex crashes.

This does work with ordinary (non-PDF) TeX, so the
problem is specific to PDFTeX.

The attachment contains a simple demonstration of the
problem. Unpack it and run 'make'.


----------------------------------------------------------------------

>Comment By: Martin Schr?der (oneiros)
Date: 2007-06-26 00:30

Message:
Logged In: YES 
user_id=421

I can reproduce it, and it obviously shouldn't crash, but
I'm really not shure if it's supposed to work, as the format
of course will not save the picture. You can't do everything
in IniTeX...

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

From noreply at sarovar.org  Tue Jun 26 00:42:29 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Tue, 26 Jun 2007 04:12:29 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-824 ] Bus error caused by loading an
	image into a format file
Message-ID: <E1I2xGP-0000f9-00@sarovar.org>

Bugs item #824, was opened at 2007-06-25 23:22
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

Category: Image inclusion
Group: v1.40.3
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robin Houston (robinhouston)
Assigned to: Martin Schr?der (oneiros)
Summary: Bus error caused by loading an image into a format file

Initial Comment:
I have written a tool that speeds up repeated
compilation of a source file, by generating a format
from the preamble of the document, and then using it to
compile the body.

One user reported a crash when using this tool with a
custom letterhead class; the class in question may be
found at
http://www.soe.ucsc.edu/~elm/LaTeX/ucletter.cls (though
note that a simpler demonstration is attached to this
report).

The bug is triggered by the fact that this class loads
an image during the processing of the preamble (i.e.
during the processing of the .ini file) and saves it in
a box. When this box is used, during the compilation of
the body, pdftex crashes.

This does work with ordinary (non-PDF) TeX, so the
problem is specific to PDFTeX.

The attachment contains a simple demonstration of the
problem. Unpack it and run 'make'.


----------------------------------------------------------------------

>Comment By: Robin Houston (robinhouston)
Date: 2007-06-25 23:42

Message:
Logged In: YES 
user_id=4579

I'm impressed by the speed of your response! Thanks.

If you replace the PDF image by an EPS file, and use
-output-format dvi, then it does work. That suggests to me
that the problem is not fundamentally caused by a limitation
of IniTeX. But I don't know enough about the inner workings
of the \includegraphics command to be sure about that.
(Perhaps PDF graphics are handled in a sufficiently
different way for this to be a false comparison?)

In any case, as you say, it shouldn't crash!

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-25 23:30

Message:
Logged In: YES 
user_id=421

I can reproduce it, and it obviously shouldn't crash, but
I'm really not shure if it's supposed to work, as the format
of course will not save the picture. You can't do everything
in IniTeX...

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

From noreply at sarovar.org  Tue Jun 26 01:26:08 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Tue, 26 Jun 2007 04:56:08 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-824 ] Bus error caused by loading an
	image into a format file
Message-ID: <E1I2xwe-00070e-00@sarovar.org>

Bugs item #824, was opened at 2007-06-26 00:22
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

Category: Image inclusion
Group: v1.40.3
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robin Houston (robinhouston)
Assigned to: Martin Schr?der (oneiros)
Summary: Bus error caused by loading an image into a format file

Initial Comment:
I have written a tool that speeds up repeated
compilation of a source file, by generating a format
from the preamble of the document, and then using it to
compile the body.

One user reported a crash when using this tool with a
custom letterhead class; the class in question may be
found at
http://www.soe.ucsc.edu/~elm/LaTeX/ucletter.cls (though
note that a simpler demonstration is attached to this
report).

The bug is triggered by the fact that this class loads
an image during the processing of the preamble (i.e.
during the processing of the .ini file) and saves it in
a box. When this box is used, during the compilation of
the body, pdftex crashes.

This does work with ordinary (non-PDF) TeX, so the
problem is specific to PDFTeX.

The attachment contains a simple demonstration of the
problem. Unpack it and run 'make'.


----------------------------------------------------------------------

Comment By: Reinhard Kotucha (reinhard)
Date: 2007-06-26 01:26

Message:
Logged In: YES 
user_id=4195

Martin,
you probably can't do everything in a format file.  However,
it would be nice to be able to put graphics to a format file
at least.  Suppose that a web server has to generate PDF
files on-the-fly, each contains a company logo.  The best
place place for the logo is the format file if speed
matters.  It would be nice if there are no restrictions.

Regards,
  Reinhard



----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-26 00:42

Message:
Logged In: YES 
user_id=4579

I'm impressed by the speed of your response! Thanks.

If you replace the PDF image by an EPS file, and use
-output-format dvi, then it does work. That suggests to me
that the problem is not fundamentally caused by a limitation
of IniTeX. But I don't know enough about the inner workings
of the \includegraphics command to be sure about that.
(Perhaps PDF graphics are handled in a sufficiently
different way for this to be a false comparison?)

In any case, as you say, it shouldn't crash!

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-26 00:30

Message:
Logged In: YES 
user_id=421

I can reproduce it, and it obviously shouldn't crash, but
I'm really not shure if it's supposed to work, as the format
of course will not save the picture. You can't do everything
in IniTeX...

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

From noreply at sarovar.org  Tue Jun 26 15:49:20 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Tue, 26 Jun 2007 19:19:20 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-824 ] Bus error caused by loading an
	image into a format file
Message-ID: <E1I3BQ0-0000IH-00@sarovar.org>

Bugs item #824, was opened at 2007-06-25 23:22
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

Category: Image inclusion
Group: v1.40.3
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robin Houston (robinhouston)
Assigned to: Martin Schr?der (oneiros)
Summary: Bus error caused by loading an image into a format file

Initial Comment:
I have written a tool that speeds up repeated
compilation of a source file, by generating a format
from the preamble of the document, and then using it to
compile the body.

One user reported a crash when using this tool with a
custom letterhead class; the class in question may be
found at
http://www.soe.ucsc.edu/~elm/LaTeX/ucletter.cls (though
note that a simpler demonstration is attached to this
report).

The bug is triggered by the fact that this class loads
an image during the processing of the preamble (i.e.
during the processing of the .ini file) and saves it in
a box. When this box is used, during the compilation of
the body, pdftex crashes.

This does work with ordinary (non-PDF) TeX, so the
problem is specific to PDFTeX.

The attachment contains a simple demonstration of the
problem. Unpack it and run 'make'.


----------------------------------------------------------------------

>Comment By: Robin Houston (robinhouston)
Date: 2007-06-26 14:49

Message:
Logged In: YES 
user_id=4579

Simplifying the example by eliminating the graphics package:

==> foo.ini <==
\documentclass{minimal}

\newbox\picbox
\pdfximage{pic.pdf}
\setbox\picbox\hbox{\pdfrefximage\pdflastximage}

\dump

==> foo.tex <==
\begin{document}
        \box\picbox
\end{document}


Also, I see now that my comparison with dvi-mode is indeed a
false one, because the mechanisms are quite different, and
the DVI graphics driver only has to include a \special,
rather than the graphic itself.

A simple solution, I suppose, would be to make \pdfrefximage
(and, presumably, the other \pdfrefx commands) invalid in
IniTeX mode. Perhaps this is too brutal, since it forbids
certain harmless activities such as finding the dimensions
of an image from an .ini file; and of course I would be
delighted if it were made to work instead.


----------------------------------------------------------------------

Comment By: Reinhard Kotucha (reinhard)
Date: 2007-06-26 00:26

Message:
Logged In: YES 
user_id=4195

Martin,
you probably can't do everything in a format file.  However,
it would be nice to be able to put graphics to a format file
at least.  Suppose that a web server has to generate PDF
files on-the-fly, each contains a company logo.  The best
place place for the logo is the format file if speed
matters.  It would be nice if there are no restrictions.

Regards,
  Reinhard



----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-25 23:42

Message:
Logged In: YES 
user_id=4579

I'm impressed by the speed of your response! Thanks.

If you replace the PDF image by an EPS file, and use
-output-format dvi, then it does work. That suggests to me
that the problem is not fundamentally caused by a limitation
of IniTeX. But I don't know enough about the inner workings
of the \includegraphics command to be sure about that.
(Perhaps PDF graphics are handled in a sufficiently
different way for this to be a false comparison?)

In any case, as you say, it shouldn't crash!

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-25 23:30

Message:
Logged In: YES 
user_id=421

I can reproduce it, and it obviously shouldn't crash, but
I'm really not shure if it's supposed to work, as the format
of course will not save the picture. You can't do everything
in IniTeX...

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

From noreply at sarovar.org  Tue Jun 26 23:01:25 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Wed, 27 Jun 2007 02:31:25 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-824 ] Bus error caused by loading an
	image into a format file
Message-ID: <E1I3IA9-0004Zn-00@sarovar.org>

Bugs item #824, was opened at 2007-06-26 00:22
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

Category: Image inclusion
Group: v1.40.3
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robin Houston (robinhouston)
Assigned to: Martin Schr?der (oneiros)
Summary: Bus error caused by loading an image into a format file

Initial Comment:
I have written a tool that speeds up repeated
compilation of a source file, by generating a format
from the preamble of the document, and then using it to
compile the body.

One user reported a crash when using this tool with a
custom letterhead class; the class in question may be
found at
http://www.soe.ucsc.edu/~elm/LaTeX/ucletter.cls (though
note that a simpler demonstration is attached to this
report).

The bug is triggered by the fact that this class loads
an image during the processing of the preamble (i.e.
during the processing of the .ini file) and saves it in
a box. When this box is used, during the compilation of
the body, pdftex crashes.

This does work with ordinary (non-PDF) TeX, so the
problem is specific to PDFTeX.

The attachment contains a simple demonstration of the
problem. Unpack it and run 'make'.


----------------------------------------------------------------------

>Comment By: Martin Schr?der (oneiros)
Date: 2007-06-26 23:01

Message:
Logged In: YES 
user_id=421

Sorry, pdf things work different then dvi, so we can not
make \pdfximage etc. in ini mode without a lot of work; we
will probably disable a bunch of primitives.

----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-26 15:49

Message:
Logged In: YES 
user_id=4579

Simplifying the example by eliminating the graphics package:

==> foo.ini <==
\documentclass{minimal}

\newbox\picbox
\pdfximage{pic.pdf}
\setbox\picbox\hbox{\pdfrefximage\pdflastximage}

\dump

==> foo.tex <==
\begin{document}
        \box\picbox
\end{document}


Also, I see now that my comparison with dvi-mode is indeed a
false one, because the mechanisms are quite different, and
the DVI graphics driver only has to include a \special,
rather than the graphic itself.

A simple solution, I suppose, would be to make \pdfrefximage
(and, presumably, the other \pdfrefx commands) invalid in
IniTeX mode. Perhaps this is too brutal, since it forbids
certain harmless activities such as finding the dimensions
of an image from an .ini file; and of course I would be
delighted if it were made to work instead.


----------------------------------------------------------------------

Comment By: Reinhard Kotucha (reinhard)
Date: 2007-06-26 01:26

Message:
Logged In: YES 
user_id=4195

Martin,
you probably can't do everything in a format file.  However,
it would be nice to be able to put graphics to a format file
at least.  Suppose that a web server has to generate PDF
files on-the-fly, each contains a company logo.  The best
place place for the logo is the format file if speed
matters.  It would be nice if there are no restrictions.

Regards,
  Reinhard



----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-26 00:42

Message:
Logged In: YES 
user_id=4579

I'm impressed by the speed of your response! Thanks.

If you replace the PDF image by an EPS file, and use
-output-format dvi, then it does work. That suggests to me
that the problem is not fundamentally caused by a limitation
of IniTeX. But I don't know enough about the inner workings
of the \includegraphics command to be sure about that.
(Perhaps PDF graphics are handled in a sufficiently
different way for this to be a false comparison?)

In any case, as you say, it shouldn't crash!

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-26 00:30

Message:
Logged In: YES 
user_id=421

I can reproduce it, and it obviously shouldn't crash, but
I'm really not shure if it's supposed to work, as the format
of course will not save the picture. You can't do everything
in IniTeX...

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

From noreply at sarovar.org  Wed Jun 27 13:01:50 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Wed, 27 Jun 2007 16:31:50 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-480 ] pdftex offset incorrect with
	\magnification. Patch included.
Message-ID: <E1I3VHS-0002Rk-00@sarovar.org>

Bugs item #480, was opened at 2006-02-12 18:12
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=480&group_id=106

Category: None
Group: v1.30.0
>Status: Closed
Resolution: Wont Fix
Priority: 3
Submitted By: Ian Hutchinson (ihutch)
Assigned to: Nobody (None)
Summary: pdftex offset incorrect with \magnification. Patch included.

Initial Comment:
 Any plain tex file that uses
\magnification gives incorrect text placement in pdf.
This bug is present
in the latest pdftex version 1.21a. It apparently was
caused by the
introduction of the new variables \pdfvoffset and
\pdfhoffset. This bug
was not present in older pdftex, e.g. version
3.14159-1.10b, which was
part of tetex-2...

A simple illustration of the problem is with the
trivial file:

\magnification \magstep3
%The following parindent and offset changes are not the
cause of errors.
%They are merely to illustrate them clearly by writing
at top left.
%Anything other than \magstep0 gives a placement error
with pdftex 1.21a.
\parindent 0pt
\hoffset -1 truein
\voffset -1 truein
The top.
\end

With tex and xdvi, the words "The top." are placed at
the immediate top
left. With pdftex 1.21a and xpdf (or acroread) they are
not. With earlier
pdftex 1.10b (e.g.) they are.

I had an extensive discussion on comp.text.tex with
Heiko Oberdiek, most
of which is at
http://www.codecomments.com/Tex/message784423.html

The gist of it is that backward compatibility with
plain tex files is very
important. As far as possible, it should be preserved
transparently.
Authors should not be required to hack their files in
order for them to
render the same in pdf as in dvi. Moreover there is a
simple way to
provide this compatibility.

A reasonable way to fix the bug is to change pdftex.ini
and hence
pdftex.fmt. (The corresponding pdfetex files ought also
to be fixed.)

A proposed patched pdftex.ini file is attached. It
consists simply of

% Thomas Esser, 1998, 2004. public domain.
\ifx\pdfoutput\undefined
\else
  \ifx\pdfoutput\relax
  \else
    \input pdftexconfig
    \pdfoutput=1
  \fi
\fi

\input plain

\ifx\pdfoutput\undefined
\else
  \ifx\pdfoutput\relax
  \else
\catcode`@=11
\def\m at g{%
\mag\count@
\hsize6.5truein\vsize8.9truein\dimen\footins8truein
%These commands fix the pdf sizes to be in true units.
\mag at fix\pdfhorigin \mag at fix\pdfvorigin
\mag at fix\pdfpagewidth \mag at fix\pdfpageheight
}
\def\mag at fix#1{%
 #1=\expandafter\convert at truept\the#1\relax
}
\begingroup
\catcode`P=12
\catcode`T=12
\lowercase{%
\endgroup
\def\convert at truept#1PT{%
#1truept%
}%
}%
\catcode`@=12
  \fi
\fi

\dump
\endinput

I don't know who takes responsibility for pdftex.ini.
But clearly this
ought to be fixed for all distributions. I care most
about tetex, because
it is what I use. Thanks,

        Ian Hutchinson


----------------------------------------------------------------------

>Comment By: Taco Hoekwater (taco)
Date: 2007-06-27 13:01

Message:
Logged In: YES 
user_id=1608

Considering this behaviour of pdftex has been there since
1.21a, this is how it should stay when it comes to the
executable itself.

And pdftex.ini is controlled by the tex-live team
(tex-live at tug.org)

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2006-10-23 20:49

Message:
Logged In: YES 
user_id=710

oh yes, thanks Phil for the correction.

In response to Ian Hutchinson: I am the maintainer of
neither pdftex.ini nor pdftex, so I feel that someone else
must make the decision.

----------------------------------------------------------------------

Comment By: Philip TAYLOR (chaa006)
Date: 2006-10-23 20:21

Message:
Logged In: YES 
user_id=3040

Thanh wrote :

I propose that if someone changes magnification then he/she
is suppposed to say

\pdfhorigin=1in
\pdfvorigin=1in

Surely they should write

\pdfhorigin = 1 true in
\pdfvorigin = 1 true in

should they not ?  I always do,
and it certainly has the intended
effect.

** Phil.


----------------------------------------------------------------------

Comment By: Ian Hutchinson (ihutch)
Date: 2006-10-23 19:49

Message:
Logged In: YES 
user_id=3410

In response to hanthethanh, let me explain once again that
the point is that TeX ought always to work the same with
both dvi output and pdf output. The latest pdftex breaks
that for all documents, old or new, that use \magnification.
Of course there are many ways the authors can fix those
documents by adding new commands. BUT THEY SHOULD NOT HAVE
TO. TeX's archival integrity is far too valuable for us to
accept it being broken by this incompatibility. I've shown
how it can be transparently fixed. The correction just needs
to be incorporated into the distributions

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2006-10-23 12:37

Message:
Logged In: YES 
user_id=710

I propose that if someone changes magnification then he/she
is suppposed to say

\pdfhorigin=1in
\pdfvorigin=1in

or something similar.

An undocumented trick is that if \pdfhorigin or \pdfvorigin
is not set (or set to 0) when the first page is shipped out,
then they will get 1in as the default value. To get zero
origin(s), use 1sp instead of 0.


----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=480&group_id=106

From taco at elvenkind.com  Wed Jun 27 13:40:12 2007
From: taco at elvenkind.com (Taco Hoekwater)
Date: Wed, 27 Jun 2007 13:40:12 +0200
Subject: [NTG-pdftex] images in formats
In-Reply-To: <E1I3IA9-0004Zn-00@sarovar.org>
References: <E1I3IA9-0004Zn-00@sarovar.org>
Message-ID: <46824C9C.6040901@elvenkind.com>

noreply at sarovar.org wrote:
> Bugs item #824, was opened at 2007-06-26 00:22
> You can respond by visiting: 
> http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

etc. etc.

A very quick, fast, and non-crashing solution is to disable setting
\pdfoutput to non-zero in initex mode :-)

I do not think it is feasible to support the actual inclusion of
image files into the format, but I dont believe that is really
needed: the crash is a result of the fact that the image_array
and pdf_mem are not written to the format.

So, that leaves two options: bluntly disabling \pdfrefximage et.al.
in ini mode, or adding dump/undump code for those arrays. It would
not be a very invasive patch, and that has my preference.

What do you think?

Taco

From dak at gnu.org  Wed Jun 27 13:52:04 2007
From: dak at gnu.org (David Kastrup)
Date: Wed, 27 Jun 2007 13:52:04 +0200
Subject: [NTG-pdftex] images in formats
In-Reply-To: <46824C9C.6040901@elvenkind.com> (Taco Hoekwater's message of
	"Wed\, 27 Jun 2007 13\:40\:12 +0200")
References: <E1I3IA9-0004Zn-00@sarovar.org> <46824C9C.6040901@elvenkind.com>
Message-ID: <86fy4dipi3.fsf@lola.quinscape.zz>

Taco Hoekwater <taco at elvenkind.com> writes:

> noreply at sarovar.org wrote:
>> Bugs item #824, was opened at 2007-06-26 00:22
>> You can respond by visiting: 
>> http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106
>
> etc. etc.
>
> A very quick, fast, and non-crashing solution is to disable setting
> \pdfoutput to non-zero in initex mode :-)
>
> I do not think it is feasible to support the actual inclusion of
> image files into the format, but I dont believe that is really
> needed: the crash is a result of the fact that the image_array
> and pdf_mem are not written to the format.
>
> So, that leaves two options: bluntly disabling \pdfrefximage et.al.
> in ini mode, or adding dump/undump code for those arrays. It would
> not be a very invasive patch, and that has my preference.
>
> What do you think?

Well, LaTeX has a command \AtBeginDVI which has the principal purpose
of saving PostScript header specials (and similar stuff) across a
format dump, as used by mylatex.ltx (for example).

web2c also has a trend of allowing initex for everything and making it
closer to virtex (the main motivation for the latter's existence,
squeezing a few dozen kilobytes of code, is no longer present).

The ability to transparently dump a snapshot of TeX's state (modulo
open files, but including already typeset boxes) is something which we
should not lightly give up or make less functional.

So it is is feasible, my vote would be on dumping the required arrays.

-- 
David Kastrup

From martin at oneiros.de  Wed Jun 27 13:59:36 2007
From: martin at oneiros.de (=?ISO-8859-1?Q?Martin_Schr=F6der?=)
Date: Wed, 27 Jun 2007 13:59:36 +0200
Subject: [NTG-pdftex] images in formats
In-Reply-To: <86fy4dipi3.fsf@lola.quinscape.zz>
References: <E1I3IA9-0004Zn-00@sarovar.org> <46824C9C.6040901@elvenkind.com>
	<86fy4dipi3.fsf@lola.quinscape.zz>
Message-ID: <68c491a60706270459k5bce9c5bn3c34d662b4b7a07f@mail.gmail.com>

2007/6/27, David Kastrup <dak at gnu.org>:
> Taco Hoekwater <taco at elvenkind.com> writes:
> > A very quick, fast, and non-crashing solution is to disable setting
> > \pdfoutput to non-zero in initex mode :-)

No, because that get's dumped and the pdf*-formats (like pdflatex.ini) set it.

> > So, that leaves two options: bluntly disabling \pdfrefximage et.al.
> > in ini mode, or adding dump/undump code for those arrays. It would
> > not be a very invasive patch, and that has my preference.
> >
> > What do you think?

That's exactly what I propose to do: Disable \pdfximage and other
commands (like \pdfxform and \pdfobj) that cause problems in ini mode.

> So it is is feasible, my vote would be on dumping the required arrays.

It's not easily done; a patch would be welcomed, but be warned that
this is _hard_. And I seriously doubt that luaTeX needs it.

Best
   Martin

From noreply at sarovar.org  Wed Jun 27 13:43:56 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Wed, 27 Jun 2007 17:13:56 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-747 ] \letterspacefont and
	\pdffontexpand, again
Message-ID: <E1I3VwC-0001nV-00@sarovar.org>

Bugs item #747, was opened at 2007-03-09 04:09
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=747&group_id=106

Category: hz
Group: v1.40.1
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robert (schlcht)
Assigned to: The Thanh Han (hanthethanh)
Summary: \letterspacefont and \pdffontexpand, again

Initial Comment:
When expanding a letterspaced font, the base font will
be expanded, too, resulting in the error `font has been
expanded with different parameters' when the base font
is expanded again:

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20 20 5 autoexpand
\pdffontexpand\font   20 20 5 autoexpand
Z\bye


----------------------------------------------------------------------

>Comment By: Taco Hoekwater (taco)
Date: 2007-06-27 13:43

Message:
Logged In: YES 
user_id=1608


If there is no clean way of solving the problem, I'd rather
just document the error message as a feature. I find
\pdfnewexpandfont very ugly (sorry Thanh).

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-24 12:46

Message:
Logged In: YES 
user_id=710

here is a patch that introduces a new primitive
\pdfnewexpandfont. Usage:

\font\f=cmr10
\pdfnewexpandfont\fx \f 20 20 5 autoexpand

Note that \pdfnewexpandfont generates \fx by loading a TFM
corresponding to \f first, then applies font expansion in
the same way like "\pdffontexpand\fx 20 20 5". So when \f is
a font that doesn't have a corresponding TFM (for example,
because it was generated in pdftex memory only), the above
command won't work. In particular, the following doesn't work:

\font\f=cmr10
\letterspacefont\lsfont\f 100
\pdfnewexpandfont\fx \lsfont 20 20 5 autoexpand

since \lsfont doesn't have a corresponding TFM but was
generated by \letterspacefont. To create a
letterspaced+expanded font, one can use:

\font\f=cmr10
\letterspacefont\fx\f 100
\pdffontexpand\fx 20 20 5 autoexpand

things are gettting messy... sorry about that.
Testing/comments welcome.

----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-04-01 02:44

Message:
Logged In: YES 
user_id=2217

Fine for me and microtype. 

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-31 11:52

Message:
Logged In: YES 
user_id=710

either name is ok with me. We need a new pritimive to load a
new font and expand it, since the current one doesn't load a
new font and hence is making trouble. I would wait for a
while to see how Robert sees it before making any change.

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-03-19 12:07

Message:
Logged In: NO 

Hello,

I do not think that \pdfexpandfont is a good name for a new 
primitive, as it is too easy to confuse with \pdffontexpand. 
What about \pdfexpandnewfont, as -- if I understand 
correctly -- a new font is loaded?


Jonathan

P.S: Thank you for creating pdfTeX!

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-10 21:18

Message:
Logged In: YES 
user_id=710

Phil Taylor has a suggestion that seems great to me:
introduce a new primitive \pdfexpandfont instead. How do you
see it?

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-03-10 20:24

Message:
Logged In: YES 
user_id=421

Forget that comment. Of course a change of \pdffontexpand
has to be considered carefully. By you. :-)

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-03-10 20:22

Message:
Logged In: YES 
user_id=421

No. It's an undocumented primitive. ;-)

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-09 18:28

Message:
Logged In: YES 
user_id=710

sigh. A mistake when implementing the \pdffontexpand
primitive: it should load a new font for expansion, instead
of expanding a loaded font. Too late for change now?

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=747&group_id=106

From dak at gnu.org  Wed Jun 27 14:13:26 2007
From: dak at gnu.org (David Kastrup)
Date: Wed, 27 Jun 2007 14:13:26 +0200
Subject: [NTG-pdftex] images in formats
In-Reply-To: <68c491a60706270459k5bce9c5bn3c34d662b4b7a07f@mail.gmail.com>
	("Martin =?iso-8859-1?Q?Schr=F6der=22's?= message of "Wed\, 27 Jun 2007
	13\:59\:36 +0200")
References: <E1I3IA9-0004Zn-00@sarovar.org> <46824C9C.6040901@elvenkind.com>
	<86fy4dipi3.fsf@lola.quinscape.zz>
	<68c491a60706270459k5bce9c5bn3c34d662b4b7a07f@mail.gmail.com>
Message-ID: <86bqf1ioih.fsf@lola.quinscape.zz>

"Martin Schr?der" <martin at oneiros.de> writes:

> 2007/6/27, David Kastrup <dak at gnu.org>:
>> Taco Hoekwater <taco at elvenkind.com> writes:
>> > A very quick, fast, and non-crashing solution is to disable setting
>> > \pdfoutput to non-zero in initex mode :-)
>
> No, because that get's dumped and the pdf*-formats (like
> pdflatex.ini) set it.

My experience from the time when there was a pdftex.cfg around was
that this overrode the value of \pdfoutput in the dumped format.  Is
this still similar, or has this changed.

>> > So, that leaves two options: bluntly disabling \pdfrefximage
>> > et.al.  in ini mode, or adding dump/undump code for those
>> > arrays. It would not be a very invasive patch, and that has my
>> > preference.
>> >
>> > What do you think?
>
> That's exactly what I propose to do: Disable \pdfximage and other
> commands (like \pdfxform and \pdfobj) that cause problems in ini
> mode.
>
>> So it is is feasible, my vote would be on dumping the required arrays.
>
> It's not easily done; a patch would be welcomed, but be warned that
> this is _hard_.

I would not volunteer for further patches until I have managed to find
the time to do the already promised ones.  I was not sure what
solution Taco had been referring to with his "not be a very invasive
patch" comment above.  It sounded like dump/undump, and if that would
be feasible, I still think it the best idea not to make iniTeX less
capable than necessary.

For example, preview-latex uses mylatex.ltx to dump the state of the
TeX at \begin{document} time.  Not allowing any image references (like
in \savebox commands) before that point of time is a rather brutal
restriction.

> And I seriously doubt that luaTeX needs it.

Actually, the current "dump core if hyphenation in iniTeX is
attempted" inheritage from Aleph is likely even worse as an iniTeX
restriction.  But this is IIRC slated to get fixed (doing hyphenation
on utf-8 rather than ucs-16 might help).  And the image problem is a
similar ball park concerning its undesirability.

Again: the \AtBeginDvi command was added to LaTeX precisely in order
to conserve pretypeset stuff that would otherwise get lost at a format
dump.

-- 
David Kastrup

From martin at oneiros.de  Wed Jun 27 14:22:36 2007
From: martin at oneiros.de (=?ISO-8859-1?Q?Martin_Schr=F6der?=)
Date: Wed, 27 Jun 2007 14:22:36 +0200
Subject: [NTG-pdftex] images in formats
In-Reply-To: <86bqf1ioih.fsf@lola.quinscape.zz>
References: <E1I3IA9-0004Zn-00@sarovar.org> <46824C9C.6040901@elvenkind.com>
	<86fy4dipi3.fsf@lola.quinscape.zz>
	<68c491a60706270459k5bce9c5bn3c34d662b4b7a07f@mail.gmail.com>
	<86bqf1ioih.fsf@lola.quinscape.zz>
Message-ID: <68c491a60706270522p7ae88e4cuabaa2a4b47724499@mail.gmail.com>

2007/6/27, David Kastrup <dak at gnu.org>:
> For example, preview-latex uses mylatex.ltx to dump the state of the
> TeX at \begin{document} time.  Not allowing any image references (like
> in \savebox commands) before that point of time is a rather brutal
> restriction.

Why do you need it and what do you gain by using \savebox? The speed
increase is most likely minimal and the document needs to read the
image anyway -- unless you want to dump fragments of pdf code into the
format. If we expanded the dvi model we would dump the meta
information about pdf things and then undump them later. This needs
code for dumping and undumping this meta information. And
\immediate\pdfximage would still fail.

> Again: the \AtBeginDvi command was added to LaTeX precisely in order
> to conserve pretypeset stuff that would otherwise get lost at a format
> dump.

So store the commands there. Do you really need their expansion?

Don't forget: pdfTeX is one-pass, while TeX->dvips is two-pass.

Best
   Martin

From dak at gnu.org  Wed Jun 27 14:40:07 2007
From: dak at gnu.org (David Kastrup)
Date: Wed, 27 Jun 2007 14:40:07 +0200
Subject: [NTG-pdftex] images in formats
In-Reply-To: <68c491a60706270522p7ae88e4cuabaa2a4b47724499@mail.gmail.com>
	("Martin =?iso-8859-1?Q?Schr=F6der=22's?= message of "Wed\, 27 Jun 2007
	14\:22\:36 +0200")
References: <E1I3IA9-0004Zn-00@sarovar.org> <46824C9C.6040901@elvenkind.com>
	<86fy4dipi3.fsf@lola.quinscape.zz>
	<68c491a60706270459k5bce9c5bn3c34d662b4b7a07f@mail.gmail.com>
	<86bqf1ioih.fsf@lola.quinscape.zz>
	<68c491a60706270522p7ae88e4cuabaa2a4b47724499@mail.gmail.com>
Message-ID: <867ippina0.fsf@lola.quinscape.zz>

"Martin Schr?der" <martin at oneiros.de> writes:

> 2007/6/27, David Kastrup <dak at gnu.org>:
>> For example, preview-latex uses mylatex.ltx to dump the state of the
>> TeX at \begin{document} time.  Not allowing any image references (like
>> in \savebox commands) before that point of time is a rather brutal
>> restriction.
>
> Why do you need it

What?  preview-latex?  mylatex.ltx?

> and what do you gain by using \savebox?

Uh, it is _there_.  For a reason.  Saying that it (and similar
functionality) should not get used anymore is creating a rather sordid
restriction and backward incompatibility.

> The speed increase is most likely minimal

The speed increase of what is most likely minimal?  Of dumping a
format with the preamble?  Absolutely not.  It is very relevant in
preview-latex, for common editing work on single formulas easily a
factor of 5.  And we are talking about an interactive editing task and
its response time here.

> and the document needs to read the image anyway -- unless you want
> to dump fragments of pdf code into the format.

In DVI mode, a pointer to the image gets dumped in the form of a
special.  A similarly sufficient amount of information would have to
get there in PDF mode.

> If we expanded the dvi model we would dump the meta information
> about pdf things and then undump them later. This needs code for
> dumping and undumping this meta information. And
> \immediate\pdfximage would still fail.
>
>> Again: the \AtBeginDvi command was added to LaTeX precisely in order
>> to conserve pretypeset stuff that would otherwise get lost at a format
>> dump.
>
> So store the commands there. Do you really need their expansion?

Not the expansion, the typeset result.  This is what LaTeX uses and
preserves.  Since it is not untypical to put something in there which
would rely on \@onlypreamble stuff, I don't see that anything except
preserving the actual h/vlists could be depended on to work.

> Don't forget: pdfTeX is one-pass, while TeX->dvips is two-pass.

Where is the relevance?

-- 
David Kastrup

From martin at oneiros.de  Wed Jun 27 14:48:11 2007
From: martin at oneiros.de (=?ISO-8859-1?Q?Martin_Schr=F6der?=)
Date: Wed, 27 Jun 2007 14:48:11 +0200
Subject: [NTG-pdftex] images in formats
In-Reply-To: <867ippina0.fsf@lola.quinscape.zz>
References: <E1I3IA9-0004Zn-00@sarovar.org> <46824C9C.6040901@elvenkind.com>
	<86fy4dipi3.fsf@lola.quinscape.zz>
	<68c491a60706270459k5bce9c5bn3c34d662b4b7a07f@mail.gmail.com>
	<86bqf1ioih.fsf@lola.quinscape.zz>
	<68c491a60706270522p7ae88e4cuabaa2a4b47724499@mail.gmail.com>
	<867ippina0.fsf@lola.quinscape.zz>
Message-ID: <68c491a60706270548x5a985b0ajaf5588ebae950baa@mail.gmail.com>

2007/6/27, David Kastrup <dak at gnu.org>:
> "Martin Schr?der" <martin at oneiros.de> writes:
> > 2007/6/27, David Kastrup <dak at gnu.org>:
> >> For example, preview-latex uses mylatex.ltx to dump the state of the
> >> TeX at \begin{document} time.  Not allowing any image references (like
> >> in \savebox commands) before that point of time is a rather brutal
> >> restriction.
> >
> > Why do you need it
>
> What?  preview-latex?  mylatex.ltx?

\savebox

> > and what do you gain by using \savebox?
>
> Uh, it is _there_.  For a reason.  Saying that it (and similar
> functionality) should not get used anymore is creating a rather sordid
> restriction and backward incompatibility.
>
> > The speed increase is most likely minimal
>
> The speed increase of what is most likely minimal?  Of dumping a
> format with the preamble?  Absolutely not.  It is very relevant in
> preview-latex, for common editing work on single formulas easily a
> factor of 5.  And we are talking about an interactive editing task and
> its response time here.

The speed increase of using \savebox.

> > and the document needs to read the image anyway -- unless you want
> > to dump fragments of pdf code into the format.
>
> In DVI mode, a pointer to the image gets dumped in the form of a
> special.  A similarly sufficient amount of information would have to
> get there in PDF mode.
>
> > If we expanded the dvi model we would dump the meta information
> > about pdf things and then undump them later. This needs code for
> > dumping and undumping this meta information. And
> > \immediate\pdfximage would still fail.

[...]

> > Don't forget: pdfTeX is one-pass, while TeX->dvips is two-pass.
>
> Where is the relevance?

It was not designed with making two-pass-like solutions (which we are
discussing here) working, instead the two passes are intermingled. The
"sufficient amount of information" aka "meta information" is most
likely not in the code in one piece and there is currently no way to
dump and undump that. And a proper solution would not only handle
\pdfximage, but also \pdfobj, \pdfxform, ...

Best
   Martin

From martin at oneiros.de  Wed Jun 27 15:10:09 2007
From: martin at oneiros.de (=?ISO-8859-1?Q?Martin_Schr=F6der?=)
Date: Wed, 27 Jun 2007 15:10:09 +0200
Subject: [NTG-pdftex] images in formats
In-Reply-To: <863b0dimbw.fsf@lola.quinscape.zz>
References: <E1I3IA9-0004Zn-00@sarovar.org> <46824C9C.6040901@elvenkind.com>
	<86fy4dipi3.fsf@lola.quinscape.zz>
	<68c491a60706270459k5bce9c5bn3c34d662b4b7a07f@mail.gmail.com>
	<86bqf1ioih.fsf@lola.quinscape.zz>
	<68c491a60706270522p7ae88e4cuabaa2a4b47724499@mail.gmail.com>
	<867ippina0.fsf@lola.quinscape.zz>
	<68c491a60706270548x5a985b0ajaf5588ebae950baa@mail.gmail.com>
	<863b0dimbw.fsf@lola.quinscape.zz>
Message-ID: <68c491a60706270610q290829a0t3676891624fc38d8@mail.gmail.com>

2007/6/27, David Kastrup <dak at gnu.org>:
> "Martin Schr?der" <martin at oneiros.de> writes:
> > \savebox
>
> It is the mechanism LaTeX _offers_ to users (it will commonly get used
> in connection with fancyhdr.sty, for example).  And it uses a similar
> mechanism itself in \AtBeginDVI.
>
> Saying that it shouldn't is a bit late in the game.

This is the first user complaining in years (it has always been
broken). I don't forsee many people complaining if we disable it. How
many people do you know that do \includegraphics in the ini?

Disabling \pdfximage is easy, enabling it is probably much harder
(Taco is investigating that), and only very few users need it (the
ones raising the bug don't really unless pdfTeX dumps the complete
image in the format; meta-infos won't be enough).

Best
   Martin

From noreply at sarovar.org  Wed Jun 27 14:53:31 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Wed, 27 Jun 2007 18:23:31 +0530
Subject: [NTG-pdftex] [ pdftex-Feature Requests-825 ] Switch to disable
	pk-fonts
Message-ID: <E1I3X1X-0003Pz-00@sarovar.org>

Feature Requests item #825, was opened at 2007-06-27 14:53
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=496&aid=825&group_id=106

Category: Fonts
Group: v1.50
Status: Open
Resolution: None
Priority: 5
Submitted By: Martin Schr?der (oneiros)
Assigned to: Martin Schr?der (oneiros)
Summary: Switch to disable pk-fonts

Initial Comment:
This has just been raised on the MikTeX users lists: It
would be nice if one could disable all pk-Fonts at once
either with a cmdline switch or a command. Shouldn't be
too hard to implement.

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=496&aid=825&group_id=106

From noreply at sarovar.org  Wed Jun 27 14:55:34 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Wed, 27 Jun 2007 18:25:34 +0530
Subject: [NTG-pdftex] [ pdftex-Feature Requests-572 ] non-compression of
	pdfxform
Message-ID: <E1I3X3W-0003R4-00@sarovar.org>

Feature Requests item #572, was opened at 2006-06-10 23:11
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=496&aid=572&group_id=106

Category: None
>Group: v1.50
>Status: Closed
>Resolution: Wont Fix
Priority: 5
Submitted By: ivo welch (iaw4)
Assigned to: Nobody (None)
Summary: non-compression of pdfxform

Initial Comment:

would it be possible to add a feature to avoid
compression of the user defined pdfxform stream?

[goal:  I want to define a string that I can then
change via a shell/perl script in the .pdf file itself.
 I know I have to keep the same number of characters.]


\newcount\XOBJA
\setbox1=\hbox{12345678909876543210123456789} % this is
a special
string that one can later replace in the pdf file by hand
\pdfxform 1 \XOBJA=\pdflastxform

\begin{document}
Here is my string on page \arabic{page}: \pdfrefxform
\XOBJA
\end{document}

$ sed 's/12345678909876543210123456789/for user
pdftex.../' < myfile.pdf


I experimented with setting pdfcompresslevel and
resetting it, but it is not reliable in when
compression starts.  in any case, I do not want the
rest at low compression, just my own XOBJ xform.

regards,

/iaw


----------------------------------------------------------------------

>Comment By: Martin Schr?der (oneiros)
Date: 2007-06-27 14:55

Message:
Logged In: YES 
user_id=421

It seems nobody needs this anymore; anyway one can achieve
the same with pdftk.

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2006-07-25 00:02

Message:
Logged In: YES 
user_id=421

Ivo,
sorry for not reacting earlier. Adding this feature seems
possible. Is it still needed?

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=496&aid=572&group_id=106

From dak at gnu.org  Wed Jun 27 15:24:28 2007
From: dak at gnu.org (David Kastrup)
Date: Wed, 27 Jun 2007 15:24:28 +0200
Subject: [NTG-pdftex] images in formats
In-Reply-To: <68c491a60706270610q290829a0t3676891624fc38d8@mail.gmail.com>
	("Martin =?iso-8859-1?Q?Schr=F6der=22's?= message of "Wed\, 27 Jun 2007
	15\:10\:09 +0200")
References: <E1I3IA9-0004Zn-00@sarovar.org> <46824C9C.6040901@elvenkind.com>
	<86fy4dipi3.fsf@lola.quinscape.zz>
	<68c491a60706270459k5bce9c5bn3c34d662b4b7a07f@mail.gmail.com>
	<86bqf1ioih.fsf@lola.quinscape.zz>
	<68c491a60706270522p7ae88e4cuabaa2a4b47724499@mail.gmail.com>
	<867ippina0.fsf@lola.quinscape.zz>
	<68c491a60706270548x5a985b0ajaf5588ebae950baa@mail.gmail.com>
	<863b0dimbw.fsf@lola.quinscape.zz>
	<68c491a60706270610q290829a0t3676891624fc38d8@mail.gmail.com>
Message-ID: <86sl8dzg1f.fsf@lola.quinscape.zz>

"Martin Schr?der" <martin at oneiros.de> writes:

> 2007/6/27, David Kastrup <dak at gnu.org>:
>> "Martin Schr?der" <martin at oneiros.de> writes:
>> > \savebox
>>
>> It is the mechanism LaTeX _offers_ to users (it will commonly get used
>> in connection with fancyhdr.sty, for example).  And it uses a similar
>> mechanism itself in \AtBeginDVI.
>>
>> Saying that it shouldn't is a bit late in the game.
>
> This is the first user complaining in years (it has always been
> broken). I don't forsee many people complaining if we disable it. How
> many people do you know that do \includegraphics in the ini?
>
> Disabling \pdfximage is easy, enabling it is probably much harder
> (Taco is investigating that), and only very few users need it (the
> ones raising the bug don't really unless pdfTeX dumps the complete
> image in the format; meta-infos won't be enough).

In DVI mode, the dumped meta-info in the special _is_ enough.  It is
not expected that the actual contents of included files make it into
hlists/vlists or even the DVI file.  If external references break when
moving a format around in the tree or changing the referenced files,
nobody will be very much surprised.  PDFTeX should likely try to avoid
crashing or acting all too unpredictable, but that's more or less all.
It would seem reasonable to not change the reserved space at all in
the hlist/vlist, and align the image at the upper left corner of it,
regardless of what size it has now.

There is the question of just when to complain when an image source
has disappeared.  Probably format read time would be correct.

-- 
David Kastrup

From dak at gnu.org  Wed Jun 27 15:00:35 2007
From: dak at gnu.org (David Kastrup)
Date: Wed, 27 Jun 2007 15:00:35 +0200
Subject: [NTG-pdftex] images in formats
In-Reply-To: <68c491a60706270548x5a985b0ajaf5588ebae950baa@mail.gmail.com>
	("Martin =?iso-8859-1?Q?Schr=F6der=22's?= message of "Wed\, 27 Jun 2007
	14\:48\:11 +0200")
References: <E1I3IA9-0004Zn-00@sarovar.org> <46824C9C.6040901@elvenkind.com>
	<86fy4dipi3.fsf@lola.quinscape.zz>
	<68c491a60706270459k5bce9c5bn3c34d662b4b7a07f@mail.gmail.com>
	<86bqf1ioih.fsf@lola.quinscape.zz>
	<68c491a60706270522p7ae88e4cuabaa2a4b47724499@mail.gmail.com>
	<867ippina0.fsf@lola.quinscape.zz>
	<68c491a60706270548x5a985b0ajaf5588ebae950baa@mail.gmail.com>
Message-ID: <863b0dimbw.fsf@lola.quinscape.zz>

"Martin Schr?der" <martin at oneiros.de> writes:

> 2007/6/27, David Kastrup <dak at gnu.org>:
>> "Martin Schr?der" <martin at oneiros.de> writes:
>> > 2007/6/27, David Kastrup <dak at gnu.org>:
>> >> For example, preview-latex uses mylatex.ltx to dump the state of the
>> >> TeX at \begin{document} time.  Not allowing any image references (like
>> >> in \savebox commands) before that point of time is a rather brutal
>> >> restriction.
>> >
>> > Why do you need it
>>
>> What?  preview-latex?  mylatex.ltx?
>
> \savebox

It is the mechanism LaTeX _offers_ to users (it will commonly get used
in connection with fancyhdr.sty, for example).  And it uses a similar
mechanism itself in \AtBeginDVI.

Saying that it shouldn't is a bit late in the game.

>> > and what do you gain by using \savebox?
>>
>> Uh, it is _there_.  For a reason.  Saying that it (and similar
>> functionality) should not get used anymore is creating a rather sordid
>> restriction and backward incompatibility.
>>
>> > The speed increase is most likely minimal
>>
>> The speed increase of what is most likely minimal?
>
> The speed increase of using \savebox.

It is there and gets used.

>> > and the document needs to read the image anyway -- unless you want
>> > to dump fragments of pdf code into the format.
>>
>> In DVI mode, a pointer to the image gets dumped in the form of a
>> special.  A similarly sufficient amount of information would have to
>> get there in PDF mode.
>>
>> > If we expanded the dvi model we would dump the meta information
>> > about pdf things and then undump them later. This needs code for
>> > dumping and undumping this meta information. And
>> > \immediate\pdfximage would still fail.
>
> [...]
>
>> > Don't forget: pdfTeX is one-pass, while TeX->dvips is two-pass.
>>
>> Where is the relevance?
>
> It was not designed with making two-pass-like solutions (which we
> are discussing here) working, instead the two passes are
> intermingled.

I don't see that.  PDFTeX has to deal with boxes and hlists/vlists
being boxed, reboxed, unboxed, thrown away and duplicated.  So this is
basically a two-pass process between creation of an object and a
list-capable reference to it, and shipout.  An object might appear in
arbitrary duplication (including zero times) in multiple shipouts, so
the multipass abstraction that makes it possible to copy boxes already
needs to be present in PDFTeX.

> The "sufficient amount of information" aka "meta information" is
> most likely not in the code in one piece and there is currently no
> way to dump and undump that. And a proper solution would not only
> handle \pdfximage, but also \pdfobj, \pdfxform, ...

Sure.  But as I said, PDFTeX already _needs_ to organize its meta
information in order to deal with box manipulations.

-- 
David Kastrup

From hanthethanh at gmail.com  Wed Jun 27 18:22:03 2007
From: hanthethanh at gmail.com (Thanh Han The)
Date: Wed, 27 Jun 2007 18:22:03 +0200
Subject: [NTG-pdftex] images in formats
Message-ID: <74f506dc0706270922q6c41b882gc6f13f6a0326f01a@mail.gmail.com>

dumping an image in pdf mode is rather difficult to get
right. If in dvi mode an image is "stored" by a reference to
an external file, then I am afraid the speed gain is not
that much. There is for sure some comfort by having a dumped
file reference in the format, but again that can be also
achieved for pdf mode using some macros IMHO.

My vote is also to disable \pdfrefximage and the likes in
init mode.

Thanh


On Wed, Jun 27, 2007 at 03:24:28PM +0200, David Kastrup wrote:
> > This is the first user complaining in years (it has always been
> > broken). I don't forsee many people complaining if we disable it. How
> > many people do you know that do \includegraphics in the ini?
> >
> > Disabling \pdfximage is easy, enabling it is probably much harder
> > (Taco is investigating that), and only very few users need it (the
> > ones raising the bug don't really unless pdfTeX dumps the complete
> > image in the format; meta-infos won't be enough).
>
> In DVI mode, the dumped meta-info in the special _is_ enough.  It is
> not expected that the actual contents of included files make it into
> hlists/vlists or even the DVI file.  If external references break when
> moving a format around in the tree or changing the referenced files,
> nobody will be very much surprised.  PDFTeX should likely try to avoid
> crashing or acting all too unpredictable, but that's more or less all.
> It would seem reasonable to not change the reserved space at all in
> the hlist/vlist, and align the image at the upper left corner of it,
> regardless of what size it has now.
>
> There is the question of just when to complain when an image source
> has disappeared.  Probably format read time would be correct.

From pragma at wxs.nl  Wed Jun 27 19:13:36 2007
From: pragma at wxs.nl (Hans Hagen)
Date: Wed, 27 Jun 2007 19:13:36 +0200
Subject: [NTG-pdftex] images in formats
In-Reply-To: <74f506dc0706270922q6c41b882gc6f13f6a0326f01a@mail.gmail.com>
References: <74f506dc0706270922q6c41b882gc6f13f6a0326f01a@mail.gmail.com>
Message-ID: <46829AC0.5000502@wxs.nl>

Thanh Han The wrote:
> dumping an image in pdf mode is rather difficult to get
> right. If in dvi mode an image is "stored" by a reference to
> an external file, then I am afraid the speed gain is not
> that much. There is for sure some comfort by having a dumped
> file reference in the format, but again that can be also
> achieved for pdf mode using some macros IMHO.

to me it looks like a rather useless option to include an image in a 
format, just as we don't embed type 1 fonts in the format either so 
let's not waste energy on it

> My vote is also to disable \pdfrefximage and the likes in
> init mode.

depends a bit what 'the likes' is, i can imagine that one wants to 
measure the dimensions of a graphic or so and store them, but indeed
the ref to an imag ecan be disabled

also, those who generate a format should know what they're doing/dealing 
with

Hans



-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
      tel: 038 477 53 69 | fax: 038 477 53 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From frank at debian.org  Wed Jun 27 20:06:20 2007
From: frank at debian.org (Frank =?iso-8859-1?Q?K=FCster?=)
Date: Wed, 27 Jun 2007 20:06:20 +0200
Subject: [NTG-pdftex] images in formats
In-Reply-To: <46829AC0.5000502@wxs.nl> (Hans Hagen's message of "Wed\,
	27 Jun 2007 19\:13\:36 +0200")
References: <74f506dc0706270922q6c41b882gc6f13f6a0326f01a@mail.gmail.com>
	<46829AC0.5000502@wxs.nl>
Message-ID: <87zm2l2rxf.fsf@riesling.zuerich.kuesterei.ch>

Hans Hagen <pragma at wxs.nl> wrote:

> Thanh Han The wrote:
>> dumping an image in pdf mode is rather difficult to get
>> right. If in dvi mode an image is "stored" by a reference to
>> an external file, then I am afraid the speed gain is not
>> that much. There is for sure some comfort by having a dumped
>> file reference in the format, but again that can be also
>> achieved for pdf mode using some macros IMHO.
>
> to me it looks like a rather useless option to include an image in a 
> format, just as we don't embed type 1 fonts in the format either so 
> let's not waste energy on it

You know that you just said "To me it looks like a rather useless option
to include an image in a \savebox in the LaTeX preamble", or "To me it
looks like a rather useless option to support preview-latex in PDF mode
even for people who use \savebox with images in their preamble"?

> also, those who generate a format should know what they're doing/dealing 
> with

David knows, but preview-latex just takes the LaTeX preamble which its
users have written.

Regards, Frank
-- 
Frank K?ster
Single Molecule Spectroscopy, Protein Folding @ Inst. f. Biochemie, Univ. Z?rich
Debian Developer (teTeX/TeXLive)

From hanthethanh at gmail.com  Wed Jun 27 20:15:09 2007
From: hanthethanh at gmail.com (Thanh Han The)
Date: Wed, 27 Jun 2007 20:15:09 +0200
Subject: [NTG-pdftex] images in formats
Message-ID: <74f506dc0706271115v794cde37qa7612aea6c71e8cf@mail.gmail.com>

On Wed, Jun 27, 2007 at 07:13:36PM +0200, Hans Hagen wrote:
> Thanh Han The wrote:
> >dumping an image in pdf mode is rather difficult to get
> >right. If in dvi mode an image is "stored" by a reference to
> >an external file, then I am afraid the speed gain is not
> >that much. There is for sure some comfort by having a dumped
> >file reference in the format, but again that can be also
> >achieved for pdf mode using some macros IMHO.
>
> to me it looks like a rather useless option to include an image in a
> format, just as we don't embed type 1 fonts in the format either so
> let's not waste energy on it
>
> >My vote is also to disable \pdfrefximage and the likes in
> >init mode.
>
> depends a bit what 'the likes' is, i can imagine that one wants to
> measure the dimensions of a graphic or so and store them, but indeed
> the ref to an imag ecan be disabled

I had that in mind too, that's way I voted to disable
\pdfrefximage instead of \pdfximage. The likes here are
\pdfrefobj, \pdfrefxform and perhaps those that can cause
pdftex to write anything to the output.

fwiw, pdftex has support for reading image dimension that
can be used in dvi mode (added as requested by ChoF, who
uses pdftex mainly in dvi mode and use dvipdfmx to create
pdf).

> also, those who generate a format should know what they're doing/dealing
> with

indeed

Thanh

From oberdiek at uni-freiburg.de  Wed Jun 27 22:20:37 2007
From: oberdiek at uni-freiburg.de (Heiko Oberdiek)
Date: Wed, 27 Jun 2007 22:20:37 +0200
Subject: [NTG-pdftex] Image dimension in DVI mode (was: images in formats)
In-Reply-To: <74f506dc0706271115v794cde37qa7612aea6c71e8cf@mail.gmail.com>
References: <74f506dc0706271115v794cde37qa7612aea6c71e8cf@mail.gmail.com>
Message-ID: <20070627202036.GA4787@irwin.vpn.uni-freiburg.de>

On Wed, Jun 27, 2007 at 08:15:09PM +0200, Thanh Han The wrote:

> fwiw, pdftex has support for reading image dimension that
> can be used in dvi mode (added as requested by ChoF, who
> uses pdftex mainly in dvi mode and use dvipdfmx to create
> pdf).

What do you mean with "reading image dimension in dvi mode"?

pdfTeX 1.40.3:
! pdfTeX error (\pdfximage): not allowed in DVI mode (\pdfoutput <= 0).

Or are you referring to the package `bmpsize'?

Yours sincerely
  Heiko <oberdiek at uni-freiburg.de>
-- 

From reinhard.kotucha at web.de  Wed Jun 27 22:29:57 2007
From: reinhard.kotucha at web.de (Reinhard Kotucha)
Date: Wed, 27 Jun 2007 22:29:57 +0200
Subject: [NTG-pdftex] images in formats
In-Reply-To: <74f506dc0706271115v794cde37qa7612aea6c71e8cf@mail.gmail.com>
References: <74f506dc0706271115v794cde37qa7612aea6c71e8cf@mail.gmail.com>
Message-ID: <18050.51397.288527.63270@zarniwoop.ms25.local>

Thanh Han The writes:

 > > >My vote is also to disable \pdfrefximage and the likes in
 > > >init mode.

It seems that I miss the point.  I'm actually using \pdfximage and
\pdfrefximage with pdftex -ini in a script and it works perfectly.

I don't use it to dump a format file, pdftex -ini does all I need.

The reason I use pdftex -ini is that currently all I need from a TeX
distribution is pdftex, pdftex.pool, and texmf.cnf.  This allows to
ship the script with a tiny TeX distribution.  

If \pdfrefximage is removed from init mode I have to provide a format
file which actually does nothing.  Something like:

     pdftex -ini '\relax\dump'

And I have to provide and maintain this format file and it is loaded
each time I run the program though it is good for nothing.

If \pdfximage/\pdfrefximage cannot be used in format files, it is
better not to remove them from init mode but delay error handling
until \dump is processed.

IMO it's not a good idea to remove something only because it doen't
work in certain situations.  It works fine for me.  When I tried to
use pdftex -ini for this purpose a few years ago I got segmentation
faults.  And I'm very glad that it works now.

I also think that even much more can be done with luatex -ini than
with pdftex -ini.

Regards,
  Reinhard

-- 
----------------------------------------------------------------------------
Reinhard Kotucha			              Phone: +49-511-4592165
Marschnerstr. 25
D-30167 Hannover	                      mailto:reinhard.kotucha at web.de
----------------------------------------------------------------------------
Microsoft isn't the answer. Microsoft is the question, and the answer is NO.
----------------------------------------------------------------------------


From hanthethanh at gmail.com  Wed Jun 27 22:50:35 2007
From: hanthethanh at gmail.com (Thanh Han The)
Date: Wed, 27 Jun 2007 22:50:35 +0200
Subject: [NTG-pdftex] Image dimension in DVI mode (was: images in
	formats)
Message-ID: <74f506dc0706271350i2eeab0eeua701c7e3ac619e3a@mail.gmail.com>

On Wed, Jun 27, 2007 at 10:20:37PM +0200, Heiko Oberdiek wrote:
> On Wed, Jun 27, 2007 at 08:15:09PM +0200, Thanh Han The wrote:
>
> > fwiw, pdftex has support for reading image dimension that
> > can be used in dvi mode (added as requested by ChoF, who
> > uses pdftex mainly in dvi mode and use dvipdfmx to create
> > pdf).
>
> What do you mean with "reading image dimension in dvi mode"?
>
> pdfTeX 1.40.3:
> ! pdfTeX error (\pdfximage): not allowed in DVI mode (\pdfoutput <= 0).
>
> Or are you referring to the package `bmpsize'?

you got me: I said something I didn't test.

actually I added \pdfximagebbox as Cho requested, but it
seems that nobody has ever tested/used it, including me and
Cho.

Thanh

From noreply at sarovar.org  Thu Jun 28 08:45:56 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Thu, 28 Jun 2007 12:15:56 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-747 ] \letterspacefont and
	\pdffontexpand, again
Message-ID: <E1I3nlM-0003LZ-00@sarovar.org>

Bugs item #747, was opened at 2007-03-09 03:09
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=747&group_id=106

Category: hz
Group: v1.40.1
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robert (schlcht)
Assigned to: The Thanh Han (hanthethanh)
Summary: \letterspacefont and \pdffontexpand, again

Initial Comment:
When expanding a letterspaced font, the base font will
be expanded, too, resulting in the error `font has been
expanded with different parameters' when the base font
is expanded again:

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20 20 5 autoexpand
\pdffontexpand\font   20 20 5 autoexpand
Z\bye


----------------------------------------------------------------------

>Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 06:45

Message:
Logged In: YES 
user_id=710

I agree this is an ugly solution, which has its origin in a
design mistake. However the problem here is not only how to
deal with the error message, but the point is how to use
font expansion with a letterspaced font. Please give it a
thought so we can come up with an acceptable workaround. If
we want everything to be clean, there are more things that
have to be thrown away.

what about this: have a primitive \copyfont which creates a
copy of a font. Example:

\letterspacefont\lsfont\font 100
\copyfont\lsxfont\lsfont
\pdffontexpand\lsxfont 20 20 5 autoexpand



----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-27 11:43

Message:
Logged In: YES 
user_id=1608


If there is no clean way of solving the problem, I'd rather
just document the error message as a feature. I find
\pdfnewexpandfont very ugly (sorry Thanh).

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-24 10:46

Message:
Logged In: YES 
user_id=710

here is a patch that introduces a new primitive
\pdfnewexpandfont. Usage:

\font\f=cmr10
\pdfnewexpandfont\fx \f 20 20 5 autoexpand

Note that \pdfnewexpandfont generates \fx by loading a TFM
corresponding to \f first, then applies font expansion in
the same way like "\pdffontexpand\fx 20 20 5". So when \f is
a font that doesn't have a corresponding TFM (for example,
because it was generated in pdftex memory only), the above
command won't work. In particular, the following doesn't work:

\font\f=cmr10
\letterspacefont\lsfont\f 100
\pdfnewexpandfont\fx \lsfont 20 20 5 autoexpand

since \lsfont doesn't have a corresponding TFM but was
generated by \letterspacefont. To create a
letterspaced+expanded font, one can use:

\font\f=cmr10
\letterspacefont\fx\f 100
\pdffontexpand\fx 20 20 5 autoexpand

things are gettting messy... sorry about that.
Testing/comments welcome.

----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-04-01 00:44

Message:
Logged In: YES 
user_id=2217

Fine for me and microtype. 

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-31 09:52

Message:
Logged In: YES 
user_id=710

either name is ok with me. We need a new pritimive to load a
new font and expand it, since the current one doesn't load a
new font and hence is making trouble. I would wait for a
while to see how Robert sees it before making any change.

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-03-19 11:07

Message:
Logged In: NO 

Hello,

I do not think that \pdfexpandfont is a good name for a new 
primitive, as it is too easy to confuse with \pdffontexpand. 
What about \pdfexpandnewfont, as -- if I understand 
correctly -- a new font is loaded?


Jonathan

P.S: Thank you for creating pdfTeX!

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-10 20:18

Message:
Logged In: YES 
user_id=710

Phil Taylor has a suggestion that seems great to me:
introduce a new primitive \pdfexpandfont instead. How do you
see it?

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-03-10 19:24

Message:
Logged In: YES 
user_id=421

Forget that comment. Of course a change of \pdffontexpand
has to be considered carefully. By you. :-)

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-03-10 19:22

Message:
Logged In: YES 
user_id=421

No. It's an undocumented primitive. ;-)

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-09 17:28

Message:
Logged In: YES 
user_id=710

sigh. A mistake when implementing the \pdffontexpand
primitive: it should load a new font for expansion, instead
of expanding a loaded font. Too late for change now?

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=747&group_id=106

From noreply at sarovar.org  Thu Jun 28 09:37:55 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Thu, 28 Jun 2007 13:07:55 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-747 ] \letterspacefont and
	\pdffontexpand, again
Message-ID: <E1I3oZf-0001UF-00@sarovar.org>

Bugs item #747, was opened at 2007-03-09 04:09
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=747&group_id=106

Category: hz
Group: v1.40.1
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robert (schlcht)
Assigned to: The Thanh Han (hanthethanh)
Summary: \letterspacefont and \pdffontexpand, again

Initial Comment:
When expanding a letterspaced font, the base font will
be expanded, too, resulting in the error `font has been
expanded with different parameters' when the base font
is expanded again:

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20 20 5 autoexpand
\pdffontexpand\font   20 20 5 autoexpand
Z\bye


----------------------------------------------------------------------

>Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 09:37

Message:
Logged In: YES 
user_id=1608

That sounds nice, I like it.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 08:45

Message:
Logged In: YES 
user_id=710

I agree this is an ugly solution, which has its origin in a
design mistake. However the problem here is not only how to
deal with the error message, but the point is how to use
font expansion with a letterspaced font. Please give it a
thought so we can come up with an acceptable workaround. If
we want everything to be clean, there are more things that
have to be thrown away.

what about this: have a primitive \copyfont which creates a
copy of a font. Example:

\letterspacefont\lsfont\font 100
\copyfont\lsxfont\lsfont
\pdffontexpand\lsxfont 20 20 5 autoexpand



----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-27 13:43

Message:
Logged In: YES 
user_id=1608


If there is no clean way of solving the problem, I'd rather
just document the error message as a feature. I find
\pdfnewexpandfont very ugly (sorry Thanh).

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-24 12:46

Message:
Logged In: YES 
user_id=710

here is a patch that introduces a new primitive
\pdfnewexpandfont. Usage:

\font\f=cmr10
\pdfnewexpandfont\fx \f 20 20 5 autoexpand

Note that \pdfnewexpandfont generates \fx by loading a TFM
corresponding to \f first, then applies font expansion in
the same way like "\pdffontexpand\fx 20 20 5". So when \f is
a font that doesn't have a corresponding TFM (for example,
because it was generated in pdftex memory only), the above
command won't work. In particular, the following doesn't work:

\font\f=cmr10
\letterspacefont\lsfont\f 100
\pdfnewexpandfont\fx \lsfont 20 20 5 autoexpand

since \lsfont doesn't have a corresponding TFM but was
generated by \letterspacefont. To create a
letterspaced+expanded font, one can use:

\font\f=cmr10
\letterspacefont\fx\f 100
\pdffontexpand\fx 20 20 5 autoexpand

things are gettting messy... sorry about that.
Testing/comments welcome.

----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-04-01 02:44

Message:
Logged In: YES 
user_id=2217

Fine for me and microtype. 

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-31 11:52

Message:
Logged In: YES 
user_id=710

either name is ok with me. We need a new pritimive to load a
new font and expand it, since the current one doesn't load a
new font and hence is making trouble. I would wait for a
while to see how Robert sees it before making any change.

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-03-19 12:07

Message:
Logged In: NO 

Hello,

I do not think that \pdfexpandfont is a good name for a new 
primitive, as it is too easy to confuse with \pdffontexpand. 
What about \pdfexpandnewfont, as -- if I understand 
correctly -- a new font is loaded?


Jonathan

P.S: Thank you for creating pdfTeX!

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-10 21:18

Message:
Logged In: YES 
user_id=710

Phil Taylor has a suggestion that seems great to me:
introduce a new primitive \pdfexpandfont instead. How do you
see it?

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-03-10 20:24

Message:
Logged In: YES 
user_id=421

Forget that comment. Of course a change of \pdffontexpand
has to be considered carefully. By you. :-)

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-03-10 20:22

Message:
Logged In: YES 
user_id=421

No. It's an undocumented primitive. ;-)

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-09 18:28

Message:
Logged In: YES 
user_id=710

sigh. A mistake when implementing the \pdffontexpand
primitive: it should load a new font for expansion, instead
of expanding a loaded font. Too late for change now?

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=747&group_id=106

From pragma at wxs.nl  Thu Jun 28 12:24:58 2007
From: pragma at wxs.nl (Hans Hagen)
Date: Thu, 28 Jun 2007 12:24:58 +0200
Subject: [NTG-pdftex] images in formats
In-Reply-To: <87zm2l2rxf.fsf@riesling.zuerich.kuesterei.ch>
References: <74f506dc0706270922q6c41b882gc6f13f6a0326f01a@mail.gmail.com>	<46829AC0.5000502@wxs.nl>
	<87zm2l2rxf.fsf@riesling.zuerich.kuesterei.ch>
Message-ID: <46838C7A.2040206@wxs.nl>

Frank K?ster wrote:
> Hans Hagen <pragma at wxs.nl> wrote:
> 
>> Thanh Han The wrote:
>>> dumping an image in pdf mode is rather difficult to get
>>> right. If in dvi mode an image is "stored" by a reference to
>>> an external file, then I am afraid the speed gain is not
>>> that much. There is for sure some comfort by having a dumped
>>> file reference in the format, but again that can be also
>>> achieved for pdf mode using some macros IMHO.
>> to me it looks like a rather useless option to include an image in a 
>> format, just as we don't embed type 1 fonts in the format either so 
>> let's not waste energy on it
> 
> You know that you just said "To me it looks like a rather useless option
> to include an image in a \savebox in the LaTeX preamble", or "To me it
> looks like a rather useless option to support preview-latex in PDF mode
> even for people who use \savebox with images in their preamble"?

no, i was talking about a 'format' i.e. a \dump'd thing, i have no clue 
what \savebox does, and it may do image trickery as much as it likes but 
in the end the image will not be in the format file

>> also, those who generate a format should know what they're doing/dealing 
>> with
> 
> David knows, but preview-latex just takes the LaTeX preamble which its
> users have written.

afaik the problem only occurs when a \dump is done and an option is then 
  to \let\dump\end or so

anyhow, it's a dump related problem, not a macro package related one

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
      tel: 038 477 53 69 | fax: 038 477 53 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From dak at gnu.org  Thu Jun 28 12:50:19 2007
From: dak at gnu.org (David Kastrup)
Date: Thu, 28 Jun 2007 12:50:19 +0200
Subject: [NTG-pdftex] images in formats
In-Reply-To: <46838C7A.2040206@wxs.nl> (Hans Hagen's message of "Thu\,
	28 Jun 2007 12\:24\:58 +0200")
References: <74f506dc0706270922q6c41b882gc6f13f6a0326f01a@mail.gmail.com>
	<46829AC0.5000502@wxs.nl>
	<87zm2l2rxf.fsf@riesling.zuerich.kuesterei.ch>
	<46838C7A.2040206@wxs.nl>
Message-ID: <86sl8cwdxw.fsf@lola.quinscape.zz>

Hans Hagen <pragma at wxs.nl> writes:

> Frank K?ster wrote:
>> Hans Hagen <pragma at wxs.nl> wrote:
>> 
>>> Thanh Han The wrote:
>>>> dumping an image in pdf mode is rather difficult to get
>>>> right. If in dvi mode an image is "stored" by a reference to
>>>> an external file, then I am afraid the speed gain is not
>>>> that much. There is for sure some comfort by having a dumped
>>>> file reference in the format, but again that can be also
>>>> achieved for pdf mode using some macros IMHO.
>>> to me it looks like a rather useless option to include an image in a 
>>> format, just as we don't embed type 1 fonts in the format either so 
>>> let's not waste energy on it
>> 
>> You know that you just said "To me it looks like a rather useless
>> option to include an image in a \savebox in the LaTeX preamble", or
>> "To me it looks like a rather useless option to support
>> preview-latex in PDF mode even for people who use \savebox with
>> images in their preamble"?
>
> no, i was talking about a 'format' i.e. a \dump'd thing, i have no
> clue what \savebox does, and it may do image trickery as much as it
> likes but in the end the image will not be in the format file

Nor will it be in any output generated by iniTeX.  Do you think we
should turn off PDF/DVI generation completely in iniTeX?  Prohibit
people from generating visible output with it?  If not, then it is
hard to explain why images should be treated differently from other
material.

>>> also, those who generate a format should know what they're
>>> doing/dealing with
>> 
>> David knows, but preview-latex just takes the LaTeX preamble which its
>> users have written.
>
> afaik the problem only occurs when a \dump is done and an option is
> then to \let\dump\end or so

And this will generate a format to be used later just how?

> anyhow, it's a dump related problem, not a macro package related one

mylatex.ltx is a macro package for dumping formats transparently.  It
is not like I have not explained several times that this is done in
preview-latex by default without user intervention, for performance
reasons.  It is also important to fill any repeatedly/globally used
saveboxes in the preamble, since otherwise it will not be possible to
recompile a region (which is done by using the preamble together with
the region, and no code in between).

The WhizzyTeX system also dumps formats more or less at every document
section, in order to provide fast screen updates.  This also is
transparent to the user.

I find it annoying how legitimate concerns and existing _standard_ use
cases and packages are simply brushed aside or ignored.  While there
may be priorities that make it necessary to postpone a proper
implementation, it is not because people putting forward their
concerns and presenting their use cases are idiots or weirdos that can
safely be ignored.

-- 
David Kastrup

From pragma at wxs.nl  Thu Jun 28 13:01:48 2007
From: pragma at wxs.nl (Hans Hagen)
Date: Thu, 28 Jun 2007 13:01:48 +0200
Subject: [NTG-pdftex] images in formats
In-Reply-To: <86sl8cwdxw.fsf@lola.quinscape.zz>
References: <74f506dc0706270922q6c41b882gc6f13f6a0326f01a@mail.gmail.com>	<46829AC0.5000502@wxs.nl>	<87zm2l2rxf.fsf@riesling.zuerich.kuesterei.ch>	<46838C7A.2040206@wxs.nl>
	<86sl8cwdxw.fsf@lola.quinscape.zz>
Message-ID: <4683951C.8040300@wxs.nl>

David Kastrup wrote:
> Hans Hagen <pragma at wxs.nl> writes:
> 
>> Frank K?ster wrote:
>>> Hans Hagen <pragma at wxs.nl> wrote:
>>>
>>>> Thanh Han The wrote:
>>>>> dumping an image in pdf mode is rather difficult to get
>>>>> right. If in dvi mode an image is "stored" by a reference to
>>>>> an external file, then I am afraid the speed gain is not
>>>>> that much. There is for sure some comfort by having a dumped
>>>>> file reference in the format, but again that can be also
>>>>> achieved for pdf mode using some macros IMHO.
>>>> to me it looks like a rather useless option to include an image in a 
>>>> format, just as we don't embed type 1 fonts in the format either so 
>>>> let's not waste energy on it
>>> You know that you just said "To me it looks like a rather useless
>>> option to include an image in a \savebox in the LaTeX preamble", or
>>> "To me it looks like a rather useless option to support
>>> preview-latex in PDF mode even for people who use \savebox with
>>> images in their preamble"?
>> no, i was talking about a 'format' i.e. a \dump'd thing, i have no
>> clue what \savebox does, and it may do image trickery as much as it
>> likes but in the end the image will not be in the format file
> 
> Nor will it be in any output generated by iniTeX.  Do you think we
> should turn off PDF/DVI generation completely in iniTeX?  Prohibit
> people from generating visible output with it?  If not, then it is
> hard to explain why images should be treated differently from other
> material.

again, i'm not talking of initex, but about what can end up in a FORMAT 
FILE and pdfimage data is not something to put in the format; initex can 
of course include images in a produced pdf file; i never denied that 
neiter did i say that initex shoul dnot produce dvi/pdf output

> I find it annoying how legitimate concerns and existing _standard_ use
> cases and packages are simply brushed aside or ignored.  While there
> may be priorities that make it necessary to postpone a proper
> implementation, it is not because people putting forward their
> concerns and presenting their use cases are idiots or weirdos that can
> safely be ignored.

again, we're talking of pdf data ending up in formats as a result of a 
ref to an xform, not about macro packages; instead of embedding the 
graphic one could use a reference to an external file (using an media 
related annotation) but that's something at the macro level and not 
pdftex internals



Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
      tel: 038 477 53 69 | fax: 038 477 53 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From dak at gnu.org  Thu Jun 28 13:08:26 2007
From: dak at gnu.org (David Kastrup)
Date: Thu, 28 Jun 2007 13:08:26 +0200
Subject: [NTG-pdftex] images in formats
In-Reply-To: <4683951C.8040300@wxs.nl> (Hans Hagen's message of "Thu\,
	28 Jun 2007 13\:01\:48 +0200")
References: <74f506dc0706270922q6c41b882gc6f13f6a0326f01a@mail.gmail.com>
	<46829AC0.5000502@wxs.nl>
	<87zm2l2rxf.fsf@riesling.zuerich.kuesterei.ch>
	<46838C7A.2040206@wxs.nl> <86sl8cwdxw.fsf@lola.quinscape.zz>
	<4683951C.8040300@wxs.nl>
Message-ID: <86myykwd3p.fsf@lola.quinscape.zz>

Hans Hagen <pragma at wxs.nl> writes:

> David Kastrup wrote:
>>
>> Nor will it be in any output generated by iniTeX.  Do you think we
>> should turn off PDF/DVI generation completely in iniTeX?  Prohibit
>> people from generating visible output with it?  If not, then it is
>> hard to explain why images should be treated differently from other
>> material.
>
> again, i'm not talking of initex, but about what can end up in a
> FORMAT FILE and pdfimage data is not something to put in the format;
> initex can of course include images in a produced pdf file; i never
> denied that neiter did i say that initex shoul dnot produce dvi/pdf
> output

Cleaning the mem array of all references/nodes referring to images
before dumping or when restoring sounds actually harder to do than
dumping and restoring the relevant image arrays.

The former requires walking all the structures.  The latter concerns
just PDF's additional arrays.

Please note that so far the implementation proposals have been about
disabling the image operators altogether in iniTeX (reasonably simple
to implement), _not_ about removing image references when dumping
and/or restoring.

> again, we're talking of pdf data ending up in formats as a result of
> a ref to an xform, not about macro packages; instead of embedding
> the graphic one could use a reference to an external file (using an
> media related annotation) but that's something at the macro level
> and not pdftex internals

How you suppose that some macros can magically make the distinction
between an iniTeX run for the sake of typesetting or an iniTeX run for
the sake of dumping, I have no idea.

-- 
David Kastrup

From noreply at sarovar.org  Thu Jun 28 12:57:48 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Thu, 28 Jun 2007 16:27:48 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-824 ] Bus error caused by loading an
	image into a format file
Message-ID: <E1I3rh6-0007BZ-00@sarovar.org>

Bugs item #824, was opened at 2007-06-26 00:22
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

Category: Image inclusion
Group: v1.40.3
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robin Houston (robinhouston)
Assigned to: Martin Schr?der (oneiros)
Summary: Bus error caused by loading an image into a format file

Initial Comment:
I have written a tool that speeds up repeated
compilation of a source file, by generating a format
from the preamble of the document, and then using it to
compile the body.

One user reported a crash when using this tool with a
custom letterhead class; the class in question may be
found at
http://www.soe.ucsc.edu/~elm/LaTeX/ucletter.cls (though
note that a simpler demonstration is attached to this
report).

The bug is triggered by the fact that this class loads
an image during the processing of the preamble (i.e.
during the processing of the .ini file) and saves it in
a box. When this box is used, during the compilation of
the body, pdftex crashes.

This does work with ordinary (non-PDF) TeX, so the
problem is specific to PDFTeX.

The attachment contains a simple demonstration of the
problem. Unpack it and run 'make'.


----------------------------------------------------------------------

>Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 12:57

Message:
Logged In: YES 
user_id=1608

Here is a patch that fixes the problem by dumping and
restoring the image _meta information_ to/from any generated
format. 

The image _data_ is not included (that would be really hard
to do in a portable way), and therefore the undumping
routines have to redo most of the work of \pdfximage, but
this is transparent to the user except that the tests
for \pdfminorversion and \pdfinclusionerrorlevel tests are
re-done.

The patch also saves some pdftex arrays that are needed to
rediscover the object. This could eventually be extended to
 make sure \refxform et al work as well. As of now, that is
untested due to lack of example.

Comments and testing welcome, as always.



----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-26 23:01

Message:
Logged In: YES 
user_id=421

Sorry, pdf things work different then dvi, so we can not
make \pdfximage etc. in ini mode without a lot of work; we
will probably disable a bunch of primitives.

----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-26 15:49

Message:
Logged In: YES 
user_id=4579

Simplifying the example by eliminating the graphics package:

==> foo.ini <==
\documentclass{minimal}

\newbox\picbox
\pdfximage{pic.pdf}
\setbox\picbox\hbox{\pdfrefximage\pdflastximage}

\dump

==> foo.tex <==
\begin{document}
        \box\picbox
\end{document}


Also, I see now that my comparison with dvi-mode is indeed a
false one, because the mechanisms are quite different, and
the DVI graphics driver only has to include a \special,
rather than the graphic itself.

A simple solution, I suppose, would be to make \pdfrefximage
(and, presumably, the other \pdfrefx commands) invalid in
IniTeX mode. Perhaps this is too brutal, since it forbids
certain harmless activities such as finding the dimensions
of an image from an .ini file; and of course I would be
delighted if it were made to work instead.


----------------------------------------------------------------------

Comment By: Reinhard Kotucha (reinhard)
Date: 2007-06-26 01:26

Message:
Logged In: YES 
user_id=4195

Martin,
you probably can't do everything in a format file.  However,
it would be nice to be able to put graphics to a format file
at least.  Suppose that a web server has to generate PDF
files on-the-fly, each contains a company logo.  The best
place place for the logo is the format file if speed
matters.  It would be nice if there are no restrictions.

Regards,
  Reinhard



----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-26 00:42

Message:
Logged In: YES 
user_id=4579

I'm impressed by the speed of your response! Thanks.

If you replace the PDF image by an EPS file, and use
-output-format dvi, then it does work. That suggests to me
that the problem is not fundamentally caused by a limitation
of IniTeX. But I don't know enough about the inner workings
of the \includegraphics command to be sure about that.
(Perhaps PDF graphics are handled in a sufficiently
different way for this to be a false comparison?)

In any case, as you say, it shouldn't crash!

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-26 00:30

Message:
Logged In: YES 
user_id=421

I can reproduce it, and it obviously shouldn't crash, but
I'm really not shure if it's supposed to work, as the format
of course will not save the picture. You can't do everything
in IniTeX...

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

From taco at elvenkind.com  Thu Jun 28 13:20:04 2007
From: taco at elvenkind.com (Taco Hoekwater)
Date: Thu, 28 Jun 2007 13:20:04 +0200
Subject: [NTG-pdftex] images in formats
In-Reply-To: <86myykwd3p.fsf@lola.quinscape.zz>
References: <74f506dc0706270922q6c41b882gc6f13f6a0326f01a@mail.gmail.com>	<46829AC0.5000502@wxs.nl>	<87zm2l2rxf.fsf@riesling.zuerich.kuesterei.ch>	<46838C7A.2040206@wxs.nl>
	<86sl8cwdxw.fsf@lola.quinscape.zz>	<4683951C.8040300@wxs.nl>
	<86myykwd3p.fsf@lola.quinscape.zz>
Message-ID: <46839964.1060301@elvenkind.com>

David Kastrup wrote:
> 
> Please note that so far the implementation proposals have been about
> disabling the image operators altogether in iniTeX (reasonably simple
> to implement), _not_ about removing image references when dumping
> and/or restoring.

I just uploaded a patch for this bug that dumps the image meta
information to the format. That should solve the problem, I hope.

Best wishes,

Taco

From frank at debian.org  Thu Jun 28 13:32:10 2007
From: frank at debian.org (Frank =?iso-8859-1?Q?K=FCster?=)
Date: Thu, 28 Jun 2007 13:32:10 +0200
Subject: [NTG-pdftex] images in formats
In-Reply-To: <4683951C.8040300@wxs.nl> (Hans Hagen's message of "Thu\,
	28 Jun 2007 13\:01\:48 +0200")
References: <74f506dc0706270922q6c41b882gc6f13f6a0326f01a@mail.gmail.com>
	<46829AC0.5000502@wxs.nl>
	<87zm2l2rxf.fsf@riesling.zuerich.kuesterei.ch>
	<46838C7A.2040206@wxs.nl> <86sl8cwdxw.fsf@lola.quinscape.zz>
	<4683951C.8040300@wxs.nl>
Message-ID: <87d4zgjow5.fsf@riesling.zuerich.kuesterei.ch>

Hans Hagen <pragma at wxs.nl> wrote:

>> I find it annoying how legitimate concerns and existing _standard_ use
>> cases and packages are simply brushed aside or ignored.  While there
>> may be priorities that make it necessary to postpone a proper
>> implementation, it is not because people putting forward their
>> concerns and presenting their use cases are idiots or weirdos that can
>> safely be ignored.
>
> again, we're talking of pdf data ending up in formats as a result of a
> ref to an xform, not about macro packages; instead of embedding the
> graphic one could use a reference to an external file (using an media
> related annotation) but that's something at the macro level and not
> pdftex internals

I'm not sure I understand you.  Do you mean that macro packages should
use a different way of embedding graphics than they do now?  If I
understand you right, this would require that every existing macro
package for graphics inclusion should be changed, because otherwise it
couldn't be used together with preview-latex or whizzytex.

Regards, Frank
-- 
Frank K?ster
Single Molecule Spectroscopy, Protein Folding @ Inst. f. Biochemie, Univ. Z?rich
Debian Developer (teTeX/TeXLive)

From dak at gnu.org  Thu Jun 28 13:29:40 2007
From: dak at gnu.org (David Kastrup)
Date: Thu, 28 Jun 2007 13:29:40 +0200
Subject: [NTG-pdftex] images in formats
In-Reply-To: <46839964.1060301@elvenkind.com> (Taco Hoekwater's message of
	"Thu\, 28 Jun 2007 13\:20\:04 +0200")
References: <74f506dc0706270922q6c41b882gc6f13f6a0326f01a@mail.gmail.com>
	<46829AC0.5000502@wxs.nl>
	<87zm2l2rxf.fsf@riesling.zuerich.kuesterei.ch>
	<46838C7A.2040206@wxs.nl> <86sl8cwdxw.fsf@lola.quinscape.zz>
	<4683951C.8040300@wxs.nl> <86myykwd3p.fsf@lola.quinscape.zz>
	<46839964.1060301@elvenkind.com>
Message-ID: <86ir98wc4b.fsf@lola.quinscape.zz>

Taco Hoekwater <taco at elvenkind.com> writes:

> David Kastrup wrote:
>> 
>> Please note that so far the implementation proposals have been about
>> disabling the image operators altogether in iniTeX (reasonably simple
>> to implement), _not_ about removing image references when dumping
>> and/or restoring.
>
> I just uploaded a patch for this bug that dumps the image meta
> information to the format. That should solve the problem, I hope.

Thanks, this would definitely seem like the right thing to do.  This
may sound like a quite stupid question: is there a publicly accessible
repository for PDFTeX (apart from TeXlive itself)?

-- 
David Kastrup

From taco at elvenkind.com  Thu Jun 28 13:34:22 2007
From: taco at elvenkind.com (Taco Hoekwater)
Date: Thu, 28 Jun 2007 13:34:22 +0200
Subject: [NTG-pdftex] images in formats
In-Reply-To: <86ir98wc4b.fsf@lola.quinscape.zz>
References: <74f506dc0706270922q6c41b882gc6f13f6a0326f01a@mail.gmail.com>	<46829AC0.5000502@wxs.nl>	<87zm2l2rxf.fsf@riesling.zuerich.kuesterei.ch>	<46838C7A.2040206@wxs.nl>
	<86sl8cwdxw.fsf@lola.quinscape.zz>	<4683951C.8040300@wxs.nl>
	<86myykwd3p.fsf@lola.quinscape.zz>	<46839964.1060301@elvenkind.com>
	<86ir98wc4b.fsf@lola.quinscape.zz>
Message-ID: <46839CBE.2080508@elvenkind.com>

David Kastrup wrote:
> Taco Hoekwater <taco at elvenkind.com> writes:
> 
>> David Kastrup wrote:
>>> Please note that so far the implementation proposals have been about
>>> disabling the image operators altogether in iniTeX (reasonably simple
>>> to implement), _not_ about removing image references when dumping
>>> and/or restoring.
>> I just uploaded a patch for this bug that dumps the image meta
>> information to the format. That should solve the problem, I hope.
> 
> Thanks, this would definitely seem like the right thing to do.  This
> may sound like a quite stupid question: is there a publicly accessible
> repository for PDFTeX (apart from TeXlive itself)?
> 

Not right now. Martin and I are working on setting up a pdftex
repository at supelec, but it seems Fabrice is one vacation at the
moment.

Best wishes,

Taco

From noreply at sarovar.org  Thu Jun 28 16:01:05 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Thu, 28 Jun 2007 19:31:05 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-747 ] \letterspacefont and
	\pdffontexpand, again
Message-ID: <E1I3uYT-000143-00@sarovar.org>

Bugs item #747, was opened at 2007-03-09 03:09
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=747&group_id=106

Category: hz
Group: v1.40.1
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robert (schlcht)
Assigned to: The Thanh Han (hanthethanh)
Summary: \letterspacefont and \pdffontexpand, again

Initial Comment:
When expanding a letterspaced font, the base font will
be expanded, too, resulting in the error `font has been
expanded with different parameters' when the base font
is expanded again:

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20 20 5 autoexpand
\pdffontexpand\font   20 20 5 autoexpand
Z\bye


----------------------------------------------------------------------

>Comment By: Robert (schlcht)
Date: 2007-06-28 14:01

Message:
Logged In: YES 
user_id=2217

If we can get rid of the error message, I think it can be
left at that. Mind you, the problem is not how to expand a
letterspaced font but how to *not* expand the base font when
expanding a letterspaced font. That expanding a letterspaced
font results in expansion of the base font
can be documented as a feature, IMO.

Here are some more clues: The error message seems to be
related to the sign of the stretch parameter.
First of all, with

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20 20 5 autoexpand

the base font will be expanded, however it will never be
shrunk. Then,

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20  20 5 autoexpand
\pdffontexpand\font   20 -20 5 autoexpand

doesn't yield an error. Neither does:

\pdffontexpand\lsfont 20 -20 5 autoexpand
\pdffontexpand\font   20 -20 5 autoexpand

However, here comes the error again:

\pdffontexpand\lsfont 20 -20 5 autoexpand
\pdffontexpand\font   20  20 5 autoexpand

If you expand the base font first, it's OK in any case, also
with different signs.


----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 07:37

Message:
Logged In: YES 
user_id=1608

That sounds nice, I like it.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 06:45

Message:
Logged In: YES 
user_id=710

I agree this is an ugly solution, which has its origin in a
design mistake. However the problem here is not only how to
deal with the error message, but the point is how to use
font expansion with a letterspaced font. Please give it a
thought so we can come up with an acceptable workaround. If
we want everything to be clean, there are more things that
have to be thrown away.

what about this: have a primitive \copyfont which creates a
copy of a font. Example:

\letterspacefont\lsfont\font 100
\copyfont\lsxfont\lsfont
\pdffontexpand\lsxfont 20 20 5 autoexpand



----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-27 11:43

Message:
Logged In: YES 
user_id=1608


If there is no clean way of solving the problem, I'd rather
just document the error message as a feature. I find
\pdfnewexpandfont very ugly (sorry Thanh).

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-24 10:46

Message:
Logged In: YES 
user_id=710

here is a patch that introduces a new primitive
\pdfnewexpandfont. Usage:

\font\f=cmr10
\pdfnewexpandfont\fx \f 20 20 5 autoexpand

Note that \pdfnewexpandfont generates \fx by loading a TFM
corresponding to \f first, then applies font expansion in
the same way like "\pdffontexpand\fx 20 20 5". So when \f is
a font that doesn't have a corresponding TFM (for example,
because it was generated in pdftex memory only), the above
command won't work. In particular, the following doesn't work:

\font\f=cmr10
\letterspacefont\lsfont\f 100
\pdfnewexpandfont\fx \lsfont 20 20 5 autoexpand

since \lsfont doesn't have a corresponding TFM but was
generated by \letterspacefont. To create a
letterspaced+expanded font, one can use:

\font\f=cmr10
\letterspacefont\fx\f 100
\pdffontexpand\fx 20 20 5 autoexpand

things are gettting messy... sorry about that.
Testing/comments welcome.

----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-04-01 00:44

Message:
Logged In: YES 
user_id=2217

Fine for me and microtype. 

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-31 09:52

Message:
Logged In: YES 
user_id=710

either name is ok with me. We need a new pritimive to load a
new font and expand it, since the current one doesn't load a
new font and hence is making trouble. I would wait for a
while to see how Robert sees it before making any change.

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-03-19 11:07

Message:
Logged In: NO 

Hello,

I do not think that \pdfexpandfont is a good name for a new 
primitive, as it is too easy to confuse with \pdffontexpand. 
What about \pdfexpandnewfont, as -- if I understand 
correctly -- a new font is loaded?


Jonathan

P.S: Thank you for creating pdfTeX!

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-10 20:18

Message:
Logged In: YES 
user_id=710

Phil Taylor has a suggestion that seems great to me:
introduce a new primitive \pdfexpandfont instead. How do you
see it?

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-03-10 19:24

Message:
Logged In: YES 
user_id=421

Forget that comment. Of course a change of \pdffontexpand
has to be considered carefully. By you. :-)

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-03-10 19:22

Message:
Logged In: YES 
user_id=421

No. It's an undocumented primitive. ;-)

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-09 17:28

Message:
Logged In: YES 
user_id=710

sigh. A mistake when implementing the \pdffontexpand
primitive: it should load a new font for expansion, instead
of expanding a loaded font. Too late for change now?

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=747&group_id=106

From noreply at sarovar.org  Thu Jun 28 17:01:06 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Thu, 28 Jun 2007 20:31:06 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-824 ] Bus error caused by loading an
	image into a format file
Message-ID: <E1I3vUY-0001Et-00@sarovar.org>

Bugs item #824, was opened at 2007-06-25 23:22
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

Category: Image inclusion
Group: v1.40.3
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robin Houston (robinhouston)
Assigned to: Martin Schr?der (oneiros)
Summary: Bus error caused by loading an image into a format file

Initial Comment:
I have written a tool that speeds up repeated
compilation of a source file, by generating a format
from the preamble of the document, and then using it to
compile the body.

One user reported a crash when using this tool with a
custom letterhead class; the class in question may be
found at
http://www.soe.ucsc.edu/~elm/LaTeX/ucletter.cls (though
note that a simpler demonstration is attached to this
report).

The bug is triggered by the fact that this class loads
an image during the processing of the preamble (i.e.
during the processing of the .ini file) and saves it in
a box. When this box is used, during the compilation of
the body, pdftex crashes.

This does work with ordinary (non-PDF) TeX, so the
problem is specific to PDFTeX.

The attachment contains a simple demonstration of the
problem. Unpack it and run 'make'.


----------------------------------------------------------------------

>Comment By: Robin Houston (robinhouston)
Date: 2007-06-28 16:01

Message:
Logged In: YES 
user_id=4579

Bravo!

I was ready to embark on this myself, so I'm delighted to be
spared the trouble. It passes all the tests I've tried so far.

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 11:57

Message:
Logged In: YES 
user_id=1608

Here is a patch that fixes the problem by dumping and
restoring the image _meta information_ to/from any generated
format. 

The image _data_ is not included (that would be really hard
to do in a portable way), and therefore the undumping
routines have to redo most of the work of \pdfximage, but
this is transparent to the user except that the tests
for \pdfminorversion and \pdfinclusionerrorlevel tests are
re-done.

The patch also saves some pdftex arrays that are needed to
rediscover the object. This could eventually be extended to
 make sure \refxform et al work as well. As of now, that is
untested due to lack of example.

Comments and testing welcome, as always.



----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-26 22:01

Message:
Logged In: YES 
user_id=421

Sorry, pdf things work different then dvi, so we can not
make \pdfximage etc. in ini mode without a lot of work; we
will probably disable a bunch of primitives.

----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-26 14:49

Message:
Logged In: YES 
user_id=4579

Simplifying the example by eliminating the graphics package:

==> foo.ini <==
\documentclass{minimal}

\newbox\picbox
\pdfximage{pic.pdf}
\setbox\picbox\hbox{\pdfrefximage\pdflastximage}

\dump

==> foo.tex <==
\begin{document}
        \box\picbox
\end{document}


Also, I see now that my comparison with dvi-mode is indeed a
false one, because the mechanisms are quite different, and
the DVI graphics driver only has to include a \special,
rather than the graphic itself.

A simple solution, I suppose, would be to make \pdfrefximage
(and, presumably, the other \pdfrefx commands) invalid in
IniTeX mode. Perhaps this is too brutal, since it forbids
certain harmless activities such as finding the dimensions
of an image from an .ini file; and of course I would be
delighted if it were made to work instead.


----------------------------------------------------------------------

Comment By: Reinhard Kotucha (reinhard)
Date: 2007-06-26 00:26

Message:
Logged In: YES 
user_id=4195

Martin,
you probably can't do everything in a format file.  However,
it would be nice to be able to put graphics to a format file
at least.  Suppose that a web server has to generate PDF
files on-the-fly, each contains a company logo.  The best
place place for the logo is the format file if speed
matters.  It would be nice if there are no restrictions.

Regards,
  Reinhard



----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-25 23:42

Message:
Logged In: YES 
user_id=4579

I'm impressed by the speed of your response! Thanks.

If you replace the PDF image by an EPS file, and use
-output-format dvi, then it does work. That suggests to me
that the problem is not fundamentally caused by a limitation
of IniTeX. But I don't know enough about the inner workings
of the \includegraphics command to be sure about that.
(Perhaps PDF graphics are handled in a sufficiently
different way for this to be a false comparison?)

In any case, as you say, it shouldn't crash!

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-25 23:30

Message:
Logged In: YES 
user_id=421

I can reproduce it, and it obviously shouldn't crash, but
I'm really not shure if it's supposed to work, as the format
of course will not save the picture. You can't do everything
in IniTeX...

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

From noreply at sarovar.org  Thu Jun 28 20:42:21 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Fri, 29 Jun 2007 00:12:21 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-747 ] \letterspacefont and
	\pdffontexpand, again
Message-ID: <E1I3ywf-0001F2-00@sarovar.org>

Bugs item #747, was opened at 2007-03-09 03:09
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=747&group_id=106

Category: hz
Group: v1.40.1
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robert (schlcht)
Assigned to: The Thanh Han (hanthethanh)
Summary: \letterspacefont and \pdffontexpand, again

Initial Comment:
When expanding a letterspaced font, the base font will
be expanded, too, resulting in the error `font has been
expanded with different parameters' when the base font
is expanded again:

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20 20 5 autoexpand
\pdffontexpand\font   20 20 5 autoexpand
Z\bye


----------------------------------------------------------------------

>Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 18:42

Message:
Logged In: YES 
user_id=710

expanding a letterspaced fonts always implies that the base
font is expanded. In other words, it's impossible *not* to
expand the base font when expanding a letterspaced font.

thanks for further testing. It looks like a bug in checking
font expansion spec. fwiw, font stretch limit is always
fixed to [0..1000] and font shrink limit to [0..500]. Thus
giving a negative value has the same effect like giving 0.

I will play with \copyfont to see if it helps.


----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-06-28 14:01

Message:
Logged In: YES 
user_id=2217

If we can get rid of the error message, I think it can be
left at that. Mind you, the problem is not how to expand a
letterspaced font but how to *not* expand the base font when
expanding a letterspaced font. That expanding a letterspaced
font results in expansion of the base font
can be documented as a feature, IMO.

Here are some more clues: The error message seems to be
related to the sign of the stretch parameter.
First of all, with

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20 20 5 autoexpand

the base font will be expanded, however it will never be
shrunk. Then,

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20  20 5 autoexpand
\pdffontexpand\font   20 -20 5 autoexpand

doesn't yield an error. Neither does:

\pdffontexpand\lsfont 20 -20 5 autoexpand
\pdffontexpand\font   20 -20 5 autoexpand

However, here comes the error again:

\pdffontexpand\lsfont 20 -20 5 autoexpand
\pdffontexpand\font   20  20 5 autoexpand

If you expand the base font first, it's OK in any case, also
with different signs.


----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 07:37

Message:
Logged In: YES 
user_id=1608

That sounds nice, I like it.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 06:45

Message:
Logged In: YES 
user_id=710

I agree this is an ugly solution, which has its origin in a
design mistake. However the problem here is not only how to
deal with the error message, but the point is how to use
font expansion with a letterspaced font. Please give it a
thought so we can come up with an acceptable workaround. If
we want everything to be clean, there are more things that
have to be thrown away.

what about this: have a primitive \copyfont which creates a
copy of a font. Example:

\letterspacefont\lsfont\font 100
\copyfont\lsxfont\lsfont
\pdffontexpand\lsxfont 20 20 5 autoexpand



----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-27 11:43

Message:
Logged In: YES 
user_id=1608


If there is no clean way of solving the problem, I'd rather
just document the error message as a feature. I find
\pdfnewexpandfont very ugly (sorry Thanh).

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-24 10:46

Message:
Logged In: YES 
user_id=710

here is a patch that introduces a new primitive
\pdfnewexpandfont. Usage:

\font\f=cmr10
\pdfnewexpandfont\fx \f 20 20 5 autoexpand

Note that \pdfnewexpandfont generates \fx by loading a TFM
corresponding to \f first, then applies font expansion in
the same way like "\pdffontexpand\fx 20 20 5". So when \f is
a font that doesn't have a corresponding TFM (for example,
because it was generated in pdftex memory only), the above
command won't work. In particular, the following doesn't work:

\font\f=cmr10
\letterspacefont\lsfont\f 100
\pdfnewexpandfont\fx \lsfont 20 20 5 autoexpand

since \lsfont doesn't have a corresponding TFM but was
generated by \letterspacefont. To create a
letterspaced+expanded font, one can use:

\font\f=cmr10
\letterspacefont\fx\f 100
\pdffontexpand\fx 20 20 5 autoexpand

things are gettting messy... sorry about that.
Testing/comments welcome.

----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-04-01 00:44

Message:
Logged In: YES 
user_id=2217

Fine for me and microtype. 

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-31 09:52

Message:
Logged In: YES 
user_id=710

either name is ok with me. We need a new pritimive to load a
new font and expand it, since the current one doesn't load a
new font and hence is making trouble. I would wait for a
while to see how Robert sees it before making any change.

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-03-19 11:07

Message:
Logged In: NO 

Hello,

I do not think that \pdfexpandfont is a good name for a new 
primitive, as it is too easy to confuse with \pdffontexpand. 
What about \pdfexpandnewfont, as -- if I understand 
correctly -- a new font is loaded?


Jonathan

P.S: Thank you for creating pdfTeX!

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-10 20:18

Message:
Logged In: YES 
user_id=710

Phil Taylor has a suggestion that seems great to me:
introduce a new primitive \pdfexpandfont instead. How do you
see it?

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-03-10 19:24

Message:
Logged In: YES 
user_id=421

Forget that comment. Of course a change of \pdffontexpand
has to be considered carefully. By you. :-)

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-03-10 19:22

Message:
Logged In: YES 
user_id=421

No. It's an undocumented primitive. ;-)

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-09 17:28

Message:
Logged In: YES 
user_id=710

sigh. A mistake when implementing the \pdffontexpand
primitive: it should load a new font for expansion, instead
of expanding a loaded font. Too late for change now?

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=747&group_id=106

From noreply at sarovar.org  Thu Jun 28 21:09:18 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Fri, 29 Jun 2007 00:39:18 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-824 ] Bus error caused by loading an
	image into a format file
Message-ID: <E1I3zMk-0004yw-00@sarovar.org>

Bugs item #824, was opened at 2007-06-26 00:22
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

Category: Image inclusion
Group: v1.40.3
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robin Houston (robinhouston)
Assigned to: Martin Schr?der (oneiros)
Summary: Bus error caused by loading an image into a format file

Initial Comment:
I have written a tool that speeds up repeated
compilation of a source file, by generating a format
from the preamble of the document, and then using it to
compile the body.

One user reported a crash when using this tool with a
custom letterhead class; the class in question may be
found at
http://www.soe.ucsc.edu/~elm/LaTeX/ucletter.cls (though
note that a simpler demonstration is attached to this
report).

The bug is triggered by the fact that this class loads
an image during the processing of the preamble (i.e.
during the processing of the .ini file) and saves it in
a box. When this box is used, during the compilation of
the body, pdftex crashes.

This does work with ordinary (non-PDF) TeX, so the
problem is specific to PDFTeX.

The attachment contains a simple demonstration of the
problem. Unpack it and run 'make'.


----------------------------------------------------------------------

>Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 21:09

Message:
Logged In: YES 
user_id=1608

Small limitation that I have yet to implement: the ability
to move stuff over from the initex run means that if initex
actually creates a pdf file, dumping a format should be
disallowed, or silently ignored. Attempting to keep track of
two disjunct pdf documents is just too hard for me. 

Note that I do not want to prohibit pdf creation from
initex. Just that you can't create a pdf document _as well
as_ perform a \dump.



----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-28 17:01

Message:
Logged In: YES 
user_id=4579

Bravo!

I was ready to embark on this myself, so I'm delighted to be
spared the trouble. It passes all the tests I've tried so far.

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 12:57

Message:
Logged In: YES 
user_id=1608

Here is a patch that fixes the problem by dumping and
restoring the image _meta information_ to/from any generated
format. 

The image _data_ is not included (that would be really hard
to do in a portable way), and therefore the undumping
routines have to redo most of the work of \pdfximage, but
this is transparent to the user except that the tests
for \pdfminorversion and \pdfinclusionerrorlevel tests are
re-done.

The patch also saves some pdftex arrays that are needed to
rediscover the object. This could eventually be extended to
 make sure \refxform et al work as well. As of now, that is
untested due to lack of example.

Comments and testing welcome, as always.



----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-26 23:01

Message:
Logged In: YES 
user_id=421

Sorry, pdf things work different then dvi, so we can not
make \pdfximage etc. in ini mode without a lot of work; we
will probably disable a bunch of primitives.

----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-26 15:49

Message:
Logged In: YES 
user_id=4579

Simplifying the example by eliminating the graphics package:

==> foo.ini <==
\documentclass{minimal}

\newbox\picbox
\pdfximage{pic.pdf}
\setbox\picbox\hbox{\pdfrefximage\pdflastximage}

\dump

==> foo.tex <==
\begin{document}
        \box\picbox
\end{document}


Also, I see now that my comparison with dvi-mode is indeed a
false one, because the mechanisms are quite different, and
the DVI graphics driver only has to include a \special,
rather than the graphic itself.

A simple solution, I suppose, would be to make \pdfrefximage
(and, presumably, the other \pdfrefx commands) invalid in
IniTeX mode. Perhaps this is too brutal, since it forbids
certain harmless activities such as finding the dimensions
of an image from an .ini file; and of course I would be
delighted if it were made to work instead.


----------------------------------------------------------------------

Comment By: Reinhard Kotucha (reinhard)
Date: 2007-06-26 01:26

Message:
Logged In: YES 
user_id=4195

Martin,
you probably can't do everything in a format file.  However,
it would be nice to be able to put graphics to a format file
at least.  Suppose that a web server has to generate PDF
files on-the-fly, each contains a company logo.  The best
place place for the logo is the format file if speed
matters.  It would be nice if there are no restrictions.

Regards,
  Reinhard



----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-26 00:42

Message:
Logged In: YES 
user_id=4579

I'm impressed by the speed of your response! Thanks.

If you replace the PDF image by an EPS file, and use
-output-format dvi, then it does work. That suggests to me
that the problem is not fundamentally caused by a limitation
of IniTeX. But I don't know enough about the inner workings
of the \includegraphics command to be sure about that.
(Perhaps PDF graphics are handled in a sufficiently
different way for this to be a false comparison?)

In any case, as you say, it shouldn't crash!

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-26 00:30

Message:
Logged In: YES 
user_id=421

I can reproduce it, and it obviously shouldn't crash, but
I'm really not shure if it's supposed to work, as the format
of course will not save the picture. You can't do everything
in IniTeX...

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

From martin at oneiros.de  Thu Jun 28 21:45:42 2007
From: martin at oneiros.de (=?ISO-8859-1?Q?Martin_Schr=F6der?=)
Date: Thu, 28 Jun 2007 21:45:42 +0200
Subject: [NTG-pdftex] images in formats
In-Reply-To: <46839CBE.2080508@elvenkind.com>
References: <74f506dc0706270922q6c41b882gc6f13f6a0326f01a@mail.gmail.com>
	<46829AC0.5000502@wxs.nl>
	<87zm2l2rxf.fsf@riesling.zuerich.kuesterei.ch>
	<46838C7A.2040206@wxs.nl> <86sl8cwdxw.fsf@lola.quinscape.zz>
	<4683951C.8040300@wxs.nl> <86myykwd3p.fsf@lola.quinscape.zz>
	<46839964.1060301@elvenkind.com> <86ir98wc4b.fsf@lola.quinscape.zz>
	<46839CBE.2080508@elvenkind.com>
Message-ID: <68c491a60706281245q149d70e8r4ad4b316f41e9cea@mail.gmail.com>

2007/6/28, Taco Hoekwater <taco at elvenkind.com>:
> Not right now. Martin and I are working on setting up a pdftex
> repository at supelec, but it seems Fabrice is one vacation at the
> moment.

Not vacation, but semesters end -- he simply has no time.

Best
   Martin

From noreply at sarovar.org  Thu Jun 28 22:17:19 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Fri, 29 Jun 2007 01:47:19 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-747 ] \letterspacefont and
	\pdffontexpand, again
Message-ID: <E1I40QZ-0007Jd-00@sarovar.org>

Bugs item #747, was opened at 2007-03-09 03:09
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=747&group_id=106

Category: hz
Group: v1.40.1
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robert (schlcht)
Assigned to: The Thanh Han (hanthethanh)
Summary: \letterspacefont and \pdffontexpand, again

Initial Comment:
When expanding a letterspaced font, the base font will
be expanded, too, resulting in the error `font has been
expanded with different parameters' when the base font
is expanded again:

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20 20 5 autoexpand
\pdffontexpand\font   20 20 5 autoexpand
Z\bye


----------------------------------------------------------------------

>Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 20:17

Message:
Logged In: YES 
user_id=710

here is another patch, which introduces \pdfcopyfont. Example:

\letterspacefont\lsfont\font 100
\pdfcopyfont\lsxfont\lsfont
\pdffontexpand\lsxfont 20 20 5 autoexpand

This patch also fixed a bug in expanding local font from
virtual fonts: font shrinking didn't work. Big thanks to
Robert for help with testing.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 18:42

Message:
Logged In: YES 
user_id=710

expanding a letterspaced fonts always implies that the base
font is expanded. In other words, it's impossible *not* to
expand the base font when expanding a letterspaced font.

thanks for further testing. It looks like a bug in checking
font expansion spec. fwiw, font stretch limit is always
fixed to [0..1000] and font shrink limit to [0..500]. Thus
giving a negative value has the same effect like giving 0.

I will play with \copyfont to see if it helps.


----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-06-28 14:01

Message:
Logged In: YES 
user_id=2217

If we can get rid of the error message, I think it can be
left at that. Mind you, the problem is not how to expand a
letterspaced font but how to *not* expand the base font when
expanding a letterspaced font. That expanding a letterspaced
font results in expansion of the base font
can be documented as a feature, IMO.

Here are some more clues: The error message seems to be
related to the sign of the stretch parameter.
First of all, with

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20 20 5 autoexpand

the base font will be expanded, however it will never be
shrunk. Then,

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20  20 5 autoexpand
\pdffontexpand\font   20 -20 5 autoexpand

doesn't yield an error. Neither does:

\pdffontexpand\lsfont 20 -20 5 autoexpand
\pdffontexpand\font   20 -20 5 autoexpand

However, here comes the error again:

\pdffontexpand\lsfont 20 -20 5 autoexpand
\pdffontexpand\font   20  20 5 autoexpand

If you expand the base font first, it's OK in any case, also
with different signs.


----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 07:37

Message:
Logged In: YES 
user_id=1608

That sounds nice, I like it.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 06:45

Message:
Logged In: YES 
user_id=710

I agree this is an ugly solution, which has its origin in a
design mistake. However the problem here is not only how to
deal with the error message, but the point is how to use
font expansion with a letterspaced font. Please give it a
thought so we can come up with an acceptable workaround. If
we want everything to be clean, there are more things that
have to be thrown away.

what about this: have a primitive \copyfont which creates a
copy of a font. Example:

\letterspacefont\lsfont\font 100
\copyfont\lsxfont\lsfont
\pdffontexpand\lsxfont 20 20 5 autoexpand



----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-27 11:43

Message:
Logged In: YES 
user_id=1608


If there is no clean way of solving the problem, I'd rather
just document the error message as a feature. I find
\pdfnewexpandfont very ugly (sorry Thanh).

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-24 10:46

Message:
Logged In: YES 
user_id=710

here is a patch that introduces a new primitive
\pdfnewexpandfont. Usage:

\font\f=cmr10
\pdfnewexpandfont\fx \f 20 20 5 autoexpand

Note that \pdfnewexpandfont generates \fx by loading a TFM
corresponding to \f first, then applies font expansion in
the same way like "\pdffontexpand\fx 20 20 5". So when \f is
a font that doesn't have a corresponding TFM (for example,
because it was generated in pdftex memory only), the above
command won't work. In particular, the following doesn't work:

\font\f=cmr10
\letterspacefont\lsfont\f 100
\pdfnewexpandfont\fx \lsfont 20 20 5 autoexpand

since \lsfont doesn't have a corresponding TFM but was
generated by \letterspacefont. To create a
letterspaced+expanded font, one can use:

\font\f=cmr10
\letterspacefont\fx\f 100
\pdffontexpand\fx 20 20 5 autoexpand

things are gettting messy... sorry about that.
Testing/comments welcome.

----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-04-01 00:44

Message:
Logged In: YES 
user_id=2217

Fine for me and microtype. 

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-31 09:52

Message:
Logged In: YES 
user_id=710

either name is ok with me. We need a new pritimive to load a
new font and expand it, since the current one doesn't load a
new font and hence is making trouble. I would wait for a
while to see how Robert sees it before making any change.

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-03-19 11:07

Message:
Logged In: NO 

Hello,

I do not think that \pdfexpandfont is a good name for a new 
primitive, as it is too easy to confuse with \pdffontexpand. 
What about \pdfexpandnewfont, as -- if I understand 
correctly -- a new font is loaded?


Jonathan

P.S: Thank you for creating pdfTeX!

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-10 20:18

Message:
Logged In: YES 
user_id=710

Phil Taylor has a suggestion that seems great to me:
introduce a new primitive \pdfexpandfont instead. How do you
see it?

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-03-10 19:24

Message:
Logged In: YES 
user_id=421

Forget that comment. Of course a change of \pdffontexpand
has to be considered carefully. By you. :-)

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-03-10 19:22

Message:
Logged In: YES 
user_id=421

No. It's an undocumented primitive. ;-)

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-09 17:28

Message:
Logged In: YES 
user_id=710

sigh. A mistake when implementing the \pdffontexpand
primitive: it should load a new font for expansion, instead
of expanding a loaded font. Too late for change now?

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=747&group_id=106

From noreply at sarovar.org  Thu Jun 28 22:33:44 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Fri, 29 Jun 2007 02:03:44 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-824 ] Bus error caused by loading an
	image into a format file
Message-ID: <E1I40gS-0000MC-00@sarovar.org>

Bugs item #824, was opened at 2007-06-26 03:52
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

Category: Image inclusion
Group: v1.40.3
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robin Houston (robinhouston)
Assigned to: Martin Schr?der (oneiros)
Summary: Bus error caused by loading an image into a format file

Initial Comment:
I have written a tool that speeds up repeated
compilation of a source file, by generating a format
from the preamble of the document, and then using it to
compile the body.

One user reported a crash when using this tool with a
custom letterhead class; the class in question may be
found at
http://www.soe.ucsc.edu/~elm/LaTeX/ucletter.cls (though
note that a simpler demonstration is attached to this
report).

The bug is triggered by the fact that this class loads
an image during the processing of the preamble (i.e.
during the processing of the .ini file) and saves it in
a box. When this box is used, during the compilation of
the body, pdftex crashes.

This does work with ordinary (non-PDF) TeX, so the
problem is specific to PDFTeX.

The attachment contains a simple demonstration of the
problem. Unpack it and run 'make'.


----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-06-29 02:03

Message:
Logged In: NO 

Hi, the inability to _both_ dump a format _and_ produce
output in the same iniTeX run is probably tolerable as long
as no crashes occur.  I don't know the workings of WhizzyTeX
in detail: it is conceivable that their in-document dump
would be affected.  However, it is unlikely that WhizzyTeX
will indeed require both the output as well as the dump (the
dump may well contain pictures, for example from floats that
are going to be placed later), so there is at least a
reasonable way to tackle this from the macro level (divert
\shipout in the manner of the everyshi.sty package).

At least mylatex.ltx (and consequently preview-latex) should
work fine: \shipout before \begin{document} would be
extremely unusual and would result in strange results, anyway.

David

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-29 00:39

Message:
Logged In: YES 
user_id=1608

Small limitation that I have yet to implement: the ability
to move stuff over from the initex run means that if initex
actually creates a pdf file, dumping a format should be
disallowed, or silently ignored. Attempting to keep track of
two disjunct pdf documents is just too hard for me. 

Note that I do not want to prohibit pdf creation from
initex. Just that you can't create a pdf document _as well
as_ perform a \dump.



----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-28 20:31

Message:
Logged In: YES 
user_id=4579

Bravo!

I was ready to embark on this myself, so I'm delighted to be
spared the trouble. It passes all the tests I've tried so far.

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 16:27

Message:
Logged In: YES 
user_id=1608

Here is a patch that fixes the problem by dumping and
restoring the image _meta information_ to/from any generated
format. 

The image _data_ is not included (that would be really hard
to do in a portable way), and therefore the undumping
routines have to redo most of the work of \pdfximage, but
this is transparent to the user except that the tests
for \pdfminorversion and \pdfinclusionerrorlevel tests are
re-done.

The patch also saves some pdftex arrays that are needed to
rediscover the object. This could eventually be extended to
 make sure \refxform et al work as well. As of now, that is
untested due to lack of example.

Comments and testing welcome, as always.



----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-27 02:31

Message:
Logged In: YES 
user_id=421

Sorry, pdf things work different then dvi, so we can not
make \pdfximage etc. in ini mode without a lot of work; we
will probably disable a bunch of primitives.

----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-26 19:19

Message:
Logged In: YES 
user_id=4579

Simplifying the example by eliminating the graphics package:

==> foo.ini <==
\documentclass{minimal}

\newbox\picbox
\pdfximage{pic.pdf}
\setbox\picbox\hbox{\pdfrefximage\pdflastximage}

\dump

==> foo.tex <==
\begin{document}
        \box\picbox
\end{document}


Also, I see now that my comparison with dvi-mode is indeed a
false one, because the mechanisms are quite different, and
the DVI graphics driver only has to include a \special,
rather than the graphic itself.

A simple solution, I suppose, would be to make \pdfrefximage
(and, presumably, the other \pdfrefx commands) invalid in
IniTeX mode. Perhaps this is too brutal, since it forbids
certain harmless activities such as finding the dimensions
of an image from an .ini file; and of course I would be
delighted if it were made to work instead.


----------------------------------------------------------------------

Comment By: Reinhard Kotucha (reinhard)
Date: 2007-06-26 04:56

Message:
Logged In: YES 
user_id=4195

Martin,
you probably can't do everything in a format file.  However,
it would be nice to be able to put graphics to a format file
at least.  Suppose that a web server has to generate PDF
files on-the-fly, each contains a company logo.  The best
place place for the logo is the format file if speed
matters.  It would be nice if there are no restrictions.

Regards,
  Reinhard



----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-26 04:12

Message:
Logged In: YES 
user_id=4579

I'm impressed by the speed of your response! Thanks.

If you replace the PDF image by an EPS file, and use
-output-format dvi, then it does work. That suggests to me
that the problem is not fundamentally caused by a limitation
of IniTeX. But I don't know enough about the inner workings
of the \includegraphics command to be sure about that.
(Perhaps PDF graphics are handled in a sufficiently
different way for this to be a false comparison?)

In any case, as you say, it shouldn't crash!

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-26 04:00

Message:
Logged In: YES 
user_id=421

I can reproduce it, and it obviously shouldn't crash, but
I'm really not shure if it's supposed to work, as the format
of course will not save the picture. You can't do everything
in IniTeX...

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

From noreply at sarovar.org  Fri Jun 29 01:17:18 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Fri, 29 Jun 2007 04:47:18 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-747 ] \letterspacefont and
	\pdffontexpand, again
Message-ID: <E1I43Ek-0000fl-00@sarovar.org>

Bugs item #747, was opened at 2007-03-09 03:09
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=747&group_id=106

Category: hz
Group: v1.40.1
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robert (schlcht)
Assigned to: The Thanh Han (hanthethanh)
Summary: \letterspacefont and \pdffontexpand, again

Initial Comment:
When expanding a letterspaced font, the base font will
be expanded, too, resulting in the error `font has been
expanded with different parameters' when the base font
is expanded again:

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20 20 5 autoexpand
\pdffontexpand\font   20 20 5 autoexpand
Z\bye


----------------------------------------------------------------------

>Comment By: Robert (schlcht)
Date: 2007-06-28 23:17

Message:
Logged In: YES 
user_id=2217

Now this yields a core dump with: 

\pdfadjustspacing2
\pdffontexpand\font 20 20 5 autoexpand
\hsize10em

Lorem ipsum dolor sit amet, 
\bye

(unless I've messed up pdftex.web with all them patches)

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 20:17

Message:
Logged In: YES 
user_id=710

here is another patch, which introduces \pdfcopyfont. Example:

\letterspacefont\lsfont\font 100
\pdfcopyfont\lsxfont\lsfont
\pdffontexpand\lsxfont 20 20 5 autoexpand

This patch also fixed a bug in expanding local font from
virtual fonts: font shrinking didn't work. Big thanks to
Robert for help with testing.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 18:42

Message:
Logged In: YES 
user_id=710

expanding a letterspaced fonts always implies that the base
font is expanded. In other words, it's impossible *not* to
expand the base font when expanding a letterspaced font.

thanks for further testing. It looks like a bug in checking
font expansion spec. fwiw, font stretch limit is always
fixed to [0..1000] and font shrink limit to [0..500]. Thus
giving a negative value has the same effect like giving 0.

I will play with \copyfont to see if it helps.


----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-06-28 14:01

Message:
Logged In: YES 
user_id=2217

If we can get rid of the error message, I think it can be
left at that. Mind you, the problem is not how to expand a
letterspaced font but how to *not* expand the base font when
expanding a letterspaced font. That expanding a letterspaced
font results in expansion of the base font
can be documented as a feature, IMO.

Here are some more clues: The error message seems to be
related to the sign of the stretch parameter.
First of all, with

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20 20 5 autoexpand

the base font will be expanded, however it will never be
shrunk. Then,

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20  20 5 autoexpand
\pdffontexpand\font   20 -20 5 autoexpand

doesn't yield an error. Neither does:

\pdffontexpand\lsfont 20 -20 5 autoexpand
\pdffontexpand\font   20 -20 5 autoexpand

However, here comes the error again:

\pdffontexpand\lsfont 20 -20 5 autoexpand
\pdffontexpand\font   20  20 5 autoexpand

If you expand the base font first, it's OK in any case, also
with different signs.


----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 07:37

Message:
Logged In: YES 
user_id=1608

That sounds nice, I like it.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 06:45

Message:
Logged In: YES 
user_id=710

I agree this is an ugly solution, which has its origin in a
design mistake. However the problem here is not only how to
deal with the error message, but the point is how to use
font expansion with a letterspaced font. Please give it a
thought so we can come up with an acceptable workaround. If
we want everything to be clean, there are more things that
have to be thrown away.

what about this: have a primitive \copyfont which creates a
copy of a font. Example:

\letterspacefont\lsfont\font 100
\copyfont\lsxfont\lsfont
\pdffontexpand\lsxfont 20 20 5 autoexpand



----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-27 11:43

Message:
Logged In: YES 
user_id=1608


If there is no clean way of solving the problem, I'd rather
just document the error message as a feature. I find
\pdfnewexpandfont very ugly (sorry Thanh).

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-24 10:46

Message:
Logged In: YES 
user_id=710

here is a patch that introduces a new primitive
\pdfnewexpandfont. Usage:

\font\f=cmr10
\pdfnewexpandfont\fx \f 20 20 5 autoexpand

Note that \pdfnewexpandfont generates \fx by loading a TFM
corresponding to \f first, then applies font expansion in
the same way like "\pdffontexpand\fx 20 20 5". So when \f is
a font that doesn't have a corresponding TFM (for example,
because it was generated in pdftex memory only), the above
command won't work. In particular, the following doesn't work:

\font\f=cmr10
\letterspacefont\lsfont\f 100
\pdfnewexpandfont\fx \lsfont 20 20 5 autoexpand

since \lsfont doesn't have a corresponding TFM but was
generated by \letterspacefont. To create a
letterspaced+expanded font, one can use:

\font\f=cmr10
\letterspacefont\fx\f 100
\pdffontexpand\fx 20 20 5 autoexpand

things are gettting messy... sorry about that.
Testing/comments welcome.

----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-04-01 00:44

Message:
Logged In: YES 
user_id=2217

Fine for me and microtype. 

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-31 09:52

Message:
Logged In: YES 
user_id=710

either name is ok with me. We need a new pritimive to load a
new font and expand it, since the current one doesn't load a
new font and hence is making trouble. I would wait for a
while to see how Robert sees it before making any change.

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-03-19 11:07

Message:
Logged In: NO 

Hello,

I do not think that \pdfexpandfont is a good name for a new 
primitive, as it is too easy to confuse with \pdffontexpand. 
What about \pdfexpandnewfont, as -- if I understand 
correctly -- a new font is loaded?


Jonathan

P.S: Thank you for creating pdfTeX!

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-10 20:18

Message:
Logged In: YES 
user_id=710

Phil Taylor has a suggestion that seems great to me:
introduce a new primitive \pdfexpandfont instead. How do you
see it?

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-03-10 19:24

Message:
Logged In: YES 
user_id=421

Forget that comment. Of course a change of \pdffontexpand
has to be considered carefully. By you. :-)

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-03-10 19:22

Message:
Logged In: YES 
user_id=421

No. It's an undocumented primitive. ;-)

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-09 17:28

Message:
Logged In: YES 
user_id=710

sigh. A mistake when implementing the \pdffontexpand
primitive: it should load a new font for expansion, instead
of expanding a loaded font. Too late for change now?

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=747&group_id=106

From pragma at wxs.nl  Fri Jun 29 08:50:13 2007
From: pragma at wxs.nl (Hans Hagen)
Date: Fri, 29 Jun 2007 08:50:13 +0200
Subject: [NTG-pdftex] images in formats
In-Reply-To: <87d4zgjow5.fsf@riesling.zuerich.kuesterei.ch>
References: <74f506dc0706270922q6c41b882gc6f13f6a0326f01a@mail.gmail.com>	<46829AC0.5000502@wxs.nl>	<87zm2l2rxf.fsf@riesling.zuerich.kuesterei.ch>	<46838C7A.2040206@wxs.nl>
	<86sl8cwdxw.fsf@lola.quinscape.zz>	<4683951C.8040300@wxs.nl>
	<87d4zgjow5.fsf@riesling.zuerich.kuesterei.ch>
Message-ID: <4684ABA5.2050300@wxs.nl>

Frank K?ster wrote:
> Hans Hagen <pragma at wxs.nl> wrote:
> 
>>> I find it annoying how legitimate concerns and existing _standard_ use
>>> cases and packages are simply brushed aside or ignored.  While there
>>> may be priorities that make it necessary to postpone a proper
>>> implementation, it is not because people putting forward their
>>> concerns and presenting their use cases are idiots or weirdos that can
>>> safely be ignored.
>> again, we're talking of pdf data ending up in formats as a result of a
>> ref to an xform, not about macro packages; instead of embedding the
>> graphic one could use a reference to an external file (using an media
>> related annotation) but that's something at the macro level and not
>> pdftex internals
> 
> I'm not sure I understand you.  Do you mean that macro packages should
> use a different way of embedding graphics than they do now?  If I
> understand you right, this would require that every existing macro
> package for graphics inclusion should be changed, because otherwise it
> couldn't be used together with preview-latex or whizzytex.

when used with some tool, macro packages may as well know that they're 
doing that; in that case one can add an extra directive in the preamble

images are just part of such a story, think of multi pass data needed 
for initialization, immediate written objects, or opened files (where 
some kind of appending need to take place when the snapshot format is 
used, etc; if i had to deal with that in context, i'd make sure that i'd 
removed all things that can possibly interfere and use a special preview 
mode (if only not to have users confronted with messy docs that use 
multipass info for optimization)

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
      tel: 038 477 53 69 | fax: 038 477 53 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From dak at gnu.org  Fri Jun 29 09:15:08 2007
From: dak at gnu.org (David Kastrup)
Date: Fri, 29 Jun 2007 09:15:08 +0200
Subject: [NTG-pdftex] images in formats
In-Reply-To: <4684ABA5.2050300@wxs.nl> (Hans Hagen's message of "Fri\,
	29 Jun 2007 08\:50\:13 +0200")
References: <74f506dc0706270922q6c41b882gc6f13f6a0326f01a@mail.gmail.com>
	<46829AC0.5000502@wxs.nl>
	<87zm2l2rxf.fsf@riesling.zuerich.kuesterei.ch>
	<46838C7A.2040206@wxs.nl> <86sl8cwdxw.fsf@lola.quinscape.zz>
	<4683951C.8040300@wxs.nl>
	<87d4zgjow5.fsf@riesling.zuerich.kuesterei.ch>
	<4684ABA5.2050300@wxs.nl>
Message-ID: <86tzsrut8j.fsf@lola.quinscape.zz>

Hans Hagen <pragma at wxs.nl> writes:

> Frank K?ster wrote:
>> Hans Hagen <pragma at wxs.nl> wrote:
>> 
>>>> I find it annoying how legitimate concerns and existing _standard_ use
>>>> cases and packages are simply brushed aside or ignored.  While there
>>>> may be priorities that make it necessary to postpone a proper
>>>> implementation, it is not because people putting forward their
>>>> concerns and presenting their use cases are idiots or weirdos that can
>>>> safely be ignored.
>>> again, we're talking of pdf data ending up in formats as a result of a
>>> ref to an xform, not about macro packages; instead of embedding the
>>> graphic one could use a reference to an external file (using an media
>>> related annotation) but that's something at the macro level and not
>>> pdftex internals
>> 
>> I'm not sure I understand you.  Do you mean that macro packages should
>> use a different way of embedding graphics than they do now?  If I
>> understand you right, this would require that every existing macro
>> package for graphics inclusion should be changed, because otherwise it
>> couldn't be used together with preview-latex or whizzytex.
>
> when used with some tool, macro packages may as well know that
> they're doing that; in that case one can add an extra directive in
> the preamble

Hans, no, they may not possibly know that: dumping a format as part of
a tool like preview-latex or WhizzyTeX or mylatex.ltx _very_ much is
_not_ known to macro packages: those tools would be pretty pointless
if they only worked with macro packages that knew about them.

> images are just part of such a story, think of multi pass data
> needed for initialization, immediate written objects, or opened
> files (where some kind of appending need to take place when the
> snapshot format is used, etc; if i had to deal with that in context,
> i'd make sure that i'd removed all things that can possibly
> interfere and use a special preview mode (if only not to have users
> confronted with messy docs that use multipass info for optimization)

Take a look at mylatex.ltx.  It does exactly that and works with the
overwhelming majority of LaTeX documents out of the box.

-- 
David Kastrup

From pragma at wxs.nl  Fri Jun 29 09:42:54 2007
From: pragma at wxs.nl (Hans Hagen)
Date: Fri, 29 Jun 2007 09:42:54 +0200
Subject: [NTG-pdftex] images in formats
In-Reply-To: <86tzsrut8j.fsf@lola.quinscape.zz>
References: <74f506dc0706270922q6c41b882gc6f13f6a0326f01a@mail.gmail.com>	<46829AC0.5000502@wxs.nl>	<87zm2l2rxf.fsf@riesling.zuerich.kuesterei.ch>	<46838C7A.2040206@wxs.nl>
	<86sl8cwdxw.fsf@lola.quinscape.zz>	<4683951C.8040300@wxs.nl>	<87d4zgjow5.fsf@riesling.zuerich.kuesterei.ch>	<4684ABA5.2050300@wxs.nl>
	<86tzsrut8j.fsf@lola.quinscape.zz>
Message-ID: <4684B7FE.2020906@wxs.nl>

David Kastrup wrote:
> Hans Hagen <pragma at wxs.nl> writes:
> 
>> Frank K?ster wrote:
>>> Hans Hagen <pragma at wxs.nl> wrote:
>>>
>>>>> I find it annoying how legitimate concerns and existing _standard_ use
>>>>> cases and packages are simply brushed aside or ignored.  While there
>>>>> may be priorities that make it necessary to postpone a proper
>>>>> implementation, it is not because people putting forward their
>>>>> concerns and presenting their use cases are idiots or weirdos that can
>>>>> safely be ignored.
>>>> again, we're talking of pdf data ending up in formats as a result of a
>>>> ref to an xform, not about macro packages; instead of embedding the
>>>> graphic one could use a reference to an external file (using an media
>>>> related annotation) but that's something at the macro level and not
>>>> pdftex internals
>>> I'm not sure I understand you.  Do you mean that macro packages should
>>> use a different way of embedding graphics than they do now?  If I
>>> understand you right, this would require that every existing macro
>>> package for graphics inclusion should be changed, because otherwise it
>>> couldn't be used together with preview-latex or whizzytex.
>> when used with some tool, macro packages may as well know that
>> they're doing that; in that case one can add an extra directive in
>> the preamble
> 
> Hans, no, they may not possibly know that: dumping a format as part of
> a tool like preview-latex or WhizzyTeX or mylatex.ltx _very_ much is
> _not_ known to macro packages: those tools would be pretty pointless
> if they only worked with macro packages that knew about them.

hey, i'm not saying that dumping a format is not feasible, but only that 
  there may be problems along the road that are hard to foresee, for 
instance, when in such a preamble 239 bytes are written to an 
immediately opened file, you' better be sure that this happens again 
when the dumped format is loaded (i.e. reopen the file, goto pos 340, 
hope that the old stuff is still therem and such); same for immediate 
objects and so (ok, that is different for dvi because there pdf related 
things end up in specials);

(btw, you could inject an additional style loading in front of a preview 
run i guess)

>> images are just part of such a story, think of multi pass data
>> needed for initialization, immediate written objects, or opened
>> files (where some kind of appending need to take place when the
>> snapshot format is used, etc; if i had to deal with that in context,
>> i'd make sure that i'd removed all things that can possibly
>> interfere and use a special preview mode (if only not to have users
>> confronted with messy docs that use multipass info for optimization)
> 
> Take a look at mylatex.ltx.  It does exactly that and works with the
> overwhelming majority of LaTeX documents out of the box.

even packages like mylatex probably have to know a bit about what 
they're dealing with and probably assume certain things i.e. they only 
work with macro packages that they know about -)


Hans



-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
      tel: 038 477 53 69 | fax: 038 477 53 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From noreply at sarovar.org  Fri Jun 29 09:22:50 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Fri, 29 Jun 2007 12:52:50 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-747 ] \letterspacefont and
	\pdffontexpand, again
Message-ID: <E1I4Aoc-0004uG-00@sarovar.org>

Bugs item #747, was opened at 2007-03-09 04:09
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=747&group_id=106

Category: hz
Group: v1.40.1
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robert (schlcht)
Assigned to: The Thanh Han (hanthethanh)
Summary: \letterspacefont and \pdffontexpand, again

Initial Comment:
When expanding a letterspaced font, the base font will
be expanded, too, resulting in the error `font has been
expanded with different parameters' when the base font
is expanded again:

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20 20 5 autoexpand
\pdffontexpand\font   20 20 5 autoexpand
Z\bye


----------------------------------------------------------------------

>Comment By: Taco Hoekwater (taco)
Date: 2007-06-29 09:22

Message:
Logged In: YES 
user_id=1608

On my (fairly) clean sources, one hunk is rejected because
of this:

else begin
  if pdf_font_type[f] <> new_font_type then
    pdf_warning("font expansion", "font should be expanded
before its first use",
                true, true);
    end;


My pdftex.web uses pdf_font_type[f] = real_font_type in that
test. I fixed the hunk, but I also get a crash on Robert's
test file.

----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-06-29 01:17

Message:
Logged In: YES 
user_id=2217

Now this yields a core dump with: 

\pdfadjustspacing2
\pdffontexpand\font 20 20 5 autoexpand
\hsize10em

Lorem ipsum dolor sit amet, 
\bye

(unless I've messed up pdftex.web with all them patches)

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 22:17

Message:
Logged In: YES 
user_id=710

here is another patch, which introduces \pdfcopyfont. Example:

\letterspacefont\lsfont\font 100
\pdfcopyfont\lsxfont\lsfont
\pdffontexpand\lsxfont 20 20 5 autoexpand

This patch also fixed a bug in expanding local font from
virtual fonts: font shrinking didn't work. Big thanks to
Robert for help with testing.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 20:42

Message:
Logged In: YES 
user_id=710

expanding a letterspaced fonts always implies that the base
font is expanded. In other words, it's impossible *not* to
expand the base font when expanding a letterspaced font.

thanks for further testing. It looks like a bug in checking
font expansion spec. fwiw, font stretch limit is always
fixed to [0..1000] and font shrink limit to [0..500]. Thus
giving a negative value has the same effect like giving 0.

I will play with \copyfont to see if it helps.


----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-06-28 16:01

Message:
Logged In: YES 
user_id=2217

If we can get rid of the error message, I think it can be
left at that. Mind you, the problem is not how to expand a
letterspaced font but how to *not* expand the base font when
expanding a letterspaced font. That expanding a letterspaced
font results in expansion of the base font
can be documented as a feature, IMO.

Here are some more clues: The error message seems to be
related to the sign of the stretch parameter.
First of all, with

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20 20 5 autoexpand

the base font will be expanded, however it will never be
shrunk. Then,

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20  20 5 autoexpand
\pdffontexpand\font   20 -20 5 autoexpand

doesn't yield an error. Neither does:

\pdffontexpand\lsfont 20 -20 5 autoexpand
\pdffontexpand\font   20 -20 5 autoexpand

However, here comes the error again:

\pdffontexpand\lsfont 20 -20 5 autoexpand
\pdffontexpand\font   20  20 5 autoexpand

If you expand the base font first, it's OK in any case, also
with different signs.


----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 09:37

Message:
Logged In: YES 
user_id=1608

That sounds nice, I like it.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 08:45

Message:
Logged In: YES 
user_id=710

I agree this is an ugly solution, which has its origin in a
design mistake. However the problem here is not only how to
deal with the error message, but the point is how to use
font expansion with a letterspaced font. Please give it a
thought so we can come up with an acceptable workaround. If
we want everything to be clean, there are more things that
have to be thrown away.

what about this: have a primitive \copyfont which creates a
copy of a font. Example:

\letterspacefont\lsfont\font 100
\copyfont\lsxfont\lsfont
\pdffontexpand\lsxfont 20 20 5 autoexpand



----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-27 13:43

Message:
Logged In: YES 
user_id=1608


If there is no clean way of solving the problem, I'd rather
just document the error message as a feature. I find
\pdfnewexpandfont very ugly (sorry Thanh).

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-24 12:46

Message:
Logged In: YES 
user_id=710

here is a patch that introduces a new primitive
\pdfnewexpandfont. Usage:

\font\f=cmr10
\pdfnewexpandfont\fx \f 20 20 5 autoexpand

Note that \pdfnewexpandfont generates \fx by loading a TFM
corresponding to \f first, then applies font expansion in
the same way like "\pdffontexpand\fx 20 20 5". So when \f is
a font that doesn't have a corresponding TFM (for example,
because it was generated in pdftex memory only), the above
command won't work. In particular, the following doesn't work:

\font\f=cmr10
\letterspacefont\lsfont\f 100
\pdfnewexpandfont\fx \lsfont 20 20 5 autoexpand

since \lsfont doesn't have a corresponding TFM but was
generated by \letterspacefont. To create a
letterspaced+expanded font, one can use:

\font\f=cmr10
\letterspacefont\fx\f 100
\pdffontexpand\fx 20 20 5 autoexpand

things are gettting messy... sorry about that.
Testing/comments welcome.

----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-04-01 02:44

Message:
Logged In: YES 
user_id=2217

Fine for me and microtype. 

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-31 11:52

Message:
Logged In: YES 
user_id=710

either name is ok with me. We need a new pritimive to load a
new font and expand it, since the current one doesn't load a
new font and hence is making trouble. I would wait for a
while to see how Robert sees it before making any change.

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-03-19 12:07

Message:
Logged In: NO 

Hello,

I do not think that \pdfexpandfont is a good name for a new 
primitive, as it is too easy to confuse with \pdffontexpand. 
What about \pdfexpandnewfont, as -- if I understand 
correctly -- a new font is loaded?


Jonathan

P.S: Thank you for creating pdfTeX!

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-10 21:18

Message:
Logged In: YES 
user_id=710

Phil Taylor has a suggestion that seems great to me:
introduce a new primitive \pdfexpandfont instead. How do you
see it?

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-03-10 20:24

Message:
Logged In: YES 
user_id=421

Forget that comment. Of course a change of \pdffontexpand
has to be considered carefully. By you. :-)

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-03-10 20:22

Message:
Logged In: YES 
user_id=421

No. It's an undocumented primitive. ;-)

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-09 18:28

Message:
Logged In: YES 
user_id=710

sigh. A mistake when implementing the \pdffontexpand
primitive: it should load a new font for expansion, instead
of expanding a loaded font. Too late for change now?

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=747&group_id=106

From noreply at sarovar.org  Fri Jun 29 10:52:57 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Fri, 29 Jun 2007 14:22:57 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-747 ] \letterspacefont and
	\pdffontexpand, again
Message-ID: <E1I4CDp-0000xj-00@sarovar.org>

Bugs item #747, was opened at 2007-03-09 04:09
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=747&group_id=106

Category: hz
Group: v1.40.1
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robert (schlcht)
Assigned to: The Thanh Han (hanthethanh)
Summary: \letterspacefont and \pdffontexpand, again

Initial Comment:
When expanding a letterspaced font, the base font will
be expanded, too, resulting in the error `font has been
expanded with different parameters' when the base font
is expanded again:

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20 20 5 autoexpand
\pdffontexpand\font   20 20 5 autoexpand
Z\bye


----------------------------------------------------------------------

>Comment By: Martin Schr?der (oneiros)
Date: 2007-06-29 10:52

Message:
Logged In: YES 
user_id=421

Taco, the new_font_type -> real_font_type is from the fix
for bug #722. We need an svn... :-(

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-29 09:22

Message:
Logged In: YES 
user_id=1608

On my (fairly) clean sources, one hunk is rejected because
of this:

else begin
  if pdf_font_type[f] <> new_font_type then
    pdf_warning("font expansion", "font should be expanded
before its first use",
                true, true);
    end;


My pdftex.web uses pdf_font_type[f] = real_font_type in that
test. I fixed the hunk, but I also get a crash on Robert's
test file.

----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-06-29 01:17

Message:
Logged In: YES 
user_id=2217

Now this yields a core dump with: 

\pdfadjustspacing2
\pdffontexpand\font 20 20 5 autoexpand
\hsize10em

Lorem ipsum dolor sit amet, 
\bye

(unless I've messed up pdftex.web with all them patches)

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 22:17

Message:
Logged In: YES 
user_id=710

here is another patch, which introduces \pdfcopyfont. Example:

\letterspacefont\lsfont\font 100
\pdfcopyfont\lsxfont\lsfont
\pdffontexpand\lsxfont 20 20 5 autoexpand

This patch also fixed a bug in expanding local font from
virtual fonts: font shrinking didn't work. Big thanks to
Robert for help with testing.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 20:42

Message:
Logged In: YES 
user_id=710

expanding a letterspaced fonts always implies that the base
font is expanded. In other words, it's impossible *not* to
expand the base font when expanding a letterspaced font.

thanks for further testing. It looks like a bug in checking
font expansion spec. fwiw, font stretch limit is always
fixed to [0..1000] and font shrink limit to [0..500]. Thus
giving a negative value has the same effect like giving 0.

I will play with \copyfont to see if it helps.


----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-06-28 16:01

Message:
Logged In: YES 
user_id=2217

If we can get rid of the error message, I think it can be
left at that. Mind you, the problem is not how to expand a
letterspaced font but how to *not* expand the base font when
expanding a letterspaced font. That expanding a letterspaced
font results in expansion of the base font
can be documented as a feature, IMO.

Here are some more clues: The error message seems to be
related to the sign of the stretch parameter.
First of all, with

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20 20 5 autoexpand

the base font will be expanded, however it will never be
shrunk. Then,

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20  20 5 autoexpand
\pdffontexpand\font   20 -20 5 autoexpand

doesn't yield an error. Neither does:

\pdffontexpand\lsfont 20 -20 5 autoexpand
\pdffontexpand\font   20 -20 5 autoexpand

However, here comes the error again:

\pdffontexpand\lsfont 20 -20 5 autoexpand
\pdffontexpand\font   20  20 5 autoexpand

If you expand the base font first, it's OK in any case, also
with different signs.


----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 09:37

Message:
Logged In: YES 
user_id=1608

That sounds nice, I like it.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 08:45

Message:
Logged In: YES 
user_id=710

I agree this is an ugly solution, which has its origin in a
design mistake. However the problem here is not only how to
deal with the error message, but the point is how to use
font expansion with a letterspaced font. Please give it a
thought so we can come up with an acceptable workaround. If
we want everything to be clean, there are more things that
have to be thrown away.

what about this: have a primitive \copyfont which creates a
copy of a font. Example:

\letterspacefont\lsfont\font 100
\copyfont\lsxfont\lsfont
\pdffontexpand\lsxfont 20 20 5 autoexpand



----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-27 13:43

Message:
Logged In: YES 
user_id=1608


If there is no clean way of solving the problem, I'd rather
just document the error message as a feature. I find
\pdfnewexpandfont very ugly (sorry Thanh).

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-24 12:46

Message:
Logged In: YES 
user_id=710

here is a patch that introduces a new primitive
\pdfnewexpandfont. Usage:

\font\f=cmr10
\pdfnewexpandfont\fx \f 20 20 5 autoexpand

Note that \pdfnewexpandfont generates \fx by loading a TFM
corresponding to \f first, then applies font expansion in
the same way like "\pdffontexpand\fx 20 20 5". So when \f is
a font that doesn't have a corresponding TFM (for example,
because it was generated in pdftex memory only), the above
command won't work. In particular, the following doesn't work:

\font\f=cmr10
\letterspacefont\lsfont\f 100
\pdfnewexpandfont\fx \lsfont 20 20 5 autoexpand

since \lsfont doesn't have a corresponding TFM but was
generated by \letterspacefont. To create a
letterspaced+expanded font, one can use:

\font\f=cmr10
\letterspacefont\fx\f 100
\pdffontexpand\fx 20 20 5 autoexpand

things are gettting messy... sorry about that.
Testing/comments welcome.

----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-04-01 02:44

Message:
Logged In: YES 
user_id=2217

Fine for me and microtype. 

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-31 11:52

Message:
Logged In: YES 
user_id=710

either name is ok with me. We need a new pritimive to load a
new font and expand it, since the current one doesn't load a
new font and hence is making trouble. I would wait for a
while to see how Robert sees it before making any change.

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-03-19 12:07

Message:
Logged In: NO 

Hello,

I do not think that \pdfexpandfont is a good name for a new 
primitive, as it is too easy to confuse with \pdffontexpand. 
What about \pdfexpandnewfont, as -- if I understand 
correctly -- a new font is loaded?


Jonathan

P.S: Thank you for creating pdfTeX!

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-10 21:18

Message:
Logged In: YES 
user_id=710

Phil Taylor has a suggestion that seems great to me:
introduce a new primitive \pdfexpandfont instead. How do you
see it?

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-03-10 20:24

Message:
Logged In: YES 
user_id=421

Forget that comment. Of course a change of \pdffontexpand
has to be considered carefully. By you. :-)

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-03-10 20:22

Message:
Logged In: YES 
user_id=421

No. It's an undocumented primitive. ;-)

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-09 18:28

Message:
Logged In: YES 
user_id=710

sigh. A mistake when implementing the \pdffontexpand
primitive: it should load a new font for expansion, instead
of expanding a loaded font. Too late for change now?

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=747&group_id=106

From noreply at sarovar.org  Fri Jun 29 11:56:20 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Fri, 29 Jun 2007 15:26:20 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-747 ] \letterspacefont and
	\pdffontexpand, again
Message-ID: <E1I4DDA-0003O1-00@sarovar.org>

Bugs item #747, was opened at 2007-03-09 03:09
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=747&group_id=106

Category: hz
Group: v1.40.1
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robert (schlcht)
Assigned to: The Thanh Han (hanthethanh)
Summary: \letterspacefont and \pdffontexpand, again

Initial Comment:
When expanding a letterspaced font, the base font will
be expanded, too, resulting in the error `font has been
expanded with different parameters' when the base font
is expanded again:

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20 20 5 autoexpand
\pdffontexpand\font   20 20 5 autoexpand
Z\bye


----------------------------------------------------------------------

>Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-29 09:56

Message:
Logged In: YES 
user_id=710

sorry, I didn't test it carefully enough. Here is another
attempt (tested with the microtype manual).

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-29 08:52

Message:
Logged In: YES 
user_id=421

Taco, the new_font_type -> real_font_type is from the fix
for bug #722. We need an svn... :-(

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-29 07:22

Message:
Logged In: YES 
user_id=1608

On my (fairly) clean sources, one hunk is rejected because
of this:

else begin
  if pdf_font_type[f] <> new_font_type then
    pdf_warning("font expansion", "font should be expanded
before its first use",
                true, true);
    end;


My pdftex.web uses pdf_font_type[f] = real_font_type in that
test. I fixed the hunk, but I also get a crash on Robert's
test file.

----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-06-28 23:17

Message:
Logged In: YES 
user_id=2217

Now this yields a core dump with: 

\pdfadjustspacing2
\pdffontexpand\font 20 20 5 autoexpand
\hsize10em

Lorem ipsum dolor sit amet, 
\bye

(unless I've messed up pdftex.web with all them patches)

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 20:17

Message:
Logged In: YES 
user_id=710

here is another patch, which introduces \pdfcopyfont. Example:

\letterspacefont\lsfont\font 100
\pdfcopyfont\lsxfont\lsfont
\pdffontexpand\lsxfont 20 20 5 autoexpand

This patch also fixed a bug in expanding local font from
virtual fonts: font shrinking didn't work. Big thanks to
Robert for help with testing.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 18:42

Message:
Logged In: YES 
user_id=710

expanding a letterspaced fonts always implies that the base
font is expanded. In other words, it's impossible *not* to
expand the base font when expanding a letterspaced font.

thanks for further testing. It looks like a bug in checking
font expansion spec. fwiw, font stretch limit is always
fixed to [0..1000] and font shrink limit to [0..500]. Thus
giving a negative value has the same effect like giving 0.

I will play with \copyfont to see if it helps.


----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-06-28 14:01

Message:
Logged In: YES 
user_id=2217

If we can get rid of the error message, I think it can be
left at that. Mind you, the problem is not how to expand a
letterspaced font but how to *not* expand the base font when
expanding a letterspaced font. That expanding a letterspaced
font results in expansion of the base font
can be documented as a feature, IMO.

Here are some more clues: The error message seems to be
related to the sign of the stretch parameter.
First of all, with

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20 20 5 autoexpand

the base font will be expanded, however it will never be
shrunk. Then,

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20  20 5 autoexpand
\pdffontexpand\font   20 -20 5 autoexpand

doesn't yield an error. Neither does:

\pdffontexpand\lsfont 20 -20 5 autoexpand
\pdffontexpand\font   20 -20 5 autoexpand

However, here comes the error again:

\pdffontexpand\lsfont 20 -20 5 autoexpand
\pdffontexpand\font   20  20 5 autoexpand

If you expand the base font first, it's OK in any case, also
with different signs.


----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 07:37

Message:
Logged In: YES 
user_id=1608

That sounds nice, I like it.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 06:45

Message:
Logged In: YES 
user_id=710

I agree this is an ugly solution, which has its origin in a
design mistake. However the problem here is not only how to
deal with the error message, but the point is how to use
font expansion with a letterspaced font. Please give it a
thought so we can come up with an acceptable workaround. If
we want everything to be clean, there are more things that
have to be thrown away.

what about this: have a primitive \copyfont which creates a
copy of a font. Example:

\letterspacefont\lsfont\font 100
\copyfont\lsxfont\lsfont
\pdffontexpand\lsxfont 20 20 5 autoexpand



----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-27 11:43

Message:
Logged In: YES 
user_id=1608


If there is no clean way of solving the problem, I'd rather
just document the error message as a feature. I find
\pdfnewexpandfont very ugly (sorry Thanh).

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-24 10:46

Message:
Logged In: YES 
user_id=710

here is a patch that introduces a new primitive
\pdfnewexpandfont. Usage:

\font\f=cmr10
\pdfnewexpandfont\fx \f 20 20 5 autoexpand

Note that \pdfnewexpandfont generates \fx by loading a TFM
corresponding to \f first, then applies font expansion in
the same way like "\pdffontexpand\fx 20 20 5". So when \f is
a font that doesn't have a corresponding TFM (for example,
because it was generated in pdftex memory only), the above
command won't work. In particular, the following doesn't work:

\font\f=cmr10
\letterspacefont\lsfont\f 100
\pdfnewexpandfont\fx \lsfont 20 20 5 autoexpand

since \lsfont doesn't have a corresponding TFM but was
generated by \letterspacefont. To create a
letterspaced+expanded font, one can use:

\font\f=cmr10
\letterspacefont\fx\f 100
\pdffontexpand\fx 20 20 5 autoexpand

things are gettting messy... sorry about that.
Testing/comments welcome.

----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-04-01 00:44

Message:
Logged In: YES 
user_id=2217

Fine for me and microtype. 

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-31 09:52

Message:
Logged In: YES 
user_id=710

either name is ok with me. We need a new pritimive to load a
new font and expand it, since the current one doesn't load a
new font and hence is making trouble. I would wait for a
while to see how Robert sees it before making any change.

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-03-19 11:07

Message:
Logged In: NO 

Hello,

I do not think that \pdfexpandfont is a good name for a new 
primitive, as it is too easy to confuse with \pdffontexpand. 
What about \pdfexpandnewfont, as -- if I understand 
correctly -- a new font is loaded?


Jonathan

P.S: Thank you for creating pdfTeX!

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-10 20:18

Message:
Logged In: YES 
user_id=710

Phil Taylor has a suggestion that seems great to me:
introduce a new primitive \pdfexpandfont instead. How do you
see it?

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-03-10 19:24

Message:
Logged In: YES 
user_id=421

Forget that comment. Of course a change of \pdffontexpand
has to be considered carefully. By you. :-)

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-03-10 19:22

Message:
Logged In: YES 
user_id=421

No. It's an undocumented primitive. ;-)

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-09 17:28

Message:
Logged In: YES 
user_id=710

sigh. A mistake when implementing the \pdffontexpand
primitive: it should load a new font for expansion, instead
of expanding a loaded font. Too late for change now?

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=747&group_id=106

From noreply at sarovar.org  Fri Jun 29 12:34:48 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Fri, 29 Jun 2007 16:04:48 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-824 ] Bus error caused by loading an
	image into a format file
Message-ID: <E1I4DoO-0007mZ-00@sarovar.org>

Bugs item #824, was opened at 2007-06-26 00:22
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

Category: Image inclusion
Group: v1.40.3
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robin Houston (robinhouston)
Assigned to: Martin Schr?der (oneiros)
Summary: Bus error caused by loading an image into a format file

Initial Comment:
I have written a tool that speeds up repeated
compilation of a source file, by generating a format
from the preamble of the document, and then using it to
compile the body.

One user reported a crash when using this tool with a
custom letterhead class; the class in question may be
found at
http://www.soe.ucsc.edu/~elm/LaTeX/ucletter.cls (though
note that a simpler demonstration is attached to this
report).

The bug is triggered by the fact that this class loads
an image during the processing of the preamble (i.e.
during the processing of the .ini file) and saves it in
a box. When this box is used, during the compilation of
the body, pdftex crashes.

This does work with ordinary (non-PDF) TeX, so the
problem is specific to PDFTeX.

The attachment contains a simple demonstration of the
problem. Unpack it and run 'make'.


----------------------------------------------------------------------

>Comment By: Taco Hoekwater (taco)
Date: 2007-06-29 12:34

Message:
Logged In: YES 
user_id=1608

Here is the promised extra patch. No error is generated,
just a simple warning. Pdftex continues executing as if \end
was given instead.

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-06-28 22:33

Message:
Logged In: NO 

Hi, the inability to _both_ dump a format _and_ produce
output in the same iniTeX run is probably tolerable as long
as no crashes occur.  I don't know the workings of WhizzyTeX
in detail: it is conceivable that their in-document dump
would be affected.  However, it is unlikely that WhizzyTeX
will indeed require both the output as well as the dump (the
dump may well contain pictures, for example from floats that
are going to be placed later), so there is at least a
reasonable way to tackle this from the macro level (divert
\shipout in the manner of the everyshi.sty package).

At least mylatex.ltx (and consequently preview-latex) should
work fine: \shipout before \begin{document} would be
extremely unusual and would result in strange results, anyway.

David

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 21:09

Message:
Logged In: YES 
user_id=1608

Small limitation that I have yet to implement: the ability
to move stuff over from the initex run means that if initex
actually creates a pdf file, dumping a format should be
disallowed, or silently ignored. Attempting to keep track of
two disjunct pdf documents is just too hard for me. 

Note that I do not want to prohibit pdf creation from
initex. Just that you can't create a pdf document _as well
as_ perform a \dump.



----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-28 17:01

Message:
Logged In: YES 
user_id=4579

Bravo!

I was ready to embark on this myself, so I'm delighted to be
spared the trouble. It passes all the tests I've tried so far.

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 12:57

Message:
Logged In: YES 
user_id=1608

Here is a patch that fixes the problem by dumping and
restoring the image _meta information_ to/from any generated
format. 

The image _data_ is not included (that would be really hard
to do in a portable way), and therefore the undumping
routines have to redo most of the work of \pdfximage, but
this is transparent to the user except that the tests
for \pdfminorversion and \pdfinclusionerrorlevel tests are
re-done.

The patch also saves some pdftex arrays that are needed to
rediscover the object. This could eventually be extended to
 make sure \refxform et al work as well. As of now, that is
untested due to lack of example.

Comments and testing welcome, as always.



----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-26 23:01

Message:
Logged In: YES 
user_id=421

Sorry, pdf things work different then dvi, so we can not
make \pdfximage etc. in ini mode without a lot of work; we
will probably disable a bunch of primitives.

----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-26 15:49

Message:
Logged In: YES 
user_id=4579

Simplifying the example by eliminating the graphics package:

==> foo.ini <==
\documentclass{minimal}

\newbox\picbox
\pdfximage{pic.pdf}
\setbox\picbox\hbox{\pdfrefximage\pdflastximage}

\dump

==> foo.tex <==
\begin{document}
        \box\picbox
\end{document}


Also, I see now that my comparison with dvi-mode is indeed a
false one, because the mechanisms are quite different, and
the DVI graphics driver only has to include a \special,
rather than the graphic itself.

A simple solution, I suppose, would be to make \pdfrefximage
(and, presumably, the other \pdfrefx commands) invalid in
IniTeX mode. Perhaps this is too brutal, since it forbids
certain harmless activities such as finding the dimensions
of an image from an .ini file; and of course I would be
delighted if it were made to work instead.


----------------------------------------------------------------------

Comment By: Reinhard Kotucha (reinhard)
Date: 2007-06-26 01:26

Message:
Logged In: YES 
user_id=4195

Martin,
you probably can't do everything in a format file.  However,
it would be nice to be able to put graphics to a format file
at least.  Suppose that a web server has to generate PDF
files on-the-fly, each contains a company logo.  The best
place place for the logo is the format file if speed
matters.  It would be nice if there are no restrictions.

Regards,
  Reinhard



----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-26 00:42

Message:
Logged In: YES 
user_id=4579

I'm impressed by the speed of your response! Thanks.

If you replace the PDF image by an EPS file, and use
-output-format dvi, then it does work. That suggests to me
that the problem is not fundamentally caused by a limitation
of IniTeX. But I don't know enough about the inner workings
of the \includegraphics command to be sure about that.
(Perhaps PDF graphics are handled in a sufficiently
different way for this to be a false comparison?)

In any case, as you say, it shouldn't crash!

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-26 00:30

Message:
Logged In: YES 
user_id=421

I can reproduce it, and it obviously shouldn't crash, but
I'm really not shure if it's supposed to work, as the format
of course will not save the picture. You can't do everything
in IniTeX...

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

From noreply at sarovar.org  Fri Jun 29 13:02:25 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Fri, 29 Jun 2007 16:32:25 +0530
Subject: [NTG-pdftex] [ pdftex-Patches-812 ] added \pdfkeeplinedimen
	primitive
Message-ID: <E1I4EF7-0003iB-00@sarovar.org>

Patches item #812, was opened at 2007-06-23 17:23
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=812&group_id=106

Category: Primitives
Group: v1.50.0
Status: Open
Resolution: None
Priority: 5
Submitted By: The Thanh Han (hanthethanh)
Assigned to: Hartmut Henkel (hhenkel)
Summary: added \pdfkeeplinedimen primitive

Initial Comment:
This patch introduces a new primitive
\pdfkeepdimenline, which is an addon to bring some more
flexibity to the existing \pdflastlinedepth,
\pdffirstlineheight, \pdfeachlinedepth and
\pdfeachlineheight primitives. Those primitives are set
to 0 by default, and they take effect only if the user
sets them to a non-zero value (as one can guess from
their names, they fix line dimensions of a paragraph). 

The issue with those primitives is that it's impossible
to use them with 0, as this value means "don't change
line dimens". So this patch introduces
\pdfkeepdimenline, a dimen register keeping the value
for "don't change line dimens". By default all are set
to 0, so the default behaviour is unchanged. 

For example, to set depth of each line after line
breaking to zero, one can say:

    \pdfkeeplinedimen=\maxdimen
    \pdfeachlineheight=\pdfkeeplinedimen  
    \pdffirstlineheight=\pdfkeeplinedimen
    \pdflastlinedepth=\pdfkeeplinedimen
    \pdfeachlinedepth=0pt

Testing/comments welcome.

----------------------------------------------------------------------

>Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-29 11:02

Message:
Logged In: YES 
user_id=710

here is another patch that introduces \pdfignoreddimen as
Taco suggested.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-24 08:41

Message:
Logged In: YES 
user_id=710

sounds good to me.

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-24 08:28

Message:
Logged In: YES 
user_id=1608


I see an advantage in having a configurable parameter over
the arbitrary constant that \prevdepth currently uses. But
if that is the case, it makes sense to apply it to
\prevdepth as well.

So how about \pdfignoreddimen instead, that defaults to
-1000pt, and is also used by \prevdepth ?



----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-24 08:26

Message:
Logged In: YES 
user_id=710

another patch uploaded, so the pdftex team can choose
between them. Hope to make Nobody (None) happy. 

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-06-23 17:29

Message:
Logged In: NO 

This is completely clunky and awkward.  Instead of having
some magic variable which changes the meaning of _all_
addresses here, how about just using \prevdepth's default
for "no change", namely -1000pt?

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=812&group_id=106

From noreply at sarovar.org  Fri Jun 29 15:32:51 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Fri, 29 Jun 2007 19:02:51 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-747 ] \letterspacefont and
	\pdffontexpand, again
Message-ID: <E1I4Gah-0001Nb-00@sarovar.org>

Bugs item #747, was opened at 2007-03-09 03:09
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=747&group_id=106

Category: hz
Group: v1.40.1
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robert (schlcht)
Assigned to: The Thanh Han (hanthethanh)
Summary: \letterspacefont and \pdffontexpand, again

Initial Comment:
When expanding a letterspaced font, the base font will
be expanded, too, resulting in the error `font has been
expanded with different parameters' when the base font
is expanded again:

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20 20 5 autoexpand
\pdffontexpand\font   20 20 5 autoexpand
Z\bye


----------------------------------------------------------------------

>Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-29 13:32

Message:
Logged In: YES 
user_id=710

patch deleted. Needs more testing.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-29 09:56

Message:
Logged In: YES 
user_id=710

sorry, I didn't test it carefully enough. Here is another
attempt (tested with the microtype manual).

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-29 08:52

Message:
Logged In: YES 
user_id=421

Taco, the new_font_type -> real_font_type is from the fix
for bug #722. We need an svn... :-(

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-29 07:22

Message:
Logged In: YES 
user_id=1608

On my (fairly) clean sources, one hunk is rejected because
of this:

else begin
  if pdf_font_type[f] <> new_font_type then
    pdf_warning("font expansion", "font should be expanded
before its first use",
                true, true);
    end;


My pdftex.web uses pdf_font_type[f] = real_font_type in that
test. I fixed the hunk, but I also get a crash on Robert's
test file.

----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-06-28 23:17

Message:
Logged In: YES 
user_id=2217

Now this yields a core dump with: 

\pdfadjustspacing2
\pdffontexpand\font 20 20 5 autoexpand
\hsize10em

Lorem ipsum dolor sit amet, 
\bye

(unless I've messed up pdftex.web with all them patches)

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 20:17

Message:
Logged In: YES 
user_id=710

here is another patch, which introduces \pdfcopyfont. Example:

\letterspacefont\lsfont\font 100
\pdfcopyfont\lsxfont\lsfont
\pdffontexpand\lsxfont 20 20 5 autoexpand

This patch also fixed a bug in expanding local font from
virtual fonts: font shrinking didn't work. Big thanks to
Robert for help with testing.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 18:42

Message:
Logged In: YES 
user_id=710

expanding a letterspaced fonts always implies that the base
font is expanded. In other words, it's impossible *not* to
expand the base font when expanding a letterspaced font.

thanks for further testing. It looks like a bug in checking
font expansion spec. fwiw, font stretch limit is always
fixed to [0..1000] and font shrink limit to [0..500]. Thus
giving a negative value has the same effect like giving 0.

I will play with \copyfont to see if it helps.


----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-06-28 14:01

Message:
Logged In: YES 
user_id=2217

If we can get rid of the error message, I think it can be
left at that. Mind you, the problem is not how to expand a
letterspaced font but how to *not* expand the base font when
expanding a letterspaced font. That expanding a letterspaced
font results in expansion of the base font
can be documented as a feature, IMO.

Here are some more clues: The error message seems to be
related to the sign of the stretch parameter.
First of all, with

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20 20 5 autoexpand

the base font will be expanded, however it will never be
shrunk. Then,

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20  20 5 autoexpand
\pdffontexpand\font   20 -20 5 autoexpand

doesn't yield an error. Neither does:

\pdffontexpand\lsfont 20 -20 5 autoexpand
\pdffontexpand\font   20 -20 5 autoexpand

However, here comes the error again:

\pdffontexpand\lsfont 20 -20 5 autoexpand
\pdffontexpand\font   20  20 5 autoexpand

If you expand the base font first, it's OK in any case, also
with different signs.


----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 07:37

Message:
Logged In: YES 
user_id=1608

That sounds nice, I like it.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 06:45

Message:
Logged In: YES 
user_id=710

I agree this is an ugly solution, which has its origin in a
design mistake. However the problem here is not only how to
deal with the error message, but the point is how to use
font expansion with a letterspaced font. Please give it a
thought so we can come up with an acceptable workaround. If
we want everything to be clean, there are more things that
have to be thrown away.

what about this: have a primitive \copyfont which creates a
copy of a font. Example:

\letterspacefont\lsfont\font 100
\copyfont\lsxfont\lsfont
\pdffontexpand\lsxfont 20 20 5 autoexpand



----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-27 11:43

Message:
Logged In: YES 
user_id=1608


If there is no clean way of solving the problem, I'd rather
just document the error message as a feature. I find
\pdfnewexpandfont very ugly (sorry Thanh).

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-24 10:46

Message:
Logged In: YES 
user_id=710

here is a patch that introduces a new primitive
\pdfnewexpandfont. Usage:

\font\f=cmr10
\pdfnewexpandfont\fx \f 20 20 5 autoexpand

Note that \pdfnewexpandfont generates \fx by loading a TFM
corresponding to \f first, then applies font expansion in
the same way like "\pdffontexpand\fx 20 20 5". So when \f is
a font that doesn't have a corresponding TFM (for example,
because it was generated in pdftex memory only), the above
command won't work. In particular, the following doesn't work:

\font\f=cmr10
\letterspacefont\lsfont\f 100
\pdfnewexpandfont\fx \lsfont 20 20 5 autoexpand

since \lsfont doesn't have a corresponding TFM but was
generated by \letterspacefont. To create a
letterspaced+expanded font, one can use:

\font\f=cmr10
\letterspacefont\fx\f 100
\pdffontexpand\fx 20 20 5 autoexpand

things are gettting messy... sorry about that.
Testing/comments welcome.

----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-04-01 00:44

Message:
Logged In: YES 
user_id=2217

Fine for me and microtype. 

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-31 09:52

Message:
Logged In: YES 
user_id=710

either name is ok with me. We need a new pritimive to load a
new font and expand it, since the current one doesn't load a
new font and hence is making trouble. I would wait for a
while to see how Robert sees it before making any change.

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-03-19 11:07

Message:
Logged In: NO 

Hello,

I do not think that \pdfexpandfont is a good name for a new 
primitive, as it is too easy to confuse with \pdffontexpand. 
What about \pdfexpandnewfont, as -- if I understand 
correctly -- a new font is loaded?


Jonathan

P.S: Thank you for creating pdfTeX!

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-10 20:18

Message:
Logged In: YES 
user_id=710

Phil Taylor has a suggestion that seems great to me:
introduce a new primitive \pdfexpandfont instead. How do you
see it?

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-03-10 19:24

Message:
Logged In: YES 
user_id=421

Forget that comment. Of course a change of \pdffontexpand
has to be considered carefully. By you. :-)

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-03-10 19:22

Message:
Logged In: YES 
user_id=421

No. It's an undocumented primitive. ;-)

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-09 17:28

Message:
Logged In: YES 
user_id=710

sigh. A mistake when implementing the \pdffontexpand
primitive: it should load a new font for expansion, instead
of expanding a loaded font. Too late for change now?

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=747&group_id=106

From noreply at sarovar.org  Fri Jun 29 17:19:04 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Fri, 29 Jun 2007 20:49:04 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-824 ] Bus error caused by loading an
	image into a format file
Message-ID: <E1I4IFU-00010F-00@sarovar.org>

Bugs item #824, was opened at 2007-06-25 23:22
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

Category: Image inclusion
Group: v1.40.3
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robin Houston (robinhouston)
Assigned to: Martin Schr?der (oneiros)
Summary: Bus error caused by loading an image into a format file

Initial Comment:
I have written a tool that speeds up repeated
compilation of a source file, by generating a format
from the preamble of the document, and then using it to
compile the body.

One user reported a crash when using this tool with a
custom letterhead class; the class in question may be
found at
http://www.soe.ucsc.edu/~elm/LaTeX/ucletter.cls (though
note that a simpler demonstration is attached to this
report).

The bug is triggered by the fact that this class loads
an image during the processing of the preamble (i.e.
during the processing of the .ini file) and saves it in
a box. When this box is used, during the compilation of
the body, pdftex crashes.

This does work with ordinary (non-PDF) TeX, so the
problem is specific to PDFTeX.

The attachment contains a simple demonstration of the
problem. Unpack it and run 'make'.


----------------------------------------------------------------------

>Comment By: Robin Houston (robinhouston)
Date: 2007-06-29 16:19

Message:
Logged In: YES 
user_id=4579

I don't think creating a PDF file from the IniTeX run is a
real problem. The attached tiny patch (to be applied on top
of Taco Hoekwater's first patch) seems to make it work.

Am I missing something?

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-29 11:34

Message:
Logged In: YES 
user_id=1608

Here is the promised extra patch. No error is generated,
just a simple warning. Pdftex continues executing as if \end
was given instead.

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-06-28 21:33

Message:
Logged In: NO 

Hi, the inability to _both_ dump a format _and_ produce
output in the same iniTeX run is probably tolerable as long
as no crashes occur.  I don't know the workings of WhizzyTeX
in detail: it is conceivable that their in-document dump
would be affected.  However, it is unlikely that WhizzyTeX
will indeed require both the output as well as the dump (the
dump may well contain pictures, for example from floats that
are going to be placed later), so there is at least a
reasonable way to tackle this from the macro level (divert
\shipout in the manner of the everyshi.sty package).

At least mylatex.ltx (and consequently preview-latex) should
work fine: \shipout before \begin{document} would be
extremely unusual and would result in strange results, anyway.

David

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 20:09

Message:
Logged In: YES 
user_id=1608

Small limitation that I have yet to implement: the ability
to move stuff over from the initex run means that if initex
actually creates a pdf file, dumping a format should be
disallowed, or silently ignored. Attempting to keep track of
two disjunct pdf documents is just too hard for me. 

Note that I do not want to prohibit pdf creation from
initex. Just that you can't create a pdf document _as well
as_ perform a \dump.



----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-28 16:01

Message:
Logged In: YES 
user_id=4579

Bravo!

I was ready to embark on this myself, so I'm delighted to be
spared the trouble. It passes all the tests I've tried so far.

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 11:57

Message:
Logged In: YES 
user_id=1608

Here is a patch that fixes the problem by dumping and
restoring the image _meta information_ to/from any generated
format. 

The image _data_ is not included (that would be really hard
to do in a portable way), and therefore the undumping
routines have to redo most of the work of \pdfximage, but
this is transparent to the user except that the tests
for \pdfminorversion and \pdfinclusionerrorlevel tests are
re-done.

The patch also saves some pdftex arrays that are needed to
rediscover the object. This could eventually be extended to
 make sure \refxform et al work as well. As of now, that is
untested due to lack of example.

Comments and testing welcome, as always.



----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-26 22:01

Message:
Logged In: YES 
user_id=421

Sorry, pdf things work different then dvi, so we can not
make \pdfximage etc. in ini mode without a lot of work; we
will probably disable a bunch of primitives.

----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-26 14:49

Message:
Logged In: YES 
user_id=4579

Simplifying the example by eliminating the graphics package:

==> foo.ini <==
\documentclass{minimal}

\newbox\picbox
\pdfximage{pic.pdf}
\setbox\picbox\hbox{\pdfrefximage\pdflastximage}

\dump

==> foo.tex <==
\begin{document}
        \box\picbox
\end{document}


Also, I see now that my comparison with dvi-mode is indeed a
false one, because the mechanisms are quite different, and
the DVI graphics driver only has to include a \special,
rather than the graphic itself.

A simple solution, I suppose, would be to make \pdfrefximage
(and, presumably, the other \pdfrefx commands) invalid in
IniTeX mode. Perhaps this is too brutal, since it forbids
certain harmless activities such as finding the dimensions
of an image from an .ini file; and of course I would be
delighted if it were made to work instead.


----------------------------------------------------------------------

Comment By: Reinhard Kotucha (reinhard)
Date: 2007-06-26 00:26

Message:
Logged In: YES 
user_id=4195

Martin,
you probably can't do everything in a format file.  However,
it would be nice to be able to put graphics to a format file
at least.  Suppose that a web server has to generate PDF
files on-the-fly, each contains a company logo.  The best
place place for the logo is the format file if speed
matters.  It would be nice if there are no restrictions.

Regards,
  Reinhard



----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-25 23:42

Message:
Logged In: YES 
user_id=4579

I'm impressed by the speed of your response! Thanks.

If you replace the PDF image by an EPS file, and use
-output-format dvi, then it does work. That suggests to me
that the problem is not fundamentally caused by a limitation
of IniTeX. But I don't know enough about the inner workings
of the \includegraphics command to be sure about that.
(Perhaps PDF graphics are handled in a sufficiently
different way for this to be a false comparison?)

In any case, as you say, it shouldn't crash!

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-25 23:30

Message:
Logged In: YES 
user_id=421

I can reproduce it, and it obviously shouldn't crash, but
I'm really not shure if it's supposed to work, as the format
of course will not save the picture. You can't do everything
in IniTeX...

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

From noreply at sarovar.org  Fri Jun 29 17:24:45 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Fri, 29 Jun 2007 20:54:45 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-824 ] Bus error caused by loading an
	image into a format file
Message-ID: <E1I4IKz-0002ib-00@sarovar.org>

Bugs item #824, was opened at 2007-06-25 23:22
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

Category: Image inclusion
Group: v1.40.3
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robin Houston (robinhouston)
Assigned to: Martin Schr?der (oneiros)
Summary: Bus error caused by loading an image into a format file

Initial Comment:
I have written a tool that speeds up repeated
compilation of a source file, by generating a format
from the preamble of the document, and then using it to
compile the body.

One user reported a crash when using this tool with a
custom letterhead class; the class in question may be
found at
http://www.soe.ucsc.edu/~elm/LaTeX/ucletter.cls (though
note that a simpler demonstration is attached to this
report).

The bug is triggered by the fact that this class loads
an image during the processing of the preamble (i.e.
during the processing of the .ini file) and saves it in
a box. When this box is used, during the compilation of
the body, pdftex crashes.

This does work with ordinary (non-PDF) TeX, so the
problem is specific to PDFTeX.

The attachment contains a simple demonstration of the
problem. Unpack it and run 'make'.


----------------------------------------------------------------------

>Comment By: Robin Houston (robinhouston)
Date: 2007-06-29 16:24

Message:
Logged In: YES 
user_id=4579

PS. I have just attached a new tar file, containing some
simple tests that create PDF from the IniTeX run. They all
appear to work, when my patch is applied.

----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-29 16:19

Message:
Logged In: YES 
user_id=4579

I don't think creating a PDF file from the IniTeX run is a
real problem. The attached tiny patch (to be applied on top
of Taco Hoekwater's first patch) seems to make it work.

Am I missing something?

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-29 11:34

Message:
Logged In: YES 
user_id=1608

Here is the promised extra patch. No error is generated,
just a simple warning. Pdftex continues executing as if \end
was given instead.

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-06-28 21:33

Message:
Logged In: NO 

Hi, the inability to _both_ dump a format _and_ produce
output in the same iniTeX run is probably tolerable as long
as no crashes occur.  I don't know the workings of WhizzyTeX
in detail: it is conceivable that their in-document dump
would be affected.  However, it is unlikely that WhizzyTeX
will indeed require both the output as well as the dump (the
dump may well contain pictures, for example from floats that
are going to be placed later), so there is at least a
reasonable way to tackle this from the macro level (divert
\shipout in the manner of the everyshi.sty package).

At least mylatex.ltx (and consequently preview-latex) should
work fine: \shipout before \begin{document} would be
extremely unusual and would result in strange results, anyway.

David

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 20:09

Message:
Logged In: YES 
user_id=1608

Small limitation that I have yet to implement: the ability
to move stuff over from the initex run means that if initex
actually creates a pdf file, dumping a format should be
disallowed, or silently ignored. Attempting to keep track of
two disjunct pdf documents is just too hard for me. 

Note that I do not want to prohibit pdf creation from
initex. Just that you can't create a pdf document _as well
as_ perform a \dump.



----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-28 16:01

Message:
Logged In: YES 
user_id=4579

Bravo!

I was ready to embark on this myself, so I'm delighted to be
spared the trouble. It passes all the tests I've tried so far.

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 11:57

Message:
Logged In: YES 
user_id=1608

Here is a patch that fixes the problem by dumping and
restoring the image _meta information_ to/from any generated
format. 

The image _data_ is not included (that would be really hard
to do in a portable way), and therefore the undumping
routines have to redo most of the work of \pdfximage, but
this is transparent to the user except that the tests
for \pdfminorversion and \pdfinclusionerrorlevel tests are
re-done.

The patch also saves some pdftex arrays that are needed to
rediscover the object. This could eventually be extended to
 make sure \refxform et al work as well. As of now, that is
untested due to lack of example.

Comments and testing welcome, as always.



----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-26 22:01

Message:
Logged In: YES 
user_id=421

Sorry, pdf things work different then dvi, so we can not
make \pdfximage etc. in ini mode without a lot of work; we
will probably disable a bunch of primitives.

----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-26 14:49

Message:
Logged In: YES 
user_id=4579

Simplifying the example by eliminating the graphics package:

==> foo.ini <==
\documentclass{minimal}

\newbox\picbox
\pdfximage{pic.pdf}
\setbox\picbox\hbox{\pdfrefximage\pdflastximage}

\dump

==> foo.tex <==
\begin{document}
        \box\picbox
\end{document}


Also, I see now that my comparison with dvi-mode is indeed a
false one, because the mechanisms are quite different, and
the DVI graphics driver only has to include a \special,
rather than the graphic itself.

A simple solution, I suppose, would be to make \pdfrefximage
(and, presumably, the other \pdfrefx commands) invalid in
IniTeX mode. Perhaps this is too brutal, since it forbids
certain harmless activities such as finding the dimensions
of an image from an .ini file; and of course I would be
delighted if it were made to work instead.


----------------------------------------------------------------------

Comment By: Reinhard Kotucha (reinhard)
Date: 2007-06-26 00:26

Message:
Logged In: YES 
user_id=4195

Martin,
you probably can't do everything in a format file.  However,
it would be nice to be able to put graphics to a format file
at least.  Suppose that a web server has to generate PDF
files on-the-fly, each contains a company logo.  The best
place place for the logo is the format file if speed
matters.  It would be nice if there are no restrictions.

Regards,
  Reinhard



----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-25 23:42

Message:
Logged In: YES 
user_id=4579

I'm impressed by the speed of your response! Thanks.

If you replace the PDF image by an EPS file, and use
-output-format dvi, then it does work. That suggests to me
that the problem is not fundamentally caused by a limitation
of IniTeX. But I don't know enough about the inner workings
of the \includegraphics command to be sure about that.
(Perhaps PDF graphics are handled in a sufficiently
different way for this to be a false comparison?)

In any case, as you say, it shouldn't crash!

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-25 23:30

Message:
Logged In: YES 
user_id=421

I can reproduce it, and it obviously shouldn't crash, but
I'm really not shure if it's supposed to work, as the format
of course will not save the picture. You can't do everything
in IniTeX...

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

From noreply at sarovar.org  Fri Jun 29 17:58:21 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Fri, 29 Jun 2007 21:28:21 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-747 ] \letterspacefont and
	\pdffontexpand, again
Message-ID: <E1I4IrV-00070t-00@sarovar.org>

Bugs item #747, was opened at 2007-03-09 03:09
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=747&group_id=106

Category: hz
Group: v1.40.1
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robert (schlcht)
Assigned to: The Thanh Han (hanthethanh)
Summary: \letterspacefont and \pdffontexpand, again

Initial Comment:
When expanding a letterspaced font, the base font will
be expanded, too, resulting in the error `font has been
expanded with different parameters' when the base font
is expanded again:

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20 20 5 autoexpand
\pdffontexpand\font   20 20 5 autoexpand
Z\bye


----------------------------------------------------------------------

>Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-29 15:58

Message:
Logged In: YES 
user_id=710

patch updated again. I have tested it with the following:

\font\f=cmr10
\pdfcopyfont\fA=\f
\letterspacefont\fB=\fA 100
\pdffontexpand\fB 30 30 5 autoexpand
\fB \input tufte.tex

and it seems to work. But the following doesn't:

\letterspacefont\fC=\f 100
\pdfcopyfont\fD=\fC
\pdffontexpand\fD 30 30 5 autoexpand

probably it's possible with some more effort to make the
latter case work too, but it doesn't seem needed.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-29 13:32

Message:
Logged In: YES 
user_id=710

patch deleted. Needs more testing.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-29 09:56

Message:
Logged In: YES 
user_id=710

sorry, I didn't test it carefully enough. Here is another
attempt (tested with the microtype manual).

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-29 08:52

Message:
Logged In: YES 
user_id=421

Taco, the new_font_type -> real_font_type is from the fix
for bug #722. We need an svn... :-(

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-29 07:22

Message:
Logged In: YES 
user_id=1608

On my (fairly) clean sources, one hunk is rejected because
of this:

else begin
  if pdf_font_type[f] <> new_font_type then
    pdf_warning("font expansion", "font should be expanded
before its first use",
                true, true);
    end;


My pdftex.web uses pdf_font_type[f] = real_font_type in that
test. I fixed the hunk, but I also get a crash on Robert's
test file.

----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-06-28 23:17

Message:
Logged In: YES 
user_id=2217

Now this yields a core dump with: 

\pdfadjustspacing2
\pdffontexpand\font 20 20 5 autoexpand
\hsize10em

Lorem ipsum dolor sit amet, 
\bye

(unless I've messed up pdftex.web with all them patches)

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 20:17

Message:
Logged In: YES 
user_id=710

here is another patch, which introduces \pdfcopyfont. Example:

\letterspacefont\lsfont\font 100
\pdfcopyfont\lsxfont\lsfont
\pdffontexpand\lsxfont 20 20 5 autoexpand

This patch also fixed a bug in expanding local font from
virtual fonts: font shrinking didn't work. Big thanks to
Robert for help with testing.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 18:42

Message:
Logged In: YES 
user_id=710

expanding a letterspaced fonts always implies that the base
font is expanded. In other words, it's impossible *not* to
expand the base font when expanding a letterspaced font.

thanks for further testing. It looks like a bug in checking
font expansion spec. fwiw, font stretch limit is always
fixed to [0..1000] and font shrink limit to [0..500]. Thus
giving a negative value has the same effect like giving 0.

I will play with \copyfont to see if it helps.


----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-06-28 14:01

Message:
Logged In: YES 
user_id=2217

If we can get rid of the error message, I think it can be
left at that. Mind you, the problem is not how to expand a
letterspaced font but how to *not* expand the base font when
expanding a letterspaced font. That expanding a letterspaced
font results in expansion of the base font
can be documented as a feature, IMO.

Here are some more clues: The error message seems to be
related to the sign of the stretch parameter.
First of all, with

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20 20 5 autoexpand

the base font will be expanded, however it will never be
shrunk. Then,

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20  20 5 autoexpand
\pdffontexpand\font   20 -20 5 autoexpand

doesn't yield an error. Neither does:

\pdffontexpand\lsfont 20 -20 5 autoexpand
\pdffontexpand\font   20 -20 5 autoexpand

However, here comes the error again:

\pdffontexpand\lsfont 20 -20 5 autoexpand
\pdffontexpand\font   20  20 5 autoexpand

If you expand the base font first, it's OK in any case, also
with different signs.


----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 07:37

Message:
Logged In: YES 
user_id=1608

That sounds nice, I like it.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 06:45

Message:
Logged In: YES 
user_id=710

I agree this is an ugly solution, which has its origin in a
design mistake. However the problem here is not only how to
deal with the error message, but the point is how to use
font expansion with a letterspaced font. Please give it a
thought so we can come up with an acceptable workaround. If
we want everything to be clean, there are more things that
have to be thrown away.

what about this: have a primitive \copyfont which creates a
copy of a font. Example:

\letterspacefont\lsfont\font 100
\copyfont\lsxfont\lsfont
\pdffontexpand\lsxfont 20 20 5 autoexpand



----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-27 11:43

Message:
Logged In: YES 
user_id=1608


If there is no clean way of solving the problem, I'd rather
just document the error message as a feature. I find
\pdfnewexpandfont very ugly (sorry Thanh).

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-24 10:46

Message:
Logged In: YES 
user_id=710

here is a patch that introduces a new primitive
\pdfnewexpandfont. Usage:

\font\f=cmr10
\pdfnewexpandfont\fx \f 20 20 5 autoexpand

Note that \pdfnewexpandfont generates \fx by loading a TFM
corresponding to \f first, then applies font expansion in
the same way like "\pdffontexpand\fx 20 20 5". So when \f is
a font that doesn't have a corresponding TFM (for example,
because it was generated in pdftex memory only), the above
command won't work. In particular, the following doesn't work:

\font\f=cmr10
\letterspacefont\lsfont\f 100
\pdfnewexpandfont\fx \lsfont 20 20 5 autoexpand

since \lsfont doesn't have a corresponding TFM but was
generated by \letterspacefont. To create a
letterspaced+expanded font, one can use:

\font\f=cmr10
\letterspacefont\fx\f 100
\pdffontexpand\fx 20 20 5 autoexpand

things are gettting messy... sorry about that.
Testing/comments welcome.

----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-04-01 00:44

Message:
Logged In: YES 
user_id=2217

Fine for me and microtype. 

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-31 09:52

Message:
Logged In: YES 
user_id=710

either name is ok with me. We need a new pritimive to load a
new font and expand it, since the current one doesn't load a
new font and hence is making trouble. I would wait for a
while to see how Robert sees it before making any change.

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-03-19 11:07

Message:
Logged In: NO 

Hello,

I do not think that \pdfexpandfont is a good name for a new 
primitive, as it is too easy to confuse with \pdffontexpand. 
What about \pdfexpandnewfont, as -- if I understand 
correctly -- a new font is loaded?


Jonathan

P.S: Thank you for creating pdfTeX!

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-10 20:18

Message:
Logged In: YES 
user_id=710

Phil Taylor has a suggestion that seems great to me:
introduce a new primitive \pdfexpandfont instead. How do you
see it?

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-03-10 19:24

Message:
Logged In: YES 
user_id=421

Forget that comment. Of course a change of \pdffontexpand
has to be considered carefully. By you. :-)

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-03-10 19:22

Message:
Logged In: YES 
user_id=421

No. It's an undocumented primitive. ;-)

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-09 17:28

Message:
Logged In: YES 
user_id=710

sigh. A mistake when implementing the \pdffontexpand
primitive: it should load a new font for expansion, instead
of expanding a loaded font. Too late for change now?

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=747&group_id=106

From noreply at sarovar.org  Fri Jun 29 18:32:16 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Fri, 29 Jun 2007 22:02:16 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-824 ] Bus error caused by loading an
	image into a format file
Message-ID: <E1I4JOK-0002wl-00@sarovar.org>

Bugs item #824, was opened at 2007-06-26 00:22
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

Category: Image inclusion
Group: v1.40.3
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robin Houston (robinhouston)
Assigned to: Martin Schr?der (oneiros)
Summary: Bus error caused by loading an image into a format file

Initial Comment:
I have written a tool that speeds up repeated
compilation of a source file, by generating a format
from the preamble of the document, and then using it to
compile the body.

One user reported a crash when using this tool with a
custom letterhead class; the class in question may be
found at
http://www.soe.ucsc.edu/~elm/LaTeX/ucletter.cls (though
note that a simpler demonstration is attached to this
report).

The bug is triggered by the fact that this class loads
an image during the processing of the preamble (i.e.
during the processing of the .ini file) and saves it in
a box. When this box is used, during the compilation of
the body, pdftex crashes.

This does work with ordinary (non-PDF) TeX, so the
problem is specific to PDFTeX.

The attachment contains a simple demonstration of the
problem. Unpack it and run 'make'.


----------------------------------------------------------------------

>Comment By: Taco Hoekwater (taco)
Date: 2007-06-29 18:32

Message:
Logged In: YES 
user_id=1608

Try a document that contains items besides a single image.
Many of the auxiliary tables are not dumped, resulting in
assertion failures in the non-ini run.

You don't even need to save or reuse boxes for those
crashes, just make a pair of:

% test.ini
\input plain
\pdfoutput=1
hello
\dump


% test.tex
world!
\end




----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-29 17:24

Message:
Logged In: YES 
user_id=4579

PS. I have just attached a new tar file, containing some
simple tests that create PDF from the IniTeX run. They all
appear to work, when my patch is applied.

----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-29 17:19

Message:
Logged In: YES 
user_id=4579

I don't think creating a PDF file from the IniTeX run is a
real problem. The attached tiny patch (to be applied on top
of Taco Hoekwater's first patch) seems to make it work.

Am I missing something?

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-29 12:34

Message:
Logged In: YES 
user_id=1608

Here is the promised extra patch. No error is generated,
just a simple warning. Pdftex continues executing as if \end
was given instead.

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-06-28 22:33

Message:
Logged In: NO 

Hi, the inability to _both_ dump a format _and_ produce
output in the same iniTeX run is probably tolerable as long
as no crashes occur.  I don't know the workings of WhizzyTeX
in detail: it is conceivable that their in-document dump
would be affected.  However, it is unlikely that WhizzyTeX
will indeed require both the output as well as the dump (the
dump may well contain pictures, for example from floats that
are going to be placed later), so there is at least a
reasonable way to tackle this from the macro level (divert
\shipout in the manner of the everyshi.sty package).

At least mylatex.ltx (and consequently preview-latex) should
work fine: \shipout before \begin{document} would be
extremely unusual and would result in strange results, anyway.

David

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 21:09

Message:
Logged In: YES 
user_id=1608

Small limitation that I have yet to implement: the ability
to move stuff over from the initex run means that if initex
actually creates a pdf file, dumping a format should be
disallowed, or silently ignored. Attempting to keep track of
two disjunct pdf documents is just too hard for me. 

Note that I do not want to prohibit pdf creation from
initex. Just that you can't create a pdf document _as well
as_ perform a \dump.



----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-28 17:01

Message:
Logged In: YES 
user_id=4579

Bravo!

I was ready to embark on this myself, so I'm delighted to be
spared the trouble. It passes all the tests I've tried so far.

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 12:57

Message:
Logged In: YES 
user_id=1608

Here is a patch that fixes the problem by dumping and
restoring the image _meta information_ to/from any generated
format. 

The image _data_ is not included (that would be really hard
to do in a portable way), and therefore the undumping
routines have to redo most of the work of \pdfximage, but
this is transparent to the user except that the tests
for \pdfminorversion and \pdfinclusionerrorlevel tests are
re-done.

The patch also saves some pdftex arrays that are needed to
rediscover the object. This could eventually be extended to
 make sure \refxform et al work as well. As of now, that is
untested due to lack of example.

Comments and testing welcome, as always.



----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-26 23:01

Message:
Logged In: YES 
user_id=421

Sorry, pdf things work different then dvi, so we can not
make \pdfximage etc. in ini mode without a lot of work; we
will probably disable a bunch of primitives.

----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-26 15:49

Message:
Logged In: YES 
user_id=4579

Simplifying the example by eliminating the graphics package:

==> foo.ini <==
\documentclass{minimal}

\newbox\picbox
\pdfximage{pic.pdf}
\setbox\picbox\hbox{\pdfrefximage\pdflastximage}

\dump

==> foo.tex <==
\begin{document}
        \box\picbox
\end{document}


Also, I see now that my comparison with dvi-mode is indeed a
false one, because the mechanisms are quite different, and
the DVI graphics driver only has to include a \special,
rather than the graphic itself.

A simple solution, I suppose, would be to make \pdfrefximage
(and, presumably, the other \pdfrefx commands) invalid in
IniTeX mode. Perhaps this is too brutal, since it forbids
certain harmless activities such as finding the dimensions
of an image from an .ini file; and of course I would be
delighted if it were made to work instead.


----------------------------------------------------------------------

Comment By: Reinhard Kotucha (reinhard)
Date: 2007-06-26 01:26

Message:
Logged In: YES 
user_id=4195

Martin,
you probably can't do everything in a format file.  However,
it would be nice to be able to put graphics to a format file
at least.  Suppose that a web server has to generate PDF
files on-the-fly, each contains a company logo.  The best
place place for the logo is the format file if speed
matters.  It would be nice if there are no restrictions.

Regards,
  Reinhard



----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-26 00:42

Message:
Logged In: YES 
user_id=4579

I'm impressed by the speed of your response! Thanks.

If you replace the PDF image by an EPS file, and use
-output-format dvi, then it does work. That suggests to me
that the problem is not fundamentally caused by a limitation
of IniTeX. But I don't know enough about the inner workings
of the \includegraphics command to be sure about that.
(Perhaps PDF graphics are handled in a sufficiently
different way for this to be a false comparison?)

In any case, as you say, it shouldn't crash!

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-26 00:30

Message:
Logged In: YES 
user_id=421

I can reproduce it, and it obviously shouldn't crash, but
I'm really not shure if it's supposed to work, as the format
of course will not save the picture. You can't do everything
in IniTeX...

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

From noreply at sarovar.org  Fri Jun 29 20:08:02 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Fri, 29 Jun 2007 23:38:02 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-824 ] Bus error caused by loading an
	image into a format file
Message-ID: <E1I4Kt0-0008DK-00@sarovar.org>

Bugs item #824, was opened at 2007-06-25 23:22
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

Category: Image inclusion
Group: v1.40.3
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robin Houston (robinhouston)
Assigned to: Martin Schr?der (oneiros)
Summary: Bus error caused by loading an image into a format file

Initial Comment:
I have written a tool that speeds up repeated
compilation of a source file, by generating a format
from the preamble of the document, and then using it to
compile the body.

One user reported a crash when using this tool with a
custom letterhead class; the class in question may be
found at
http://www.soe.ucsc.edu/~elm/LaTeX/ucletter.cls (though
note that a simpler demonstration is attached to this
report).

The bug is triggered by the fact that this class loads
an image during the processing of the preamble (i.e.
during the processing of the .ini file) and saves it in
a box. When this box is used, during the compilation of
the body, pdftex crashes.

This does work with ordinary (non-PDF) TeX, so the
problem is specific to PDFTeX.

The attachment contains a simple demonstration of the
problem. Unpack it and run 'make'.


----------------------------------------------------------------------

>Comment By: Robin Houston (robinhouston)
Date: 2007-06-29 19:08

Message:
Logged In: YES 
user_id=4579

Argh! Interesting, thanks.

Clearly my understanding of the pdftex code is patchy at
best. That said, what is gained by dumping and restoring the
head_tab? If I remove the parts of your code that dump and
undump the head_tab, then your example works (and mine
continue to work).

Robin

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-29 17:32

Message:
Logged In: YES 
user_id=1608

Try a document that contains items besides a single image.
Many of the auxiliary tables are not dumped, resulting in
assertion failures in the non-ini run.

You don't even need to save or reuse boxes for those
crashes, just make a pair of:

% test.ini
\input plain
\pdfoutput=1
hello
\dump


% test.tex
world!
\end




----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-29 16:24

Message:
Logged In: YES 
user_id=4579

PS. I have just attached a new tar file, containing some
simple tests that create PDF from the IniTeX run. They all
appear to work, when my patch is applied.

----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-29 16:19

Message:
Logged In: YES 
user_id=4579

I don't think creating a PDF file from the IniTeX run is a
real problem. The attached tiny patch (to be applied on top
of Taco Hoekwater's first patch) seems to make it work.

Am I missing something?

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-29 11:34

Message:
Logged In: YES 
user_id=1608

Here is the promised extra patch. No error is generated,
just a simple warning. Pdftex continues executing as if \end
was given instead.

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-06-28 21:33

Message:
Logged In: NO 

Hi, the inability to _both_ dump a format _and_ produce
output in the same iniTeX run is probably tolerable as long
as no crashes occur.  I don't know the workings of WhizzyTeX
in detail: it is conceivable that their in-document dump
would be affected.  However, it is unlikely that WhizzyTeX
will indeed require both the output as well as the dump (the
dump may well contain pictures, for example from floats that
are going to be placed later), so there is at least a
reasonable way to tackle this from the macro level (divert
\shipout in the manner of the everyshi.sty package).

At least mylatex.ltx (and consequently preview-latex) should
work fine: \shipout before \begin{document} would be
extremely unusual and would result in strange results, anyway.

David

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 20:09

Message:
Logged In: YES 
user_id=1608

Small limitation that I have yet to implement: the ability
to move stuff over from the initex run means that if initex
actually creates a pdf file, dumping a format should be
disallowed, or silently ignored. Attempting to keep track of
two disjunct pdf documents is just too hard for me. 

Note that I do not want to prohibit pdf creation from
initex. Just that you can't create a pdf document _as well
as_ perform a \dump.



----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-28 16:01

Message:
Logged In: YES 
user_id=4579

Bravo!

I was ready to embark on this myself, so I'm delighted to be
spared the trouble. It passes all the tests I've tried so far.

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 11:57

Message:
Logged In: YES 
user_id=1608

Here is a patch that fixes the problem by dumping and
restoring the image _meta information_ to/from any generated
format. 

The image _data_ is not included (that would be really hard
to do in a portable way), and therefore the undumping
routines have to redo most of the work of \pdfximage, but
this is transparent to the user except that the tests
for \pdfminorversion and \pdfinclusionerrorlevel tests are
re-done.

The patch also saves some pdftex arrays that are needed to
rediscover the object. This could eventually be extended to
 make sure \refxform et al work as well. As of now, that is
untested due to lack of example.

Comments and testing welcome, as always.



----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-26 22:01

Message:
Logged In: YES 
user_id=421

Sorry, pdf things work different then dvi, so we can not
make \pdfximage etc. in ini mode without a lot of work; we
will probably disable a bunch of primitives.

----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-26 14:49

Message:
Logged In: YES 
user_id=4579

Simplifying the example by eliminating the graphics package:

==> foo.ini <==
\documentclass{minimal}

\newbox\picbox
\pdfximage{pic.pdf}
\setbox\picbox\hbox{\pdfrefximage\pdflastximage}

\dump

==> foo.tex <==
\begin{document}
        \box\picbox
\end{document}


Also, I see now that my comparison with dvi-mode is indeed a
false one, because the mechanisms are quite different, and
the DVI graphics driver only has to include a \special,
rather than the graphic itself.

A simple solution, I suppose, would be to make \pdfrefximage
(and, presumably, the other \pdfrefx commands) invalid in
IniTeX mode. Perhaps this is too brutal, since it forbids
certain harmless activities such as finding the dimensions
of an image from an .ini file; and of course I would be
delighted if it were made to work instead.


----------------------------------------------------------------------

Comment By: Reinhard Kotucha (reinhard)
Date: 2007-06-26 00:26

Message:
Logged In: YES 
user_id=4195

Martin,
you probably can't do everything in a format file.  However,
it would be nice to be able to put graphics to a format file
at least.  Suppose that a web server has to generate PDF
files on-the-fly, each contains a company logo.  The best
place place for the logo is the format file if speed
matters.  It would be nice if there are no restrictions.

Regards,
  Reinhard



----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-25 23:42

Message:
Logged In: YES 
user_id=4579

I'm impressed by the speed of your response! Thanks.

If you replace the PDF image by an EPS file, and use
-output-format dvi, then it does work. That suggests to me
that the problem is not fundamentally caused by a limitation
of IniTeX. But I don't know enough about the inner workings
of the \includegraphics command to be sure about that.
(Perhaps PDF graphics are handled in a sufficiently
different way for this to be a false comparison?)

In any case, as you say, it shouldn't crash!

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-25 23:30

Message:
Logged In: YES 
user_id=421

I can reproduce it, and it obviously shouldn't crash, but
I'm really not shure if it's supposed to work, as the format
of course will not save the picture. You can't do everything
in IniTeX...

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

From noreply at sarovar.org  Sat Jun 30 12:08:51 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Sat, 30 Jun 2007 15:38:51 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-824 ] Bus error caused by loading an
	image into a format file
Message-ID: <E1I4Zsp-0002zM-00@sarovar.org>

Bugs item #824, was opened at 2007-06-25 23:22
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

Category: Image inclusion
Group: v1.40.3
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robin Houston (robinhouston)
Assigned to: Martin Schr?der (oneiros)
Summary: Bus error caused by loading an image into a format file

Initial Comment:
I have written a tool that speeds up repeated
compilation of a source file, by generating a format
from the preamble of the document, and then using it to
compile the body.

One user reported a crash when using this tool with a
custom letterhead class; the class in question may be
found at
http://www.soe.ucsc.edu/~elm/LaTeX/ucletter.cls (though
note that a simpler demonstration is attached to this
report).

The bug is triggered by the fact that this class loads
an image during the processing of the preamble (i.e.
during the processing of the .ini file) and saves it in
a box. When this box is used, during the compilation of
the body, pdftex crashes.

This does work with ordinary (non-PDF) TeX, so the
problem is specific to PDFTeX.

The attachment contains a simple demonstration of the
problem. Unpack it and run 'make'.


----------------------------------------------------------------------

>Comment By: Robin Houston (robinhouston)
Date: 2007-06-30 11:08

Message:
Logged In: YES 
user_id=4579

A minor bug in the initex-refximage-dump.patch: the test for
fixed_pdfoutput=1 ought to be fixed_pdfoutput>0, otherwise
it will fail with \pdfoutput=2, say.

Another unrelated problem is that, if you load an image from
the .ini file, and then load and display another image from
the .tex file, the first image will appear where the second
one ought to be. I'll try and find out why this is happening.

(Incidentally, I haven't (yet?) discovered any problems
stemming from not (un)dumping the linked list headers.)

----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-29 19:08

Message:
Logged In: YES 
user_id=4579

Argh! Interesting, thanks.

Clearly my understanding of the pdftex code is patchy at
best. That said, what is gained by dumping and restoring the
head_tab? If I remove the parts of your code that dump and
undump the head_tab, then your example works (and mine
continue to work).

Robin

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-29 17:32

Message:
Logged In: YES 
user_id=1608

Try a document that contains items besides a single image.
Many of the auxiliary tables are not dumped, resulting in
assertion failures in the non-ini run.

You don't even need to save or reuse boxes for those
crashes, just make a pair of:

% test.ini
\input plain
\pdfoutput=1
hello
\dump


% test.tex
world!
\end




----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-29 16:24

Message:
Logged In: YES 
user_id=4579

PS. I have just attached a new tar file, containing some
simple tests that create PDF from the IniTeX run. They all
appear to work, when my patch is applied.

----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-29 16:19

Message:
Logged In: YES 
user_id=4579

I don't think creating a PDF file from the IniTeX run is a
real problem. The attached tiny patch (to be applied on top
of Taco Hoekwater's first patch) seems to make it work.

Am I missing something?

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-29 11:34

Message:
Logged In: YES 
user_id=1608

Here is the promised extra patch. No error is generated,
just a simple warning. Pdftex continues executing as if \end
was given instead.

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-06-28 21:33

Message:
Logged In: NO 

Hi, the inability to _both_ dump a format _and_ produce
output in the same iniTeX run is probably tolerable as long
as no crashes occur.  I don't know the workings of WhizzyTeX
in detail: it is conceivable that their in-document dump
would be affected.  However, it is unlikely that WhizzyTeX
will indeed require both the output as well as the dump (the
dump may well contain pictures, for example from floats that
are going to be placed later), so there is at least a
reasonable way to tackle this from the macro level (divert
\shipout in the manner of the everyshi.sty package).

At least mylatex.ltx (and consequently preview-latex) should
work fine: \shipout before \begin{document} would be
extremely unusual and would result in strange results, anyway.

David

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 20:09

Message:
Logged In: YES 
user_id=1608

Small limitation that I have yet to implement: the ability
to move stuff over from the initex run means that if initex
actually creates a pdf file, dumping a format should be
disallowed, or silently ignored. Attempting to keep track of
two disjunct pdf documents is just too hard for me. 

Note that I do not want to prohibit pdf creation from
initex. Just that you can't create a pdf document _as well
as_ perform a \dump.



----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-28 16:01

Message:
Logged In: YES 
user_id=4579

Bravo!

I was ready to embark on this myself, so I'm delighted to be
spared the trouble. It passes all the tests I've tried so far.

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 11:57

Message:
Logged In: YES 
user_id=1608

Here is a patch that fixes the problem by dumping and
restoring the image _meta information_ to/from any generated
format. 

The image _data_ is not included (that would be really hard
to do in a portable way), and therefore the undumping
routines have to redo most of the work of \pdfximage, but
this is transparent to the user except that the tests
for \pdfminorversion and \pdfinclusionerrorlevel tests are
re-done.

The patch also saves some pdftex arrays that are needed to
rediscover the object. This could eventually be extended to
 make sure \refxform et al work as well. As of now, that is
untested due to lack of example.

Comments and testing welcome, as always.



----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-26 22:01

Message:
Logged In: YES 
user_id=421

Sorry, pdf things work different then dvi, so we can not
make \pdfximage etc. in ini mode without a lot of work; we
will probably disable a bunch of primitives.

----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-26 14:49

Message:
Logged In: YES 
user_id=4579

Simplifying the example by eliminating the graphics package:

==> foo.ini <==
\documentclass{minimal}

\newbox\picbox
\pdfximage{pic.pdf}
\setbox\picbox\hbox{\pdfrefximage\pdflastximage}

\dump

==> foo.tex <==
\begin{document}
        \box\picbox
\end{document}


Also, I see now that my comparison with dvi-mode is indeed a
false one, because the mechanisms are quite different, and
the DVI graphics driver only has to include a \special,
rather than the graphic itself.

A simple solution, I suppose, would be to make \pdfrefximage
(and, presumably, the other \pdfrefx commands) invalid in
IniTeX mode. Perhaps this is too brutal, since it forbids
certain harmless activities such as finding the dimensions
of an image from an .ini file; and of course I would be
delighted if it were made to work instead.


----------------------------------------------------------------------

Comment By: Reinhard Kotucha (reinhard)
Date: 2007-06-26 00:26

Message:
Logged In: YES 
user_id=4195

Martin,
you probably can't do everything in a format file.  However,
it would be nice to be able to put graphics to a format file
at least.  Suppose that a web server has to generate PDF
files on-the-fly, each contains a company logo.  The best
place place for the logo is the format file if speed
matters.  It would be nice if there are no restrictions.

Regards,
  Reinhard



----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-25 23:42

Message:
Logged In: YES 
user_id=4579

I'm impressed by the speed of your response! Thanks.

If you replace the PDF image by an EPS file, and use
-output-format dvi, then it does work. That suggests to me
that the problem is not fundamentally caused by a limitation
of IniTeX. But I don't know enough about the inner workings
of the \includegraphics command to be sure about that.
(Perhaps PDF graphics are handled in a sufficiently
different way for this to be a false comparison?)

In any case, as you say, it shouldn't crash!

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-25 23:30

Message:
Logged In: YES 
user_id=421

I can reproduce it, and it obviously shouldn't crash, but
I'm really not shure if it's supposed to work, as the format
of course will not save the picture. You can't do everything
in IniTeX...

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

From noreply at sarovar.org  Sat Jun 30 14:38:44 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Sat, 30 Jun 2007 18:08:44 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-824 ] Bus error caused by loading an
	image into a format file
Message-ID: <E1I4cDs-0000oW-00@sarovar.org>

Bugs item #824, was opened at 2007-06-25 23:22
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

Category: Image inclusion
Group: v1.40.3
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robin Houston (robinhouston)
Assigned to: Martin Schr?der (oneiros)
Summary: Bus error caused by loading an image into a format file

Initial Comment:
I have written a tool that speeds up repeated
compilation of a source file, by generating a format
from the preamble of the document, and then using it to
compile the body.

One user reported a crash when using this tool with a
custom letterhead class; the class in question may be
found at
http://www.soe.ucsc.edu/~elm/LaTeX/ucletter.cls (though
note that a simpler demonstration is attached to this
report).

The bug is triggered by the fact that this class loads
an image during the processing of the preamble (i.e.
during the processing of the .ini file) and saves it in
a box. When this box is used, during the compilation of
the body, pdftex crashes.

This does work with ordinary (non-PDF) TeX, so the
problem is specific to PDFTeX.

The attachment contains a simple demonstration of the
problem. Unpack it and run 'make'.


----------------------------------------------------------------------

>Comment By: Robin Houston (robinhouston)
Date: 2007-06-30 13:38

Message:
Logged In: YES 
user_id=4579

Fortunately the "two picture" problem (demonstrated in the
attachment twopic.tar.gz) is trivial to solve: simply dump
and undump the variable pdf_ximage_count.

Presumably the same should be done for pdf_obj_count and
pdf_xform_count. Whether this is sufficient, I have no idea:
none of us have tested forms or raw objects, have we?


----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-30 11:08

Message:
Logged In: YES 
user_id=4579

A minor bug in the initex-refximage-dump.patch: the test for
fixed_pdfoutput=1 ought to be fixed_pdfoutput>0, otherwise
it will fail with \pdfoutput=2, say.

Another unrelated problem is that, if you load an image from
the .ini file, and then load and display another image from
the .tex file, the first image will appear where the second
one ought to be. I'll try and find out why this is happening.

(Incidentally, I haven't (yet?) discovered any problems
stemming from not (un)dumping the linked list headers.)

----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-29 19:08

Message:
Logged In: YES 
user_id=4579

Argh! Interesting, thanks.

Clearly my understanding of the pdftex code is patchy at
best. That said, what is gained by dumping and restoring the
head_tab? If I remove the parts of your code that dump and
undump the head_tab, then your example works (and mine
continue to work).

Robin

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-29 17:32

Message:
Logged In: YES 
user_id=1608

Try a document that contains items besides a single image.
Many of the auxiliary tables are not dumped, resulting in
assertion failures in the non-ini run.

You don't even need to save or reuse boxes for those
crashes, just make a pair of:

% test.ini
\input plain
\pdfoutput=1
hello
\dump


% test.tex
world!
\end




----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-29 16:24

Message:
Logged In: YES 
user_id=4579

PS. I have just attached a new tar file, containing some
simple tests that create PDF from the IniTeX run. They all
appear to work, when my patch is applied.

----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-29 16:19

Message:
Logged In: YES 
user_id=4579

I don't think creating a PDF file from the IniTeX run is a
real problem. The attached tiny patch (to be applied on top
of Taco Hoekwater's first patch) seems to make it work.

Am I missing something?

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-29 11:34

Message:
Logged In: YES 
user_id=1608

Here is the promised extra patch. No error is generated,
just a simple warning. Pdftex continues executing as if \end
was given instead.

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-06-28 21:33

Message:
Logged In: NO 

Hi, the inability to _both_ dump a format _and_ produce
output in the same iniTeX run is probably tolerable as long
as no crashes occur.  I don't know the workings of WhizzyTeX
in detail: it is conceivable that their in-document dump
would be affected.  However, it is unlikely that WhizzyTeX
will indeed require both the output as well as the dump (the
dump may well contain pictures, for example from floats that
are going to be placed later), so there is at least a
reasonable way to tackle this from the macro level (divert
\shipout in the manner of the everyshi.sty package).

At least mylatex.ltx (and consequently preview-latex) should
work fine: \shipout before \begin{document} would be
extremely unusual and would result in strange results, anyway.

David

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 20:09

Message:
Logged In: YES 
user_id=1608

Small limitation that I have yet to implement: the ability
to move stuff over from the initex run means that if initex
actually creates a pdf file, dumping a format should be
disallowed, or silently ignored. Attempting to keep track of
two disjunct pdf documents is just too hard for me. 

Note that I do not want to prohibit pdf creation from
initex. Just that you can't create a pdf document _as well
as_ perform a \dump.



----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-28 16:01

Message:
Logged In: YES 
user_id=4579

Bravo!

I was ready to embark on this myself, so I'm delighted to be
spared the trouble. It passes all the tests I've tried so far.

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 11:57

Message:
Logged In: YES 
user_id=1608

Here is a patch that fixes the problem by dumping and
restoring the image _meta information_ to/from any generated
format. 

The image _data_ is not included (that would be really hard
to do in a portable way), and therefore the undumping
routines have to redo most of the work of \pdfximage, but
this is transparent to the user except that the tests
for \pdfminorversion and \pdfinclusionerrorlevel tests are
re-done.

The patch also saves some pdftex arrays that are needed to
rediscover the object. This could eventually be extended to
 make sure \refxform et al work as well. As of now, that is
untested due to lack of example.

Comments and testing welcome, as always.



----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-26 22:01

Message:
Logged In: YES 
user_id=421

Sorry, pdf things work different then dvi, so we can not
make \pdfximage etc. in ini mode without a lot of work; we
will probably disable a bunch of primitives.

----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-26 14:49

Message:
Logged In: YES 
user_id=4579

Simplifying the example by eliminating the graphics package:

==> foo.ini <==
\documentclass{minimal}

\newbox\picbox
\pdfximage{pic.pdf}
\setbox\picbox\hbox{\pdfrefximage\pdflastximage}

\dump

==> foo.tex <==
\begin{document}
        \box\picbox
\end{document}


Also, I see now that my comparison with dvi-mode is indeed a
false one, because the mechanisms are quite different, and
the DVI graphics driver only has to include a \special,
rather than the graphic itself.

A simple solution, I suppose, would be to make \pdfrefximage
(and, presumably, the other \pdfrefx commands) invalid in
IniTeX mode. Perhaps this is too brutal, since it forbids
certain harmless activities such as finding the dimensions
of an image from an .ini file; and of course I would be
delighted if it were made to work instead.


----------------------------------------------------------------------

Comment By: Reinhard Kotucha (reinhard)
Date: 2007-06-26 00:26

Message:
Logged In: YES 
user_id=4195

Martin,
you probably can't do everything in a format file.  However,
it would be nice to be able to put graphics to a format file
at least.  Suppose that a web server has to generate PDF
files on-the-fly, each contains a company logo.  The best
place place for the logo is the format file if speed
matters.  It would be nice if there are no restrictions.

Regards,
  Reinhard



----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-25 23:42

Message:
Logged In: YES 
user_id=4579

I'm impressed by the speed of your response! Thanks.

If you replace the PDF image by an EPS file, and use
-output-format dvi, then it does work. That suggests to me
that the problem is not fundamentally caused by a limitation
of IniTeX. But I don't know enough about the inner workings
of the \includegraphics command to be sure about that.
(Perhaps PDF graphics are handled in a sufficiently
different way for this to be a false comparison?)

In any case, as you say, it shouldn't crash!

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-25 23:30

Message:
Logged In: YES 
user_id=421

I can reproduce it, and it obviously shouldn't crash, but
I'm really not shure if it's supposed to work, as the format
of course will not save the picture. You can't do everything
in IniTeX...

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

From noreply at sarovar.org  Sat Jun 30 17:14:01 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Sat, 30 Jun 2007 20:44:01 +0530
Subject: [NTG-pdftex] [ pdftex-Patches-828 ] Make /XObject /Form coordinates
	independent from PDF page dimensions
Message-ID: <E1I4ee9-0008N4-00@sarovar.org>

Patches item #828, was opened at 2007-06-30 17:14
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=828&group_id=106

Category: Positioning
Group: v1.30.0
Status: Open
Resolution: None
Priority: 5
Submitted By: Hartmut Henkel (hhenkel)
Assigned to: Nobody (None)
Summary: Make /XObject /Form coordinates independent from PDF page dimensions

Initial Comment:
Experimental patch for pdftex-1.40.3/luatex

In pdftex-1.30.4 \pdfpageheight spills over into
coordinate transforms inside /XObject /Form objects.
This isn't an error, but it complicates coordinate
transforms. This tiny patch should tidy up the web
source a little, making coordinate transforms inside
/Form objects relative to their inner lower left
position, independently from the PDF page dimensions.

Testing welcome.


----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=828&group_id=106

From noreply at sarovar.org  Sat Jun 30 17:35:26 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Sat, 30 Jun 2007 21:05:26 +0530
Subject: [NTG-pdftex] [ pdftex-Patches-828 ] Make /XObject /Form coordinates
	independent from PDF page dimensions
Message-ID: <E1I4eys-0001yB-00@sarovar.org>

Patches item #828, was opened at 2007-06-30 17:14
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=828&group_id=106

Category: Positioning
Group: v1.30.0
Status: Open
Resolution: None
Priority: 5
Submitted By: Hartmut Henkel (hhenkel)
Assigned to: Nobody (None)
Summary: Make /XObject /Form coordinates independent from PDF page dimensions

Initial Comment:
Experimental patch for pdftex-1.40.3/luatex

In pdftex-1.30.4 \pdfpageheight spills over into
coordinate transforms inside /XObject /Form objects.
This isn't an error, but it complicates coordinate
transforms. This tiny patch should tidy up the web
source a little, making coordinate transforms inside
/Form objects relative to their inner lower left
position, independently from the PDF page dimensions.

Testing welcome.


----------------------------------------------------------------------

>Comment By: Hartmut Henkel (hhenkel)
Date: 2007-06-30 17:35

Message:
Logged In: YES 
user_id=929

seems it can be further simplified, new patch. Testing welcome.

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=828&group_id=106

From noreply at sarovar.org  Sat Jun 30 18:12:07 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Sat, 30 Jun 2007 21:42:07 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-747 ] \letterspacefont and
	\pdffontexpand, again
Message-ID: <E1I4fYN-0008HP-00@sarovar.org>

Bugs item #747, was opened at 2007-03-09 03:09
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=747&group_id=106

Category: hz
Group: v1.40.1
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robert (schlcht)
Assigned to: The Thanh Han (hanthethanh)
Summary: \letterspacefont and \pdffontexpand, again

Initial Comment:
When expanding a letterspaced font, the base font will
be expanded, too, resulting in the error `font has been
expanded with different parameters' when the base font
is expanded again:

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20 20 5 autoexpand
\pdffontexpand\font   20 20 5 autoexpand
Z\bye


----------------------------------------------------------------------

>Comment By: Robert (schlcht)
Date: 2007-06-30 16:12

Message:
Logged In: YES 
user_id=2217

the patch is missing...

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-29 15:58

Message:
Logged In: YES 
user_id=710

patch updated again. I have tested it with the following:

\font\f=cmr10
\pdfcopyfont\fA=\f
\letterspacefont\fB=\fA 100
\pdffontexpand\fB 30 30 5 autoexpand
\fB \input tufte.tex

and it seems to work. But the following doesn't:

\letterspacefont\fC=\f 100
\pdfcopyfont\fD=\fC
\pdffontexpand\fD 30 30 5 autoexpand

probably it's possible with some more effort to make the
latter case work too, but it doesn't seem needed.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-29 13:32

Message:
Logged In: YES 
user_id=710

patch deleted. Needs more testing.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-29 09:56

Message:
Logged In: YES 
user_id=710

sorry, I didn't test it carefully enough. Here is another
attempt (tested with the microtype manual).

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-29 08:52

Message:
Logged In: YES 
user_id=421

Taco, the new_font_type -> real_font_type is from the fix
for bug #722. We need an svn... :-(

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-29 07:22

Message:
Logged In: YES 
user_id=1608

On my (fairly) clean sources, one hunk is rejected because
of this:

else begin
  if pdf_font_type[f] <> new_font_type then
    pdf_warning("font expansion", "font should be expanded
before its first use",
                true, true);
    end;


My pdftex.web uses pdf_font_type[f] = real_font_type in that
test. I fixed the hunk, but I also get a crash on Robert's
test file.

----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-06-28 23:17

Message:
Logged In: YES 
user_id=2217

Now this yields a core dump with: 

\pdfadjustspacing2
\pdffontexpand\font 20 20 5 autoexpand
\hsize10em

Lorem ipsum dolor sit amet, 
\bye

(unless I've messed up pdftex.web with all them patches)

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 20:17

Message:
Logged In: YES 
user_id=710

here is another patch, which introduces \pdfcopyfont. Example:

\letterspacefont\lsfont\font 100
\pdfcopyfont\lsxfont\lsfont
\pdffontexpand\lsxfont 20 20 5 autoexpand

This patch also fixed a bug in expanding local font from
virtual fonts: font shrinking didn't work. Big thanks to
Robert for help with testing.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 18:42

Message:
Logged In: YES 
user_id=710

expanding a letterspaced fonts always implies that the base
font is expanded. In other words, it's impossible *not* to
expand the base font when expanding a letterspaced font.

thanks for further testing. It looks like a bug in checking
font expansion spec. fwiw, font stretch limit is always
fixed to [0..1000] and font shrink limit to [0..500]. Thus
giving a negative value has the same effect like giving 0.

I will play with \copyfont to see if it helps.


----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-06-28 14:01

Message:
Logged In: YES 
user_id=2217

If we can get rid of the error message, I think it can be
left at that. Mind you, the problem is not how to expand a
letterspaced font but how to *not* expand the base font when
expanding a letterspaced font. That expanding a letterspaced
font results in expansion of the base font
can be documented as a feature, IMO.

Here are some more clues: The error message seems to be
related to the sign of the stretch parameter.
First of all, with

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20 20 5 autoexpand

the base font will be expanded, however it will never be
shrunk. Then,

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20  20 5 autoexpand
\pdffontexpand\font   20 -20 5 autoexpand

doesn't yield an error. Neither does:

\pdffontexpand\lsfont 20 -20 5 autoexpand
\pdffontexpand\font   20 -20 5 autoexpand

However, here comes the error again:

\pdffontexpand\lsfont 20 -20 5 autoexpand
\pdffontexpand\font   20  20 5 autoexpand

If you expand the base font first, it's OK in any case, also
with different signs.


----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 07:37

Message:
Logged In: YES 
user_id=1608

That sounds nice, I like it.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 06:45

Message:
Logged In: YES 
user_id=710

I agree this is an ugly solution, which has its origin in a
design mistake. However the problem here is not only how to
deal with the error message, but the point is how to use
font expansion with a letterspaced font. Please give it a
thought so we can come up with an acceptable workaround. If
we want everything to be clean, there are more things that
have to be thrown away.

what about this: have a primitive \copyfont which creates a
copy of a font. Example:

\letterspacefont\lsfont\font 100
\copyfont\lsxfont\lsfont
\pdffontexpand\lsxfont 20 20 5 autoexpand



----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-27 11:43

Message:
Logged In: YES 
user_id=1608


If there is no clean way of solving the problem, I'd rather
just document the error message as a feature. I find
\pdfnewexpandfont very ugly (sorry Thanh).

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-24 10:46

Message:
Logged In: YES 
user_id=710

here is a patch that introduces a new primitive
\pdfnewexpandfont. Usage:

\font\f=cmr10
\pdfnewexpandfont\fx \f 20 20 5 autoexpand

Note that \pdfnewexpandfont generates \fx by loading a TFM
corresponding to \f first, then applies font expansion in
the same way like "\pdffontexpand\fx 20 20 5". So when \f is
a font that doesn't have a corresponding TFM (for example,
because it was generated in pdftex memory only), the above
command won't work. In particular, the following doesn't work:

\font\f=cmr10
\letterspacefont\lsfont\f 100
\pdfnewexpandfont\fx \lsfont 20 20 5 autoexpand

since \lsfont doesn't have a corresponding TFM but was
generated by \letterspacefont. To create a
letterspaced+expanded font, one can use:

\font\f=cmr10
\letterspacefont\fx\f 100
\pdffontexpand\fx 20 20 5 autoexpand

things are gettting messy... sorry about that.
Testing/comments welcome.

----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-04-01 00:44

Message:
Logged In: YES 
user_id=2217

Fine for me and microtype. 

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-31 09:52

Message:
Logged In: YES 
user_id=710

either name is ok with me. We need a new pritimive to load a
new font and expand it, since the current one doesn't load a
new font and hence is making trouble. I would wait for a
while to see how Robert sees it before making any change.

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-03-19 11:07

Message:
Logged In: NO 

Hello,

I do not think that \pdfexpandfont is a good name for a new 
primitive, as it is too easy to confuse with \pdffontexpand. 
What about \pdfexpandnewfont, as -- if I understand 
correctly -- a new font is loaded?


Jonathan

P.S: Thank you for creating pdfTeX!

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-10 20:18

Message:
Logged In: YES 
user_id=710

Phil Taylor has a suggestion that seems great to me:
introduce a new primitive \pdfexpandfont instead. How do you
see it?

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-03-10 19:24

Message:
Logged In: YES 
user_id=421

Forget that comment. Of course a change of \pdffontexpand
has to be considered carefully. By you. :-)

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-03-10 19:22

Message:
Logged In: YES 
user_id=421

No. It's an undocumented primitive. ;-)

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-09 17:28

Message:
Logged In: YES 
user_id=710

sigh. A mistake when implementing the \pdffontexpand
primitive: it should load a new font for expansion, instead
of expanding a loaded font. Too late for change now?

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=747&group_id=106

From noreply at sarovar.org  Sat Jun 30 18:25:38 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Sat, 30 Jun 2007 21:55:38 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-747 ] \letterspacefont and
	\pdffontexpand, again
Message-ID: <E1I4flS-0002IG-00@sarovar.org>

Bugs item #747, was opened at 2007-03-09 03:09
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=747&group_id=106

Category: hz
Group: v1.40.1
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robert (schlcht)
Assigned to: The Thanh Han (hanthethanh)
Summary: \letterspacefont and \pdffontexpand, again

Initial Comment:
When expanding a letterspaced font, the base font will
be expanded, too, resulting in the error `font has been
expanded with different parameters' when the base font
is expanded again:

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20 20 5 autoexpand
\pdffontexpand\font   20 20 5 autoexpand
Z\bye


----------------------------------------------------------------------

>Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-30 16:25

Message:
Logged In: YES 
user_id=710

ah, sorry, here it is.

----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-06-30 16:12

Message:
Logged In: YES 
user_id=2217

the patch is missing...

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-29 15:58

Message:
Logged In: YES 
user_id=710

patch updated again. I have tested it with the following:

\font\f=cmr10
\pdfcopyfont\fA=\f
\letterspacefont\fB=\fA 100
\pdffontexpand\fB 30 30 5 autoexpand
\fB \input tufte.tex

and it seems to work. But the following doesn't:

\letterspacefont\fC=\f 100
\pdfcopyfont\fD=\fC
\pdffontexpand\fD 30 30 5 autoexpand

probably it's possible with some more effort to make the
latter case work too, but it doesn't seem needed.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-29 13:32

Message:
Logged In: YES 
user_id=710

patch deleted. Needs more testing.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-29 09:56

Message:
Logged In: YES 
user_id=710

sorry, I didn't test it carefully enough. Here is another
attempt (tested with the microtype manual).

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-29 08:52

Message:
Logged In: YES 
user_id=421

Taco, the new_font_type -> real_font_type is from the fix
for bug #722. We need an svn... :-(

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-29 07:22

Message:
Logged In: YES 
user_id=1608

On my (fairly) clean sources, one hunk is rejected because
of this:

else begin
  if pdf_font_type[f] <> new_font_type then
    pdf_warning("font expansion", "font should be expanded
before its first use",
                true, true);
    end;


My pdftex.web uses pdf_font_type[f] = real_font_type in that
test. I fixed the hunk, but I also get a crash on Robert's
test file.

----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-06-28 23:17

Message:
Logged In: YES 
user_id=2217

Now this yields a core dump with: 

\pdfadjustspacing2
\pdffontexpand\font 20 20 5 autoexpand
\hsize10em

Lorem ipsum dolor sit amet, 
\bye

(unless I've messed up pdftex.web with all them patches)

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 20:17

Message:
Logged In: YES 
user_id=710

here is another patch, which introduces \pdfcopyfont. Example:

\letterspacefont\lsfont\font 100
\pdfcopyfont\lsxfont\lsfont
\pdffontexpand\lsxfont 20 20 5 autoexpand

This patch also fixed a bug in expanding local font from
virtual fonts: font shrinking didn't work. Big thanks to
Robert for help with testing.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 18:42

Message:
Logged In: YES 
user_id=710

expanding a letterspaced fonts always implies that the base
font is expanded. In other words, it's impossible *not* to
expand the base font when expanding a letterspaced font.

thanks for further testing. It looks like a bug in checking
font expansion spec. fwiw, font stretch limit is always
fixed to [0..1000] and font shrink limit to [0..500]. Thus
giving a negative value has the same effect like giving 0.

I will play with \copyfont to see if it helps.


----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-06-28 14:01

Message:
Logged In: YES 
user_id=2217

If we can get rid of the error message, I think it can be
left at that. Mind you, the problem is not how to expand a
letterspaced font but how to *not* expand the base font when
expanding a letterspaced font. That expanding a letterspaced
font results in expansion of the base font
can be documented as a feature, IMO.

Here are some more clues: The error message seems to be
related to the sign of the stretch parameter.
First of all, with

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20 20 5 autoexpand

the base font will be expanded, however it will never be
shrunk. Then,

\letterspacefont\lsfont\font 100
\pdffontexpand\lsfont 20  20 5 autoexpand
\pdffontexpand\font   20 -20 5 autoexpand

doesn't yield an error. Neither does:

\pdffontexpand\lsfont 20 -20 5 autoexpand
\pdffontexpand\font   20 -20 5 autoexpand

However, here comes the error again:

\pdffontexpand\lsfont 20 -20 5 autoexpand
\pdffontexpand\font   20  20 5 autoexpand

If you expand the base font first, it's OK in any case, also
with different signs.


----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 07:37

Message:
Logged In: YES 
user_id=1608

That sounds nice, I like it.

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-28 06:45

Message:
Logged In: YES 
user_id=710

I agree this is an ugly solution, which has its origin in a
design mistake. However the problem here is not only how to
deal with the error message, but the point is how to use
font expansion with a letterspaced font. Please give it a
thought so we can come up with an acceptable workaround. If
we want everything to be clean, there are more things that
have to be thrown away.

what about this: have a primitive \copyfont which creates a
copy of a font. Example:

\letterspacefont\lsfont\font 100
\copyfont\lsxfont\lsfont
\pdffontexpand\lsxfont 20 20 5 autoexpand



----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-27 11:43

Message:
Logged In: YES 
user_id=1608


If there is no clean way of solving the problem, I'd rather
just document the error message as a feature. I find
\pdfnewexpandfont very ugly (sorry Thanh).

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-06-24 10:46

Message:
Logged In: YES 
user_id=710

here is a patch that introduces a new primitive
\pdfnewexpandfont. Usage:

\font\f=cmr10
\pdfnewexpandfont\fx \f 20 20 5 autoexpand

Note that \pdfnewexpandfont generates \fx by loading a TFM
corresponding to \f first, then applies font expansion in
the same way like "\pdffontexpand\fx 20 20 5". So when \f is
a font that doesn't have a corresponding TFM (for example,
because it was generated in pdftex memory only), the above
command won't work. In particular, the following doesn't work:

\font\f=cmr10
\letterspacefont\lsfont\f 100
\pdfnewexpandfont\fx \lsfont 20 20 5 autoexpand

since \lsfont doesn't have a corresponding TFM but was
generated by \letterspacefont. To create a
letterspaced+expanded font, one can use:

\font\f=cmr10
\letterspacefont\fx\f 100
\pdffontexpand\fx 20 20 5 autoexpand

things are gettting messy... sorry about that.
Testing/comments welcome.

----------------------------------------------------------------------

Comment By: Robert (schlcht)
Date: 2007-04-01 00:44

Message:
Logged In: YES 
user_id=2217

Fine for me and microtype. 

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-31 09:52

Message:
Logged In: YES 
user_id=710

either name is ok with me. We need a new pritimive to load a
new font and expand it, since the current one doesn't load a
new font and hence is making trouble. I would wait for a
while to see how Robert sees it before making any change.

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-03-19 11:07

Message:
Logged In: NO 

Hello,

I do not think that \pdfexpandfont is a good name for a new 
primitive, as it is too easy to confuse with \pdffontexpand. 
What about \pdfexpandnewfont, as -- if I understand 
correctly -- a new font is loaded?


Jonathan

P.S: Thank you for creating pdfTeX!

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-10 20:18

Message:
Logged In: YES 
user_id=710

Phil Taylor has a suggestion that seems great to me:
introduce a new primitive \pdfexpandfont instead. How do you
see it?

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-03-10 19:24

Message:
Logged In: YES 
user_id=421

Forget that comment. Of course a change of \pdffontexpand
has to be considered carefully. By you. :-)

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-03-10 19:22

Message:
Logged In: YES 
user_id=421

No. It's an undocumented primitive. ;-)

----------------------------------------------------------------------

Comment By: The Thanh Han (hanthethanh)
Date: 2007-03-09 17:28

Message:
Logged In: YES 
user_id=710

sigh. A mistake when implementing the \pdffontexpand
primitive: it should load a new font for expansion, instead
of expanding a loaded font. Too late for change now?

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=747&group_id=106

From noreply at sarovar.org  Sat Jun 30 18:29:09 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Sat, 30 Jun 2007 21:59:09 +0530
Subject: [NTG-pdftex] [ pdftex-Patches-828 ] Make /XObject /Form coordinates
	independent from PDF page dimensions
Message-ID: <E1I4for-0002Jl-00@sarovar.org>

Patches item #828, was opened at 2007-06-30 17:14
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=828&group_id=106

Category: Positioning
Group: v1.30.0
Status: Open
Resolution: None
Priority: 5
Submitted By: Hartmut Henkel (hhenkel)
Assigned to: Nobody (None)
Summary: Make /XObject /Form coordinates independent from PDF page dimensions

Initial Comment:
Experimental patch for pdftex-1.40.3/luatex

In pdftex-1.30.4 \pdfpageheight spills over into
coordinate transforms inside /XObject /Form objects.
This isn't an error, but it complicates coordinate
transforms. This tiny patch should tidy up the web
source a little, making coordinate transforms inside
/Form objects relative to their inner lower left
position, independently from the PDF page dimensions.

Testing welcome.


----------------------------------------------------------------------

>Comment By: Hartmut Henkel (hhenkel)
Date: 2007-06-30 18:29

Message:
Logged In: YES 
user_id=929

annotations were positioned wrongly. patch corrected.

----------------------------------------------------------------------

Comment By: Hartmut Henkel (hhenkel)
Date: 2007-06-30 17:35

Message:
Logged In: YES 
user_id=929

seems it can be further simplified, new patch. Testing welcome.

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=495&aid=828&group_id=106

From noreply at sarovar.org  Sat Jun 30 18:56:56 2007
From: noreply at sarovar.org (noreply at sarovar.org)
Date: Sat, 30 Jun 2007 22:26:56 +0530
Subject: [NTG-pdftex] [ pdftex-Bugs-824 ] Bus error caused by loading an
	image into a format file
Message-ID: <E1I4gFk-0006eK-00@sarovar.org>

Bugs item #824, was opened at 2007-06-25 23:22
You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

Category: Image inclusion
Group: v1.40.3
Status: Open
Resolution: Accepted
Priority: 5
Submitted By: Robin Houston (robinhouston)
Assigned to: Martin Schr?der (oneiros)
Summary: Bus error caused by loading an image into a format file

Initial Comment:
I have written a tool that speeds up repeated
compilation of a source file, by generating a format
from the preamble of the document, and then using it to
compile the body.

One user reported a crash when using this tool with a
custom letterhead class; the class in question may be
found at
http://www.soe.ucsc.edu/~elm/LaTeX/ucletter.cls (though
note that a simpler demonstration is attached to this
report).

The bug is triggered by the fact that this class loads
an image during the processing of the preamble (i.e.
during the processing of the .ini file) and saves it in
a box. When this box is used, during the compilation of
the body, pdftex crashes.

This does work with ordinary (non-PDF) TeX, so the
problem is specific to PDFTeX.

The attachment contains a simple demonstration of the
problem. Unpack it and run 'make'.


----------------------------------------------------------------------

>Comment By: Robin Houston (robinhouston)
Date: 2007-06-30 17:56

Message:
Logged In: YES 
user_id=4579

The attached patch (initex-objects.patch) implements the
suggestions made below, together with a few other
improvements. It incorporates Taco Hoekwater's code, so
should be applied to a clean source tree.

In particular, it reinstates the ability to produce both a
PDF document and a memory dump in the same run. I've tested
it with \pdfxform as well as \pdfximage.

Comments? Counterexamples?

Robin

----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-30 13:38

Message:
Logged In: YES 
user_id=4579

Fortunately the "two picture" problem (demonstrated in the
attachment twopic.tar.gz) is trivial to solve: simply dump
and undump the variable pdf_ximage_count.

Presumably the same should be done for pdf_obj_count and
pdf_xform_count. Whether this is sufficient, I have no idea:
none of us have tested forms or raw objects, have we?


----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-30 11:08

Message:
Logged In: YES 
user_id=4579

A minor bug in the initex-refximage-dump.patch: the test for
fixed_pdfoutput=1 ought to be fixed_pdfoutput>0, otherwise
it will fail with \pdfoutput=2, say.

Another unrelated problem is that, if you load an image from
the .ini file, and then load and display another image from
the .tex file, the first image will appear where the second
one ought to be. I'll try and find out why this is happening.

(Incidentally, I haven't (yet?) discovered any problems
stemming from not (un)dumping the linked list headers.)

----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-29 19:08

Message:
Logged In: YES 
user_id=4579

Argh! Interesting, thanks.

Clearly my understanding of the pdftex code is patchy at
best. That said, what is gained by dumping and restoring the
head_tab? If I remove the parts of your code that dump and
undump the head_tab, then your example works (and mine
continue to work).

Robin

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-29 17:32

Message:
Logged In: YES 
user_id=1608

Try a document that contains items besides a single image.
Many of the auxiliary tables are not dumped, resulting in
assertion failures in the non-ini run.

You don't even need to save or reuse boxes for those
crashes, just make a pair of:

% test.ini
\input plain
\pdfoutput=1
hello
\dump


% test.tex
world!
\end




----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-29 16:24

Message:
Logged In: YES 
user_id=4579

PS. I have just attached a new tar file, containing some
simple tests that create PDF from the IniTeX run. They all
appear to work, when my patch is applied.

----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-29 16:19

Message:
Logged In: YES 
user_id=4579

I don't think creating a PDF file from the IniTeX run is a
real problem. The attached tiny patch (to be applied on top
of Taco Hoekwater's first patch) seems to make it work.

Am I missing something?

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-29 11:34

Message:
Logged In: YES 
user_id=1608

Here is the promised extra patch. No error is generated,
just a simple warning. Pdftex continues executing as if \end
was given instead.

----------------------------------------------------------------------

Comment By: Nobody (None)
Date: 2007-06-28 21:33

Message:
Logged In: NO 

Hi, the inability to _both_ dump a format _and_ produce
output in the same iniTeX run is probably tolerable as long
as no crashes occur.  I don't know the workings of WhizzyTeX
in detail: it is conceivable that their in-document dump
would be affected.  However, it is unlikely that WhizzyTeX
will indeed require both the output as well as the dump (the
dump may well contain pictures, for example from floats that
are going to be placed later), so there is at least a
reasonable way to tackle this from the macro level (divert
\shipout in the manner of the everyshi.sty package).

At least mylatex.ltx (and consequently preview-latex) should
work fine: \shipout before \begin{document} would be
extremely unusual and would result in strange results, anyway.

David

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 20:09

Message:
Logged In: YES 
user_id=1608

Small limitation that I have yet to implement: the ability
to move stuff over from the initex run means that if initex
actually creates a pdf file, dumping a format should be
disallowed, or silently ignored. Attempting to keep track of
two disjunct pdf documents is just too hard for me. 

Note that I do not want to prohibit pdf creation from
initex. Just that you can't create a pdf document _as well
as_ perform a \dump.



----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-28 16:01

Message:
Logged In: YES 
user_id=4579

Bravo!

I was ready to embark on this myself, so I'm delighted to be
spared the trouble. It passes all the tests I've tried so far.

----------------------------------------------------------------------

Comment By: Taco Hoekwater (taco)
Date: 2007-06-28 11:57

Message:
Logged In: YES 
user_id=1608

Here is a patch that fixes the problem by dumping and
restoring the image _meta information_ to/from any generated
format. 

The image _data_ is not included (that would be really hard
to do in a portable way), and therefore the undumping
routines have to redo most of the work of \pdfximage, but
this is transparent to the user except that the tests
for \pdfminorversion and \pdfinclusionerrorlevel tests are
re-done.

The patch also saves some pdftex arrays that are needed to
rediscover the object. This could eventually be extended to
 make sure \refxform et al work as well. As of now, that is
untested due to lack of example.

Comments and testing welcome, as always.



----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-26 22:01

Message:
Logged In: YES 
user_id=421

Sorry, pdf things work different then dvi, so we can not
make \pdfximage etc. in ini mode without a lot of work; we
will probably disable a bunch of primitives.

----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-26 14:49

Message:
Logged In: YES 
user_id=4579

Simplifying the example by eliminating the graphics package:

==> foo.ini <==
\documentclass{minimal}

\newbox\picbox
\pdfximage{pic.pdf}
\setbox\picbox\hbox{\pdfrefximage\pdflastximage}

\dump

==> foo.tex <==
\begin{document}
        \box\picbox
\end{document}


Also, I see now that my comparison with dvi-mode is indeed a
false one, because the mechanisms are quite different, and
the DVI graphics driver only has to include a \special,
rather than the graphic itself.

A simple solution, I suppose, would be to make \pdfrefximage
(and, presumably, the other \pdfrefx commands) invalid in
IniTeX mode. Perhaps this is too brutal, since it forbids
certain harmless activities such as finding the dimensions
of an image from an .ini file; and of course I would be
delighted if it were made to work instead.


----------------------------------------------------------------------

Comment By: Reinhard Kotucha (reinhard)
Date: 2007-06-26 00:26

Message:
Logged In: YES 
user_id=4195

Martin,
you probably can't do everything in a format file.  However,
it would be nice to be able to put graphics to a format file
at least.  Suppose that a web server has to generate PDF
files on-the-fly, each contains a company logo.  The best
place place for the logo is the format file if speed
matters.  It would be nice if there are no restrictions.

Regards,
  Reinhard



----------------------------------------------------------------------

Comment By: Robin Houston (robinhouston)
Date: 2007-06-25 23:42

Message:
Logged In: YES 
user_id=4579

I'm impressed by the speed of your response! Thanks.

If you replace the PDF image by an EPS file, and use
-output-format dvi, then it does work. That suggests to me
that the problem is not fundamentally caused by a limitation
of IniTeX. But I don't know enough about the inner workings
of the \includegraphics command to be sure about that.
(Perhaps PDF graphics are handled in a sufficiently
different way for this to be a false comparison?)

In any case, as you say, it shouldn't crash!

----------------------------------------------------------------------

Comment By: Martin Schr?der (oneiros)
Date: 2007-06-25 23:30

Message:
Logged In: YES 
user_id=421

I can reproduce it, and it obviously shouldn't crash, but
I'm really not shure if it's supposed to work, as the format
of course will not save the picture. You can't do everything
in IniTeX...

----------------------------------------------------------------------

You can respond by visiting: 
http://sarovar.org/tracker/?func=detail&atid=493&aid=824&group_id=106

