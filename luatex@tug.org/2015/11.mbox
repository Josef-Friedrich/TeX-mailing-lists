From deepak.jois at gmail.com  Sun Nov 15 10:32:15 2015
From: deepak.jois at gmail.com (Deepak Jois)
Date: Sun, 15 Nov 2015 15:02:15 +0530
Subject: [luatex] Using a Lua C .so module with LuaLaTeX
Message-ID: <CABR1-XYwnEfhoSVcRYp8NNZNZxT-mCPsUhtzVWj0n=yA-V=s0w@mail.gmail.com>

I am trying to get a basic Lua C .so module working with LuaLaTeX. I
have all the pieces in place here. I am able to run the library using
my local Lua interpreter just fine. But when I try to load it inside
LuaLaTex, I get the error as shown below.

My environment: Mac OS X, TeXLive 2015 and Lua 5.2.4.

The minimal code example is here:
https://github.com/deepakjois/tex-sandbox/tree/master/luatex-lua-c-bridge

What am I doing wrong?


Error Details:
=====
This is LuaTeX, Version beta-0.80.0 (TeX Live 2015) (rev 5238)
 restricted \write18 enabled.
(./test.tex
LaTeX2e <2015/01/01>
?
<snip>
?
(./luaharfbuzz.lua)
! LuaTeX error error loading module 'harfbuzz' from file './harfbuzz.so':
        dlopen(./harfbuzz.so, 6): Symbol not found: _luaL_setfuncs
  Referenced from: ./harfbuzz.so
  Expected in: flat namespace
 in ./harfbuzz.so
stack traceback:
        [C]: in ?
        [C]: in ?
        [C]: in function 'require'
        ./luaharfbuzz.lua:2: in main chunk
        [C]: in function 'require'
        [\directlua]:1: in main chunk.
\luacode at dbg@exec ...code at maybe@printdbg {#1} #1 }

l.6 \end{luacode*}

=====


From deepak.jois at gmail.com  Mon Nov 16 13:13:53 2015
From: deepak.jois at gmail.com (Deepak Jois)
Date: Mon, 16 Nov 2015 17:43:53 +0530
Subject: [luatex] Using a Lua C .so module with LuaLaTeX
In-Reply-To: <CABR1-XYwnEfhoSVcRYp8NNZNZxT-mCPsUhtzVWj0n=yA-V=s0w@mail.gmail.com>
References: <CABR1-XYwnEfhoSVcRYp8NNZNZxT-mCPsUhtzVWj0n=yA-V=s0w@mail.gmail.com>
Message-ID: <CABR1-XbsZ5DzvYf9WYFNZ8QHJEYWjNYP9ePKab4q2yno8KStXQ@mail.gmail.com>

To narrow down the problem, I used the --luaonly option to run a test
lua file with luatex that loads the library. When I run:

luatex --luaonly test.lua

It gives me the error: Symbol not found: _luaL_setfuncs

Then, I built a fresh luatex binary from SVN using --nostrip option,
and ran the same thing, and it works fine.

I then tried to copy the freshly built luatex binary into TeXLive, and
ran fmtutil --all, but it gave me an error saying \pdfoutput was an
undefined control sequence.

So now I am wondering:

1. Why does the luatex binary built from SVN with --nostrip work, and
the luatex binary bundled with TeXLive does not work when using in
--luaonly mode. Is that intentional? On StackExchange[1] there are
people on Linux who report that it working fine with TeXLive 2015 as
well. What is different about Mac OS X?

2. How can I use the freshly built luatex binary with TeXLive 2015. Is
there anything else I need to do before I run fmtutil --all so that
this "undefined control sequence \pdfoutput" will go away.

Thank you
Deepak

[1]: http://tex.stackexchange.com/questions/278329/symbol-not-found-error-when-using-lua-c-so-module-with-lualatex

On Sun, Nov 15, 2015 at 3:02 PM, Deepak Jois <deepak.jois at gmail.com> wrote:
> I am trying to get a basic Lua C .so module working with LuaLaTeX. I
> have all the pieces in place here. I am able to run the library using
> my local Lua interpreter just fine. But when I try to load it inside
> LuaLaTex, I get the error as shown below.
>
> My environment: Mac OS X, TeXLive 2015 and Lua 5.2.4.
>
> The minimal code example is here:
> https://github.com/deepakjois/tex-sandbox/tree/master/luatex-lua-c-bridge
>
> What am I doing wrong?
>
>
> Error Details:
> =====
> This is LuaTeX, Version beta-0.80.0 (TeX Live 2015) (rev 5238)
>  restricted \write18 enabled.
> (./test.tex
> LaTeX2e <2015/01/01>
> ?
> <snip>
> ?
> (./luaharfbuzz.lua)
> ! LuaTeX error error loading module 'harfbuzz' from file './harfbuzz.so':
>         dlopen(./harfbuzz.so, 6): Symbol not found: _luaL_setfuncs
>   Referenced from: ./harfbuzz.so
>   Expected in: flat namespace
>  in ./harfbuzz.so
> stack traceback:
>         [C]: in ?
>         [C]: in ?
>         [C]: in function 'require'
>         ./luaharfbuzz.lua:2: in main chunk
>         [C]: in function 'require'
>         [\directlua]:1: in main chunk.
> \luacode at dbg@exec ...code at maybe@printdbg {#1} #1 }
>
> l.6 \end{luacode*}
>
> =====


From luigi.scarso at gmail.com  Mon Nov 16 14:01:34 2015
From: luigi.scarso at gmail.com (luigi scarso)
Date: Mon, 16 Nov 2015 14:01:34 +0100
Subject: [luatex] Using a Lua C .so module with LuaLaTeX
In-Reply-To: <CABR1-XbsZ5DzvYf9WYFNZ8QHJEYWjNYP9ePKab4q2yno8KStXQ@mail.gmail.com>
References: <CABR1-XYwnEfhoSVcRYp8NNZNZxT-mCPsUhtzVWj0n=yA-V=s0w@mail.gmail.com>
 <CABR1-XbsZ5DzvYf9WYFNZ8QHJEYWjNYP9ePKab4q2yno8KStXQ@mail.gmail.com>
Message-ID: <CAG5iGsA4Oq0TAhxwMmDsM+QuTPBL-TN69+z61H_vz_Bro4kBkQ@mail.gmail.com>

On Mon, Nov 16, 2015 at 1:13 PM, Deepak Jois <deepak.jois at gmail.com> wrote:

> To narrow down the problem, I used the --luaonly option to run a test
> lua file with luatex that loads the library. When I run:
>
> luatex --luaonly test.lua
>
> It gives me the error: Symbol not found: _luaL_setfuncs
>
> Then, I built a fresh luatex binary from SVN using --nostrip option,
> and ran the same thing, and it works fine.
>
> I then tried to copy the freshly built luatex binary into TeXLive, and
> ran fmtutil --all, but it gave me an error saying \pdfoutput was an
> undefined control sequence.
>
>

> So now I am wondering:
>
> 1. Why does the luatex binary built from SVN with --nostrip work, and
> the luatex binary bundled with TeXLive does not work when using in
> --luaonly mode. Is that intentional? On StackExchange[1] there are
> people on Linux who report that it working fine with TeXLive 2015 as
> well. What is different about Mac OS X?
>
>
I will check your code later under Linux.


> 2. How can I use the freshly built luatex binary with TeXLive 2015. Is
> there anything else I need to do before I run fmtutil --all so that
> this "undefined control sequence \pdfoutput" will go away.
>
> we are finishing the 0.85 release which is not compatible with  the
current lualatex format
(nothing dramatic).
But luatex --luaonly test.lua should work.


-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20151116/3526c2f9/attachment.html>

From joseph.wright at morningstar2.co.uk  Mon Nov 16 14:21:16 2015
From: joseph.wright at morningstar2.co.uk (Joseph Wright)
Date: Mon, 16 Nov 2015 13:21:16 +0000
Subject: [luatex] Using a Lua C .so module with LuaLaTeX
In-Reply-To: <CAG5iGsA4Oq0TAhxwMmDsM+QuTPBL-TN69+z61H_vz_Bro4kBkQ@mail.gmail.com>
References: <CABR1-XYwnEfhoSVcRYp8NNZNZxT-mCPsUhtzVWj0n=yA-V=s0w@mail.gmail.com>
 <CABR1-XbsZ5DzvYf9WYFNZ8QHJEYWjNYP9ePKab4q2yno8KStXQ@mail.gmail.com>
 <CAG5iGsA4Oq0TAhxwMmDsM+QuTPBL-TN69+z61H_vz_Bro4kBkQ@mail.gmail.com>
Message-ID: <5649D84C.5020101@morningstar2.co.uk>

On 16/11/2015 13:01, luigi scarso wrote:
>> we are finishing the 0.85 release which is not compatible with  the
> current lualatex format
> (nothing dramatic).

Off-topic for the original thread, but just to say that the team and TL
maintainers will have v0.85 compatible for LaTeX2e in the very near
future (as you say, nothing dramatic).

Joseph


From luigi.scarso at gmail.com  Mon Nov 16 17:14:16 2015
From: luigi.scarso at gmail.com (luigi scarso)
Date: Mon, 16 Nov 2015 17:14:16 +0100
Subject: [luatex] Using a Lua C .so module with LuaLaTeX
In-Reply-To: <CAG5iGsA4Oq0TAhxwMmDsM+QuTPBL-TN69+z61H_vz_Bro4kBkQ@mail.gmail.com>
References: <CABR1-XYwnEfhoSVcRYp8NNZNZxT-mCPsUhtzVWj0n=yA-V=s0w@mail.gmail.com>
 <CABR1-XbsZ5DzvYf9WYFNZ8QHJEYWjNYP9ePKab4q2yno8KStXQ@mail.gmail.com>
 <CAG5iGsA4Oq0TAhxwMmDsM+QuTPBL-TN69+z61H_vz_Bro4kBkQ@mail.gmail.com>
Message-ID: <CAG5iGsAcQKKr+fuVqSgrbfUyAocaUrvaBuQWF=XLvAXWzgOASQ@mail.gmail.com>

On Mon, Nov 16, 2015 at 2:01 PM, luigi scarso <luigi.scarso at gmail.com>
wrote:

>
>
> On Mon, Nov 16, 2015 at 1:13 PM, Deepak Jois <deepak.jois at gmail.com>
> wrote:
>
>> To narrow down the problem, I used the --luaonly option to run a test
>> lua file with luatex that loads the library. When I run:
>>
>> luatex --luaonly test.lua
>>
>> It gives me the error: Symbol not found: _luaL_setfuncs
>>
>> Then, I built a fresh luatex binary from SVN using --nostrip option,
>> and ran the same thing, and it works fine.
>>
>> I then tried to copy the freshly built luatex binary into TeXLive, and
>> ran fmtutil --all, but it gave me an error saying \pdfoutput was an
>> undefined control sequence.
>>
>>
>
>> So now I am wondering:
>>
>> 1. Why does the luatex binary built from SVN with --nostrip work, and
>> the luatex binary bundled with TeXLive does not work when using in
>> --luaonly mode. Is that intentional? On StackExchange[1] there are
>> people on Linux who report that it working fine with TeXLive 2015 as
>> well. What is different about Mac OS X?
>>
>>
> I will check your code later under Linux.
>


with latest luatex underl linux


CC=gcc
L=$SVN/trunk/source/libs/lua52/lua-5.2.4/src
rm -rf *.o *.la *.lo .libs/
$CC -O2 -fpic -I$L -c harfbuzz.c
$CC -O -shared -fpic -o harfbuzz.so harfbuzz.o
$SVN/bin/luatex -luaonly test.lua

gives
Deepak




-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20151116/1b2e48b7/attachment.html>

From deepak.jois at gmail.com  Mon Nov 16 18:22:06 2015
From: deepak.jois at gmail.com (Deepak Jois)
Date: Mon, 16 Nov 2015 22:52:06 +0530
Subject: [luatex] Using a Lua C .so module with LuaLaTeX
In-Reply-To: <CAG5iGsAcQKKr+fuVqSgrbfUyAocaUrvaBuQWF=XLvAXWzgOASQ@mail.gmail.com>
References: <CABR1-XYwnEfhoSVcRYp8NNZNZxT-mCPsUhtzVWj0n=yA-V=s0w@mail.gmail.com>
 <CABR1-XbsZ5DzvYf9WYFNZ8QHJEYWjNYP9ePKab4q2yno8KStXQ@mail.gmail.com>
 <CAG5iGsA4Oq0TAhxwMmDsM+QuTPBL-TN69+z61H_vz_Bro4kBkQ@mail.gmail.com>
 <CAG5iGsAcQKKr+fuVqSgrbfUyAocaUrvaBuQWF=XLvAXWzgOASQ@mail.gmail.com>
Message-ID: <CABR1-XbSSfX=qvRv1VGbkmmURdBmj9rZ6Zp05oCPNfQU-TR4uw@mail.gmail.com>

On Mon, Nov 16, 2015 at 9:44 PM, luigi scarso <luigi.scarso at gmail.com> wrote:
>
> CC=gcc
> L=$SVN/trunk/source/libs/lua52/lua-5.2.4/src
> rm -rf *.o *.la *.lo .libs/
> $CC -O2 -fpic -I$L -c harfbuzz.c
> $CC -O -shared -fpic -o harfbuzz.so harfbuzz.o
> $SVN/bin/luatex -luaonly test.lua
>

Looks like things work fine on Linux. I tried again on OS X, using
exactly the commands you are using, but with two modifications:

* As listed on http://lua-users.org/wiki/BuildingModules for OS X:
?However, unlike GCC on other platforms, you must still link with the
option '-undefined dynamic_lookup' to avoid getting undefined
references to liblua?

* I seem to have luatex inside $SVN/trunk/build/texk/web2c/ instead of
$SVN/trunk/bin, so I changed that

> cat compile.sh
CC=gcc
SVN=/Users/deepak/code/personal
L=$SVN/trunk/source/libs/lua52/lua-5.2.4/src
rm -rf *.o *.la *.lo .libs/
$CC -O2 -fpic -c harfbuzz.c
$CC -O -shared -fpic -undefined dynamic_lookup -o harfbuzz.so harfbuzz.o
$SVN/trunk/build/texk/web2c/luatex -luaonly test.lua

> ./compile.sh
error loading module 'harfbuzz' from file './harfbuzz.so':
        dlopen(./harfbuzz.so, 6): Symbol not found: _luaL_setfuncs
  Referenced from: ./harfbuzz.so
  Expected in: flat namespace
 in ./harfbuzz.so

However with my standard Lua installation on OS X, I get the expected result:

> which lua
/usr/local/bin/lua

> lua test.lua
Deepak


From deepak.jois at gmail.com  Mon Nov 16 18:51:29 2015
From: deepak.jois at gmail.com (Deepak Jois)
Date: Mon, 16 Nov 2015 23:21:29 +0530
Subject: [luatex] Using a Lua C .so module with LuaLaTeX
In-Reply-To: <CABR1-XbSSfX=qvRv1VGbkmmURdBmj9rZ6Zp05oCPNfQU-TR4uw@mail.gmail.com>
References: <CABR1-XYwnEfhoSVcRYp8NNZNZxT-mCPsUhtzVWj0n=yA-V=s0w@mail.gmail.com>
 <CABR1-XbsZ5DzvYf9WYFNZ8QHJEYWjNYP9ePKab4q2yno8KStXQ@mail.gmail.com>
 <CAG5iGsA4Oq0TAhxwMmDsM+QuTPBL-TN69+z61H_vz_Bro4kBkQ@mail.gmail.com>
 <CAG5iGsAcQKKr+fuVqSgrbfUyAocaUrvaBuQWF=XLvAXWzgOASQ@mail.gmail.com>
 <CABR1-XbSSfX=qvRv1VGbkmmURdBmj9rZ6Zp05oCPNfQU-TR4uw@mail.gmail.com>
Message-ID: <CABR1-XZB9fMSEwV=hWTsQWaxnnVPcP1TWccsfZBD7mivcHxPsw@mail.gmail.com>

I ran into this message from a thread in Dec 2009 titled ?Dynamic
loading on Mac OS X?:
http://tug.org/pipermail/luatex/2009-December/001125.html

Like I said before, when I build luatex with --nostrip, it works fine.
Has this ever been enabled by default?

On Mon, Nov 16, 2015 at 10:52 PM, Deepak Jois <deepak.jois at gmail.com> wrote:
> On Mon, Nov 16, 2015 at 9:44 PM, luigi scarso <luigi.scarso at gmail.com> wrote:
>>
>> CC=gcc
>> L=$SVN/trunk/source/libs/lua52/lua-5.2.4/src
>> rm -rf *.o *.la *.lo .libs/
>> $CC -O2 -fpic -I$L -c harfbuzz.c
>> $CC -O -shared -fpic -o harfbuzz.so harfbuzz.o
>> $SVN/bin/luatex -luaonly test.lua
>>
>
> Looks like things work fine on Linux. I tried again on OS X, using
> exactly the commands you are using, but with two modifications:
>
> * As listed on http://lua-users.org/wiki/BuildingModules for OS X:
> ?However, unlike GCC on other platforms, you must still link with the
> option '-undefined dynamic_lookup' to avoid getting undefined
> references to liblua?
>
> * I seem to have luatex inside $SVN/trunk/build/texk/web2c/ instead of
> $SVN/trunk/bin, so I changed that
>
>> cat compile.sh
> CC=gcc
> SVN=/Users/deepak/code/personal
> L=$SVN/trunk/source/libs/lua52/lua-5.2.4/src
> rm -rf *.o *.la *.lo .libs/
> $CC -O2 -fpic -c harfbuzz.c
> $CC -O -shared -fpic -undefined dynamic_lookup -o harfbuzz.so harfbuzz.o
> $SVN/trunk/build/texk/web2c/luatex -luaonly test.lua
>
>> ./compile.sh
> error loading module 'harfbuzz' from file './harfbuzz.so':
>         dlopen(./harfbuzz.so, 6): Symbol not found: _luaL_setfuncs
>   Referenced from: ./harfbuzz.so
>   Expected in: flat namespace
>  in ./harfbuzz.so
>
> However with my standard Lua installation on OS X, I get the expected result:
>
>> which lua
> /usr/local/bin/lua
>
>> lua test.lua
> Deepak


From joseph.wright at morningstar2.co.uk  Mon Nov 16 23:39:25 2015
From: joseph.wright at morningstar2.co.uk (Joseph Wright)
Date: Mon, 16 Nov 2015 22:39:25 +0000
Subject: [luatex] New \pdf... primitives
Message-ID: <564A5B1D.7080302@morningstar2.co.uk>

Hello all,

Setting up some tests to work with the v0.85 code, I notice that the
suggestion in the manual

  \edef\pdfhorigin{\pdfvariable horigin}

yields with \show\pdfhorigin

  \pdf_horigin=\pdf_horigin

which is accessible using \csname or catcode changes. That seems odd
based on the fact this change has been made at all: is this a passing bug?

Joseph

From pragma at wxs.nl  Tue Nov 17 00:49:43 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Tue, 17 Nov 2015 00:49:43 +0100
Subject: [luatex] New \pdf... primitives
In-Reply-To: <564A5B1D.7080302@morningstar2.co.uk>
References: <564A5B1D.7080302@morningstar2.co.uk>
Message-ID: <564A6B97.1060600@wxs.nl>

On 11/16/2015 11:39 PM, Joseph Wright wrote:
> Hello all,
>
> Setting up some tests to work with the v0.85 code, I notice that the
> suggestion in the manual
>
>    \edef\pdfhorigin{\pdfvariable horigin}
>
> yields with \show\pdfhorigin
>
>    \pdf_horigin=\pdf_horigin
>
> which is accessible using \csname or catcode changes. That seems odd
> based on the fact this change has been made at all: is this a passing bug?

indeed deep down counters are used for a few (but not defined in the 
usual range); the main reason is to make sure that (at least for now) 
old code that expects a counter still works ok (as i have no clue how 
abstract macro package interfaces to this pdf stuff are) ... so maybe 
later that low level thingie will go)

anyway, the split in the three categories made it possible to nicely 
regroup the related code (so that we have a cleaner core code base, a 
bit more more close to original tex, not mixed with backend related 
checks and primitives in inconsistent ways)

Hans



-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From d.p.carlisle at gmail.com  Tue Nov 17 01:35:03 2015
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Tue, 17 Nov 2015 00:35:03 +0000
Subject: [luatex] New \pdf... primitives
In-Reply-To: <564A6B97.1060600@wxs.nl>
References: <564A5B1D.7080302@morningstar2.co.uk>	<564A6B97.1060600@wxs.nl>
Message-ID: <CAEW6iOgaSksOLUw_JD9AaaY5JLCQAJUYn1tJH0dVBJ39Kyu6Ww@mail.gmail.com>

On 16 November 2015 at 23:49, Hans Hagen <pragma at wxs.nl> wrote:
> On 11/16/2015 11:39 PM, Joseph Wright wrote:
>>
>> Hello all,
>>
>> Setting up some tests to work with the v0.85 code, I notice that the
>> suggestion in the manual
>>
>>    \edef\pdfhorigin{\pdfvariable horigin}
>>
>> yields with \show\pdfhorigin
>>
>>    \pdf_horigin=\pdf_horigin
>>
>> which is accessible using \csname or catcode changes. That seems odd
>> based on the fact this change has been made at all: is this a passing bug?
>
>
> indeed deep down counters are used for a few (but not defined in the usual
> range); the main reason is to make sure that (at least for now) old code
> that expects a counter still works ok (as i have no clue how abstract macro
> package interfaces to this pdf stuff are) ... so maybe later that low level
> thingie will go)
>
> anyway, the split in the three categories made it possible to nicely regroup
> the related code (so that we have a cleaner core code base, a bit more more
> close to original tex, not mixed with backend related checks and primitives
> in inconsistent ways)
>
> Hans
>
>
>

related to this, trying to work out the syntax of \pdfvariable (which
is not described in the manual)

it seems to be an expandable command with syntax

\pdfvariable <optional spaces> {fixed list of keywords}

the error handling seems a bit aggressive though, while testing if it
took <filler> rather than <optional spaces> I tried

\edef\test{\pdfvariable\relax horigin}
which produces

! I can't go on meeting you like this.
<to be read again>
\relax
l.13 \edef\test{\pdfvariable\relax
                                 horigin}
!  ==> Fatal error occurred, no output PDF file produced!

so no ? prompt or recovery, it just stops.

David

From pragma at wxs.nl  Tue Nov 17 01:51:39 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Tue, 17 Nov 2015 01:51:39 +0100
Subject: [luatex] New \pdf... primitives
In-Reply-To: <CAEW6iOgaSksOLUw_JD9AaaY5JLCQAJUYn1tJH0dVBJ39Kyu6Ww@mail.gmail.com>
References: <564A5B1D.7080302@morningstar2.co.uk> <564A6B97.1060600@wxs.nl>
 <CAEW6iOgaSksOLUw_JD9AaaY5JLCQAJUYn1tJH0dVBJ39Kyu6Ww@mail.gmail.com>
Message-ID: <564A7A1B.20200@wxs.nl>

On 11/17/2015 1:35 AM, David Carlisle wrote:

> !  ==> Fatal error occurred, no output PDF file produced!
>
> so no ? prompt or recovery, it just stops.

in fact such errors being fatal is true for most backend related errors 
which normally are not recoverable (and seldom used by users) ... in the 
current version errors and warnings are at least now all using the same 
methods (so we have tex errors, with this prompt, backend/lua warnings 
and tex/backend/lua errors where the later quits the run (as one has to 
fix something fundamental)

Hans

btw, i wonder if we need to keep this v/horigin stuff as i suppose latex 
also sets is to "1 true in"

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From joseph.wright at morningstar2.co.uk  Tue Nov 17 08:04:50 2015
From: joseph.wright at morningstar2.co.uk (Joseph Wright)
Date: Tue, 17 Nov 2015 07:04:50 +0000
Subject: [luatex] New \pdf... primitives
In-Reply-To: <564A5B1D.7080302@morningstar2.co.uk>
References: <564A5B1D.7080302@morningstar2.co.uk>
Message-ID: <564AD192.30905@morningstar2.co.uk>

On 16/11/2015 22:39, Joseph Wright wrote:
> Hello all,
> 
> Setting up some tests to work with the v0.85 code, I notice that the
> suggestion in the manual
> 
>   \edef\pdfhorigin{\pdfvariable horigin}
> 
> yields with \show\pdfhorigin
> 
>   \pdf_horigin=\pdf_horigin
> 
> which is accessible using \csname or catcode changes. That seems odd
> based on the fact this change has been made at all: is this a passing bug?
> 
> Joseph
> 

Related to this, I wonder if \pdfvariable should be (effectively)
\protected. Normally one would expect primitives to either fully expand
to a result or to act like \protected macros. Here, we have an
intermediate case as \pdfvariable does expand but only as far as an
internal token.

Joseph

From d.p.carlisle at gmail.com  Tue Nov 17 08:47:16 2015
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Tue, 17 Nov 2015 07:47:16 +0000
Subject: [luatex] New \pdf... primitives
In-Reply-To: <564A7A1B.20200@wxs.nl>
References: <564A5B1D.7080302@morningstar2.co.uk>	<564A6B97.1060600@wxs.nl>
 <CAEW6iOgaSksOLUw_JD9AaaY5JLCQAJUYn1tJH0dVBJ39Kyu6Ww@mail.gmail.com>
 <564A7A1B.20200@wxs.nl>
Message-ID: <CAEW6iOjT6S7+f_W4gLOrw=dY5HoS4KKxNSi+bEro8349feoQLw@mail.gmail.com>

On 17 November 2015 at 00:51, Hans Hagen <pragma at wxs.nl> wrote:
> On 11/17/2015 1:35 AM, David Carlisle wrote:
>
>> !  ==> Fatal error occurred, no output PDF file produced!
>>
>> so no ? prompt or recovery, it just stops.
>
>
> in fact such errors being fatal is true for most backend related errors
> which normally are not recoverable (and seldom used by users) ... in the
> current version errors and warnings are at least now all using the same
> methods (so we have tex errors, with this prompt, backend/lua warnings and
> tex/backend/lua errors where the later quits the run (as one has to fix
> something fundamental)
>
> Hans

hmm at that point it's just expansion in an edef so not really expecting
to get any "back end" interaction at all, and certainly not a fatal error.





David

From deepak.jois at gmail.com  Tue Nov 17 08:55:47 2015
From: deepak.jois at gmail.com (Deepak Jois)
Date: Tue, 17 Nov 2015 13:25:47 +0530
Subject: [luatex] Using a Lua C .so module with LuaLaTeX
In-Reply-To: <CABR1-XZB9fMSEwV=hWTsQWaxnnVPcP1TWccsfZBD7mivcHxPsw@mail.gmail.com>
References: <CABR1-XYwnEfhoSVcRYp8NNZNZxT-mCPsUhtzVWj0n=yA-V=s0w@mail.gmail.com>
 <CABR1-XbsZ5DzvYf9WYFNZ8QHJEYWjNYP9ePKab4q2yno8KStXQ@mail.gmail.com>
 <CAG5iGsA4Oq0TAhxwMmDsM+QuTPBL-TN69+z61H_vz_Bro4kBkQ@mail.gmail.com>
 <CAG5iGsAcQKKr+fuVqSgrbfUyAocaUrvaBuQWF=XLvAXWzgOASQ@mail.gmail.com>
 <CABR1-XbSSfX=qvRv1VGbkmmURdBmj9rZ6Zp05oCPNfQU-TR4uw@mail.gmail.com>
 <CABR1-XZB9fMSEwV=hWTsQWaxnnVPcP1TWccsfZBD7mivcHxPsw@mail.gmail.com>
Message-ID: <CABR1-XZ1n-aiMXRbcu_00Uo7+-jPJX+f683Vx1Wi5THLNEXOpQ@mail.gmail.com>

I am still digging into this?

On Mon, Nov 16, 2015 at 11:21 PM, Deepak Jois <deepak.jois at gmail.com> wrote:

> Like I said before, when I build luatex with --nostrip, it works fine.
> Has this ever been enabled by default?
>

I ran into this mailing thread on tlbuild about stripping luatex binary

* Part 1: http://tug.org/pipermail/tlbuild/2011q2/001842.html
* Part 2: http://tug.org/pipermail/tlbuild/2011q1/001832.html

There is also this bug: http://tracker.luatex.org/view.php?id=555

The mailing list discussion is inconclusive. The bug report says that
?seems to be resolved by --nostrip flag?, but it looks like the luatex
binary in TeXLive as well as in trunk is stripped.

It is still not clear to me if loading .so libraries is supported on OS X.

Anyway, as an alternative I can use my own luatex binary compiled with
--nostrip. Could somebody tell me how I go about using it with a .tex
file? Do I need some sort of alternative TeXLive-like environment? How
do I go about building that?

Deepak


From luigi.scarso at gmail.com  Tue Nov 17 09:12:15 2015
From: luigi.scarso at gmail.com (luigi scarso)
Date: Tue, 17 Nov 2015 09:12:15 +0100
Subject: [luatex] Using a Lua C .so module with LuaLaTeX
In-Reply-To: <CABR1-XZ1n-aiMXRbcu_00Uo7+-jPJX+f683Vx1Wi5THLNEXOpQ@mail.gmail.com>
References: <CABR1-XYwnEfhoSVcRYp8NNZNZxT-mCPsUhtzVWj0n=yA-V=s0w@mail.gmail.com>
 <CABR1-XbsZ5DzvYf9WYFNZ8QHJEYWjNYP9ePKab4q2yno8KStXQ@mail.gmail.com>
 <CAG5iGsA4Oq0TAhxwMmDsM+QuTPBL-TN69+z61H_vz_Bro4kBkQ@mail.gmail.com>
 <CAG5iGsAcQKKr+fuVqSgrbfUyAocaUrvaBuQWF=XLvAXWzgOASQ@mail.gmail.com>
 <CABR1-XbSSfX=qvRv1VGbkmmURdBmj9rZ6Zp05oCPNfQU-TR4uw@mail.gmail.com>
 <CABR1-XZB9fMSEwV=hWTsQWaxnnVPcP1TWccsfZBD7mivcHxPsw@mail.gmail.com>
 <CABR1-XZ1n-aiMXRbcu_00Uo7+-jPJX+f683Vx1Wi5THLNEXOpQ@mail.gmail.com>
Message-ID: <CAG5iGsC_Th1TbaXB8hH11rfuP+K14j8P-H26LxTrxAx0zJG-ug@mail.gmail.com>

On Tue, Nov 17, 2015 at 8:55 AM, Deepak Jois <deepak.jois at gmail.com> wrote:

> I am still digging into this?
>
> On Mon, Nov 16, 2015 at 11:21 PM, Deepak Jois <deepak.jois at gmail.com>
> wrote:
>
> > Like I said before, when I build luatex with --nostrip, it works fine.
> > Has this ever been enabled by default?
> >
>
> I ran into this mailing thread on tlbuild about stripping luatex binary
>
> * Part 1: http://tug.org/pipermail/tlbuild/2011q2/001842.html
> * Part 2: http://tug.org/pipermail/tlbuild/2011q1/001832.html
>
> There is also this bug: http://tracker.luatex.org/view.php?id=555
>
> The mailing list discussion is inconclusive. The bug report says that
> ?seems to be resolved by --nostrip flag?, but it looks like the luatex
> binary in TeXLive as well as in trunk is stripped.
>
>
yes, could be.


> It is still not clear to me if loading .so libraries is supported on OS X.
>
> Anyway, as an alternative I can use my own luatex binary compiled with
> --nostrip. Could somebody tell me how I go about using it with a .tex
> file? Do I need some sort of alternative TeXLive-like environment? How
> do I go about building that?
>
> Deepak
>
> No, the texlive is ok, but unfortunately the 0.85 breaks compatibility.
So you should wait until things are updated, or just use your compiled
version.
The current TL uses 0.80.0, and you can find the source at
https://foundry.supelec.fr/scm/viewvc.php/tags/beta-0.80.0/?root=luatex

You should have no problem to compile it and replace the standard binary of
TL
(and rebuild the formats, to be sure).

If it works for you , can you try
strip -u -r luatex
as reported by Tantau at
http://tracker.luatex.org/view.php?id=555 ?

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20151117/8326860f/attachment.html>

From pragma at wxs.nl  Tue Nov 17 09:27:05 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Tue, 17 Nov 2015 09:27:05 +0100
Subject: [luatex] New \pdf... primitives
In-Reply-To: <564AD192.30905@morningstar2.co.uk>
References: <564A5B1D.7080302@morningstar2.co.uk>
 <564AD192.30905@morningstar2.co.uk>
Message-ID: <564AE4D9.2020303@wxs.nl>

On 11/17/2015 8:04 AM, Joseph Wright wrote:
> On 16/11/2015 22:39, Joseph Wright wrote:
>> Hello all,
>>
>> Setting up some tests to work with the v0.85 code, I notice that the
>> suggestion in the manual
>>
>>    \edef\pdfhorigin{\pdfvariable horigin}
>>
>> yields with \show\pdfhorigin
>>
>>    \pdf_horigin=\pdf_horigin
>>
>> which is accessible using \csname or catcode changes. That seems odd
>> based on the fact this change has been made at all: is this a passing bug?
>>
>> Joseph
>>
>
> Related to this, I wonder if \pdfvariable should be (effectively)
> \protected. Normally one would expect primitives to either fully expand
> to a result or to act like \protected macros. Here, we have an
> intermediate case as \pdfvariable does expand but only as far as an
> internal token.

you can wrap it like you want:

\protected\def\pdfhorigin{\pdfvariable horigin}

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From mojca.miklavec.lists at gmail.com  Tue Nov 17 09:51:22 2015
From: mojca.miklavec.lists at gmail.com (Mojca Miklavec)
Date: Tue, 17 Nov 2015 09:51:22 +0100
Subject: [luatex] Using a Lua C .so module with LuaLaTeX
In-Reply-To: <CAG5iGsC_Th1TbaXB8hH11rfuP+K14j8P-H26LxTrxAx0zJG-ug@mail.gmail.com>
References: <CABR1-XYwnEfhoSVcRYp8NNZNZxT-mCPsUhtzVWj0n=yA-V=s0w@mail.gmail.com>
 <CABR1-XbsZ5DzvYf9WYFNZ8QHJEYWjNYP9ePKab4q2yno8KStXQ@mail.gmail.com>
 <CAG5iGsA4Oq0TAhxwMmDsM+QuTPBL-TN69+z61H_vz_Bro4kBkQ@mail.gmail.com>
 <CAG5iGsAcQKKr+fuVqSgrbfUyAocaUrvaBuQWF=XLvAXWzgOASQ@mail.gmail.com>
 <CABR1-XbSSfX=qvRv1VGbkmmURdBmj9rZ6Zp05oCPNfQU-TR4uw@mail.gmail.com>
 <CABR1-XZB9fMSEwV=hWTsQWaxnnVPcP1TWccsfZBD7mivcHxPsw@mail.gmail.com>
 <CABR1-XZ1n-aiMXRbcu_00Uo7+-jPJX+f683Vx1Wi5THLNEXOpQ@mail.gmail.com>
 <CAG5iGsC_Th1TbaXB8hH11rfuP+K14j8P-H26LxTrxAx0zJG-ug@mail.gmail.com>
Message-ID: <CALBOmsagG3nU8QZiVe6AscmMA+td9-AsMYgJEp2aiB1UZMM6wA@mail.gmail.com>

On Tue, Nov 17, 2015 at 9:12 AM, luigi scarso wrote:
>
> If it works for you , can you try
> strip -u -r luatex
> as reported by Tantau at
> http://tracker.luatex.org/view.php?id=555 ?

If that is the case, we could introduce STRIPFLAGS in LuaTeX's
build.sh and set it to "-u -r". Either unconditionally or
conditionally on OS X only (in case it has undesired side effects on
other platforms). Something similar could be replicated in TeX Live's
sources then.

Man page says:
  When  an  executable  is  built  with  all its dependent dynamic shared
  libraries, it is typically stripped with:
         % strip -u -r executable
  which saves all undefined  symbols  (usually  defined  in  the  dynamic
  shared libraries) and all global symbols defined in the executable ref-
  erenced by the dynamic libraries (as marked by the static  link  editor
  when  the executable was built).  This is the maximum level of striping
  for an executable that will still allow the program  to  run  correctly
  with its libraries.

I still need to learn how to test that. We were discussing about
providing some precompiled modules at some point, so I should better
learn it at some point anyway.

Mojca

From deepak.jois at gmail.com  Tue Nov 17 10:17:25 2015
From: deepak.jois at gmail.com (Deepak Jois)
Date: Tue, 17 Nov 2015 14:47:25 +0530
Subject: [luatex] Using a Lua C .so module with LuaLaTeX
In-Reply-To: <CAG5iGsC_Th1TbaXB8hH11rfuP+K14j8P-H26LxTrxAx0zJG-ug@mail.gmail.com>
References: <CABR1-XYwnEfhoSVcRYp8NNZNZxT-mCPsUhtzVWj0n=yA-V=s0w@mail.gmail.com>
 <CABR1-XbsZ5DzvYf9WYFNZ8QHJEYWjNYP9ePKab4q2yno8KStXQ@mail.gmail.com>
 <CAG5iGsA4Oq0TAhxwMmDsM+QuTPBL-TN69+z61H_vz_Bro4kBkQ@mail.gmail.com>
 <CAG5iGsAcQKKr+fuVqSgrbfUyAocaUrvaBuQWF=XLvAXWzgOASQ@mail.gmail.com>
 <CABR1-XbSSfX=qvRv1VGbkmmURdBmj9rZ6Zp05oCPNfQU-TR4uw@mail.gmail.com>
 <CABR1-XZB9fMSEwV=hWTsQWaxnnVPcP1TWccsfZBD7mivcHxPsw@mail.gmail.com>
 <CABR1-XZ1n-aiMXRbcu_00Uo7+-jPJX+f683Vx1Wi5THLNEXOpQ@mail.gmail.com>
 <CAG5iGsC_Th1TbaXB8hH11rfuP+K14j8P-H26LxTrxAx0zJG-ug@mail.gmail.com>
Message-ID: <CABR1-XYfsxgzrZpZzZSS3LiioiX3Emf8fbSBnGw-PK6mXvTc_A@mail.gmail.com>

On Tue, Nov 17, 2015 at 1:42 PM, luigi scarso <luigi.scarso at gmail.com> wrote:
> No, the texlive is ok, but unfortunately the 0.85 breaks compatibility.
> So you should wait until things are updated, or just use your compiled
> version.
> The current TL uses 0.80.0, and you can find the source at
> https://foundry.supelec.fr/scm/viewvc.php/tags/beta-0.80.0/?root=luatex
>
> You should have no problem to compile it and replace the standard binary of
> TL
> (and rebuild the formats, to be sure).
>

Thank you. I checked out v0.80, compiled luatex with --nostrip option,
copied the luatex binary to my TeXLive distribution, rebuilt the
formats (with fmtutil --byengine luatex), and everything worked after
that.

I definitely had to rebuild the formats to get it working. (otherwise
it gave me the dreaded ?I?m stymied error?)

> If it works for you , can you try
> strip -u -r luatex
> as reported by Tantau at
> http://tracker.luatex.org/view.php?id=555 ?

I copied over the binary to another file called luatex-stripped and
ran strip -u -r  on that. Both copies seem to load the shared library
just fine. Here are the results:

$> cp luatex luatex-stripped

$> nm luatex | wc -l
24277

$> strip -u -r luatex-stripped

$> nm luatex-stripped | wc -l
363

$> ~/code/personal/luatex/v-0.80/bin/luatex --luaonly test.lua
Deepak

$> ~/code/personal/luatex/v-0.80/bin/luatex-stripped --luaonly test.lua
Deepak

So I guess it is an option to use strip -u -r luatex


From luigi.scarso at gmail.com  Tue Nov 17 10:23:24 2015
From: luigi.scarso at gmail.com (luigi scarso)
Date: Tue, 17 Nov 2015 10:23:24 +0100
Subject: [luatex] Using a Lua C .so module with LuaLaTeX
In-Reply-To: <CABR1-XYfsxgzrZpZzZSS3LiioiX3Emf8fbSBnGw-PK6mXvTc_A@mail.gmail.com>
References: <CABR1-XYwnEfhoSVcRYp8NNZNZxT-mCPsUhtzVWj0n=yA-V=s0w@mail.gmail.com>
 <CABR1-XbsZ5DzvYf9WYFNZ8QHJEYWjNYP9ePKab4q2yno8KStXQ@mail.gmail.com>
 <CAG5iGsA4Oq0TAhxwMmDsM+QuTPBL-TN69+z61H_vz_Bro4kBkQ@mail.gmail.com>
 <CAG5iGsAcQKKr+fuVqSgrbfUyAocaUrvaBuQWF=XLvAXWzgOASQ@mail.gmail.com>
 <CABR1-XbSSfX=qvRv1VGbkmmURdBmj9rZ6Zp05oCPNfQU-TR4uw@mail.gmail.com>
 <CABR1-XZB9fMSEwV=hWTsQWaxnnVPcP1TWccsfZBD7mivcHxPsw@mail.gmail.com>
 <CABR1-XZ1n-aiMXRbcu_00Uo7+-jPJX+f683Vx1Wi5THLNEXOpQ@mail.gmail.com>
 <CAG5iGsC_Th1TbaXB8hH11rfuP+K14j8P-H26LxTrxAx0zJG-ug@mail.gmail.com>
 <CABR1-XYfsxgzrZpZzZSS3LiioiX3Emf8fbSBnGw-PK6mXvTc_A@mail.gmail.com>
Message-ID: <CAG5iGsB9fyn2WxAm+kABcUrdoc5yi4Am_rvydzeq21YGV3HEiw@mail.gmail.com>

On Tue, Nov 17, 2015 at 10:17 AM, Deepak Jois <deepak.jois at gmail.com> wrote:

> On Tue, Nov 17, 2015 at 1:42 PM, luigi scarso <luigi.scarso at gmail.com>
> wrote:
> > No, the texlive is ok, but unfortunately the 0.85 breaks compatibility.
> > So you should wait until things are updated, or just use your compiled
> > version.
> > The current TL uses 0.80.0, and you can find the source at
> > https://foundry.supelec.fr/scm/viewvc.php/tags/beta-0.80.0/?root=luatex
> >
> > You should have no problem to compile it and replace the standard binary
> of
> > TL
> > (and rebuild the formats, to be sure).
> >
>
> Thank you. I checked out v0.80, compiled luatex with --nostrip option,
> copied the luatex binary to my TeXLive distribution, rebuilt the
> formats (with fmtutil --byengine luatex), and everything worked after
> that.
>
> I definitely had to rebuild the formats to get it working. (otherwise
> it gave me the dreaded ?I?m stymied error?)
>
> > If it works for you , can you try
> > strip -u -r luatex
> > as reported by Tantau at
> > http://tracker.luatex.org/view.php?id=555 ?
>
> I copied over the binary to another file called luatex-stripped and
> ran strip -u -r  on that. Both copies seem to load the shared library
> just fine. Here are the results:
>
> $> cp luatex luatex-stripped
>
> $> nm luatex | wc -l
> 24277
>
> $> strip -u -r luatex-stripped
>
> $> nm luatex-stripped | wc -l
> 363
>
> $> ~/code/personal/luatex/v-0.80/bin/luatex --luaonly test.lua
> Deepak
>
> $> ~/code/personal/luatex/v-0.80/bin/luatex-stripped --luaonly test.lua
> Deepak
>
> So I guess it is an option to use strip -u -r luatex
>
>
Ok, good. What is the difference in bytes of the two binaries ?

At
http://lua-users.org/wiki/BuildingModules
Mac OS X bundles (only for Lua 5.1.0 - Lua 5.1.2)
there is a note on unloading modules. Are you able to check it ?
It seems that there is not that problem here.


-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20151117/c02c6ebf/attachment-0001.html>

From deepak.jois at gmail.com  Tue Nov 17 10:41:16 2015
From: deepak.jois at gmail.com (Deepak Jois)
Date: Tue, 17 Nov 2015 15:11:16 +0530
Subject: [luatex] Using a Lua C .so module with LuaLaTeX
In-Reply-To: <CAG5iGsB9fyn2WxAm+kABcUrdoc5yi4Am_rvydzeq21YGV3HEiw@mail.gmail.com>
References: <CABR1-XYwnEfhoSVcRYp8NNZNZxT-mCPsUhtzVWj0n=yA-V=s0w@mail.gmail.com>
 <CABR1-XbsZ5DzvYf9WYFNZ8QHJEYWjNYP9ePKab4q2yno8KStXQ@mail.gmail.com>
 <CAG5iGsA4Oq0TAhxwMmDsM+QuTPBL-TN69+z61H_vz_Bro4kBkQ@mail.gmail.com>
 <CAG5iGsAcQKKr+fuVqSgrbfUyAocaUrvaBuQWF=XLvAXWzgOASQ@mail.gmail.com>
 <CABR1-XbSSfX=qvRv1VGbkmmURdBmj9rZ6Zp05oCPNfQU-TR4uw@mail.gmail.com>
 <CABR1-XZB9fMSEwV=hWTsQWaxnnVPcP1TWccsfZBD7mivcHxPsw@mail.gmail.com>
 <CABR1-XZ1n-aiMXRbcu_00Uo7+-jPJX+f683Vx1Wi5THLNEXOpQ@mail.gmail.com>
 <CAG5iGsC_Th1TbaXB8hH11rfuP+K14j8P-H26LxTrxAx0zJG-ug@mail.gmail.com>
 <CABR1-XYfsxgzrZpZzZSS3LiioiX3Emf8fbSBnGw-PK6mXvTc_A@mail.gmail.com>
 <CAG5iGsB9fyn2WxAm+kABcUrdoc5yi4Am_rvydzeq21YGV3HEiw@mail.gmail.com>
Message-ID: <CABR1-XbLx8Mtni1pumhNunF7JiDx3Bp=T+Ghu5z0efaBD4SErg@mail.gmail.com>

On Tue, Nov 17, 2015 at 2:53 PM, luigi scarso <luigi.scarso at gmail.com> wrote:
> Ok, good. What is the difference in bytes of the two binaries ?
>

$> du luatex luatex-stripped
27000   luatex
25272   luatex-stripped

> At
> http://lua-users.org/wiki/BuildingModules
> Mac OS X bundles (only for Lua 5.1.0 - Lua 5.1.2)
> there is a note on unloading modules. Are you able to check it ?
> It seems that there is not that problem here.

I can?t see how that related to what we are discussing here. The note
refers to ?Modules that use obj-c? (the module I have is using plain
C). Moreover as the heading says, it is only relevant to (Lua 5.1.0 -
Lua 5.1.2). I have Lua 5.2 and so is the version of Lua embedded
inside LuaTeX.

What do you want me to check, exactly. Could you be more specific please?

Deepak


From d.p.carlisle at gmail.com  Tue Nov 17 12:01:30 2015
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Tue, 17 Nov 2015 11:01:30 +0000
Subject: [luatex] New \pdf... primitives
In-Reply-To: <564AE4D9.2020303@wxs.nl>
References: <564A5B1D.7080302@morningstar2.co.uk>
 <564AD192.30905@morningstar2.co.uk>	<564AE4D9.2020303@wxs.nl>
Message-ID: <CAEW6iOifc74KBxY50DCL7vq6NFmns-vrkoL_MDTv6mqTM4PEBw@mail.gmail.com>

On 17 November 2015 at 08:27, Hans Hagen <pragma at wxs.nl> wrote:
> On 11/17/2015 8:04 AM, Joseph Wright wrote:
>>
>> On 16/11/2015 22:39, Joseph Wright wrote:
>>>
>>> Hello all,
>>>
>>> Setting up some tests to work with the v0.85 code, I notice that the
>>> suggestion in the manual
>>>
>>>    \edef\pdfhorigin{\pdfvariable horigin}
>>>
>>> yields with \show\pdfhorigin
>>>
>>>    \pdf_horigin=\pdf_horigin
>>>
>>> which is accessible using \csname or catcode changes. That seems odd
>>> based on the fact this change has been made at all: is this a passing
>>> bug?
>>>
>>> Joseph
>>>
>>
>> Related to this, I wonder if \pdfvariable should be (effectively)
>> \protected. Normally one would expect primitives to either fully expand
>> to a result or to act like \protected macros. Here, we have an
>> intermediate case as \pdfvariable does expand but only as far as an
>> internal token.
>
>
> you can wrap it like you want:
>
> \protected\def\pdfhorigin{\pdfvariable horigin}
>

That isn't what Joseph meant, he meant to change the behaviour of \pdfvariable
which is rather unusual (to say the least!!)  in the way it behaves
under expansion.

It would seem that presently, for a format that needs to maintain
input compatibility
as far as possible between pdftex and luatex, it would be best to
avoid \pdfvariable
and just use for example

\let\pdfhorigin\pdf_horigin

so that the command becomes a non-expandable dimen-like token under
both engines.

It's worrying that that seems to be against the spirit of the change
(and not guaranteed to work if the
internal token changes in future)  which is why we were experimenting
to find out what the syntax and
expansion behaviour of \pdfvariable are (as it is currently
undocumented in the manual)


David

From mojca.miklavec.lists at gmail.com  Tue Nov 17 12:23:40 2015
From: mojca.miklavec.lists at gmail.com (Mojca Miklavec)
Date: Tue, 17 Nov 2015 12:23:40 +0100
Subject: [luatex] Using a Lua C .so module with LuaLaTeX
In-Reply-To: <CABR1-XbLx8Mtni1pumhNunF7JiDx3Bp=T+Ghu5z0efaBD4SErg@mail.gmail.com>
References: <CABR1-XYwnEfhoSVcRYp8NNZNZxT-mCPsUhtzVWj0n=yA-V=s0w@mail.gmail.com>
 <CABR1-XbsZ5DzvYf9WYFNZ8QHJEYWjNYP9ePKab4q2yno8KStXQ@mail.gmail.com>
 <CAG5iGsA4Oq0TAhxwMmDsM+QuTPBL-TN69+z61H_vz_Bro4kBkQ@mail.gmail.com>
 <CAG5iGsAcQKKr+fuVqSgrbfUyAocaUrvaBuQWF=XLvAXWzgOASQ@mail.gmail.com>
 <CABR1-XbSSfX=qvRv1VGbkmmURdBmj9rZ6Zp05oCPNfQU-TR4uw@mail.gmail.com>
 <CABR1-XZB9fMSEwV=hWTsQWaxnnVPcP1TWccsfZBD7mivcHxPsw@mail.gmail.com>
 <CABR1-XZ1n-aiMXRbcu_00Uo7+-jPJX+f683Vx1Wi5THLNEXOpQ@mail.gmail.com>
 <CAG5iGsC_Th1TbaXB8hH11rfuP+K14j8P-H26LxTrxAx0zJG-ug@mail.gmail.com>
 <CABR1-XYfsxgzrZpZzZSS3LiioiX3Emf8fbSBnGw-PK6mXvTc_A@mail.gmail.com>
 <CAG5iGsB9fyn2WxAm+kABcUrdoc5yi4Am_rvydzeq21YGV3HEiw@mail.gmail.com>
 <CABR1-XbLx8Mtni1pumhNunF7JiDx3Bp=T+Ghu5z0efaBD4SErg@mail.gmail.com>
Message-ID: <CALBOmsZfshy73vENwOZZitLv5r3kQqXznOFvO6o03hjxH7tupQ@mail.gmail.com>

On Tue, Nov 17, 2015 at 10:41 AM, Deepak Jois wrote:
> On Tue, Nov 17, 2015 at 2:53 PM, luigi scarso wrote:
>> Ok, good. What is the difference in bytes of the two binaries ?
>>
>
> $> du luatex luatex-stripped
> 27000   luatex
> 25272   luatex-stripped

What exactly do these numbers mean?

With "ls -l" I get

14865104 luatex-strippped (if I manually strip the binary)
15824232 luatex

If I run the normal build (without --nostrip) I get 8999388 bytes.

Luigi, what exactly does the following chunk of code do in build.sh?

if [ "$STRIP_LUATEX" = "FALSE" ]
then
    export CFLAGS
    export CXXFLAGS
fi

I don't understand why I get different results if I manually strip the
binary or if the build.sh strips it unless the binary actually gets
compiled in a different way (with different flags / different
optimization) depending on the presence of --nostrip option.

Mojca

From deepak.jois at gmail.com  Tue Nov 17 12:39:27 2015
From: deepak.jois at gmail.com (Deepak Jois)
Date: Tue, 17 Nov 2015 17:09:27 +0530
Subject: [luatex] Using a Lua C .so module with LuaLaTeX
In-Reply-To: <CALBOmsZfshy73vENwOZZitLv5r3kQqXznOFvO6o03hjxH7tupQ@mail.gmail.com>
References: <CABR1-XYwnEfhoSVcRYp8NNZNZxT-mCPsUhtzVWj0n=yA-V=s0w@mail.gmail.com>
 <CABR1-XbsZ5DzvYf9WYFNZ8QHJEYWjNYP9ePKab4q2yno8KStXQ@mail.gmail.com>
 <CAG5iGsA4Oq0TAhxwMmDsM+QuTPBL-TN69+z61H_vz_Bro4kBkQ@mail.gmail.com>
 <CAG5iGsAcQKKr+fuVqSgrbfUyAocaUrvaBuQWF=XLvAXWzgOASQ@mail.gmail.com>
 <CABR1-XbSSfX=qvRv1VGbkmmURdBmj9rZ6Zp05oCPNfQU-TR4uw@mail.gmail.com>
 <CABR1-XZB9fMSEwV=hWTsQWaxnnVPcP1TWccsfZBD7mivcHxPsw@mail.gmail.com>
 <CABR1-XZ1n-aiMXRbcu_00Uo7+-jPJX+f683Vx1Wi5THLNEXOpQ@mail.gmail.com>
 <CAG5iGsC_Th1TbaXB8hH11rfuP+K14j8P-H26LxTrxAx0zJG-ug@mail.gmail.com>
 <CABR1-XYfsxgzrZpZzZSS3LiioiX3Emf8fbSBnGw-PK6mXvTc_A@mail.gmail.com>
 <CAG5iGsB9fyn2WxAm+kABcUrdoc5yi4Am_rvydzeq21YGV3HEiw@mail.gmail.com>
 <CABR1-XbLx8Mtni1pumhNunF7JiDx3Bp=T+Ghu5z0efaBD4SErg@mail.gmail.com>
 <CALBOmsZfshy73vENwOZZitLv5r3kQqXznOFvO6o03hjxH7tupQ@mail.gmail.com>
Message-ID: <CABR1-XYKA1ho2M3YkLvFRacFyEYF-cCy1ndmjihso2QA2KxD5w@mail.gmail.com>

On Tue, Nov 17, 2015 at 4:53 PM, Mojca Miklavec
<mojca.miklavec.lists at gmail.com> wrote:
> What exactly do these numbers mean?

du reports the data usage of the file in 512-byte block counts

Here are the same numbers using ls -l. This time I am including
numbers for three files ? luatex (standard build binary),
luatex-nostrip (compiled with --nostrip), luatex-stripped (manually
stripped binary):

8632136 luatex
13822688 luatex-nostrip
12938864 luatex-stripped

Deepak


From luigi.scarso at gmail.com  Tue Nov 17 12:48:22 2015
From: luigi.scarso at gmail.com (luigi scarso)
Date: Tue, 17 Nov 2015 12:48:22 +0100
Subject: [luatex] Using a Lua C .so module with LuaLaTeX
In-Reply-To: <CALBOmsZfshy73vENwOZZitLv5r3kQqXznOFvO6o03hjxH7tupQ@mail.gmail.com>
References: <CABR1-XYwnEfhoSVcRYp8NNZNZxT-mCPsUhtzVWj0n=yA-V=s0w@mail.gmail.com>
 <CABR1-XbsZ5DzvYf9WYFNZ8QHJEYWjNYP9ePKab4q2yno8KStXQ@mail.gmail.com>
 <CAG5iGsA4Oq0TAhxwMmDsM+QuTPBL-TN69+z61H_vz_Bro4kBkQ@mail.gmail.com>
 <CAG5iGsAcQKKr+fuVqSgrbfUyAocaUrvaBuQWF=XLvAXWzgOASQ@mail.gmail.com>
 <CABR1-XbSSfX=qvRv1VGbkmmURdBmj9rZ6Zp05oCPNfQU-TR4uw@mail.gmail.com>
 <CABR1-XZB9fMSEwV=hWTsQWaxnnVPcP1TWccsfZBD7mivcHxPsw@mail.gmail.com>
 <CABR1-XZ1n-aiMXRbcu_00Uo7+-jPJX+f683Vx1Wi5THLNEXOpQ@mail.gmail.com>
 <CAG5iGsC_Th1TbaXB8hH11rfuP+K14j8P-H26LxTrxAx0zJG-ug@mail.gmail.com>
 <CABR1-XYfsxgzrZpZzZSS3LiioiX3Emf8fbSBnGw-PK6mXvTc_A@mail.gmail.com>
 <CAG5iGsB9fyn2WxAm+kABcUrdoc5yi4Am_rvydzeq21YGV3HEiw@mail.gmail.com>
 <CABR1-XbLx8Mtni1pumhNunF7JiDx3Bp=T+Ghu5z0efaBD4SErg@mail.gmail.com>
 <CALBOmsZfshy73vENwOZZitLv5r3kQqXznOFvO6o03hjxH7tupQ@mail.gmail.com>
Message-ID: <CAG5iGsB5m77pW5aDUmY_q7Q9uMxz0HD+9Tzy1qLHX3x6cArGBg@mail.gmail.com>

On Tue, Nov 17, 2015 at 12:23 PM, Mojca Miklavec <
mojca.miklavec.lists at gmail.com> wrote:

> On Tue, Nov 17, 2015 at 10:41 AM, Deepak Jois wrote:
> > On Tue, Nov 17, 2015 at 2:53 PM, luigi scarso wrote:
> >> Ok, good. What is the difference in bytes of the two binaries ?
> >>
> >
> > $> du luatex luatex-stripped
> > 27000   luatex
> > 25272   luatex-stripped
>
> What exactly do these numbers mean?
>
> With "ls -l" I get
>
> 14865104 luatex-strippped (if I manually strip the binary)
> 15824232 luatex
>
> If I run the normal build (without --nostrip) I get 8999388 bytes.
>
> Luigi, what exactly does the following chunk of code do in build.sh?
>
> if [ "$STRIP_LUATEX" = "FALSE" ]
> then
>     export CFLAGS
>     export CXXFLAGS
> fi
>

uh.. it's there from beta-0.72.0.. I don't remember.
Could be a leftover from the --debug switch, probably not all the code
taken the -g switches correctly at that time.
We will  remove for TL 2016, if the case.



-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20151117/905cbf02/attachment.html>

From mojca.miklavec.lists at gmail.com  Tue Nov 17 13:14:38 2015
From: mojca.miklavec.lists at gmail.com (Mojca Miklavec)
Date: Tue, 17 Nov 2015 13:14:38 +0100
Subject: [luatex] Using a Lua C .so module with LuaLaTeX
In-Reply-To: <CAG5iGsB5m77pW5aDUmY_q7Q9uMxz0HD+9Tzy1qLHX3x6cArGBg@mail.gmail.com>
References: <CABR1-XYwnEfhoSVcRYp8NNZNZxT-mCPsUhtzVWj0n=yA-V=s0w@mail.gmail.com>
 <CABR1-XbsZ5DzvYf9WYFNZ8QHJEYWjNYP9ePKab4q2yno8KStXQ@mail.gmail.com>
 <CAG5iGsA4Oq0TAhxwMmDsM+QuTPBL-TN69+z61H_vz_Bro4kBkQ@mail.gmail.com>
 <CAG5iGsAcQKKr+fuVqSgrbfUyAocaUrvaBuQWF=XLvAXWzgOASQ@mail.gmail.com>
 <CABR1-XbSSfX=qvRv1VGbkmmURdBmj9rZ6Zp05oCPNfQU-TR4uw@mail.gmail.com>
 <CABR1-XZB9fMSEwV=hWTsQWaxnnVPcP1TWccsfZBD7mivcHxPsw@mail.gmail.com>
 <CABR1-XZ1n-aiMXRbcu_00Uo7+-jPJX+f683Vx1Wi5THLNEXOpQ@mail.gmail.com>
 <CAG5iGsC_Th1TbaXB8hH11rfuP+K14j8P-H26LxTrxAx0zJG-ug@mail.gmail.com>
 <CABR1-XYfsxgzrZpZzZSS3LiioiX3Emf8fbSBnGw-PK6mXvTc_A@mail.gmail.com>
 <CAG5iGsB9fyn2WxAm+kABcUrdoc5yi4Am_rvydzeq21YGV3HEiw@mail.gmail.com>
 <CABR1-XbLx8Mtni1pumhNunF7JiDx3Bp=T+Ghu5z0efaBD4SErg@mail.gmail.com>
 <CALBOmsZfshy73vENwOZZitLv5r3kQqXznOFvO6o03hjxH7tupQ@mail.gmail.com>
 <CAG5iGsB5m77pW5aDUmY_q7Q9uMxz0HD+9Tzy1qLHX3x6cArGBg@mail.gmail.com>
Message-ID: <CALBOmsaSybLgMKnC8JBvBY1dZx=ukb=ZwzGnU6Y3msta=uB8BA@mail.gmail.com>

On Tue, Nov 17, 2015 at 12:48 PM, luigi scarso wrote:
>
>> Luigi, what exactly does the following chunk of code do in build.sh?
>>
>> if [ "$STRIP_LUATEX" = "FALSE" ]
>> then
>>     export CFLAGS
>>     export CXXFLAGS
>> fi
>
>
> uh.. it's there from beta-0.72.0.. I don't remember.
> Could be a leftover from the --debug switch, probably not all the code taken
> the -g switches correctly at that time.
> We will  remove for TL 2016, if the case.

My question is: can you explain the difference?

I'm unable to understand what is different when you call that export
and when you don't. Because the --nostrip binaries are 50% bigger even
after I run strip manually and this seems like the only place one
could blame for the difference.

Mojca

From pragma at wxs.nl  Tue Nov 17 13:32:25 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Tue, 17 Nov 2015 13:32:25 +0100
Subject: [luatex] New \pdf... primitives
In-Reply-To: <CAEW6iOifc74KBxY50DCL7vq6NFmns-vrkoL_MDTv6mqTM4PEBw@mail.gmail.com>
References: <564A5B1D.7080302@morningstar2.co.uk>
 <564AD192.30905@morningstar2.co.uk> <564AE4D9.2020303@wxs.nl>
 <CAEW6iOifc74KBxY50DCL7vq6NFmns-vrkoL_MDTv6mqTM4PEBw@mail.gmail.com>
Message-ID: <564B1E59.9000700@wxs.nl>

On 11/17/2015 12:01 PM, David Carlisle wrote:
> On 17 November 2015 at 08:27, Hans Hagen <pragma at wxs.nl> wrote:
>> On 11/17/2015 8:04 AM, Joseph Wright wrote:
>>>
>>> On 16/11/2015 22:39, Joseph Wright wrote:
>>>>
>>>> Hello all,
>>>>
>>>> Setting up some tests to work with the v0.85 code, I notice that the
>>>> suggestion in the manual
>>>>
>>>>     \edef\pdfhorigin{\pdfvariable horigin}
>>>>
>>>> yields with \show\pdfhorigin
>>>>
>>>>     \pdf_horigin=\pdf_horigin
>>>>
>>>> which is accessible using \csname or catcode changes. That seems odd
>>>> based on the fact this change has been made at all: is this a passing
>>>> bug?
>>>>
>>>> Joseph
>>>>
>>>
>>> Related to this, I wonder if \pdfvariable should be (effectively)
>>> \protected. Normally one would expect primitives to either fully expand
>>> to a result or to act like \protected macros. Here, we have an
>>> intermediate case as \pdfvariable does expand but only as far as an
>>> internal token.
>>
>>
>> you can wrap it like you want:
>>
>> \protected\def\pdfhorigin{\pdfvariable horigin}
>>
>
> That isn't what Joseph meant, he meant to change the behaviour of \pdfvariable
> which is rather unusual (to say the least!!)  in the way it behaves
> under expansion.
>
> It would seem that presently, for a format that needs to maintain
> input compatibility
> as far as possible between pdftex and luatex, it would be best to
> avoid \pdfvariable
> and just use for example
>
> \let\pdfhorigin\pdf_horigin
>
> so that the command becomes a non-expandable dimen-like token under
> both engines.
>
> It's worrying that that seems to be against the spirit of the change
> (and not guaranteed to work if the
> internal token changes in future)  which is why we were experimenting
> to find out what the syntax and
> expansion behaviour of \pdfvariable are (as it is currently
> undocumented in the manual)

basically they are similar to how things are done at the lua end: a 
lookup based on name; then teh result is pushed back into the input

that makes it possible to use \the etc (of course i don't mind making 
them just assignments and report token digits but that is definitely not 
compatible with what macro packages expect i.e. barking on \the)

(i'll probably try to redo them some day using the lua token scanner but 
then i first need to add something to that)

anyway, i did consider making a setter (\pdfvariable for variables) and 
that then the only way to get the value is to use \pdffeedback, also 
because at some point setting a variable is not per se reflected in its 
value, e.g. some states are frozen once the first page is flushed)

(keep in mind that some never lived in the frontend)

but the current solution at least permits to do the same things as 
before (i have no clue how many of your users (can) use these low level 
primitives ... in context there has been backend abstraction layers for 
decades so there it's less an issue i guess)

i'll change the error to

! unexpected use of \pdfvariable

<to be read again>
\relax
l.3 \pdfvariable \relax

fwiw

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From mojca.miklavec.lists at gmail.com  Tue Nov 17 13:50:28 2015
From: mojca.miklavec.lists at gmail.com (Mojca Miklavec)
Date: Tue, 17 Nov 2015 13:50:28 +0100
Subject: [luatex] Using a Lua C .so module with LuaLaTeX
In-Reply-To: <CABR1-XYKA1ho2M3YkLvFRacFyEYF-cCy1ndmjihso2QA2KxD5w@mail.gmail.com>
References: <CABR1-XYwnEfhoSVcRYp8NNZNZxT-mCPsUhtzVWj0n=yA-V=s0w@mail.gmail.com>
 <CABR1-XbsZ5DzvYf9WYFNZ8QHJEYWjNYP9ePKab4q2yno8KStXQ@mail.gmail.com>
 <CAG5iGsA4Oq0TAhxwMmDsM+QuTPBL-TN69+z61H_vz_Bro4kBkQ@mail.gmail.com>
 <CAG5iGsAcQKKr+fuVqSgrbfUyAocaUrvaBuQWF=XLvAXWzgOASQ@mail.gmail.com>
 <CABR1-XbSSfX=qvRv1VGbkmmURdBmj9rZ6Zp05oCPNfQU-TR4uw@mail.gmail.com>
 <CABR1-XZB9fMSEwV=hWTsQWaxnnVPcP1TWccsfZBD7mivcHxPsw@mail.gmail.com>
 <CABR1-XZ1n-aiMXRbcu_00Uo7+-jPJX+f683Vx1Wi5THLNEXOpQ@mail.gmail.com>
 <CAG5iGsC_Th1TbaXB8hH11rfuP+K14j8P-H26LxTrxAx0zJG-ug@mail.gmail.com>
 <CABR1-XYfsxgzrZpZzZSS3LiioiX3Emf8fbSBnGw-PK6mXvTc_A@mail.gmail.com>
 <CAG5iGsB9fyn2WxAm+kABcUrdoc5yi4Am_rvydzeq21YGV3HEiw@mail.gmail.com>
 <CABR1-XbLx8Mtni1pumhNunF7JiDx3Bp=T+Ghu5z0efaBD4SErg@mail.gmail.com>
 <CALBOmsZfshy73vENwOZZitLv5r3kQqXznOFvO6o03hjxH7tupQ@mail.gmail.com>
 <CABR1-XYKA1ho2M3YkLvFRacFyEYF-cCy1ndmjihso2QA2KxD5w@mail.gmail.com>
Message-ID: <CALBOmsZY5eiOX8BAC0ouuSFpPuyQqiV+n5N_7YQGBYJqSQ97oQ@mail.gmail.com>

On Tue, Nov 17, 2015 at 12:39 PM, Deepak Jois wrote:
>
> Here are the same numbers using ls -l. This time I am including
> numbers for three files ? luatex (standard build binary),
> luatex-nostrip (compiled with --nostrip), luatex-stripped (manually
> stripped binary):
>
> 8632136 luatex
> 13822688 luatex-nostrip
> 12938864 luatex-stripped

Just to make it perfectly clear about what luatex-stripped is exactly,
can you please do another simple report:

    cp luatex-nostrip luatex-strip1
    cp luatex-nostrip luatex-strip2
    strip luatex-strip1
    strip -r -u luatex-strip2
    ls -l

Thank you,
    Mojca


From deepak.jois at gmail.com  Tue Nov 17 14:34:02 2015
From: deepak.jois at gmail.com (Deepak Jois)
Date: Tue, 17 Nov 2015 19:04:02 +0530
Subject: [luatex] Using a Lua C .so module with LuaLaTeX
In-Reply-To: <CALBOmsZY5eiOX8BAC0ouuSFpPuyQqiV+n5N_7YQGBYJqSQ97oQ@mail.gmail.com>
References: <CABR1-XYwnEfhoSVcRYp8NNZNZxT-mCPsUhtzVWj0n=yA-V=s0w@mail.gmail.com>
 <CABR1-XbsZ5DzvYf9WYFNZ8QHJEYWjNYP9ePKab4q2yno8KStXQ@mail.gmail.com>
 <CAG5iGsA4Oq0TAhxwMmDsM+QuTPBL-TN69+z61H_vz_Bro4kBkQ@mail.gmail.com>
 <CAG5iGsAcQKKr+fuVqSgrbfUyAocaUrvaBuQWF=XLvAXWzgOASQ@mail.gmail.com>
 <CABR1-XbSSfX=qvRv1VGbkmmURdBmj9rZ6Zp05oCPNfQU-TR4uw@mail.gmail.com>
 <CABR1-XZB9fMSEwV=hWTsQWaxnnVPcP1TWccsfZBD7mivcHxPsw@mail.gmail.com>
 <CABR1-XZ1n-aiMXRbcu_00Uo7+-jPJX+f683Vx1Wi5THLNEXOpQ@mail.gmail.com>
 <CAG5iGsC_Th1TbaXB8hH11rfuP+K14j8P-H26LxTrxAx0zJG-ug@mail.gmail.com>
 <CABR1-XYfsxgzrZpZzZSS3LiioiX3Emf8fbSBnGw-PK6mXvTc_A@mail.gmail.com>
 <CAG5iGsB9fyn2WxAm+kABcUrdoc5yi4Am_rvydzeq21YGV3HEiw@mail.gmail.com>
 <CABR1-XbLx8Mtni1pumhNunF7JiDx3Bp=T+Ghu5z0efaBD4SErg@mail.gmail.com>
 <CALBOmsZfshy73vENwOZZitLv5r3kQqXznOFvO6o03hjxH7tupQ@mail.gmail.com>
 <CABR1-XYKA1ho2M3YkLvFRacFyEYF-cCy1ndmjihso2QA2KxD5w@mail.gmail.com>
 <CALBOmsZY5eiOX8BAC0ouuSFpPuyQqiV+n5N_7YQGBYJqSQ97oQ@mail.gmail.com>
Message-ID: <CABR1-XYmdfuXV2xyX+Q5F4jBN4buSROkwQ2WVttc2L6FREFVuA@mail.gmail.com>

On Tue, Nov 17, 2015 at 6:20 PM, Mojca Miklavec
<mojca.miklavec.lists at gmail.com> wrote:
> Just to make it perfectly clear about what luatex-stripped is exactly,
> can you please do another simple report:
>
>     cp luatex-nostrip luatex-strip1
>     cp luatex-nostrip luatex-strip2
>     strip luatex-strip1
>     strip -r -u luatex-strip2
>     ls -l
>

No difference in size (I checked their MD5 values, they are different
files, for sure)

$> ls -al
12938864 luatex-strip1
12938864 luatex-strip2

The files are different
$> md5 luatex-strip1
MD5 (luatex-strip1) = a92f273967a66966eaad1f924f4f86a0

$> md5 luatex-strip2
MD5 (luatex-strip2) = 1c0ae92dae4e7d5d7a27a9ef6804c677


And _definitely_ a difference in behavior

$> ~/code/personal/luatex/v-0.80/bin/luatex-strip1 --luaonly test.lua
error loading module 'harfbuzz' from file './harfbuzz.so':
        dlopen(./harfbuzz.so, 6): Symbol not found: _luaL_setfuncs
  Referenced from: ./harfbuzz.so
  Expected in: flat namespace
 in ./harfbuzz.so


$> ~/code/personal/luatex/v-0.80/bin/luatex-strip2 --luaonly test.lua
Deepak

Regards
Deepak

From d.p.carlisle at gmail.com  Tue Nov 17 14:59:41 2015
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Tue, 17 Nov 2015 13:59:41 +0000
Subject: [luatex] New \pdf... primitives
In-Reply-To: <564B1E59.9000700@wxs.nl>
References: <564A5B1D.7080302@morningstar2.co.uk>
 <564AD192.30905@morningstar2.co.uk>	<564AE4D9.2020303@wxs.nl>
 <CAEW6iOifc74KBxY50DCL7vq6NFmns-vrkoL_MDTv6mqTM4PEBw@mail.gmail.com>
 <564B1E59.9000700@wxs.nl>
Message-ID: <CAEW6iOhOMJWMOkDuqBkVepScb_BW3p_WxKofyyF9NxWmtVBdEw@mail.gmail.com>

On 17 November 2015 at 12:32, Hans Hagen <pragma at wxs.nl> wrote:

>
> basically they are similar to how things are done at the lua end: a lookup
> based on name; then teh result is pushed back into the input
>
> that makes it possible to use \the etc (of course i don't mind making them
> just assignments and report token digits but that is definitely not
> compatible with what macro packages expect i.e. barking on \the)
>
> (i'll probably try to redo them some day using the lua token scanner but
> then i first need to add something to that)
>
> anyway, i did consider making a setter (\pdfvariable for variables) and that
> then the only way to get the value is to use \pdffeedback, also because at
> some point setting a variable is not per se reflected in its value, e.g.
> some states are frozen once the first page is flushed)
>
> (keep in mind that some never lived in the frontend)
>


Currently

\expandafter\def\csname pdf_horigin\endcsname{hello}

\edef\pdfhorigin{\pdfvariable horigin}


defines \pdfhorigin to be hello.  If this behaviour is
to be determined from the documented behaviour
then it seems that \pdf_horigin needs to be documented
as the new primitive name with \pdfvariable being documented
as some alternative syntax that expands to that.


If the \pdfvariable syntax is to be introduced it would be far more
natural to make it non expandable and so never exposing a csname for the
internal dimen register. (Still \the\pdfvariable horigin could expand
to the value
without having to expose \pdf_horigin)

Having several undocumented csnames which if redefined break
the documented behaviour of the \pdfvariable primitive seems
somewhat dangerous.


> but the current solution at least permits to do the same things as before (i
> have no clue how many of your users (can) use these low level primitives ...
> in context there has been backend abstraction layers for decades so there
> it's less an issue i guess)

I don't think number of users or level of abstraction is really the issue.
Someone (even if it's only Joseph and me) has to be able to maintain
the macro/format level interface to this and to be able to document/explain
the behaviour for any reasonable input.

Defining a command such as \pdf_compresslevel should not take the user
into undocumented
territory, and similarly using documented primitives such as

\expandafter\show\csname pdf_horigin\endcsname

should not show undocumented tokens whose behaviour can only be determined by
experimentation or reading the engine source.

The main difference between latex and context here is not really abstraction
but importance on maintaining compatibility at the input syntax level
across engines.
Obviously new functionality requires new syntax and sometimes the same syntax
will produce different output, but in general if someone wants to
switch a document from
pdflatex to lualatex there should be a small documented set of things
that need changing.
That isn't really an issue for context as you're luatex only.


>
> i'll change the error to
>
> ! unexpected use of \pdfvariable
>
> <to be read again>
> \relax
> l.3 \pdfvariable \relax
>
> fwiw

Thanks! That is much better in the error case, but the non-error case
is also problematic.

>
> Hans
>
>


David

I should say, that as usual you only get negative feedback on the
problematic things, hopefully
taken as constructive criticism from people trying to build a format
over the 0.85 engine.
All the good new features and bug fixes etc go without comment, that's
just the way it is:-)

From deepak.jois at gmail.com  Tue Nov 17 15:23:34 2015
From: deepak.jois at gmail.com (Deepak Jois)
Date: Tue, 17 Nov 2015 19:53:34 +0530
Subject: [luatex] Using a Lua C .so module with LuaLaTeX
In-Reply-To: <CALBOmsaSybLgMKnC8JBvBY1dZx=ukb=ZwzGnU6Y3msta=uB8BA@mail.gmail.com>
References: <CABR1-XYwnEfhoSVcRYp8NNZNZxT-mCPsUhtzVWj0n=yA-V=s0w@mail.gmail.com>
 <CABR1-XbsZ5DzvYf9WYFNZ8QHJEYWjNYP9ePKab4q2yno8KStXQ@mail.gmail.com>
 <CAG5iGsA4Oq0TAhxwMmDsM+QuTPBL-TN69+z61H_vz_Bro4kBkQ@mail.gmail.com>
 <CAG5iGsAcQKKr+fuVqSgrbfUyAocaUrvaBuQWF=XLvAXWzgOASQ@mail.gmail.com>
 <CABR1-XbSSfX=qvRv1VGbkmmURdBmj9rZ6Zp05oCPNfQU-TR4uw@mail.gmail.com>
 <CABR1-XZB9fMSEwV=hWTsQWaxnnVPcP1TWccsfZBD7mivcHxPsw@mail.gmail.com>
 <CABR1-XZ1n-aiMXRbcu_00Uo7+-jPJX+f683Vx1Wi5THLNEXOpQ@mail.gmail.com>
 <CAG5iGsC_Th1TbaXB8hH11rfuP+K14j8P-H26LxTrxAx0zJG-ug@mail.gmail.com>
 <CABR1-XYfsxgzrZpZzZSS3LiioiX3Emf8fbSBnGw-PK6mXvTc_A@mail.gmail.com>
 <CAG5iGsB9fyn2WxAm+kABcUrdoc5yi4Am_rvydzeq21YGV3HEiw@mail.gmail.com>
 <CABR1-XbLx8Mtni1pumhNunF7JiDx3Bp=T+Ghu5z0efaBD4SErg@mail.gmail.com>
 <CALBOmsZfshy73vENwOZZitLv5r3kQqXznOFvO6o03hjxH7tupQ@mail.gmail.com>
 <CAG5iGsB5m77pW5aDUmY_q7Q9uMxz0HD+9Tzy1qLHX3x6cArGBg@mail.gmail.com>
 <CALBOmsaSybLgMKnC8JBvBY1dZx=ukb=ZwzGnU6Y3msta=uB8BA@mail.gmail.com>
Message-ID: <CABR1-Xbub+vXzF4i7u=DsWeVfTb_K_pPHf_bj2Wp1pkC7qG0Yw@mail.gmail.com>

On Tue, Nov 17, 2015 at 5:44 PM, Mojca Miklavec
<mojca.miklavec.lists at gmail.com> wrote:
> On Tue, Nov 17, 2015 at 12:48 PM, luigi scarso wrote:
>>
>>> Luigi, what exactly does the following chunk of code do in build.sh?
>>>
>>> if [ "$STRIP_LUATEX" = "FALSE" ]
>>> then
>>>     export CFLAGS
>>>     export CXXFLAGS
>>> fi
>>
>>
>> uh.. it's there from beta-0.72.0.. I don't remember.
>> Could be a leftover from the --debug switch, probably not all the code taken
>> the -g switches correctly at that time.
>> We will  remove for TL 2016, if the case.
>
> My question is: can you explain the difference?
>
> I'm unable to understand what is different when you call that export
> and when you don't. Because the --nostrip binaries are 50% bigger even
> after I run strip manually and this seems like the only place one
> could blame for the difference.
>

I commented out the lines of code above, did a --nostrip build and
then stripped the binaries manually. The file size after stripping is
now 8632136. Clearly, those lines seem to make some sort of
difference.

Deepak

From luigi.scarso at gmail.com  Tue Nov 17 15:39:56 2015
From: luigi.scarso at gmail.com (luigi scarso)
Date: Tue, 17 Nov 2015 15:39:56 +0100
Subject: [luatex] Using a Lua C .so module with LuaLaTeX
In-Reply-To: <CABR1-Xbub+vXzF4i7u=DsWeVfTb_K_pPHf_bj2Wp1pkC7qG0Yw@mail.gmail.com>
References: <CABR1-XYwnEfhoSVcRYp8NNZNZxT-mCPsUhtzVWj0n=yA-V=s0w@mail.gmail.com>
 <CABR1-XbsZ5DzvYf9WYFNZ8QHJEYWjNYP9ePKab4q2yno8KStXQ@mail.gmail.com>
 <CAG5iGsA4Oq0TAhxwMmDsM+QuTPBL-TN69+z61H_vz_Bro4kBkQ@mail.gmail.com>
 <CAG5iGsAcQKKr+fuVqSgrbfUyAocaUrvaBuQWF=XLvAXWzgOASQ@mail.gmail.com>
 <CABR1-XbSSfX=qvRv1VGbkmmURdBmj9rZ6Zp05oCPNfQU-TR4uw@mail.gmail.com>
 <CABR1-XZB9fMSEwV=hWTsQWaxnnVPcP1TWccsfZBD7mivcHxPsw@mail.gmail.com>
 <CABR1-XZ1n-aiMXRbcu_00Uo7+-jPJX+f683Vx1Wi5THLNEXOpQ@mail.gmail.com>
 <CAG5iGsC_Th1TbaXB8hH11rfuP+K14j8P-H26LxTrxAx0zJG-ug@mail.gmail.com>
 <CABR1-XYfsxgzrZpZzZSS3LiioiX3Emf8fbSBnGw-PK6mXvTc_A@mail.gmail.com>
 <CAG5iGsB9fyn2WxAm+kABcUrdoc5yi4Am_rvydzeq21YGV3HEiw@mail.gmail.com>
 <CABR1-XbLx8Mtni1pumhNunF7JiDx3Bp=T+Ghu5z0efaBD4SErg@mail.gmail.com>
 <CALBOmsZfshy73vENwOZZitLv5r3kQqXznOFvO6o03hjxH7tupQ@mail.gmail.com>
 <CAG5iGsB5m77pW5aDUmY_q7Q9uMxz0HD+9Tzy1qLHX3x6cArGBg@mail.gmail.com>
 <CALBOmsaSybLgMKnC8JBvBY1dZx=ukb=ZwzGnU6Y3msta=uB8BA@mail.gmail.com>
 <CABR1-Xbub+vXzF4i7u=DsWeVfTb_K_pPHf_bj2Wp1pkC7qG0Yw@mail.gmail.com>
Message-ID: <CAG5iGsAfT3wwkQ1T=M+wuDwsu=C2szgkoCW3BD6jJ=D4od5iZw@mail.gmail.com>

On Tue, Nov 17, 2015 at 3:23 PM, Deepak Jois <deepak.jois at gmail.com> wrote:

>
> I commented out the lines of code above, did a --nostrip build and
> then stripped the binaries manually. The file size after stripping is
> now 8632136. Clearly, those lines seem to make some sort of
> difference.
>
> good. To be sure:
if you
1) comment these lines
if [ "$STRIP_LUATEX" = "FALSE" ]
 then
     export CFLAGS
     export CXXFLAGS
fi
and
2) modify
STRIP=strip
in
STRIP=strip -u -r

and run build.sh
then the osx binary loads the dso .

Are you sure that in this case  the size is 12938864 bytes ?
I dont see why in linux we have 8MByte and in osx 13MByte .

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20151117/53601dc6/attachment.html>

From deepak.jois at gmail.com  Tue Nov 17 16:05:04 2015
From: deepak.jois at gmail.com (Deepak Jois)
Date: Tue, 17 Nov 2015 20:35:04 +0530
Subject: [luatex] Using a Lua C .so module with LuaLaTeX
In-Reply-To: <CAG5iGsAfT3wwkQ1T=M+wuDwsu=C2szgkoCW3BD6jJ=D4od5iZw@mail.gmail.com>
References: <CABR1-XYwnEfhoSVcRYp8NNZNZxT-mCPsUhtzVWj0n=yA-V=s0w@mail.gmail.com>
 <CABR1-XbsZ5DzvYf9WYFNZ8QHJEYWjNYP9ePKab4q2yno8KStXQ@mail.gmail.com>
 <CAG5iGsA4Oq0TAhxwMmDsM+QuTPBL-TN69+z61H_vz_Bro4kBkQ@mail.gmail.com>
 <CAG5iGsAcQKKr+fuVqSgrbfUyAocaUrvaBuQWF=XLvAXWzgOASQ@mail.gmail.com>
 <CABR1-XbSSfX=qvRv1VGbkmmURdBmj9rZ6Zp05oCPNfQU-TR4uw@mail.gmail.com>
 <CABR1-XZB9fMSEwV=hWTsQWaxnnVPcP1TWccsfZBD7mivcHxPsw@mail.gmail.com>
 <CABR1-XZ1n-aiMXRbcu_00Uo7+-jPJX+f683Vx1Wi5THLNEXOpQ@mail.gmail.com>
 <CAG5iGsC_Th1TbaXB8hH11rfuP+K14j8P-H26LxTrxAx0zJG-ug@mail.gmail.com>
 <CABR1-XYfsxgzrZpZzZSS3LiioiX3Emf8fbSBnGw-PK6mXvTc_A@mail.gmail.com>
 <CAG5iGsB9fyn2WxAm+kABcUrdoc5yi4Am_rvydzeq21YGV3HEiw@mail.gmail.com>
 <CABR1-XbLx8Mtni1pumhNunF7JiDx3Bp=T+Ghu5z0efaBD4SErg@mail.gmail.com>
 <CALBOmsZfshy73vENwOZZitLv5r3kQqXznOFvO6o03hjxH7tupQ@mail.gmail.com>
 <CAG5iGsB5m77pW5aDUmY_q7Q9uMxz0HD+9Tzy1qLHX3x6cArGBg@mail.gmail.com>
 <CALBOmsaSybLgMKnC8JBvBY1dZx=ukb=ZwzGnU6Y3msta=uB8BA@mail.gmail.com>
 <CABR1-Xbub+vXzF4i7u=DsWeVfTb_K_pPHf_bj2Wp1pkC7qG0Yw@mail.gmail.com>
 <CAG5iGsAfT3wwkQ1T=M+wuDwsu=C2szgkoCW3BD6jJ=D4od5iZw@mail.gmail.com>
Message-ID: <CABR1-Xb9f+Juz0Zh0QJYuny7ZE-iXog1+wVJHVnT9xtk18Qbcw@mail.gmail.com>

On Tue, Nov 17, 2015 at 8:09 PM, luigi scarso <luigi.scarso at gmail.com> wrote:
> good. To be sure:
> if you
> 1) comment these lines
> if [ "$STRIP_LUATEX" = "FALSE" ]
>  then
>      export CFLAGS
>      export CXXFLAGS
> fi
> and
> 2) modify
> STRIP=strip
> in
> STRIP=strip -u -r
>
> and run build.sh
> then the osx binary loads the dso .
>

I had to change
STRIP=strip
to
STRIP="strip -u -r"
(note the quotes)

Once I do this, and compile normally (ie just running ./build.sh
without any options), it does load the .so file successfully.

$> ./build.sh
?<snip>

$> du -sh build/texk/web2c/luatex
8.2M    build/texk/web2c/luatex

$> ~/code/personal/luatex/v-0.80/trunk/build/texk/web2c/luatex
--luaonly test.lua
Deepak

> Are you sure that in this case  the size is 12938864 bytes ?
> I dont see why in linux we have 8MByte and in osx 13MByte .

In which case?

As you can see above, once I made the changes you asked, the binary
size went down to 8.2M on my system, which seems consistent with how
it is on Linux.

The 12938864 bytes is the size _before_ we commented out those lines,
used the --nostrip option to build and then manually stripped the
binary using strip -u -r.

I am not sure, but I suspect what was happening was that those lines
were exporting empty CXXFLAGS and CFLAGS, thus overriding any locally
set values in the other build scripts in the subfolders. The build
scripts that ran after that were picking up those values instead of
using their own CXXFLAGS and CFLAGS, which may have had some
optimisations.

Deepak


From luigi.scarso at gmail.com  Tue Nov 17 16:26:21 2015
From: luigi.scarso at gmail.com (luigi scarso)
Date: Tue, 17 Nov 2015 16:26:21 +0100
Subject: [luatex] Using a Lua C .so module with LuaLaTeX
In-Reply-To: <CABR1-Xb9f+Juz0Zh0QJYuny7ZE-iXog1+wVJHVnT9xtk18Qbcw@mail.gmail.com>
References: <CABR1-XYwnEfhoSVcRYp8NNZNZxT-mCPsUhtzVWj0n=yA-V=s0w@mail.gmail.com>
 <CABR1-XbsZ5DzvYf9WYFNZ8QHJEYWjNYP9ePKab4q2yno8KStXQ@mail.gmail.com>
 <CAG5iGsA4Oq0TAhxwMmDsM+QuTPBL-TN69+z61H_vz_Bro4kBkQ@mail.gmail.com>
 <CAG5iGsAcQKKr+fuVqSgrbfUyAocaUrvaBuQWF=XLvAXWzgOASQ@mail.gmail.com>
 <CABR1-XbSSfX=qvRv1VGbkmmURdBmj9rZ6Zp05oCPNfQU-TR4uw@mail.gmail.com>
 <CABR1-XZB9fMSEwV=hWTsQWaxnnVPcP1TWccsfZBD7mivcHxPsw@mail.gmail.com>
 <CABR1-XZ1n-aiMXRbcu_00Uo7+-jPJX+f683Vx1Wi5THLNEXOpQ@mail.gmail.com>
 <CAG5iGsC_Th1TbaXB8hH11rfuP+K14j8P-H26LxTrxAx0zJG-ug@mail.gmail.com>
 <CABR1-XYfsxgzrZpZzZSS3LiioiX3Emf8fbSBnGw-PK6mXvTc_A@mail.gmail.com>
 <CAG5iGsB9fyn2WxAm+kABcUrdoc5yi4Am_rvydzeq21YGV3HEiw@mail.gmail.com>
 <CABR1-XbLx8Mtni1pumhNunF7JiDx3Bp=T+Ghu5z0efaBD4SErg@mail.gmail.com>
 <CALBOmsZfshy73vENwOZZitLv5r3kQqXznOFvO6o03hjxH7tupQ@mail.gmail.com>
 <CAG5iGsB5m77pW5aDUmY_q7Q9uMxz0HD+9Tzy1qLHX3x6cArGBg@mail.gmail.com>
 <CALBOmsaSybLgMKnC8JBvBY1dZx=ukb=ZwzGnU6Y3msta=uB8BA@mail.gmail.com>
 <CABR1-Xbub+vXzF4i7u=DsWeVfTb_K_pPHf_bj2Wp1pkC7qG0Yw@mail.gmail.com>
 <CAG5iGsAfT3wwkQ1T=M+wuDwsu=C2szgkoCW3BD6jJ=D4od5iZw@mail.gmail.com>
 <CABR1-Xb9f+Juz0Zh0QJYuny7ZE-iXog1+wVJHVnT9xtk18Qbcw@mail.gmail.com>
Message-ID: <CAG5iGsBN=_HM3BQ1LoiehcgTqO0Ko=kYyf_ZpFJP3Gd99satkA@mail.gmail.com>

On Tue, Nov 17, 2015 at 4:05 PM, Deepak Jois <deepak.jois at gmail.com> wrote:

> On Tue, Nov 17, 2015 at 8:09 PM, luigi scarso <luigi.scarso at gmail.com>
> wrote:
> > good. To be sure:
> > if you
> > 1) comment these lines
> > if [ "$STRIP_LUATEX" = "FALSE" ]
> >  then
> >      export CFLAGS
> >      export CXXFLAGS
> > fi
> > and
> > 2) modify
> > STRIP=strip
> > in
> > STRIP=strip -u -r
> >
> > and run build.sh
> > then the osx binary loads the dso .
> >
>
> I had to change
> STRIP=strip
> to
> STRIP="strip -u -r"
> (note the quotes)
>
> Once I do this, and compile normally (ie just running ./build.sh
> without any options), it does load the .so file successfully.
>
> $> ./build.sh
> ?<snip>
>
> $> du -sh build/texk/web2c/luatex
> 8.2M    build/texk/web2c/luatex
>
> $> ~/code/personal/luatex/v-0.80/trunk/build/texk/web2c/luatex
> --luaonly test.lua
> Deepak
>
> > Are you sure that in this case  the size is 12938864 bytes ?
> > I dont see why in linux we have 8MByte and in osx 13MByte .
>
> In which case?
>
> As you can see above, once I made the changes you asked, the binary
> size went down to 8.2M on my system, which seems consistent with how
> it is on Linux.
>
> ok, this is what I expect too. Can you send me your build.sh ?
Concerning obj-c : are you able to make a simple dso with obj-c to be
loaded with luatex ?
I suspect that 5.2 can have a seg. fault here.



-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20151117/9aae5f11/attachment.html>

From deepak.jois at gmail.com  Tue Nov 17 17:16:59 2015
From: deepak.jois at gmail.com (Deepak Jois)
Date: Tue, 17 Nov 2015 21:46:59 +0530
Subject: [luatex] Using a Lua C .so module with LuaLaTeX
In-Reply-To: <CAG5iGsBN=_HM3BQ1LoiehcgTqO0Ko=kYyf_ZpFJP3Gd99satkA@mail.gmail.com>
References: <CABR1-XYwnEfhoSVcRYp8NNZNZxT-mCPsUhtzVWj0n=yA-V=s0w@mail.gmail.com>
 <CABR1-XbsZ5DzvYf9WYFNZ8QHJEYWjNYP9ePKab4q2yno8KStXQ@mail.gmail.com>
 <CAG5iGsA4Oq0TAhxwMmDsM+QuTPBL-TN69+z61H_vz_Bro4kBkQ@mail.gmail.com>
 <CAG5iGsAcQKKr+fuVqSgrbfUyAocaUrvaBuQWF=XLvAXWzgOASQ@mail.gmail.com>
 <CABR1-XbSSfX=qvRv1VGbkmmURdBmj9rZ6Zp05oCPNfQU-TR4uw@mail.gmail.com>
 <CABR1-XZB9fMSEwV=hWTsQWaxnnVPcP1TWccsfZBD7mivcHxPsw@mail.gmail.com>
 <CABR1-XZ1n-aiMXRbcu_00Uo7+-jPJX+f683Vx1Wi5THLNEXOpQ@mail.gmail.com>
 <CAG5iGsC_Th1TbaXB8hH11rfuP+K14j8P-H26LxTrxAx0zJG-ug@mail.gmail.com>
 <CABR1-XYfsxgzrZpZzZSS3LiioiX3Emf8fbSBnGw-PK6mXvTc_A@mail.gmail.com>
 <CAG5iGsB9fyn2WxAm+kABcUrdoc5yi4Am_rvydzeq21YGV3HEiw@mail.gmail.com>
 <CABR1-XbLx8Mtni1pumhNunF7JiDx3Bp=T+Ghu5z0efaBD4SErg@mail.gmail.com>
 <CALBOmsZfshy73vENwOZZitLv5r3kQqXznOFvO6o03hjxH7tupQ@mail.gmail.com>
 <CAG5iGsB5m77pW5aDUmY_q7Q9uMxz0HD+9Tzy1qLHX3x6cArGBg@mail.gmail.com>
 <CALBOmsaSybLgMKnC8JBvBY1dZx=ukb=ZwzGnU6Y3msta=uB8BA@mail.gmail.com>
 <CABR1-Xbub+vXzF4i7u=DsWeVfTb_K_pPHf_bj2Wp1pkC7qG0Yw@mail.gmail.com>
 <CAG5iGsAfT3wwkQ1T=M+wuDwsu=C2szgkoCW3BD6jJ=D4od5iZw@mail.gmail.com>
 <CABR1-Xb9f+Juz0Zh0QJYuny7ZE-iXog1+wVJHVnT9xtk18Qbcw@mail.gmail.com>
 <CAG5iGsBN=_HM3BQ1LoiehcgTqO0Ko=kYyf_ZpFJP3Gd99satkA@mail.gmail.com>
Message-ID: <CABR1-XZcY34731UE3aAq4XgcvkErTov30U8e7jFS7w-aWvM8VA@mail.gmail.com>

On Tue, Nov 17, 2015 at 8:56 PM, luigi scarso <luigi.scarso at gmail.com> wrote:
> ok, this is what I expect too. Can you send me your build.sh ?

Sent.

> Concerning obj-c : are you able to make a simple dso with obj-c to be loaded
> with luatex ?
> I suspect that 5.2 can have a seg. fault here.

I don?t know obj-c at all. I will try and find some sample code and
see if I can link it with Lua.

Deepak


From luigi.scarso at gmail.com  Tue Nov 17 17:19:17 2015
From: luigi.scarso at gmail.com (luigi scarso)
Date: Tue, 17 Nov 2015 17:19:17 +0100
Subject: [luatex] Using a Lua C .so module with LuaLaTeX
In-Reply-To: <CABR1-XZcY34731UE3aAq4XgcvkErTov30U8e7jFS7w-aWvM8VA@mail.gmail.com>
References: <CABR1-XYwnEfhoSVcRYp8NNZNZxT-mCPsUhtzVWj0n=yA-V=s0w@mail.gmail.com>
 <CABR1-XbsZ5DzvYf9WYFNZ8QHJEYWjNYP9ePKab4q2yno8KStXQ@mail.gmail.com>
 <CAG5iGsA4Oq0TAhxwMmDsM+QuTPBL-TN69+z61H_vz_Bro4kBkQ@mail.gmail.com>
 <CAG5iGsAcQKKr+fuVqSgrbfUyAocaUrvaBuQWF=XLvAXWzgOASQ@mail.gmail.com>
 <CABR1-XbSSfX=qvRv1VGbkmmURdBmj9rZ6Zp05oCPNfQU-TR4uw@mail.gmail.com>
 <CABR1-XZB9fMSEwV=hWTsQWaxnnVPcP1TWccsfZBD7mivcHxPsw@mail.gmail.com>
 <CABR1-XZ1n-aiMXRbcu_00Uo7+-jPJX+f683Vx1Wi5THLNEXOpQ@mail.gmail.com>
 <CAG5iGsC_Th1TbaXB8hH11rfuP+K14j8P-H26LxTrxAx0zJG-ug@mail.gmail.com>
 <CABR1-XYfsxgzrZpZzZSS3LiioiX3Emf8fbSBnGw-PK6mXvTc_A@mail.gmail.com>
 <CAG5iGsB9fyn2WxAm+kABcUrdoc5yi4Am_rvydzeq21YGV3HEiw@mail.gmail.com>
 <CABR1-XbLx8Mtni1pumhNunF7JiDx3Bp=T+Ghu5z0efaBD4SErg@mail.gmail.com>
 <CALBOmsZfshy73vENwOZZitLv5r3kQqXznOFvO6o03hjxH7tupQ@mail.gmail.com>
 <CAG5iGsB5m77pW5aDUmY_q7Q9uMxz0HD+9Tzy1qLHX3x6cArGBg@mail.gmail.com>
 <CALBOmsaSybLgMKnC8JBvBY1dZx=ukb=ZwzGnU6Y3msta=uB8BA@mail.gmail.com>
 <CABR1-Xbub+vXzF4i7u=DsWeVfTb_K_pPHf_bj2Wp1pkC7qG0Yw@mail.gmail.com>
 <CAG5iGsAfT3wwkQ1T=M+wuDwsu=C2szgkoCW3BD6jJ=D4od5iZw@mail.gmail.com>
 <CABR1-Xb9f+Juz0Zh0QJYuny7ZE-iXog1+wVJHVnT9xtk18Qbcw@mail.gmail.com>
 <CAG5iGsBN=_HM3BQ1LoiehcgTqO0Ko=kYyf_ZpFJP3Gd99satkA@mail.gmail.com>
 <CABR1-XZcY34731UE3aAq4XgcvkErTov30U8e7jFS7w-aWvM8VA@mail.gmail.com>
Message-ID: <CAG5iGsAioMxQo44vmZFpEAjYdkPa-WX20DKvfBD_V5=oN+TV_Q@mail.gmail.com>

On Tue, Nov 17, 2015 at 5:16 PM, Deepak Jois <deepak.jois at gmail.com> wrote:

> On Tue, Nov 17, 2015 at 8:56 PM, luigi scarso <luigi.scarso at gmail.com>
> wrote:
> > ok, this is what I expect too. Can you send me your build.sh ?
>
> Sent.
>
> > Concerning obj-c : are you able to make a simple dso with obj-c to be
> loaded
> > with luatex ?
> > I suspect that 5.2 can have a seg. fault here.
>
> I don?t know obj-c at all. I will try and find some sample code and
> see if I can link it with Lua.
>
> Deepak
>
>
ok.

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20151117/634737cc/attachment-0001.html>

From pragma at wxs.nl  Tue Nov 17 18:53:00 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Tue, 17 Nov 2015 18:53:00 +0100
Subject: [luatex] New \pdf... primitives
In-Reply-To: <CAEW6iOhOMJWMOkDuqBkVepScb_BW3p_WxKofyyF9NxWmtVBdEw@mail.gmail.com>
References: <564A5B1D.7080302@morningstar2.co.uk>
 <564AD192.30905@morningstar2.co.uk> <564AE4D9.2020303@wxs.nl>
 <CAEW6iOifc74KBxY50DCL7vq6NFmns-vrkoL_MDTv6mqTM4PEBw@mail.gmail.com>
 <564B1E59.9000700@wxs.nl>
 <CAEW6iOhOMJWMOkDuqBkVepScb_BW3p_WxKofyyF9NxWmtVBdEw@mail.gmail.com>
Message-ID: <564B697C.9000903@wxs.nl>

On 11/17/2015 2:59 PM, David Carlisle wrote:

> If the \pdfvariable syntax is to be introduced it would be far more
> natural to make it non expandable and so never exposing a csname for the
> internal dimen register. (Still \the\pdfvariable horigin could expand
> to the value
> without having to expose \pdf_horigin)

i'll see what i can do about it (messing a bit now)

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From joseph.wright at morningstar2.co.uk  Wed Nov 18 13:14:32 2015
From: joseph.wright at morningstar2.co.uk (Joseph Wright)
Date: Wed, 18 Nov 2015 12:14:32 +0000
Subject: [luatex] Bug with math operators?
Message-ID: <564C6BA8.1080204@morningstar2.co.uk>

Hello all,

With a 'pretest' version of LuaTeX v0.85 the simple document

    $$\sin\pi=0$$
    \bye

is missing the "sin". This works fine with v0.80 on the same system
(Win32 using W32TeX binaries). Any ideas what might be wrong?

Joseph

From pragma at wxs.nl  Wed Nov 18 14:02:51 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Wed, 18 Nov 2015 14:02:51 +0100
Subject: [luatex] Bug with math operators?
In-Reply-To: <564C6BA8.1080204@morningstar2.co.uk>
References: <564C6BA8.1080204@morningstar2.co.uk>
Message-ID: <564C76FB.1010302@wxs.nl>

On 11/18/2015 1:14 PM, Joseph Wright wrote:
> Hello all,
>
> With a 'pretest' version of LuaTeX v0.85 the simple document
>
>      $$\sin\pi=0$$
>      \bye
>
> is missing the "sin". This works fine with v0.80 on the same system
> (Win32 using W32TeX binaries). Any ideas what might be wrong?

i'll look into it


-- 

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From d.p.carlisle at gmail.com  Thu Nov 19 00:19:41 2015
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Wed, 18 Nov 2015 23:19:41 +0000
Subject: [luatex] read and write streams
Message-ID: <CAEW6iOiFWGFGYaHQBe_yv9np8juf4rpazkgexyTEeX1m52ahfg@mail.gmail.com>

Hi,

I just noticed (after extending \newread and \newwrite to 128 streams)
that only write streams are extended and that input streams are still
restricted to 16.

I could of course undo the change to \newread but it seems strangely unsymmetric
is there any technical reason in the internals not to allow 128 input streams?

David

From pragma at wxs.nl  Thu Nov 19 12:52:32 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Thu, 19 Nov 2015 12:52:32 +0100
Subject: [luatex] read and write streams
In-Reply-To: <CAEW6iOiFWGFGYaHQBe_yv9np8juf4rpazkgexyTEeX1m52ahfg@mail.gmail.com>
References: <CAEW6iOiFWGFGYaHQBe_yv9np8juf4rpazkgexyTEeX1m52ahfg@mail.gmail.com>
Message-ID: <564DB800.8020608@wxs.nl>

On 11/19/2015 12:19 AM, David Carlisle wrote:
> Hi,
>
> I just noticed (after extending \newread and \newwrite to 128 streams)
> that only write streams are extended and that input streams are still
> restricted to 16.
>
> I could of course undo the change to \newread but it seems strangely unsymmetric
> is there any technical reason in the internals not to allow 128 input streams?

different internals indeed, so for now just 16 input streams (i never 
needed that many output streams but i can imagine that some users need 
it; i wonder if input streams are used that often)

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From d.p.carlisle at gmail.com  Thu Nov 19 13:20:05 2015
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Thu, 19 Nov 2015 12:20:05 +0000
Subject: [luatex] read and write streams
In-Reply-To: <564DB800.8020608@wxs.nl>
References: <CAEW6iOiFWGFGYaHQBe_yv9np8juf4rpazkgexyTEeX1m52ahfg@mail.gmail.com>
 <564DB800.8020608@wxs.nl>
Message-ID: <CAEW6iOjSf5voSX7Zr+qCFoYWHF-HtNsDTwHzwOgba-zBw-70bw@mail.gmail.com>

On 19 November 2015 at 11:52, Hans Hagen <pragma at wxs.nl> wrote:
> On 11/19/2015 12:19 AM, David Carlisle wrote:
>>
>> Hi,
>>
>> I just noticed (after extending \newread and \newwrite to 128 streams)
>> that only write streams are extended and that input streams are still
>> restricted to 16.
>>
>> I could of course undo the change to \newread but it seems strangely
>> unsymmetric
>> is there any technical reason in the internals not to allow 128 input
>> streams?
>
>
> different internals indeed, so for now just 16 input streams

OK (for now?) I'll revert my change to the allocation macro.

>  (i never needed
> that many output streams but i can imagine that some users need it; i wonder
> if input streams are used that often)
>
> Hans

I don't know what you count as "often"?
Looking in the latex area (only) in texlive 2015 I see over a hundred
files using it:

cd  /usr/local/texlive/2015/texmf-dist/tex/latex
find . -type f -exec grep -H '\\newread'  \{\} \; | wc -l

114

Whether anyone wants to load more than 14 of them into luatex
in the same document is of course a harder question to answer,
it is though perhaps more likely than needing a few thousand
catcode tables:-)

Although I have to admit that I was asking on the grounds of symmetry
in the design of the language rather than actual use.
That isn't necessarily a bad thing though...

David

From pragma at wxs.nl  Thu Nov 19 13:34:15 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Thu, 19 Nov 2015 13:34:15 +0100
Subject: [luatex] read and write streams
In-Reply-To: <CAEW6iOjSf5voSX7Zr+qCFoYWHF-HtNsDTwHzwOgba-zBw-70bw@mail.gmail.com>
References: <CAEW6iOiFWGFGYaHQBe_yv9np8juf4rpazkgexyTEeX1m52ahfg@mail.gmail.com>
 <564DB800.8020608@wxs.nl>
 <CAEW6iOjSf5voSX7Zr+qCFoYWHF-HtNsDTwHzwOgba-zBw-70bw@mail.gmail.com>
Message-ID: <564DC1C7.9000907@wxs.nl>

On 11/19/2015 1:20 PM, David Carlisle wrote:

> I don't know what you count as "often"?
> Looking in the latex area (only) in texlive 2015 I see over a hundred
> files using it:
>
> cd  /usr/local/texlive/2015/texmf-dist/tex/latex
> find . -type f -exec grep -H '\\newread'  \{\} \; | wc -l
>
> 114
>
> Whether anyone wants to load more than 14 of them into luatex
> in the same document is of course a harder question to answer,
> it is though perhaps more likely than needing a few thousand
> catcode tables:-)

but how often multiple newreads?

anyway, it's not just bumping a number but also adapting tests as well 
as a bunch of larger static arrays (keep in mind we have callback sin 
input) .. in fact, one can just write thousands of input handlers in lua

and yes, we could have less catcode tables (256 would do probably)

> Although I have to admit that I was asking on the grounds of symmetry
> in the design of the language rather than actual use.
> That isn't necessarily a bad thing though...

sure, but then we need to get rid of / change some / add to core tex 
thingies too because it's a rather hybrid thing .. never ending

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From d.p.carlisle at gmail.com  Thu Nov 19 14:12:16 2015
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Thu, 19 Nov 2015 13:12:16 +0000
Subject: [luatex] read and write streams
In-Reply-To: <564DC1C7.9000907@wxs.nl>
References: <CAEW6iOiFWGFGYaHQBe_yv9np8juf4rpazkgexyTEeX1m52ahfg@mail.gmail.com>
 <564DB800.8020608@wxs.nl>
 <CAEW6iOjSf5voSX7Zr+qCFoYWHF-HtNsDTwHzwOgba-zBw-70bw@mail.gmail.com>
 <564DC1C7.9000907@wxs.nl>
Message-ID: <CAEW6iOheKrs2jSH05tmx5PGfCakA-Xfx14tf+Zit+Cr-hywdGQ@mail.gmail.com>

No problem, the question is here on the archive for the record, and
I'll revert my \newread change:-)

David

From jfbu at free.fr  Thu Nov 19 14:21:23 2015
From: jfbu at free.fr (jfbu)
Date: Thu, 19 Nov 2015 14:21:23 +0100
Subject: [luatex] read and write streams
In-Reply-To: <CAEW6iOheKrs2jSH05tmx5PGfCakA-Xfx14tf+Zit+Cr-hywdGQ@mail.gmail.com>
References: <CAEW6iOiFWGFGYaHQBe_yv9np8juf4rpazkgexyTEeX1m52ahfg@mail.gmail.com>
 <564DB800.8020608@wxs.nl>
 <CAEW6iOjSf5voSX7Zr+qCFoYWHF-HtNsDTwHzwOgba-zBw-70bw@mail.gmail.com>
 <564DC1C7.9000907@wxs.nl>
 <CAEW6iOheKrs2jSH05tmx5PGfCakA-Xfx14tf+Zit+Cr-hywdGQ@mail.gmail.com>
Message-ID: <564DCCD3.1080702@free.fr>

Hi David and Hans,

one question of a neophyte

will (or is) code using \immediate\write16{foo} be broken
by more output streams ? 

(by this I mean could 16 end up being assigned to some
file output stream number)

best

Jean-Fran?ois




From joseph.wright at morningstar2.co.uk  Thu Nov 19 14:32:05 2015
From: joseph.wright at morningstar2.co.uk (Joseph Wright)
Date: Thu, 19 Nov 2015 13:32:05 +0000
Subject: [luatex] read and write streams
In-Reply-To: <564DCCD3.1080702@free.fr>
References: <CAEW6iOiFWGFGYaHQBe_yv9np8juf4rpazkgexyTEeX1m52ahfg@mail.gmail.com>
 <564DB800.8020608@wxs.nl>
 <CAEW6iOjSf5voSX7Zr+qCFoYWHF-HtNsDTwHzwOgba-zBw-70bw@mail.gmail.com>
 <564DC1C7.9000907@wxs.nl>
 <CAEW6iOheKrs2jSH05tmx5PGfCakA-Xfx14tf+Zit+Cr-hywdGQ@mail.gmail.com>
 <564DCCD3.1080702@free.fr>
Message-ID: <564DCF55.1010909@morningstar2.co.uk>

On 19/11/2015 13:21, jfbu wrote:
> Hi David and Hans,
> 
> one question of a neophyte
> 
> will (or is) code using \immediate\write16{foo} be broken
> by more output streams ? 
> 
> (by this I mean could 16 end up being assigned to some
> file output stream number)
> 
> best
> 
> Jean-Fran?ois

Yes (which is where we started with this). With the new set up, the
first 'certain to be unused' stream is 128. That should therefore be
used instead of 16 where the 'dump to the terminal' behaviour is required.

(Aside: At present stream 128 is not working with the W32 build I have,
SVN 5538, but Hans confirms this is an out-and-out bug so will be solved.)

Joseph



From d.p.carlisle at gmail.com  Thu Nov 19 14:45:50 2015
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Thu, 19 Nov 2015 13:45:50 +0000
Subject: [luatex] read and write streams
In-Reply-To: <564DCCD3.1080702@free.fr>
References: <CAEW6iOiFWGFGYaHQBe_yv9np8juf4rpazkgexyTEeX1m52ahfg@mail.gmail.com>
 <564DB800.8020608@wxs.nl>
 <CAEW6iOjSf5voSX7Zr+qCFoYWHF-HtNsDTwHzwOgba-zBw-70bw@mail.gmail.com>
 <564DC1C7.9000907@wxs.nl>
 <CAEW6iOheKrs2jSH05tmx5PGfCakA-Xfx14tf+Zit+Cr-hywdGQ@mail.gmail.com>
 <564DCCD3.1080702@free.fr>
Message-ID: <CAEW6iOiu-Xmt79CtWG03rGxUnJvkKQdSBqH18=OkSHR9Mf=Zhg@mail.gmail.com>

On 19 November 2015 at 13:21, jfbu <jfbu at free.fr> wrote:
> Hi David and Hans,
>
> one question of a neophyte
>
> will (or is) code using \immediate\write16{foo} be broken
> by more output streams ?
>
> (by this I mean could 16 end up being assigned to some
> file output stream number)
>
> best
>
> Jean-Fran?ois
>
>

Yes.

In an earlier draft of this (that I referenced in the initial question
in this thread)
16 was sort of reserved, but I think that's wrong, 16 isn't special in pdftex
any non allocated stream writes to the terminal, I often used 20 for example
(as going under 18 seemed wrong:-)  luatex can't reserve all numbers
bigger than 15
and extend the range, so something has to give...

I think the current suggested model of allowing 0-127 to be used is fine.
To be portable and use an unopened stream you can use any number
bigger than 127 or use \@unused (which is 0 but you are not supposed
to know that)  which is the allocated-but-unopened stream used by \typeout.

So existing documents using \write16 or \write20 etc may need a small change but
they will likely need small changes anyway given the number of changes
to the luatex
primitives.

David


From pragma at wxs.nl  Thu Nov 19 17:06:15 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Thu, 19 Nov 2015 17:06:15 +0100
Subject: [luatex] read and write streams
In-Reply-To: <564DCF55.1010909@morningstar2.co.uk>
References: <CAEW6iOiFWGFGYaHQBe_yv9np8juf4rpazkgexyTEeX1m52ahfg@mail.gmail.com>
 <564DB800.8020608@wxs.nl>
 <CAEW6iOjSf5voSX7Zr+qCFoYWHF-HtNsDTwHzwOgba-zBw-70bw@mail.gmail.com>
 <564DC1C7.9000907@wxs.nl>
 <CAEW6iOheKrs2jSH05tmx5PGfCakA-Xfx14tf+Zit+Cr-hywdGQ@mail.gmail.com>
 <564DCCD3.1080702@free.fr> <564DCF55.1010909@morningstar2.co.uk>
Message-ID: <564DF377.6060801@wxs.nl>

On 11/19/2015 2:32 PM, Joseph Wright wrote:
> On 19/11/2015 13:21, jfbu wrote:
>> Hi David and Hans,
>>
>> one question of a neophyte
>>
>> will (or is) code using \immediate\write16{foo} be broken
>> by more output streams ?
>>
>> (by this I mean could 16 end up being assigned to some
>> file output stream number)
>>
>> best
>>
>> Jean-Fran?ois
>
> Yes (which is where we started with this). With the new set up, the
> first 'certain to be unused' stream is 128. That should therefore be

also, it is rather safe to assume that no user has opened more than 6 
streams so 16 is probably still ok (some time to adapt)

> (Aside: At present stream 128 is not working with the W32 build I have,
> SVN 5538, but Hans confirms this is an out-and-out bug so will be solved.)
>
> Joseph
>
>


-- 

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From jfbu at free.fr  Thu Nov 19 18:48:53 2015
From: jfbu at free.fr (jfbu)
Date: Thu, 19 Nov 2015 18:48:53 +0100
Subject: [luatex] read and write streams
In-Reply-To: <CAEW6iOiu-Xmt79CtWG03rGxUnJvkKQdSBqH18=OkSHR9Mf=Zhg@mail.gmail.com>
References: <CAEW6iOiFWGFGYaHQBe_yv9np8juf4rpazkgexyTEeX1m52ahfg@mail.gmail.com>
 <564DB800.8020608@wxs.nl>
 <CAEW6iOjSf5voSX7Zr+qCFoYWHF-HtNsDTwHzwOgba-zBw-70bw@mail.gmail.com>
 <564DC1C7.9000907@wxs.nl>
 <CAEW6iOheKrs2jSH05tmx5PGfCakA-Xfx14tf+Zit+Cr-hywdGQ@mail.gmail.com>
 <564DCCD3.1080702@free.fr>
 <CAEW6iOiu-Xmt79CtWG03rGxUnJvkKQdSBqH18=OkSHR9Mf=Zhg@mail.gmail.com>
Message-ID: <564E0B85.2030707@free.fr>

Le 19/11/2015 14:45, David Carlisle a ?crit :
> On 19 November 2015 at 13:21, jfbu <jfbu at free.fr> wrote:
>> will (or is) code using \immediate\write16{foo} be broken
>> by more output streams ?
>>
>> [snip]
>>
>>
> 
> Yes.
> 
> In an earlier draft of this (that I referenced in the initial question
> in this thread)
> 16 was sort of reserved, but I think that's wrong, 16 isn't special in pdftex
> any non allocated stream writes to the terminal, I often used 20 for example
> (as going under 18 seemed wrong:-)  luatex can't reserve all numbers
> bigger than 15
> and extend the range, so something has to give...
> 
> I think the current suggested model of allowing 0-127 to be used is fine.
> To be portable and use an unopened stream you can use any number
> bigger than 127 or use \@unused (which is 0 but you are not supposed
> to know that)  which is the allocated-but-unopened stream used by \typeout.
> 
> So existing documents using \write16 or \write20 etc may need a small change but
> they will likely need small changes anyway given the number of changes
> to the luatex
> primitives.
> 

Le 19/11/2015 14:32, Joseph Wright a ?crit :
> 
> Yes (which is where we started with this). With the new set up, the
> first 'certain to be unused' stream is 128. That should therefore be
> used instead of 16 where the 'dump to the terminal' behaviour is required.
> 
> (Aside: At present stream 128 is not working with the W32 build I have,
> SVN 5538, but Hans confirms this is an out-and-out bug so will be solved.)
> 
> Joseph
> 
> 

I used \write16 to write both to the terminal and the log file and I need
code suitable both for LaTeX and Plain, 

if I recall correctly \write-1 (which I presume will not be broken)
writes only to the log file

What is the recommended way for not necessarily LaTeX code 
(more precisely for code destined to be run either from Plain
or LaTeX)
to be
robust with respect to future enlargement of output streams for this task ?

(if the user decides to use LuaTeX)

best

Jean-Fran?ois



From d.p.carlisle at gmail.com  Thu Nov 19 19:11:00 2015
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Thu, 19 Nov 2015 18:11:00 +0000
Subject: [luatex] read and write streams
In-Reply-To: <564E0B85.2030707@free.fr>
References: <CAEW6iOiFWGFGYaHQBe_yv9np8juf4rpazkgexyTEeX1m52ahfg@mail.gmail.com>
 <564DB800.8020608@wxs.nl>
 <CAEW6iOjSf5voSX7Zr+qCFoYWHF-HtNsDTwHzwOgba-zBw-70bw@mail.gmail.com>
 <564DC1C7.9000907@wxs.nl>
 <CAEW6iOheKrs2jSH05tmx5PGfCakA-Xfx14tf+Zit+Cr-hywdGQ@mail.gmail.com>
 <564DCCD3.1080702@free.fr>
 <CAEW6iOiu-Xmt79CtWG03rGxUnJvkKQdSBqH18=OkSHR9Mf=Zhg@mail.gmail.com>
 <564E0B85.2030707@free.fr>
Message-ID: <CAEW6iOgq+1y0=jbb6xbG2Boy3bSzj6jEDyDDh0Ehx5SPCbP=Rg@mail.gmail.com>

> I used \write16 to write both to the terminal and the log file and I need
> code suitable both for LaTeX and Plain,

any number > 127 will work the same way in plain and latex and new and
old luatex
as well as pdftex and xetex,


David

From jfbu at free.fr  Thu Nov 19 19:45:08 2015
From: jfbu at free.fr (jfbu)
Date: Thu, 19 Nov 2015 19:45:08 +0100
Subject: [luatex] read and write streams
In-Reply-To: <CAEW6iOgq+1y0=jbb6xbG2Boy3bSzj6jEDyDDh0Ehx5SPCbP=Rg@mail.gmail.com>
References: <CAEW6iOiFWGFGYaHQBe_yv9np8juf4rpazkgexyTEeX1m52ahfg@mail.gmail.com>
 <564DB800.8020608@wxs.nl>
 <CAEW6iOjSf5voSX7Zr+qCFoYWHF-HtNsDTwHzwOgba-zBw-70bw@mail.gmail.com>
 <564DC1C7.9000907@wxs.nl>
 <CAEW6iOheKrs2jSH05tmx5PGfCakA-Xfx14tf+Zit+Cr-hywdGQ@mail.gmail.com>
 <564DCCD3.1080702@free.fr>
 <CAEW6iOiu-Xmt79CtWG03rGxUnJvkKQdSBqH18=OkSHR9Mf=Zhg@mail.gmail.com>
 <564E0B85.2030707@free.fr>
 <CAEW6iOgq+1y0=jbb6xbG2Boy3bSzj6jEDyDDh0Ehx5SPCbP=Rg@mail.gmail.com>
Message-ID: <2CC3D76E-DB44-4E14-85DC-D3B22C786164@free.fr>


Le 19 nov. 2015 ? 19:11, David Carlisle <d.p.carlisle at gmail.com> a ?crit :

>> I used \write16 to write both to the terminal and the log file and I need
>> code suitable both for LaTeX and Plain,
> 
> any number > 127 will work the same way in plain and latex and new and
> old luatex
> as well as pdftex and xetex,
> 
> 
> David

perfect thanks, I will just use \write128 then and it's all done.

that makes for a simple commit in my dev repo, 
one that doesn't introduce bugs for a change ;-)

best

Jean-Fran?ois

From komascript at gmx.info  Thu Nov 19 20:10:38 2015
From: komascript at gmx.info (Markus Kohm)
Date: Thu, 19 Nov 2015 20:10:38 +0100
Subject: [luatex] read and write streams
In-Reply-To: <564E0B85.2030707@free.fr>
References: <CAEW6iOiFWGFGYaHQBe_yv9np8juf4rpazkgexyTEeX1m52ahfg@mail.gmail.com>
 <CAEW6iOiu-Xmt79CtWG03rGxUnJvkKQdSBqH18=OkSHR9Mf=Zhg@mail.gmail.com>
 <564E0B85.2030707@free.fr>
Message-ID: <1521338.AauLWFBOk1@jo.komascript.de>

Am Donnerstag, 19. November 2015, 18:48:53 schrieb jfbu:
> to be
> robust with respect to future enlargement of output streams for this task ?

\newrite\terminal
\immediate\write\terminal{Test}

As long, as you do not open the new write, it will write to terminal and log 
file. BTW: For LaTeX you should simply use \typeout. So for generic code you 
may use something like:

\begingroup\expandafter\expandafter\expandafter\endgroup
\expandafter\ifx\csname typeout\endcsname\relax
  \newwrite\@typeout
  \def\typeout{\immediate\write\@typeout}
\fi
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 181 bytes
Desc: This is a digitally signed message part.
URL: <http://tug.org/pipermail/luatex/attachments/20151119/4f89a2ac/attachment-0001.bin>

From jfbu at free.fr  Thu Nov 19 23:31:46 2015
From: jfbu at free.fr (jfbu)
Date: Thu, 19 Nov 2015 23:31:46 +0100
Subject: [luatex] read and write streams
In-Reply-To: <1521338.AauLWFBOk1@jo.komascript.de>
References: <CAEW6iOiFWGFGYaHQBe_yv9np8juf4rpazkgexyTEeX1m52ahfg@mail.gmail.com>
 <CAEW6iOiu-Xmt79CtWG03rGxUnJvkKQdSBqH18=OkSHR9Mf=Zhg@mail.gmail.com>
 <564E0B85.2030707@free.fr> <1521338.AauLWFBOk1@jo.komascript.de>
Message-ID: <8D807828-2271-44E3-A7AD-835957155628@free.fr>


Le 19 nov. 2015 ? 20:10, Markus Kohm <komascript at gmx.info> a ?crit :

> Am Donnerstag, 19. November 2015, 18:48:53 schrieb jfbu:
>> to be
>> robust with respect to future enlargement of output streams for this task ?
> 
> \newrite\terminal
> \immediate\write\terminal{Test}
> 
> As long, as you do not open the new write, it will write to terminal and log 
> file. BTW: For LaTeX you should simply use \typeout. So for generic code you 
> may use something like:
> 
> \begingroup\expandafter\expandafter\expandafter\endgroup
> \expandafter\ifx\csname typeout\endcsname\relax
>  \newwrite\@typeout
>  \def\typeout{\immediate\write\@typeout}
> \fi

Hi,

I looked for rationale for doing a \newwrite rather
than direct \write128, and the only one I see is for
the package to provide the user an option to have
the concerned messages sent to a separate file 
if need be

This could be useful as things written to the log
seems to get hardwrapped every 79 characters 
(with pdftex, and it seems to be 80 characters
with luatex). Whereas they are not hardwrapped
when "\write" to another file.

I used \message initially but found it had 
somewhat unpredictable behavior with respect
to making new lines in the log, and I didn't
want to set \newlinechar. This is why I went
for \write16, but the hard-wrapping somewhat
annoys me.

I am sure the 80 characters vs 79 characters
must have been discussed on this list before,


Jean-Fran?ois




From jfbu at free.fr  Thu Nov 19 23:44:20 2015
From: jfbu at free.fr (jfbu)
Date: Thu, 19 Nov 2015 23:44:20 +0100
Subject: [luatex] \write16 (or 128) loosing tokens after null character
Message-ID: <0D81B301-A95E-4036-99AF-3D94DC203986@free.fr>

Hi,

this might be the same issue than one with \scantokens
which was discussed some time ago on this list (lost the reference)

\catcode0 12

\def\x {\romannumeral`^^@ foo bar foo bar foo bar}

\catcode0 9

\message{\meaning\x}

\immediate\write128{\meaning\x}

\bye

If I compile with luatex I get (there is a null character after `
in the first line and there is nothing after ` in second line)

(./testlualog.tex macro:->\romannumeral `  foo bar foo bar foo bar
macro:->\romannumeral `
)

in the log, whereas with pdftex I get

(./testlualog.tex macro:->\romannumeral `^^@ foo bar foo bar foo bar
macro:->\romannumeral `^^@ foo bar foo bar foo bar
 )

Jean-Fran?ois



From pragma at wxs.nl  Fri Nov 20 09:32:12 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Fri, 20 Nov 2015 09:32:12 +0100
Subject: [luatex] read and write streams
In-Reply-To: <8D807828-2271-44E3-A7AD-835957155628@free.fr>
References: <CAEW6iOiFWGFGYaHQBe_yv9np8juf4rpazkgexyTEeX1m52ahfg@mail.gmail.com>
 <CAEW6iOiu-Xmt79CtWG03rGxUnJvkKQdSBqH18=OkSHR9Mf=Zhg@mail.gmail.com>
 <564E0B85.2030707@free.fr> <1521338.AauLWFBOk1@jo.komascript.de>
 <8D807828-2271-44E3-A7AD-835957155628@free.fr>
Message-ID: <564EDA8C.4070209@wxs.nl>

On 11/19/2015 11:31 PM, jfbu wrote:
>
> Le 19 nov. 2015 ? 20:10, Markus Kohm <komascript at gmx.info> a ?crit :
>
>> Am Donnerstag, 19. November 2015, 18:48:53 schrieb jfbu:
>>> to be
>>> robust with respect to future enlargement of output streams for this task ?
>>
>> \newrite\terminal
>> \immediate\write\terminal{Test}
>>
>> As long, as you do not open the new write, it will write to terminal and log
>> file. BTW: For LaTeX you should simply use \typeout. So for generic code you
>> may use something like:
>>
>> \begingroup\expandafter\expandafter\expandafter\endgroup
>> \expandafter\ifx\csname typeout\endcsname\relax
>>   \newwrite\@typeout
>>   \def\typeout{\immediate\write\@typeout}
>> \fi
>
> Hi,
>
> I looked for rationale for doing a \newwrite rather
> than direct \write128, and the only one I see is for
> the package to provide the user an option to have
> the concerned messages sent to a separate file
> if need be
>
> This could be useful as things written to the log
> seems to get hardwrapped every 79 characters
> (with pdftex, and it seems to be 80 characters
> with luatex). Whereas they are not hardwrapped
> when "\write" to another file.
>
> I used \message initially but found it had
> somewhat unpredictable behavior with respect
> to making new lines in the log, and I didn't
> want to set \newlinechar. This is why I went
> for \write16, but the hard-wrapping somewhat
> annoys me.
>
> I am sure the 80 characters vs 79 characters
> must have been discussed on this list before,

yes and we don't care too much about it because it's already quite 
tricky to include utf in the equation (multi byte chars) - one can argue 
than a newline char is either of not in the limit

the same for logging. luatex is mostly compatible but we don't bother 
about small differences

we might at some point even drop the wrap

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From jfbu at free.fr  Fri Nov 20 09:54:57 2015
From: jfbu at free.fr (jfbu)
Date: Fri, 20 Nov 2015 09:54:57 +0100
Subject: [luatex]  \write16 (or 128) loosing tokens after null character
In-Reply-To: <0D81B301-A95E-4036-99AF-3D94DC203986@free.fr>
References: <0D81B301-A95E-4036-99AF-3D94DC203986@free.fr>
Message-ID: <C5F25DF7-C539-40D7-A33F-A38A7507A80A@free.fr>


Le 19 nov. 2015 ? 23:44, jfbu <jfbu at free.fr> a ?crit :

> Hi,
> 
> this might be the same issue than one with \scantokens
> which was discussed some time ago on this list (lost the reference)

this was 

http://tug.org/pipermail/luatex/2015-March/005138.html
[luatex] behavior of \write in LuaTeX differs from the one of	PdfTeX/XeTeX 

which referenced some other threads, 

I tried also running pdftex with -8bit switch which 
was mentioned by Hans in the previous thread and this gives

This is pdfTeX, Version 3.14159265-2.6-1.40.16 (TeX Live 2015) (preloaded format=pdftex 2015.10.14)  20 NOV 2015 09:50
entering extended mode
 restricted \write18 enabled.
 %&-line parsing enabled.
**testlualog.tex
(./testlualog.tex macro:->\romannumeral `  foo bar foo bar foo bar
macro:->\romannumeral `  foo bar foo bar foo bar
 )

 (contains two null characters)

The log with luatex is:

This is LuaTeX, Version beta-0.80.0 (TeX Live 2015) (rev 5238)  (format=luatex 2015.10.14)  20 NOV 2015 09:53
 restricted \write18 enabled.
**\input testlualog.tex
(./testlualog.tex macro:->\romannumeral `  foo bar foo bar foo bar
macro:->\romannumeral `
)

only one null character in \message output

in \write output the null character is not there
(and the other things are gone)
best,

Jean-Fran?ois
PS: sorry for the typo in the thread title

> 
> \catcode0 12
> 
> \def\x {\romannumeral`^^@ foo bar foo bar foo bar}
> 
> \catcode0 9
> 
> \message{\meaning\x}
> 
> \immediate\write128{\meaning\x}
> 
> \bye
> 



From joseph.wright at morningstar2.co.uk  Fri Nov 20 10:32:56 2015
From: joseph.wright at morningstar2.co.uk (Joseph Wright)
Date: Fri, 20 Nov 2015 09:32:56 +0000
Subject: [luatex] read and write streams
In-Reply-To: <564EDA8C.4070209@wxs.nl>
References: <CAEW6iOiFWGFGYaHQBe_yv9np8juf4rpazkgexyTEeX1m52ahfg@mail.gmail.com>
 <CAEW6iOiu-Xmt79CtWG03rGxUnJvkKQdSBqH18=OkSHR9Mf=Zhg@mail.gmail.com>
 <564E0B85.2030707@free.fr> <1521338.AauLWFBOk1@jo.komascript.de>
 <8D807828-2271-44E3-A7AD-835957155628@free.fr> <564EDA8C.4070209@wxs.nl>
Message-ID: <564EE8C8.9050708@morningstar2.co.uk>

On 20/11/2015 08:32, Hans Hagen wrote:
>> I am sure the 80 characters vs 79 characters
>> must have been discussed on this list before,
> 
> yes and we don't care too much about it because it's already quite
> tricky to include utf in the equation (multi byte chars) - one can argue
> than a newline char is either of not in the limit
> 
> the same for logging. luatex is mostly compatible but we don't bother
> about small differences
> 
> we might at some point even drop the wrap
> 
> Hans

Note (for anyone interested) that many (though not all) of the
differences between LuaTeX and other engines can be normalised out with
appropriate scripting. The LaTeX team are doing that in l3build
(https://github.com/latex3/latex3/blob/master/l3build/l3build.lua) and
most of the differences we end up after that are 'expected' (i.e. at
present there are only a few things that are 'really' the same but which
log variation means look different).

The comments in the "formatlualog" function (line ~850) should hopefully
help anyone interested! On the wrapping specifically, LuaTeX is
relatively easy to sort out in most cases as we know it's 'out by one'
and can (most of the time) fix that. Try (u)pTeX with non-ASCII chars
for even more interesting line length changes!

Joseph


From pragma at wxs.nl  Fri Nov 20 10:33:39 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Fri, 20 Nov 2015 10:33:39 +0100
Subject: [luatex] \write16 (or 128) loosing tokens after null character
In-Reply-To: <C5F25DF7-C539-40D7-A33F-A38A7507A80A@free.fr>
References: <0D81B301-A95E-4036-99AF-3D94DC203986@free.fr>
 <C5F25DF7-C539-40D7-A33F-A38A7507A80A@free.fr>
Message-ID: <564EE8F3.1090103@wxs.nl>

On 11/20/2015 9:54 AM, jfbu wrote:
>
> Le 19 nov. 2015 ? 23:44, jfbu <jfbu at free.fr> a ?crit :
>
>> Hi,
>>
>> this might be the same issue than one with \scantokens
>> which was discussed some time ago on this list (lost the reference)
>
> this was
>
> http://tug.org/pipermail/luatex/2015-March/005138.html
> [luatex] behavior of \write in LuaTeX differs from the one of	PdfTeX/XeTeX
>
> which referenced some other threads,
>
> I tried also running pdftex with -8bit switch which
> was mentioned by Hans in the previous thread and this gives
>
> This is pdfTeX, Version 3.14159265-2.6-1.40.16 (TeX Live 2015) (preloaded format=pdftex 2015.10.14)  20 NOV 2015 09:50
> entering extended mode
>   restricted \write18 enabled.
>   %&-line parsing enabled.
> **testlualog.tex
> (./testlualog.tex macro:->\romannumeral ` foo bar foo bar foo bar
> macro:->\romannumeral ` foo bar foo bar foo bar
>   )
>
>   (contains two null characters)
>
> The log with luatex is:
>
> This is LuaTeX, Version beta-0.80.0 (TeX Live 2015) (rev 5238)  (format=luatex 2015.10.14)  20 NOV 2015 09:53
>   restricted \write18 enabled.
> **\input testlualog.tex
> (./testlualog.tex macro:->\romannumeral ` foo bar foo bar foo bar
> macro:->\romannumeral `
> )
>
> only one null character in \message output
>
> in \write output the null character is not there
> (and the other things are gone)
> best,

well, because we're in a mixed tex/lua environment 0's can  always be 
sort of an issue .. just try to avoid them .. the times that we needed 
those slots for fonts are gone (in fact: avoid chars < 32)

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From jfbu at free.fr  Fri Nov 20 10:45:59 2015
From: jfbu at free.fr (jfbu)
Date: Fri, 20 Nov 2015 10:45:59 +0100
Subject: [luatex] \write16 (or 128) loosing tokens after null character
In-Reply-To: <564EE8F3.1090103@wxs.nl>
References: <0D81B301-A95E-4036-99AF-3D94DC203986@free.fr>
 <C5F25DF7-C539-40D7-A33F-A38A7507A80A@free.fr> <564EE8F3.1090103@wxs.nl>
Message-ID: <94C5DC83-BE01-4A26-BD77-53F28103B10C@free.fr>


Le 20 nov. 2015 ? 10:33, Hans Hagen <pragma at wxs.nl> a ?crit :

> On 11/20/2015 9:54 AM, jfbu wrote:
>> 
>> Le 19 nov. 2015 ? 23:44, jfbu <jfbu at free.fr> a ?crit :
>> 
>>> Hi,
>>> 
>>> this might be the same issue than one with \scantokens
>>> which was discussed some time ago on this list (lost the reference)
>> 
>> this was
>> 
>> http://tug.org/pipermail/luatex/2015-March/005138.html
>> [luatex] behavior of \write in LuaTeX differs from the one of	PdfTeX/XeTeX
>> 
>> which referenced some other threads,
>> 
>> I tried also running pdftex with -8bit switch which
>> was mentioned by Hans in the previous thread and this gives
>> 
>> This is pdfTeX, Version 3.14159265-2.6-1.40.16 (TeX Live 2015) (preloaded format=pdftex 2015.10.14)  20 NOV 2015 09:50
>> entering extended mode
>>  restricted \write18 enabled.
>>  %&-line parsing enabled.
>> **testlualog.tex
>> (./testlualog.tex macro:->\romannumeral ` foo bar foo bar foo bar
>> macro:->\romannumeral ` foo bar foo bar foo bar
>>  )
>> 
>>  (contains two null characters)
>> 
>> The log with luatex is:
>> 
>> This is LuaTeX, Version beta-0.80.0 (TeX Live 2015) (rev 5238) (format=luatex 2015.10.14)  20 NOV 2015 09:53
>>  restricted \write18 enabled.
>> **\input testlualog.tex
>> (./testlualog.tex macro:->\romannumeral ` foo bar foo bar foo bar
>> macro:->\romannumeral `
>> )
>> 
>> only one null character in \message output
>> 
>> in \write output the null character is not there
>> (and the other things are gone)
>> best,
> 
> well, because we're in a mixed tex/lua environment 0's can  always be sort of an issue .. just try to avoid them .. the times that we needed those slots for fonts are gone (in fact: avoid chars < 32)
> 

I see, but the null slot here is not used for typesetting but
for TeX programming tricks. The specific issue I face can
be overcome by checking for Lua engine and doing extra things
(the goal is to provide some info in the log, it is peripheral
to the main package activities, but dropping it would mean
I must add an explication in the user manual as well)
but I am wondering: 

as LuaTeX enhances greatly all TeX abilities, does not that
include processing of files which may legitimately contain
ascii chars < 32 ? isn't it paradoxal if such non-typographical
programming like manipulations of data files suffers some
limitation of \write under LuaTeX ?

and why does \message behave differently than \write ?

best,
Jean-Fran?ois




From pragma at wxs.nl  Fri Nov 20 11:50:53 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Fri, 20 Nov 2015 11:50:53 +0100
Subject: [luatex] \write16 (or 128) loosing tokens after null character
In-Reply-To: <94C5DC83-BE01-4A26-BD77-53F28103B10C@free.fr>
References: <0D81B301-A95E-4036-99AF-3D94DC203986@free.fr>
 <C5F25DF7-C539-40D7-A33F-A38A7507A80A@free.fr> <564EE8F3.1090103@wxs.nl>
 <94C5DC83-BE01-4A26-BD77-53F28103B10C@free.fr>
Message-ID: <564EFB0D.1050304@wxs.nl>

On 11/20/2015 10:45 AM, jfbu wrote:
>
> Le 20 nov. 2015 ? 10:33, Hans Hagen <pragma at wxs.nl> a ?crit :
>
>> On 11/20/2015 9:54 AM, jfbu wrote:
>>>
>>> Le 19 nov. 2015 ? 23:44, jfbu <jfbu at free.fr> a ?crit :
>>>
>>>> Hi,
>>>>
>>>> this might be the same issue than one with \scantokens
>>>> which was discussed some time ago on this list (lost the reference)
>>>
>>> this was
>>>
>>> http://tug.org/pipermail/luatex/2015-March/005138.html
>>> [luatex] behavior of \write in LuaTeX differs from the one of	PdfTeX/XeTeX
>>>
>>> which referenced some other threads,
>>>
>>> I tried also running pdftex with -8bit switch which
>>> was mentioned by Hans in the previous thread and this gives
>>>
>>> This is pdfTeX, Version 3.14159265-2.6-1.40.16 (TeX Live 2015) (preloaded format=pdftex 2015.10.14)  20 NOV 2015 09:50
>>> entering extended mode
>>>   restricted \write18 enabled.
>>>   %&-line parsing enabled.
>>> **testlualog.tex
>>> (./testlualog.tex macro:->\romannumeral ` foo bar foo bar foo bar
>>> macro:->\romannumeral ` foo bar foo bar foo bar
>>>   )
>>>
>>>   (contains two null characters)
>>>
>>> The log with luatex is:
>>>
>>> This is LuaTeX, Version beta-0.80.0 (TeX Live 2015) (rev 5238) (format=luatex 2015.10.14)  20 NOV 2015 09:53
>>>   restricted \write18 enabled.
>>> **\input testlualog.tex
>>> (./testlualog.tex macro:->\romannumeral ` foo bar foo bar foo bar
>>> macro:->\romannumeral `
>>> )
>>>
>>> only one null character in \message output
>>>
>>> in \write output the null character is not there
>>> (and the other things are gone)
>>> best,
>>
>> well, because we're in a mixed tex/lua environment 0's can  always be sort of an issue .. just try to avoid them .. the times that we needed those slots for fonts are gone (in fact: avoid chars < 32)
>>
>
> I see, but the null slot here is not used for typesetting but
> for TeX programming tricks. The specific issue I face can

use other tricks (or don't care about the log)

> be overcome by checking for Lua engine and doing extra things
> (the goal is to provide some info in the log, it is peripheral
> to the main package activities, but dropping it would mean
> I must add an explication in the user manual as well)
> but I am wondering:
>
> as LuaTeX enhances greatly all TeX abilities, does not that
> include processing of files which may legitimately contain
> ascii chars < 32 ? isn't it paradoxal if such non-typographical
> programming like manipulations of data files suffers some
> limitation of \write under LuaTeX ?

it enhances and also changes a few things .. if you want to manipulatev 
data in luatex use lua

> and why does \message behave differently than \write ?

different code paths

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From d.p.carlisle at gmail.com  Fri Nov 20 14:29:33 2015
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Fri, 20 Nov 2015 13:29:33 +0000
Subject: [luatex] os.execute v \write18
Message-ID: <CAEW6iOjp4ZbietEmAuSCRs==Rb7gsHLcORwCm5OUn0Pf91pYGQ@mail.gmail.com>

Been looking at how easy it is to switch from \write18 to os.execute
(in particular whether you can emulate the former with the latter).
I got so far but wondered if I'd missed a trick that luatex has (it
would not be the first time:-)

Attached is a plain tex file that by default fails to input
\jobname.bbl (as shell escape restricted) but succeeds if
--shell-escape is given

Version B commented out uses bibtex instead of echo and that one
succeeds without --shell-escape assuming the standard texlive
settings of
shell_escape_commands = \
bibtex,bibtex8,\
extractbb,\
kpsewhich,\
makeindex,\
mpost,\
repstopdf,\

as bibtex is allowed to make the bbl file with restricted shell escape.

That's all good so far, but I'd be happy to take criticism of my lua code:-)

If the \write18 call did not have \immediate in front of it then the
lua ought to be called via \latelua rather than \directlua


(non immediate write18 is probably not used much, but you never know)


Is there any way to detect (in tex or lua) that there is a "pending"
\immediate and to delay the execution if not?

I could of course try to redefine \immediate to set some flag but it's
a fragile thing and hard to redefine as a macro and get reasonably
similar behaviour.

I had wondered if, rather than redefine \write, there would be some
lua callback on writes that I could use to divert the write to a
system call if stream=18,but I think not.


Any suggestions welcome....


Ignoring the issue and always doing the system call immediately is a
possibility: anyone wanting a system call at shipout time could use
\latelua{os.execute()} directly
but it does affect the details of what we can say about cross engine
compatibility.

David
-------------- next part --------------
A non-text attachment was scrubbed...
Name: write18.tex
Type: application/x-tex
Size: 693 bytes
Desc: not available
URL: <http://tug.org/pipermail/luatex/attachments/20151120/1ecaf7a1/attachment.tex>

From pragma at wxs.nl  Fri Nov 20 17:44:45 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Fri, 20 Nov 2015 17:44:45 +0100
Subject: [luatex] os.execute v \write18
In-Reply-To: <CAEW6iOjp4ZbietEmAuSCRs==Rb7gsHLcORwCm5OUn0Pf91pYGQ@mail.gmail.com>
References: <CAEW6iOjp4ZbietEmAuSCRs==Rb7gsHLcORwCm5OUn0Pf91pYGQ@mail.gmail.com>
Message-ID: <564F4DFD.5000507@wxs.nl>

On 11/20/2015 2:29 PM, David Carlisle wrote:
> Been looking at how easy it is to switch from \write18 to os.execute
> (in particular whether you can emulate the former with the latter).
> I got so far but wondered if I'd missed a trick that luatex has (it
> would not be the first time:-)
>
> Attached is a plain tex file that by default fails to input
> \jobname.bbl (as shell escape restricted) but succeeds if
> --shell-escape is given
>
> Version B commented out uses bibtex instead of echo and that one
> succeeds without --shell-escape assuming the standard texlive
> settings of
> shell_escape_commands = \
> bibtex,bibtex8,\
> extractbb,\
> kpsewhich,\
> makeindex,\
> mpost,\
> repstopdf,\
>
> as bibtex is allowed to make the bbl file with restricted shell escape.

these all look immediate to me

> That's all good so far, but I'd be happy to take criticism of my lua code:-)
>
> If the \write18 call did not have \immediate in front of it then the
> lua ought to be called via \latelua rather than \directlua
>
>
> (non immediate write18 is probably not used much, but you never know)
>
>
> Is there any way to detect (in tex or lua) that there is a "pending"
> \immediate and to delay the execution if not?

actually the immediate issue was why i kept the 18 as special case

now, personally i never needed a non-immediate and os.execute is like 
that (unless wrapped in latelua) so that is why dropping 18 is not that 
big a deal

> I could of course try to redefine \immediate to set some flag but it's
> a fragile thing and hard to redefine as a macro and get reasonably
> similar behaviour.

the problem with immediate is that it is not really a prefix like 
\global or \protected or ... but part if the extension loop and there it 
is just a flag and not a state (latelua is done elsewhere) .. in fact 
immediate is some kind of no-op otherwise (i considered making it some 
state but then we have rather tricky reset / expansion interactions so i 
rejected that)

so, adding extra \immediate overhead and complexity for the sake of 
execute is not going to happen

(some time ago i played more than a day with that conceptual mess and in 
the end reverted all)

> I had wondered if, rather than redefine \write, there would be some
> lua callback on writes that I could use to divert the write to a
> system call if stream=18,but I think not.

no

> Any suggestions welcome....

just provide two commands:

\immediatesystemcommand{...}
\delayedsystemcommand  {...}

> Ignoring the issue and always doing the system call immediately is a
> possibility: anyone wanting a system call at shipout time could use
> \latelua{os.execute()} directly

right

> but it does affect the details of what we can say about cross engine
> compatibility.

so make a specific execute command and implement it different for 
different engines

write18 was a strange animal anyway

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From d.p.carlisle at gmail.com  Fri Nov 20 17:57:42 2015
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Fri, 20 Nov 2015 16:57:42 +0000
Subject: [luatex] os.execute v \write18
In-Reply-To: <564F4DFD.5000507@wxs.nl>
References: <CAEW6iOjp4ZbietEmAuSCRs==Rb7gsHLcORwCm5OUn0Pf91pYGQ@mail.gmail.com>
 <564F4DFD.5000507@wxs.nl>
Message-ID: <CAEW6iOg4eQCFNhLa2e-Ws0OEzEB7Cy9kLtSzcX5WM5QzM6QxnA@mail.gmail.com>

Hans,

> so make a specific execute command and implement it different for different engines
> write18 was a strange animal anyway

Oh  for certain yes the \write18 emulation isn't designed as the ideal
interface going forward
but despite my plain tex example, as you might guess the real question
is latex and
20 or so years of legacy \write18 use.

The question we get asked all the time is how easy is it to take a
latex document and use lualatex.
so making it possible for things to work either with no change or just by adding
\usepackage{weirdwrite18hack}
is worth the effort of working out what those hacks should be, and how
far they may be expected to work.

I'm not surprised \immediate is weird in the internals it's pretty
weird in its public behaviour as well:-)

So I gather from your response that I haven't missed anything too much
so thanks for that, I'm sure we'll
be able to get something working. To be decided at what level any of
this kind of emulation is placed:
in the format, in an optional package, or just in documentation or
example code you could use.

Thanks again for the comments,

David

From luigi.scarso at gmail.com  Sat Nov 21 11:03:31 2015
From: luigi.scarso at gmail.com (luigi scarso)
Date: Sat, 21 Nov 2015 11:03:31 +0100
Subject: [luatex] Luatex 0.85.0 announcement
Message-ID: <CAG5iGsDHK45GZO5NwmkHBLhK7AX1mF6exPrayfYrq74wGz+T+w@mail.gmail.com>

New luatex release, 0.85.0

It's really a big change respect to 0.81.0
(see NEWS for a full report)
and, well,   there can be bugs (that of course we will solve).


The archives can be downloaded from supelec as usual:

        https://foundry.supelec.fr/projects/luatex/

You could also check out the sources via anonymous svn:

  svn co --username anonsvn --password anonsvn              \
      https://foundry.supelec.fr/svn/luatex/tags/beta-0.85.0

Bugs and feature requests can be added to the issue tracker at

       http://tracker.luatex.org

When you use context or latex you need an updated format. The latest
version of
context can be fetched from the context garden, latex from ctan. For latex
you can contact David and Joseph as they are dealing with the update.

Have fun,
Hans, Taco, Luigi (in this order :-) )
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20151121/5074ca95/attachment.html>

From patrick at gundla.ch  Sun Nov 22 15:58:46 2015
From: patrick at gundla.ch (Patrick Gundlach)
Date: Sun, 22 Nov 2015 15:58:46 +0100
Subject: [luatex] immediateobj() not allowed in DVI mode
Message-ID: <3F91CBC7-B181-4480-92B0-160316675381@gundla.ch>

Hi all,

with my software and the newest LuaTeX, I get the following error:

\catcode`\{=1
\catcode`\}=2
\pdfoutput1
\directlua{require("publisher.spinit")}
\end

(and of course lot's of code following in the required file which gets executed):

------------
! error  (pdf backend): immediateobj() not allowed in DVI mode (outputmode = 0).
l.4 \directlua{require("publisher.spinit")}
                                         
No pages of output.
------------

but of course I've switched into pdf output mode in line three (and in some other part of my code: tex.pdfoutput=1)

Before digging further into the code: has anybody got an idea, why LuaTeX thinks that I am in DVI mode?


Thanks
 
   Patrick




From d.p.carlisle at gmail.com  Sun Nov 22 16:05:51 2015
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Sun, 22 Nov 2015 15:05:51 +0000
Subject: [luatex] immediateobj() not allowed in DVI mode
In-Reply-To: <3F91CBC7-B181-4480-92B0-160316675381@gundla.ch>
References: <3F91CBC7-B181-4480-92B0-160316675381@gundla.ch>
Message-ID: <CAEW6iOhHUK4kYrn+g_LAOGdHxZpN9uTkhRN_coo6Zx2UfZxkPw@mail.gmail.com>

On 22 November 2015 at 14:58, Patrick Gundlach <patrick at gundla.ch> wrote:
> Hi all,
>
> with my software and the newest LuaTeX,
>

do you mean 0.80 (as in texlive 2015) or the new 0.85 test release
announced on this list yesterday
the latter doesn't define \pdfoutput (although aliases can be made)
but it's possible for some
tests to make the wrong choice, depending on exactly what tests the
code does, (we're working through
latex packages for this kind of issue now)

David

From patrick at gundla.ch  Sun Nov 22 16:23:34 2015
From: patrick at gundla.ch (Patrick Gundlach)
Date: Sun, 22 Nov 2015 16:23:34 +0100
Subject: [luatex] immediateobj() not allowed in DVI mode
In-Reply-To: <CAEW6iOhHUK4kYrn+g_LAOGdHxZpN9uTkhRN_coo6Zx2UfZxkPw@mail.gmail.com>
References: <3F91CBC7-B181-4480-92B0-160316675381@gundla.ch>
 <CAEW6iOhHUK4kYrn+g_LAOGdHxZpN9uTkhRN_coo6Zx2UfZxkPw@mail.gmail.com>
Message-ID: <548133D5-5187-4308-AA55-055C12FA0AAB@gundla.ch>

> 
> do you mean 0.80 (as in texlive 2015) or the new 0.85 test release
> announced on this list yesterday

0.85

> the latter doesn't define \pdfoutput

so it's a no-op?

but why doesn't it give an error message as undefined control sequence?


Patrick

From d.p.carlisle at gmail.com  Sun Nov 22 16:32:53 2015
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Sun, 22 Nov 2015 15:32:53 +0000
Subject: [luatex] immediateobj() not allowed in DVI mode
In-Reply-To: <548133D5-5187-4308-AA55-055C12FA0AAB@gundla.ch>
References: <3F91CBC7-B181-4480-92B0-160316675381@gundla.ch>
 <CAEW6iOhHUK4kYrn+g_LAOGdHxZpN9uTkhRN_coo6Zx2UfZxkPw@mail.gmail.com>
 <548133D5-5187-4308-AA55-055C12FA0AAB@gundla.ch>
Message-ID: <CAEW6iOg_DN--ngJQjVQgENCVrH=kYZwd1kWR2Mags-_7HcX0GA@mail.gmail.com>

> but why doesn't it give an error message as undefined control sequence?

well that's the question...
are you using a .ini file that has aliased it (new name is \outputmode)
If I add \show\pdfoutput it says

> \pdfoutput=\outputmode.

but if your lua code is doing similar tests the alias
\let\pdfoutoput=\outputmode
at the tex level may not be enough. hard to say without seeing it:-)

David



On 22 November 2015 at 15:23, Patrick Gundlach <patrick at gundla.ch> wrote:
>>
>> do you mean 0.80 (as in texlive 2015) or the new 0.85 test release
>> announced on this list yesterday
>
> 0.85
>
>> the latter doesn't define \pdfoutput
>
> so it's a no-op?
>
> but why doesn't it give an error message as undefined control sequence?
>
>
> Patrick



-- 
http://dpcarlisle.blogspot.com/

From luigi.scarso at gmail.com  Sun Nov 22 16:50:00 2015
From: luigi.scarso at gmail.com (luigi scarso)
Date: Sun, 22 Nov 2015 16:50:00 +0100
Subject: [luatex] immediateobj() not allowed in DVI mode
In-Reply-To: <548133D5-5187-4308-AA55-055C12FA0AAB@gundla.ch>
References: <3F91CBC7-B181-4480-92B0-160316675381@gundla.ch>
 <CAEW6iOhHUK4kYrn+g_LAOGdHxZpN9uTkhRN_coo6Zx2UfZxkPw@mail.gmail.com>
 <548133D5-5187-4308-AA55-055C12FA0AAB@gundla.ch>
Message-ID: <CAG5iGsDA1__ZZGk2cH4fwW0188vouGv33n8hHxANgcW_Yx4osQ@mail.gmail.com>

On Sun, Nov 22, 2015 at 4:23 PM, Patrick Gundlach <patrick at gundla.ch> wrote:

> >
> > do you mean 0.80 (as in texlive 2015) or the new 0.85 test release
> > announced on this list yesterday
>
> 0.85
>
> > the latter doesn't define \pdfoutput
>
> so it's a no-op?
>
> but why doesn't it give an error message as undefined control sequence?
>
>
> Patrick
>


$ cat knuthplain.tex
%%% knuthplain.tex
\input plain\dump

$ luatex --ini --jobname=knuthplain --progname=knuthplain knuthplain.tex

$ cat test.tex
\pdfoutput1
\bye

$ ./luatex --fmt=knuthplain test.tex
This is LuaTeX, Version beta-0.85.0 (TeX Live 2016/dev) (rev 5550)
 system commands enabled.
(./test.tex
! Undefined control sequence.
l.1 \pdfoutput
            1
? x
No pages of output.
Transcript written on test.log.

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20151122/5ae12a16/attachment.html>

From patrick at gundla.ch  Sun Nov 22 17:08:35 2015
From: patrick at gundla.ch (Patrick Gundlach)
Date: Sun, 22 Nov 2015 17:08:35 +0100
Subject: [luatex] immediateobj() not allowed in DVI mode
In-Reply-To: <CAEW6iOg_DN--ngJQjVQgENCVrH=kYZwd1kWR2Mags-_7HcX0GA@mail.gmail.com>
References: <3F91CBC7-B181-4480-92B0-160316675381@gundla.ch>
 <CAEW6iOhHUK4kYrn+g_LAOGdHxZpN9uTkhRN_coo6Zx2UfZxkPw@mail.gmail.com>
 <548133D5-5187-4308-AA55-055C12FA0AAB@gundla.ch>
 <CAEW6iOg_DN--ngJQjVQgENCVrH=kYZwd1kWR2Mags-_7HcX0GA@mail.gmail.com>
Message-ID: <497D8DE6-E8B6-4419-A946-1BE4BD73C677@gundla.ch>


> Am 22.11.2015 um 16:32 schrieb David Carlisle <d.p.carlisle at gmail.com>:
> 
>> but why doesn't it give an error message as undefined control sequence?
> 
> well that's the question...
> are you using a .ini file that has aliased it (new name is \outputmode)

oh, I see. \pdfoutput gives the error undefined control sequence, same with \outputmode:

! Undefined control sequence.
l.3 \outputmode
             1


I will dig into the problem further and report back.



Thanks 

  Patrick




From patrick at gundla.ch  Sun Nov 22 20:23:51 2015
From: patrick at gundla.ch (Patrick Gundlach)
Date: Sun, 22 Nov 2015 20:23:51 +0100
Subject: [luatex] immediateobj() not allowed in DVI mode
In-Reply-To: <CAG5iGsDA1__ZZGk2cH4fwW0188vouGv33n8hHxANgcW_Yx4osQ@mail.gmail.com>
References: <3F91CBC7-B181-4480-92B0-160316675381@gundla.ch>
 <CAEW6iOhHUK4kYrn+g_LAOGdHxZpN9uTkhRN_coo6Zx2UfZxkPw@mail.gmail.com>
 <548133D5-5187-4308-AA55-055C12FA0AAB@gundla.ch>
 <CAG5iGsDA1__ZZGk2cH4fwW0188vouGv33n8hHxANgcW_Yx4osQ@mail.gmail.com>
Message-ID: <5356F584-D837-468D-8D82-BA09F7547D5E@gundla.ch>

LuaTeX 085



Hi Luigi,

is tex.pdfoutput=1 still switching to PDF mode?

My code:


    print("A")
    tex.pdfoutput=1
    GS_State_OP_On  = pdf.immediateobj([[<< /Type/ExtGState /OP true /OPM 1 >>]])
    print("B")

gives the error:

------------------------
A

! error  (pdf backend): immediateobj() not allowed in DVI mode (outputmode = 0).
l.4 \directlua{require("publisher.spinit")}
                                         
No pages of output.
------------------------


although tex.pdfoutput should switch to PDF, right?

Patrick





From patrick at gundla.ch  Sun Nov 22 20:40:57 2015
From: patrick at gundla.ch (Patrick Gundlach)
Date: Sun, 22 Nov 2015 20:40:57 +0100
Subject: [luatex] immediateobj() not allowed in DVI mode
In-Reply-To: <5356F584-D837-468D-8D82-BA09F7547D5E@gundla.ch>
References: <3F91CBC7-B181-4480-92B0-160316675381@gundla.ch>
 <CAEW6iOhHUK4kYrn+g_LAOGdHxZpN9uTkhRN_coo6Zx2UfZxkPw@mail.gmail.com>
 <548133D5-5187-4308-AA55-055C12FA0AAB@gundla.ch>
 <CAG5iGsDA1__ZZGk2cH4fwW0188vouGv33n8hHxANgcW_Yx4osQ@mail.gmail.com>
 <5356F584-D837-468D-8D82-BA09F7547D5E@gundla.ch>
Message-ID: <48A9F8EF-A3EB-4D06-8E39-EF52F4ED1DF9@gundla.ch>


> is tex.pdfoutput=1 still switching to PDF mode?

it seems that   

tex.outputmode = 1

does the trick. Is it safe to use tex.outputmode = 1 in older versions of LuaTeX and tex.pdfoutput = 1 in newer versions? 

This is not documented (yet), that confused me...

Patrick





From patrick at gundla.ch  Sun Nov 22 20:51:28 2015
From: patrick at gundla.ch (Patrick Gundlach)
Date: Sun, 22 Nov 2015 20:51:28 +0100
Subject: [luatex] Debugging the error 'Expected a string for (S), not: nil'
Message-ID: <5CF21AB7-8C95-4A5D-B608-6840EF6969D3@gundla.ch>

Hello again,

I get the error

"Expected a string for (S), not: nil"

which seems to be related to callbacks. How can I debug, what is wrong with my code? Is something wrong with my callback re-defintions? 

Patrick




From patrick at gundla.ch  Sun Nov 22 21:17:10 2015
From: patrick at gundla.ch (Patrick Gundlach)
Date: Sun, 22 Nov 2015 21:17:10 +0100
Subject: [luatex] Debugging the error 'Expected a string for (S),
	not: nil'
In-Reply-To: <5CF21AB7-8C95-4A5D-B608-6840EF6969D3@gundla.ch>
References: <5CF21AB7-8C95-4A5D-B608-6840EF6969D3@gundla.ch>
Message-ID: <66BE026A-C42E-430F-B9C8-0E2263CF6A27@gundla.ch>


> I get the error
> 
> "Expected a string for (S), not: nil"
> 
> which seems to be related to callbacks. How can I debug, what is wrong with my code? Is something wrong with my callback re-defintions? 


More information: it seems to happen while executing the following code:

        tex.box[666] = n
        tex.shipout(666)


(n is a vlist node)

and this is the code related to printing the page number:


function print_page_number()
  texio.write(string.format("> Shipout page %d\n",current_pagenumber))
end
callback.register("start_page_number",print_page_number)
callback.register("stop_page_number",false)



Patrick




From patrick at gundla.ch  Sun Nov 22 21:44:23 2015
From: patrick at gundla.ch (Patrick Gundlach)
Date: Sun, 22 Nov 2015 21:44:23 +0100
Subject: [luatex] Debugging the error 'Expected a string for (S),
	not: nil'
In-Reply-To: <66BE026A-C42E-430F-B9C8-0E2263CF6A27@gundla.ch>
References: <5CF21AB7-8C95-4A5D-B608-6840EF6969D3@gundla.ch>
 <66BE026A-C42E-430F-B9C8-0E2263CF6A27@gundla.ch>
Message-ID: <8D662B8B-0EC3-4E32-A962-A5D2388B5E32@gundla.ch>

I am getting closer, but I don't know how to fix it:


Expected a string for (S), not: nil

is written to the terminal when "pdftex.map" is searched for with the find_map_file callback. Since I don't have a map file, I return nil (the documentation tells me: ?You have to return nil if the file cannot be found.?)

When I create an empty file 'pdftex.map', everything is fine, but I am not too keen to provide empty files to the user.


Patrick

(BTW: all LuaTeX 0.85 / Mac OS X 10.11.1)




From luigi.scarso at gmail.com  Mon Nov 23 00:17:23 2015
From: luigi.scarso at gmail.com (luigi scarso)
Date: Mon, 23 Nov 2015 00:17:23 +0100
Subject: [luatex] immediateobj() not allowed in DVI mode
In-Reply-To: <48A9F8EF-A3EB-4D06-8E39-EF52F4ED1DF9@gundla.ch>
References: <3F91CBC7-B181-4480-92B0-160316675381@gundla.ch>
 <CAEW6iOhHUK4kYrn+g_LAOGdHxZpN9uTkhRN_coo6Zx2UfZxkPw@mail.gmail.com>
 <548133D5-5187-4308-AA55-055C12FA0AAB@gundla.ch>
 <CAG5iGsDA1__ZZGk2cH4fwW0188vouGv33n8hHxANgcW_Yx4osQ@mail.gmail.com>
 <5356F584-D837-468D-8D82-BA09F7547D5E@gundla.ch>
 <48A9F8EF-A3EB-4D06-8E39-EF52F4ED1DF9@gundla.ch>
Message-ID: <CAG5iGsBHeH7FUgGJ0nG9hJgh5_W1TRQF1bzJjBafMqs-KZH6MQ@mail.gmail.com>

On Sun, Nov 22, 2015 at 8:40 PM, Patrick Gundlach <patrick at gundla.ch> wrote:

>
> > is tex.pdfoutput=1 still switching to PDF mode?
>
> it seems that
>
> tex.outputmode = 1
>
> does the trick.


yes



> Is it safe to use tex.outputmode = 1 in older versions of LuaTeX and
> tex.pdfoutput = 1 in newer versions?
>
> hm
tex.outputmode = 1 in newer versions and
tex.pdfoutput = 1 in older versions


This is not documented (yet), that confused me...
>

yes manual is still confused.
At page 203
img library.
The initializers \pdfoutput has been replaced by \outputmode and
\pdfdraftmode is now
\draftmode.

but there is still a reference to tex.pdfoutput around.


-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20151123/3e478356/attachment.html>

From luigi.scarso at gmail.com  Mon Nov 23 00:37:05 2015
From: luigi.scarso at gmail.com (luigi scarso)
Date: Mon, 23 Nov 2015 00:37:05 +0100
Subject: [luatex] Debugging the error 'Expected a string for (S),
	not: nil'
In-Reply-To: <8D662B8B-0EC3-4E32-A962-A5D2388B5E32@gundla.ch>
References: <5CF21AB7-8C95-4A5D-B608-6840EF6969D3@gundla.ch>
 <66BE026A-C42E-430F-B9C8-0E2263CF6A27@gundla.ch>
 <8D662B8B-0EC3-4E32-A962-A5D2388B5E32@gundla.ch>
Message-ID: <CAG5iGsBtX1WcRnw2AmTEyYGdoV4ahXFSakas3+m9xxZDT8nw7Q@mail.gmail.com>

On Sun, Nov 22, 2015 at 9:44 PM, Patrick Gundlach <patrick at gundla.ch> wrote:

> I am getting closer, but I don't know how to fix it:
>
>
> Expected a string for (S), not: nil
>
> is written to the terminal when "pdftex.map" is searched for with the
> find_map_file callback. Since I don't have a map file, I return nil (the
> documentation tells me: ?You have to return nil if the file cannot be
> found.?)
>
> When I create an empty file 'pdftex.map', everything is fine, but I am not
> too keen to provide empty files to the user.
>
>
>
hm could be, but I'm not able to reproduce the error ...


> Patrick
>
> (BTW: all LuaTeX 0.85 / Mac OS X 10.11.1)
>

ah... does the binary load the shared module now ?
There should be a strip -u -r that does the right job.

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20151123/a9666c2c/attachment.html>

From patrick at gundla.ch  Mon Nov 23 07:32:04 2015
From: patrick at gundla.ch (Patrick Gundlach)
Date: Mon, 23 Nov 2015 07:32:04 +0100
Subject: [luatex] shared modules
In-Reply-To: <CAG5iGsBtX1WcRnw2AmTEyYGdoV4ahXFSakas3+m9xxZDT8nw7Q@mail.gmail.com>
References: <5CF21AB7-8C95-4A5D-B608-6840EF6969D3@gundla.ch>
 <66BE026A-C42E-430F-B9C8-0E2263CF6A27@gundla.ch>
 <8D662B8B-0EC3-4E32-A962-A5D2388B5E32@gundla.ch>
 <CAG5iGsBtX1WcRnw2AmTEyYGdoV4ahXFSakas3+m9xxZDT8nw7Q@mail.gmail.com>
Message-ID: <05CA6BE5-F74B-4B8B-A982-FED72D5AD07F@gundla.ch>


> (BTW: all LuaTeX 0.85 / Mac OS X 10.11.1)
> 
> ah... does the binary load the shared module now ?
> There should be a strip -u -r that does the right job. 

I have not tried that yet.

  Patrick



From pragma at wxs.nl  Mon Nov 23 08:34:17 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Mon, 23 Nov 2015 08:34:17 +0100
Subject: [luatex] immediateobj() not allowed in DVI mode
In-Reply-To: <CAG5iGsBHeH7FUgGJ0nG9hJgh5_W1TRQF1bzJjBafMqs-KZH6MQ@mail.gmail.com>
References: <3F91CBC7-B181-4480-92B0-160316675381@gundla.ch>
 <CAEW6iOhHUK4kYrn+g_LAOGdHxZpN9uTkhRN_coo6Zx2UfZxkPw@mail.gmail.com>
 <548133D5-5187-4308-AA55-055C12FA0AAB@gundla.ch>
 <CAG5iGsDA1__ZZGk2cH4fwW0188vouGv33n8hHxANgcW_Yx4osQ@mail.gmail.com>
 <5356F584-D837-468D-8D82-BA09F7547D5E@gundla.ch>
 <48A9F8EF-A3EB-4D06-8E39-EF52F4ED1DF9@gundla.ch>
 <CAG5iGsBHeH7FUgGJ0nG9hJgh5_W1TRQF1bzJjBafMqs-KZH6MQ@mail.gmail.com>
Message-ID: <5652C179.1010706@wxs.nl>

On 11/23/2015 12:17 AM, luigi scarso wrote:
>
>
> On Sun, Nov 22, 2015 at 8:40 PM, Patrick Gundlach <patrick at gundla.ch
> <mailto:patrick at gundla.ch>> wrote:
>
>
>     > is tex.pdfoutput=1 still switching to PDF mode?
>
>     it seems that
>
>     tex.outputmode = 1
>
>     does the trick.
>
>
> yes
>
>     Is it safe to use tex.outputmode = 1 in older versions of LuaTeX and
>     tex.pdfoutput = 1 in newer versions?

apart from possible bugs all backend related things are done in the 
pdf.* functions; some backend concepts (image and reusable boxes) are 
now in the frontend

(i'll check things the coming months)

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From d.p.carlisle at gmail.com  Mon Nov 23 10:16:26 2015
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Mon, 23 Nov 2015 09:16:26 +0000
Subject: [luatex] incorrect value of status.filename in files input via a
	macro
Message-ID: <CAEW6iOi2hj+FyqREo49wZqyxRnZFjJRzB-Np=+yxBqwgoEOpFw@mail.gmail.com>

This question came originally from an (old) user report on stackexchange

http://tex.stackexchange.com/q/154933/

but I've simplified it down to a plain tex example, using the latest
0.85 release.

If you run the attached files with the command

luatex --interaction=scrollmode --file-line-error main2

Then you get the log as attached, the middle message shows the problem


./foo.sty line 2: ./main2.tex line 2


shows that during the input file status.filename is incorrectly giving the
top level file, even though status.linenumber is giving the line in this file.

The \ERROR following shows that the system does "know" the correct
input filename
and uses it in the error message when --file-line-error is used.

If you use the primitive \input directly then it does work as shown by
the second input giving

./foo.sty line 2: ./foo.sty line 2

However it is very common to have to construct the filename via a
macro argument (latex \usepackage for example, and actually latex
\input currently)


David
-------------- next part --------------
A non-text attachment was scrubbed...
Name: status-example.zip
Type: application/zip
Size: 1305 bytes
Desc: not available
URL: <http://tug.org/pipermail/luatex/attachments/20151123/7cf7f1ff/attachment.zip>

From patrick at gundla.ch  Mon Nov 23 11:28:23 2015
From: patrick at gundla.ch (Patrick Gundlach)
Date: Mon, 23 Nov 2015 11:28:23 +0100
Subject: [luatex] tex.shipout changes in 0.85?
Message-ID: <3A2966F7-0756-4CBA-BFB8-D9085A385D1B@gundla.ch>

Hello again,

I am playing with 0.85 and have a question regarding tex.shipout(). Is there any intentional change between 0.79 and 0.85?

I have the following code:

        tex.box[666] = n
        tex.shipout(666)


and feed it with exactly the same node list in both versions of LuaTeX. While version 0.79 looks OK, the contents in 0.85 is placed outside the media box of the PDF.

This is 0.79:

BT
/F1 9.99988 Tf 1 0 0 1 28.346 804.543 Tm [<0064006100680068006b>]TJ
ET

and this 0.85:

BT
/F1 10 Tf 1 0 0 1 -44 877 Tm [-34<0064006100680068006b>]TJ
ET


I guess that the mailing list does not like attachments, so I've uploaded the node list (visualization as pdf) to

https://download.speedata.de/private/nodelist085.pdf

Which is a few vlists/hlists and some glyphs and glues...


Patrick



From pragma at wxs.nl  Mon Nov 23 12:40:33 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Mon, 23 Nov 2015 12:40:33 +0100
Subject: [luatex] tex.shipout changes in 0.85?
In-Reply-To: <3A2966F7-0756-4CBA-BFB8-D9085A385D1B@gundla.ch>
References: <3A2966F7-0756-4CBA-BFB8-D9085A385D1B@gundla.ch>
Message-ID: <5652FB31.9080108@wxs.nl>

On 11/23/2015 11:28 AM, Patrick Gundlach wrote:
> Hello again,
>
> I am playing with 0.85 and have a question regarding tex.shipout(). Is there any intentional change between 0.79 and 0.85?
>
> I have the following code:
>
>          tex.box[666] = n
>          tex.shipout(666)
>
>
> and feed it with exactly the same node list in both versions of LuaTeX. While version 0.79 looks OK, the contents in 0.85 is placed outside the media box of the PDF.

did you set the h and vorigins right?


-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From patrick at gundla.ch  Mon Nov 23 12:49:37 2015
From: patrick at gundla.ch (Patrick Gundlach)
Date: Mon, 23 Nov 2015 12:49:37 +0100
Subject: [luatex] Bug #957
Message-ID: <25221D7B-A4AE-41A2-99D8-AE3B9211F4B6@gundla.ch>

Hi,


http://tracker.luatex.org/view.php?id=957

the bug has been closed, but the the problem persists. The comment relates to file reading, not file finding.

My observation is related to the find_map_file, not the read_map_file callback

Patrick




From joseph.wright at morningstar2.co.uk  Mon Nov 23 12:57:44 2015
From: joseph.wright at morningstar2.co.uk (Joseph Wright)
Date: Mon, 23 Nov 2015 11:57:44 +0000
Subject: [luatex] Luatex 0.85.0 announcement
In-Reply-To: <CAG5iGsDHK45GZO5NwmkHBLhK7AX1mF6exPrayfYrq74wGz+T+w@mail.gmail.com>
References: <CAG5iGsDHK45GZO5NwmkHBLhK7AX1mF6exPrayfYrq74wGz+T+w@mail.gmail.com>
Message-ID: <5652FF38.1040409@morningstar2.co.uk>

On 21/11/2015 10:03, luigi scarso wrote:
> New luatex release, 0.85.0
> 
> It's really a big change respect to 0.81.0
> (see NEWS for a full report)
> and, well,   there can be bugs (that of course we will solve).
> 
> 
> The archives can be downloaded from supelec as usual:
> 
>         https://foundry.supelec.fr/projects/luatex/
> 
> You could also check out the sources via anonymous svn:
> 
>   svn co --username anonsvn --password anonsvn              \
>       https://foundry.supelec.fr/svn/luatex/tags/beta-0.85.0
> 
> Bugs and feature requests can be added to the issue tracker at
> 
>        http://tracker.luatex.org
> 
> When you use context or latex you need an updated format. The latest
> version of
> context can be fetched from the context garden, latex from ctan. For latex
> you can contact David and Joseph as they are dealing with the update.

For those wishing to be on the 'burning edge' in LaTeX terms, we have
put some *very experimental* support code on GitHub:

  https://github.com/josephwright/luatex85

David and I are working with the rest of the LaTeX team to make the
changes transparent to end users: we hope to have all of this to CTAN
and into TeX Live well before any binary changes in the release version,
and will co-ordinate the same with MiKTeX.

Joseph


From patrick at gundla.ch  Mon Nov 23 13:00:13 2015
From: patrick at gundla.ch (Patrick Gundlach)
Date: Mon, 23 Nov 2015 13:00:13 +0100
Subject: [luatex] tex.shipout changes in 0.85?
In-Reply-To: <5652FB31.9080108@wxs.nl>
References: <3A2966F7-0756-4CBA-BFB8-D9085A385D1B@gundla.ch>
 <5652FB31.9080108@wxs.nl>
Message-ID: <97B2CA9B-6A12-48BB-BAD7-468F654DAC92@gundla.ch>

>> and feed it with exactly the same node list in both versions of LuaTeX. While version 0.79 looks OK, the contents in 0.85 is placed outside the media box of the PDF.
> 
> did you set the h and vorigins right?

probably not. I used to have tex.v/hoffset to -1in and tex.pdfv/horigin not set. But now I have only

  tex.pdfhorigin    = tex.sp("0mm")
  tex.pdfvorigin    = tex.pdfhorigin

and everything seems to work fine with 0.79 and 0.85

Thanks!

  Patrick




From pragma at wxs.nl  Mon Nov 23 13:14:52 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Mon, 23 Nov 2015 13:14:52 +0100
Subject: [luatex] Bug #957
In-Reply-To: <25221D7B-A4AE-41A2-99D8-AE3B9211F4B6@gundla.ch>
References: <25221D7B-A4AE-41A2-99D8-AE3B9211F4B6@gundla.ch>
Message-ID: <5653033C.4080600@wxs.nl>

On 11/23/2015 12:49 PM, Patrick Gundlach wrote:
> Hi,
>
>
> http://tracker.luatex.org/view.php?id=957
>
> the bug has been closed, but the the problem persists. The comment relates to file reading, not file finding.
>
> My observation is related to the find_map_file, not the read_map_file callback

ah, ok, we can make it more tolerant (in fact, false makes more sense)


-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From pragma at wxs.nl  Mon Nov 23 13:38:13 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Mon, 23 Nov 2015 13:38:13 +0100
Subject: [luatex] tex.shipout changes in 0.85?
In-Reply-To: <97B2CA9B-6A12-48BB-BAD7-468F654DAC92@gundla.ch>
References: <3A2966F7-0756-4CBA-BFB8-D9085A385D1B@gundla.ch>
 <5652FB31.9080108@wxs.nl> <97B2CA9B-6A12-48BB-BAD7-468F654DAC92@gundla.ch>
Message-ID: <565308B5.2080009@wxs.nl>

On 11/23/2015 1:00 PM, Patrick Gundlach wrote:
>>> and feed it with exactly the same node list in both versions of LuaTeX. While version 0.79 looks OK, the contents in 0.85 is placed outside the media box of the PDF.
>>
>> did you set the h and vorigins right?
>
> probably not. I used to have tex.v/hoffset to -1in and tex.pdfv/horigin not set. But now I have only
>
>    tex.pdfhorigin    = tex.sp("0mm")
>    tex.pdfvorigin    = tex.pdfhorigin
>
> and everything seems to work fine with 0.79 and 0.85

this 1 in offset has always been an issue in the backend

anyway 0.86 will have this:

pdf.setorigin() -- zero

pdf.setorigin(tex.sp("1in")) -- h = v = 1in

pdf.setorigin(tex.sp("1in"),tex.sp("2in"))

for now set it at the tex end.

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From kakuto at fuk.kindai.ac.jp  Mon Nov 23 15:03:07 2015
From: kakuto at fuk.kindai.ac.jp (Akira Kakuto)
Date: Mon, 23 Nov 2015 23:03:07 +0900
Subject: [luatex]  Luatex 0.85.0 announcement
Message-ID: <B22282E84DB54FB69D6D8ABCC9FFAE5E@CJ3001517A>

Hi Joseph,

> https://github.com/josephwright/luatex85

Previously I forgot to tell you a typo:


--- dvilualatex.ini.orig    Mon Nov 23 20:59:34 2015
+++ dvilualatex.ini    Mon Nov 23 22:57:21 2015
@@ -7,7 +7,7 @@
     \global\let\dvilualatex\undefined
     % Turn off PDF output
     \ifdefined\pdfoutput
-      \global\pdfouput=0 %
+      \global\pdfoutput=0 %
     \else
       \global\outputmode=0 %
     \fi


Thank you,
Akira

From patrick at gundla.ch  Tue Nov 24 20:57:34 2015
From: patrick at gundla.ch (Patrick Gundlach)
Date: Tue, 24 Nov 2015 20:57:34 +0100
Subject: [luatex] Bug #957
In-Reply-To: <25221D7B-A4AE-41A2-99D8-AE3B9211F4B6@gundla.ch>
References: <25221D7B-A4AE-41A2-99D8-AE3B9211F4B6@gundla.ch>
Message-ID: <0A9D651F-5620-4C1C-A0C1-713A6219BA45@gundla.ch>


> Am 23.11.2015 um 12:49 schrieb Patrick Gundlach <patrick at gundla.ch>:
> 
> Hi,
> 
> 
> http://tracker.luatex.org/view.php?id=957

sorry to bother: this bug is now closed as 'fixed'. Fixed in the sense of 'software change' or fixed in the sense of 'it's a feature, not a bug'?

Patrick




From elie.roux at telecom-bretagne.eu  Tue Nov 24 21:13:46 2015
From: elie.roux at telecom-bretagne.eu (=?UTF-8?Q?=c3=89lie_Roux?=)
Date: Tue, 24 Nov 2015 21:13:46 +0100
Subject: [luatex] Bug #957
In-Reply-To: <0A9D651F-5620-4C1C-A0C1-713A6219BA45@gundla.ch>
References: <25221D7B-A4AE-41A2-99D8-AE3B9211F4B6@gundla.ch>
 <0A9D651F-5620-4C1C-A0C1-713A6219BA45@gundla.ch>
Message-ID: <5654C4FA.2030907@telecom-bretagne.eu>


> sorry to bother: this bug is now closed as 'fixed'. Fixed in the
> sense of 'software change' or fixed in the sense of 'it's a feature,
> not a bug'?

The fix landed in the experimental branch:

https://foundry.supelec.fr/scm/viewvc.php/branches/experimental/source/texk/web2c/luatexdir/luafilesystem/src/lfs.c?root=luatex&r1=5286&r2=5557

Thank you,
-- 
Elie

From pragma at wxs.nl  Tue Nov 24 22:10:49 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Tue, 24 Nov 2015 22:10:49 +0100
Subject: [luatex] Bug #957
In-Reply-To: <0A9D651F-5620-4C1C-A0C1-713A6219BA45@gundla.ch>
References: <25221D7B-A4AE-41A2-99D8-AE3B9211F4B6@gundla.ch>
 <0A9D651F-5620-4C1C-A0C1-713A6219BA45@gundla.ch>
Message-ID: <5654D259.7060805@wxs.nl>

On 11/24/2015 8:57 PM, Patrick Gundlach wrote:
>
>> Am 23.11.2015 um 12:49 schrieb Patrick Gundlach <patrick at gundla.ch>:
>>
>> Hi,
>>
>>
>> http://tracker.luatex.org/view.php?id=957
>
> sorry to bother: this bug is now closed as 'fixed'. Fixed in the sense of 'software change' or fixed in the sense of 'it's a feature, not a bug'?

fixed in the next release i.e. 0.86 (for now you can just pass "")


-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From pragma at wxs.nl  Tue Nov 24 22:13:10 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Tue, 24 Nov 2015 22:13:10 +0100
Subject: [luatex] Bug #957
In-Reply-To: <5654C4FA.2030907@telecom-bretagne.eu>
References: <25221D7B-A4AE-41A2-99D8-AE3B9211F4B6@gundla.ch>
 <0A9D651F-5620-4C1C-A0C1-713A6219BA45@gundla.ch>
 <5654C4FA.2030907@telecom-bretagne.eu>
Message-ID: <5654D2E6.6000404@wxs.nl>

On 11/24/2015 9:13 PM, ?lie Roux wrote:
>
>> sorry to bother: this bug is now closed as 'fixed'. Fixed in the
>> sense of 'software change' or fixed in the sense of 'it's a feature,
>> not a bug'?
>
> The fix landed in the experimental branch:
>
> https://foundry.supelec.fr/scm/viewvc.php/branches/experimental/source/texk/web2c/luatexdir/luafilesystem/src/lfs.c?root=luatex&r1=5286&r2=5557

keep in mind that experimental is exactly that: experimental so anything 
in there can stay or go away or be just something intermediate that 
doesn't even run well ... definitely an unsupported branch so don't rely 
on it in workflows

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From luigi.scarso at gmail.com  Wed Nov 25 08:59:49 2015
From: luigi.scarso at gmail.com (luigi scarso)
Date: Wed, 25 Nov 2015 08:59:49 +0100
Subject: [luatex] Bug #957
In-Reply-To: <5654C4FA.2030907@telecom-bretagne.eu>
References: <25221D7B-A4AE-41A2-99D8-AE3B9211F4B6@gundla.ch>
 <0A9D651F-5620-4C1C-A0C1-713A6219BA45@gundla.ch>
 <5654C4FA.2030907@telecom-bretagne.eu>
Message-ID: <CAG5iGsB7GWGgc+vtXGsZB7X0Of=eiGkrDiXNwiq64Xux6H53CA@mail.gmail.com>

On Tue, Nov 24, 2015 at 9:13 PM, ?lie Roux <elie.roux at telecom-bretagne.eu>
wrote:

>
> > sorry to bother: this bug is now closed as 'fixed'. Fixed in the
> > sense of 'software change' or fixed in the sense of 'it's a feature,
> > not a bug'?
>
> The fix landed in the experimental branch:
>
>
> https://foundry.supelec.fr/scm/viewvc.php/branches/experimental/source/texk/web2c/luatexdir/luafilesystem/src/lfs.c?root=luatex&r1=5286&r2=5557
>
> Thank you,
> --
> Elie
>


hm, this is
patch for issue 956 (phg)
basically your report.

Patrick is asking for 957.

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20151125/029d751d/attachment.html>

From elie.roux at telecom-bretagne.eu  Wed Nov 25 09:34:48 2015
From: elie.roux at telecom-bretagne.eu (=?UTF-8?Q?=c3=89lie_Roux?=)
Date: Wed, 25 Nov 2015 09:34:48 +0100
Subject: [luatex] Bug #957
In-Reply-To: <CAG5iGsB7GWGgc+vtXGsZB7X0Of=eiGkrDiXNwiq64Xux6H53CA@mail.gmail.com>
References: <25221D7B-A4AE-41A2-99D8-AE3B9211F4B6@gundla.ch>
 <0A9D651F-5620-4C1C-A0C1-713A6219BA45@gundla.ch>
 <5654C4FA.2030907@telecom-bretagne.eu>
 <CAG5iGsB7GWGgc+vtXGsZB7X0Of=eiGkrDiXNwiq64Xux6H53CA@mail.gmail.com>
Message-ID: <565572A8.3050606@telecom-bretagne.eu>

> hm, this is 
> patch for issue 956 (phg) 
> basically your report.
> 
> Patrick is asking for 957.

Sorry!
-- 
Elie

From dirk.laurie at gmail.com  Sat Nov 28 10:14:05 2015
From: dirk.laurie at gmail.com (Dirk Laurie)
Date: Sat, 28 Nov 2015 11:14:05 +0200
Subject: [luatex] os.execute
Message-ID: <CABcj=tnF+DXQhFrSAJ37NqaatB9M8UBazk_iPHbUvhq0wysLFA@mail.gmail.com>

In Lua 5.2, the definition of os.execute changed to:

This function is equivalent to the ISO C function system. It passes
command to be executed by an operating system shell. Its first result
is true if the command terminated successfully, or nil otherwise.
After this first result the function returns a string and a number, as
follows:

"exit": the command terminated normally; the following number is the
exit status of the command.
"signal": the command was terminated by a signal; the following number
is the signal that terminated the command.

When called without a command, os.execute returns a boolean that is
true if a shell is available.

In Lua 5.1, it was:

This function is equivalent to the C function system. It passes
command to be executed by an operating system shell. It returns a
status code, which is system-dependent. If command is absent, then it
returns nonzero if a shell is available and zero otherwise.

In LuaTeX, Version beta-0.76.0-2013121407  (TeX Live 2013/dev/Debian),
_VERSION is "Lua 5.2" but os.execute still behaves as in Lua 5.1.

Is this still true in Version 0.85.0? If so, is it a policy decision
that one can rely on?

From luigi.scarso at gmail.com  Sat Nov 28 15:08:43 2015
From: luigi.scarso at gmail.com (luigi scarso)
Date: Sat, 28 Nov 2015 15:08:43 +0100
Subject: [luatex] os.execute
In-Reply-To: <CABcj=tnF+DXQhFrSAJ37NqaatB9M8UBazk_iPHbUvhq0wysLFA@mail.gmail.com>
References: <CABcj=tnF+DXQhFrSAJ37NqaatB9M8UBazk_iPHbUvhq0wysLFA@mail.gmail.com>
Message-ID: <CAG5iGsBjXg-fXeREx0LHePmgUaxr4NNsmuWeHLPX6jdvdkQHyw@mail.gmail.com>

On Sat, Nov 28, 2015 at 10:14 AM, Dirk Laurie <dirk.laurie at gmail.com> wrote:

> In Lua 5.2, the definition of os.execute changed to:
>
> This function is equivalent to the ISO C function system. It passes
> command to be executed by an operating system shell. Its first result
> is true if the command terminated successfully, or nil otherwise.
> After this first result the function returns a string and a number, as
> follows:
>
> "exit": the command terminated normally; the following number is the
> exit status of the command.
> "signal": the command was terminated by a signal; the following number
> is the signal that terminated the command.
>
> When called without a command, os.execute returns a boolean that is
> true if a shell is available.
>
> In Lua 5.1, it was:
>
> This function is equivalent to the C function system. It passes
> command to be executed by an operating system shell. It returns a
> status code, which is system-dependent. If command is absent, then it
> returns nonzero if a shell is available and zero otherwise.
>
> In LuaTeX, Version beta-0.76.0-2013121407  (TeX Live 2013/dev/Debian),
> _VERSION is "Lua 5.2" but os.execute still behaves as in Lua 5.1.
>
> Is this still true in Version 0.85.0? If so, is it a policy decision
> that one can rely on?
>


Thank you for the report.
We are seeing if we can jump to 5.3,
at some moment we will review also os.execute.



-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20151128/9b66e1cd/attachment.html>

From reinhard.kotucha at web.de  Sat Nov 28 21:39:40 2015
From: reinhard.kotucha at web.de (Reinhard Kotucha)
Date: Sat, 28 Nov 2015 21:39:40 +0100
Subject: [luatex] os.execute
In-Reply-To: <CAG5iGsBjXg-fXeREx0LHePmgUaxr4NNsmuWeHLPX6jdvdkQHyw@mail.gmail.com>
References: <CABcj=tnF+DXQhFrSAJ37NqaatB9M8UBazk_iPHbUvhq0wysLFA@mail.gmail.com>
 <CAG5iGsBjXg-fXeREx0LHePmgUaxr4NNsmuWeHLPX6jdvdkQHyw@mail.gmail.com>
Message-ID: <22106.4364.860729.662189@zaphod.ms25.net>

On 2015-11-28 at 15:08:43 +0100, luigi scarso wrote:

 > On Sat, Nov 28, 2015 at 10:14 AM, Dirk Laurie <dirk.laurie at gmail.com> wrote:
 > 
 >     In Lua 5.2, the definition of os.execute changed to:
 >    
 >     This function is equivalent to the ISO C function system. It passes
 >     command to be executed by an operating system shell. Its first result
 >     is true if the command terminated successfully, or nil otherwise.
 >     After this first result the function returns a string and a number, as
 >     follows:
 >    
 >     "exit": the command terminated normally; the following number is the
 >     exit status of the command.
 >     "signal": the command was terminated by a signal; the following number
 >     is the signal that terminated the command.
 >    
 >     When called without a command, os.execute returns a boolean that is
 >     true if a shell is available.
 >    
 >     In Lua 5.1, it was:
 >    
 >     This function is equivalent to the C function system. It passes
 >     command to be executed by an operating system shell. It returns a
 >     status code, which is system-dependent. If command is absent, then it
 >     returns nonzero if a shell is available and zero otherwise.
 >    
 >     In LuaTeX, Version beta-0.76.0-2013121407? (TeX Live 2013/dev/Debian),
 >     _VERSION is "Lua 5.2" but os.execute still behaves as in Lua 5.1.
 >    
 >     Is this still true in Version 0.85.0? If so, is it a policy decision
 >     that one can rely on?
 > 
 > Thank you for the report.
 > We are seeing if we can jump to 5.3,
 > at some moment we will review also os.execute.

Hi Luigi,
as far as signals are concerned, I don't know whether they are
properly supported by Windows.  Honestly, I doubt.  Thus I recommend
to test them with stock Lua on various versions of Windows before
adapting LuaTeX.

Regards,
  Reinhard

-- 
------------------------------------------------------------------
Reinhard Kotucha                            Phone: +49-511-3373112
Marschnerstr. 25
D-30167 Hannover                    mailto:reinhard.kotucha at web.de
------------------------------------------------------------------


From pragma at wxs.nl  Sun Nov 29 11:05:34 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Sun, 29 Nov 2015 11:05:34 +0100
Subject: [luatex] os.execute
In-Reply-To: <22106.4364.860729.662189@zaphod.ms25.net>
References: <CABcj=tnF+DXQhFrSAJ37NqaatB9M8UBazk_iPHbUvhq0wysLFA@mail.gmail.com>
 <CAG5iGsBjXg-fXeREx0LHePmgUaxr4NNsmuWeHLPX6jdvdkQHyw@mail.gmail.com>
 <22106.4364.860729.662189@zaphod.ms25.net>
Message-ID: <565ACDEE.1020203@wxs.nl>

On 11/28/2015 9:39 PM, Reinhard Kotucha wrote:
> On 2015-11-28 at 15:08:43 +0100, luigi scarso wrote:
>
>   > On Sat, Nov 28, 2015 at 10:14 AM, Dirk Laurie <dirk.laurie at gmail.com> wrote:
>   >
>   >     In Lua 5.2, the definition of os.execute changed to:
>   >
>   >     This function is equivalent to the ISO C function system. It passes
>   >     command to be executed by an operating system shell. Its first result
>   >     is true if the command terminated successfully, or nil otherwise.
>   >     After this first result the function returns a string and a number, as
>   >     follows:
>   >
>   >     "exit": the command terminated normally; the following number is the
>   >     exit status of the command.
>   >     "signal": the command was terminated by a signal; the following number
>   >     is the signal that terminated the command.
>   >
>   >     When called without a command, os.execute returns a boolean that is
>   >     true if a shell is available.
>   >
>   >     In Lua 5.1, it was:
>   >
>   >     This function is equivalent to the C function system. It passes
>   >     command to be executed by an operating system shell. It returns a
>   >     status code, which is system-dependent. If command is absent, then it
>   >     returns nonzero if a shell is available and zero otherwise.
>   >
>   >     In LuaTeX, Version beta-0.76.0-2013121407  (TeX Live 2013/dev/Debian),
>   >     _VERSION is "Lua 5.2" but os.execute still behaves as in Lua 5.1.
>   >
>   >     Is this still true in Version 0.85.0? If so, is it a policy decision
>   >     that one can rely on?
>   >
>   > Thank you for the report.
>   > We are seeing if we can jump to 5.3,
>   > at some moment we will review also os.execute.
>
> Hi Luigi,
> as far as signals are concerned, I don't know whether they are
> properly supported by Windows.  Honestly, I doubt.  Thus I recommend
> to test them with stock Lua on various versions of Windows before
> adapting LuaTeX.

we might just as well keep the current implementation as it also needs 
to hook in security options so we don't have to follow stock lua here; 
one can always wrap os.execute into something that does what one wants

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From d.p.carlisle at gmail.com  Mon Nov 30 12:06:36 2015
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Mon, 30 Nov 2015 11:06:36 +0000
Subject: [luatex] default font loader for define_font callback
Message-ID: <CAEW6iOjNrpPTDAPupf+JJq__OHrsHng+_Lyi0mPZ-dG0T+hrOQ@mail.gmail.com>

I've been experimenting with a modified font loader (after some hints
from Hans in an earlier thread on how to show the same name as
pdftex in box logging).

The details of that code don't matter here as the structure of the
callback function mimics that of the vf example in section 4.2.2 of the
manual:

if something .. some code else call font.read_tfm.

However I am getting different results from using font.read_tfm than
not having a callback at all.

with the following test case and plain luatex as built in texlive

\tracingonline1

\ifx\directlua\undefined\else
\directlua{
% manual sec 4.2.2, simplified
 callback.register('define_font',
    function(name,size) local f=font.read_tfm(name,size) return f end)
% even simpler version (acts same as above)
% callback.register('define_font',font.read_tfm)
}
\fi

\font\x=cmr12

\setbox0\hbox{\x va}
\showbox0

abc \box0

\bye



Then with pdftex I get

.\kern-0.65277


but with luatex 0.80 and 0.85 the kern is halved and I get

.\kern-0.32639

If I don't register a callback, I get the same value as pdftex.

Is this a bug or am I doing something wrong, what is the recommended form
to have a define_font callback that in some cases needs to "do the
default thing"

David

From luatex at nililand.de  Mon Nov 30 12:50:22 2015
From: luatex at nililand.de (Ulrike Fischer)
Date: Mon, 30 Nov 2015 12:50:22 +0100
Subject: [luatex] default font loader for define_font callback
References: <CAEW6iOjNrpPTDAPupf+JJq__OHrsHng+_Lyi0mPZ-dG0T+hrOQ@mail.gmail.com>
Message-ID: <1p1lc1pg4yo7d$.dlg@nililand.de>

Am Mon, 30 Nov 2015 11:06:36 +0000 schrieb David Carlisle:


> Then with pdftex I get
> 
> .\kern-0.65277
> 
> 
> but with luatex 0.80 and 0.85 the kern is halved and I get
> 
> .\kern-0.32639
> 

The curious thing is that not all kern values are affected. I played
a bit around also with latex examples (and luaotfload) and got a
different value only for va but not for VA or Va:

pdflatex: 

> \box38=
\hbox(16.99782+0.0)x96.45274, direction TLT
.\OT1/cmr/m/n/24.88 V
.\kern-2.59966
.\OT1/cmr/m/n/24.88 A
.\glue 7.51096 plus 3.89554 minus 2.60223
.\OT1/cmr/m/n/24.88 v
.\kern-0.64993
.\OT1/cmr/m/n/24.88 a
.\glue 7.51096 plus 3.89944 minus 2.59964
.\OT1/cmr/m/n/24.88 V
.\kern-1.94974
.\OT1/cmr/m/n/24.88 a

lualatex

> \box38=
\hbox(16.99782+0.0)x95.80286
.\OT1/cmr/m/n/24.88 V
.\kern-2.59966
.\OT1/cmr/m/n/24.88 A
.\glue 7.51096 plus 3.89554 minus 2.60223
.\OT1/cmr/m/n/24.88 v
.\kern-1.29982
.\OT1/cmr/m/n/24.88 a
.\glue 7.51096 plus 3.89944 minus 2.59964
.\OT1/cmr/m/n/24.88 V
.\kern-1.94974
.\OT1/cmr/m/n/24.88 a

-- 
Ulrike Fischer 
http://www.troubleshooting-tex.de/


From luatex at nililand.de  Mon Nov 30 14:19:47 2015
From: luatex at nililand.de (Ulrike Fischer)
Date: Mon, 30 Nov 2015 14:19:47 +0100
Subject: [luatex] default font loader for define_font callback
References: <CAEW6iOjNrpPTDAPupf+JJq__OHrsHng+_Lyi0mPZ-dG0T+hrOQ@mail.gmail.com>
 <1p1lc1pg4yo7d$.dlg@nililand.de>
Message-ID: <4zd0g29oyg9f.dlg@nililand.de>

Am Mon, 30 Nov 2015 12:50:22 +0100 schrieb Ulrike Fischer:

> The curious thing is that not all kern values are affected. I played
> a bit around also with latex examples (and luaotfload) and got a
> different value only for va but not for VA or Va:

I think I found the reason why only va is affected. The relevant
part of the ligtable looks like this:


  (STOP)
   (LABEL C k)
   (LABEL C v)
   (KRN C a R -0.054398) %<--
   (LABEL C w)
   (KRN C e R -0.027199)
   (KRN C a R -0.027199) %<--
   (KRN C o R -0.027199)
   (KRN C c R -0.027199)
 (STOP)

As one can see it this section there are two settings for char a -
the one for va and the other for wa. And luatex picks up the second
value. If one inserts a (STOP) or remove the second (KRN C a R
-0.027199) the problem is gone. 

The question is if this is a luatex bug or if luatex does reveal a
bug in the ligtable of cmr12 ;-).

-- 
Ulrike Fischer 
http://www.troubleshooting-tex.de/


From pragma at wxs.nl  Mon Nov 30 16:54:01 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Mon, 30 Nov 2015 16:54:01 +0100
Subject: [luatex] default font loader for define_font callback
In-Reply-To: <4zd0g29oyg9f.dlg@nililand.de>
References: <CAEW6iOjNrpPTDAPupf+JJq__OHrsHng+_Lyi0mPZ-dG0T+hrOQ@mail.gmail.com>
 <1p1lc1pg4yo7d$.dlg@nililand.de> <4zd0g29oyg9f.dlg@nililand.de>
Message-ID: <565C7119.6060709@wxs.nl>

On 11/30/2015 2:19 PM, Ulrike Fischer wrote:
> Am Mon, 30 Nov 2015 12:50:22 +0100 schrieb Ulrike Fischer:
>
>> The curious thing is that not all kern values are affected. I played
>> a bit around also with latex examples (and luaotfload) and got a
>> different value only for va but not for VA or Va:
>
> I think I found the reason why only va is affected. The relevant
> part of the ligtable looks like this:
>
>
>    (STOP)
>     (LABEL C k)
>     (LABEL C v)
>     (KRN C a R -0.054398) %<--
>     (LABEL C w)
>     (KRN C e R -0.027199)
>     (KRN C a R -0.027199) %<--
>     (KRN C o R -0.027199)
>     (KRN C c R -0.027199)
>   (STOP)
>
> As one can see it this section there are two settings for char a -
> the one for va and the other for wa. And luatex picks up the second
> value. If one inserts a (STOP) or remove the second (KRN C a R
> -0.027199) the problem is gone.
>
> The question is if this is a luatex bug or if luatex does reveal a
> bug in the ligtable of cmr12 ;-).

It looks like the first has to win which indeed happens in kern lookups. 
So, now we do the same in the tolua interface. A patched version now gives

v={
  ["depth"]=0,
  ["height"]=338603,
  ["italic"]=10695,
  ["kerns"]={
   [97]=-42780,
   [99]=-21390,
   [101]=-21390,
   [111]=-21390,
  },
  ["width"]=406410,
}

w={
  ["depth"]=0,
  ["height"]=338603,
  ["italic"]=10695,
  ["kerns"]={
   [97]=-21390,
   [99]=-21390,
   [101]=-21390,
   [111]=-21390,
  },
  ["width"]=556140,
}

of course one can wonder if va and wa need a different kern and

Taco & Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From d.p.carlisle at gmail.com  Mon Nov 30 17:10:04 2015
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Mon, 30 Nov 2015 16:10:04 +0000
Subject: [luatex] default font loader for define_font callback
In-Reply-To: <565C7119.6060709@wxs.nl>
References: <CAEW6iOjNrpPTDAPupf+JJq__OHrsHng+_Lyi0mPZ-dG0T+hrOQ@mail.gmail.com>
 <1p1lc1pg4yo7d$.dlg@nililand.de>	<4zd0g29oyg9f.dlg@nililand.de>
 <565C7119.6060709@wxs.nl>
Message-ID: <CAEW6iOiMwqTvWw1gTHoMuidhGBAXgDZPwwXsQ8uqgMpP1y8i8w@mail.gmail.com>

> Taco & Hans
>

Thanks to you both and Ulrike for the quick fix,

David

