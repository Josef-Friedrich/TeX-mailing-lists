From mgalasi at gmail.com  Wed Sep  2 13:57:43 2015
From: mgalasi at gmail.com (massimo galasi)
Date: Wed, 2 Sep 2015 13:57:43 +0200
Subject: [luatex] Information about luatex
Message-ID: <CAH6e64NT9zC-jMNVB11i3PUijbNC3DyA0sAp=e21qjBX5EhzUw@mail.gmail.com>

Good morning,

I'm a java developer and I'd like to know if there is a way to generate pdf
from luatex using java

Thanks

Galasi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20150902/1539761c/attachment.html>

From luigi.scarso at gmail.com  Wed Sep  2 14:16:04 2015
From: luigi.scarso at gmail.com (luigi scarso)
Date: Wed, 2 Sep 2015 14:16:04 +0200
Subject: [luatex] Information about luatex
In-Reply-To: <CAH6e64NT9zC-jMNVB11i3PUijbNC3DyA0sAp=e21qjBX5EhzUw@mail.gmail.com>
References: <CAH6e64NT9zC-jMNVB11i3PUijbNC3DyA0sAp=e21qjBX5EhzUw@mail.gmail.com>
Message-ID: <CAG5iGsC76G=E8rQHS8qNE1ujATRQTEJTrb6vj4fZ3aBO4VrAvA@mail.gmail.com>

On Wed, Sep 2, 2015 at 1:57 PM, massimo galasi <mgalasi at gmail.com> wrote:

> Good morning,
>
> I'm a java developer and I'd like to know if there is a way to generate
> pdf from luatex using java
>
> Thanks
>
> Galasi
>

luatex is (currently) a program, so you can  call it from within a java
process
(of course luatex itself almost does nothing of useful, you need a format
as plain.tex or lualatex or context).

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20150902/d70925cb/attachment.html>

From cereda.paulo at gmail.com  Wed Sep  2 15:52:22 2015
From: cereda.paulo at gmail.com (Paulo Roberto Massa Cereda)
Date: Wed, 2 Sep 2015 10:52:22 -0300
Subject: [luatex] Information about luatex
Message-ID: <55E6FF16.5010905@gmail.com>

Hello,

You could invoke the corresponding engine from Java on your source file 
as a OS process call and handle the result. I'd suggest using 
ProcessBuilder (which is available since Java 5) in order to build and 
run a process call:

http://docs.oracle.com/javase/7/docs/api/java/lang/ProcessBuilder.html

Another option is to use a wrapper library such as Commons Exec, which 
uses ProcessBuilder under the hood, but with a more intuitive interface:

https://commons.apache.org/proper/commons-exec/

All the best!

Paulo

(PS: sorry for not actually replying to the previous messages, I 
registered to this mailing list just now in order to contribute with my 
humble insights on this subject)

From martin at oneiros.de  Wed Sep  2 16:10:30 2015
From: martin at oneiros.de (=?UTF-8?Q?Martin_Schr=C3=B6der?=)
Date: Wed, 2 Sep 2015 16:10:30 +0200
Subject: [luatex] Information about luatex
In-Reply-To: <CAH6e64NT9zC-jMNVB11i3PUijbNC3DyA0sAp=e21qjBX5EhzUw@mail.gmail.com>
References: <CAH6e64NT9zC-jMNVB11i3PUijbNC3DyA0sAp=e21qjBX5EhzUw@mail.gmail.com>
Message-ID: <CAP7DCDeQjHQrHjP1o7jKSOyH4wNJ6NB-Qa7zkX8Ct540S3ZoUg@mail.gmail.com>

2015-09-02 13:57 GMT+02:00 massimo galasi <mgalasi at gmail.com>:
> I'm a java developer and I'd like to know if there is a way to generate pdf
> from luatex using java

Yes. BTDT.

From kalrish.baakjen at gmail.com  Sat Sep  5 00:43:01 2015
From: kalrish.baakjen at gmail.com (=?UTF-8?Q?Kalrish_B=C3=A4akjen?=)
Date: Sat, 5 Sep 2015 00:43:01 +0200
Subject: [luatex] Allowing or switching to string indexes in Lua bytecode
	registers
Message-ID: <CA+FEEpzNoBJKc5or1cZpnsaGt7Xk2yJZzGXd2DMYPdvo7JZ5RA@mail.gmail.com>

Currently, all array elements of the lua.bytecode table, which must be
functions, are dumped as Lua bytecode to the format file by iniTeX. This
functionality is useful if one is dumping his own format from a split
preamble (to decrease compilation time) and uses custom Lua code: to avoid
loading it every time, one can assign consecutive slots of lua.bytecode to
the functions returned by loadfile, and then, in the main document, execute
those functions to recreate the code. More information about this can be
found in section 4.8.1 ("LUA bytecode registers") of the LuaTeX Reference
Manual[1] and in this StackExchange question[2].

I think this functionality is also interesting for packages because it
would allow for a clean way of dumping them to a format, if the user so
desires. Currently, packages which use Lua code, such as fontspec or
polyglossia, can't be "preloaded" in a format file because the Lua code
that they load is not saved and, thus, cannot be restored in the actual
run. The same person who asked [2] already considered using \everyjob (in
combination with the \directlua call that loads the code) to solve this
issue. While that solution would indeed make it possible to dump those
packages, it would be a trick in the sense that Lua code would be loaded
every run. Since users (usually) dump their own format to save time, this
doesn't seem to fit.

However, as far as I know, this functionality is restricted to user code
and can't be effectively leveraged by packages, because the indexes of
lua.bytecode are numbers and there is no reasonable relation between
numbers and package names. Not even hashes of the names could be used, as
far as I understand, because iniLuaTeX only dumps the array part of the
table (that is: the consecutive non-nil slots, starting from 1).

Therefore, I suggest that this mechanism (the Lua bytecode registers
dumping logic) is either extended to allow the use of string indexes, or
entirely switched to them (only strings allowed as indexes). That way,
packages could do (Lua code follows):

-- If there are no errors, loadfile returns the compiled chunk as a
function; otherwise, it returns nil. assert returns all its arguments on
success. The combination of the two is a convenient idiom for
unconditionally loading Lua chunks. See [3] and [4]. So, if everything goes
well, assert shall return what loadfile returned, that is, the chunk as a
function (which should be executed later to "recreate" the chunk)
local shiny_package_chunk = assert( loadfile( 'my_things.lua' ) )
-- This is for savvy users: it stores the "magical function" in a bytecode
register. This function shall be dumped into the format so that, later, it
could be loaded and run
lua.setbytecode( 'shiny_package' , shiny_package_chunk )
-- Execute the "magical bootstrapping function" to load the chunk; this is
for users that don't dump their own format
shiny_package_chunk()

Then, on the TeX side, just this little piece for the adventurers:
% On every run, execute that function to load the chunk that was processed
earlier
\everyjob\expandafter{ \the\everyjob\directlua{
lua.getbytecode('shiny_package')() } }

Please, excuse any problems with this code; I have taken it from my project
and am no TeX expert.

I have tried to summarize it all. I'm aware that my approach to the problem
possibly conflicts with the approach taken for module loading by the
luatexbase-modutils package[5], but am hopeful that the aforementioned
package could be made to work with this method (I think that only the
\RequireLuaModule macro would have to be touched). I have also tried to
find the most about this matter so as to better know it (by the way,
there's also this conversation[6], which may be of interest to you).
Please, excuse any faults and share your ideas on this.

1: http://www.luatex.org/svn/trunk/manual/luatexref-t.pdf
2:
http://tex.stackexchange.com/questions/121728/how-can-i-dump-lua-code-to-a-format-file
3: http://www.lua.org/manual/5.2/manual.html#pdf-assert
4: http://www.lua.org/manual/5.2/manual.html#pdf-loadfile
5:
http://osl.ugr.es/CTAN/macros/luatex/generic/luatexbase/luatexbase-modutils.pdf
6:
http://compgroups.net/comp.text.tex/-luatex-possible-issue-with-graphicx-and-format/1937166
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20150905/f9d3eb9f/attachment.html>

From d.p.carlisle at gmail.com  Sat Sep  5 14:08:42 2015
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Sat, 5 Sep 2015 13:08:42 +0100
Subject: [luatex] Allowing or switching to string indexes in Lua
	bytecode registers
In-Reply-To: <CA+FEEpzNoBJKc5or1cZpnsaGt7Xk2yJZzGXd2DMYPdvo7JZ5RA@mail.gmail.com>
References: <CA+FEEpzNoBJKc5or1cZpnsaGt7Xk2yJZzGXd2DMYPdvo7JZ5RA@mail.gmail.com>
Message-ID: <CAEW6iOhN3yOdWw=R53ntvAKHNW4CoDQiUo7bpCOHtCBK1kk57w@mail.gmail.com>

On 4 September 2015 at 23:43, Kalrish B?akjen <kalrish.baakjen at gmail.com> wrote:
> Currently, all array elements of the lua.bytecode table, which must be
> functions, are dumped as Lua bytecode to the format file by iniTeX. This
> functionality is useful if one is dumping his own format from a split
> preamble (to decrease compilation time) and uses custom Lua code: to avoid
> loading it every time, one can assign consecutive slots of lua.bytecode to
> the functions returned by loadfile, and then, in the main document, execute
> those functions to recreate the code. More information about this can be
> found in section 4.8.1 ("LUA bytecode registers") of the LuaTeX Reference
> Manual[1] and in this StackExchange question[2].
>
> I think this functionality is also interesting for packages because it would
> allow for a clean way of dumping them to a format, if the user so desires.
> Currently, packages which use Lua code, such as fontspec or polyglossia,
> can't be "preloaded" in a format file because the Lua code that they load is
> not saved and, thus, cannot be restored in the actual run. The same person
> who asked [2] already considered using \everyjob (in combination with the
> \directlua call that loads the code) to solve this issue. While that
> solution would indeed make it possible to dump those packages, it would be a
> trick in the sense that Lua code would be loaded every run. Since users
> (usually) dump their own format to save time, this doesn't seem to fit.
>
> However, as far as I know, this functionality is restricted to user code and
> can't be effectively leveraged by packages, because the indexes of
> lua.bytecode are numbers and there is no reasonable relation between numbers
> and package names. Not even hashes of the names could be used, as far as I
> understand, because iniLuaTeX only dumps the array part of the table (that
> is: the consecutive non-nil slots, starting from 1).
>
> Therefore, I suggest that this mechanism (the Lua bytecode registers dumping
> logic) is either extended to allow the use of string indexes, or entirely
> switched to them (only strings allowed as indexes). That way, packages could
> do (Lua code follows):


The engine does not need to change if  tex allocation macros are available for
bytecodes as they are for other register types, as then any name/number mapping
is available in TeX code and so will be dumped into the format.


In the ltluatex code that is planned to be part of the next LaTeX
release and form the basis of
a luatexbase update, there was already such an allocator for lua
functions, but the
bytecode allocator was just in lua.  We have just adjusted it so that
the allocation count
for bytecodes is also stored in a tex count register.

I think this addresses your use case, you can see the code for the
core ltluatex in the latex svn
and for a luatexbase update based on this in github.


http://latex-project.org/svnroot/latex2e-public/trunk/base/

and

https://github.com/josephwright/ltluatexsupp

Like the original luatexbase code, the ltluatex code is designed to
run in plain TeX despite its latex roots.

David


From d.p.carlisle at gmail.com  Sat Sep  5 19:17:02 2015
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Sat, 5 Sep 2015 18:17:02 +0100
Subject: [luatex] Allowing or switching to string indexes in Lua
	bytecode registers
In-Reply-To: <CA+FEEpzJ2CQm4PVCpupcLmy2a8U3DkFtVa_sEe1DC5fTAuF-Bg@mail.gmail.com>
References: <CA+FEEpzNoBJKc5or1cZpnsaGt7Xk2yJZzGXd2DMYPdvo7JZ5RA@mail.gmail.com>
 <CAEW6iOhN3yOdWw=R53ntvAKHNW4CoDQiUo7bpCOHtCBK1kk57w@mail.gmail.com>
 <CA+FEEpzJ2CQm4PVCpupcLmy2a8U3DkFtVa_sEe1DC5fTAuF-Bg@mail.gmail.com>
Message-ID: <CAEW6iOjGaCRsHrv6x_kFTEvAfvN+Srz6diwqefqCPup+WxFX9A@mail.gmail.com>

On 5 September 2015 at 17:42, Kalrish B?akjen <kalrish.baakjen at gmail.com> wrote:



> Thank you very much!
>
> I use TeX Live and, unfortunately, there doesn't seem to be a way to
> use SVN LaTeX here. As I think ltluatex.dtx[1] is the relevant file, I
> have tried to locate it in my tree, but haven't found it. I haven't
> been able to use the Lua function (luatexbase.new_bytecode, as it
> appears in ltluatex.dtx[1]) either; could you please tell me which
> package must I load?

The relevant files are not yet on ctan (and so not in texlive) the sources
are available from the web view of the svn, but you would need to
extract the ltluatex.tex and ltluatex.lua files or wait for the next release
(hopefully in a few weeks)

meanwhile if you have ltluatex.dtx from SVN (make sure you have the current one,
it's been updated a few times today)  then just make a file
ltluatex.ins that looks like

\input docstrip
\generate{\file{ltluatex.tex}{\from{ltluatex.dtx}{tex,plain}}}
\nopostamble
\nopreamble
\generate{\file{ltluatex.lua}{\from{ltluatex.dtx}{lua}}}

run tex in that to get ltluatex.tex and .lua then

\input{ltluatex}

in a document should work.


>
> In the meantime, I've been scratching my head. My idea, for packages
> that use Lua code, is as follows:
> - Regardless of whether or not we are on iniLuaTeX, we must get a
> loader function for our Lua code through loadfile:
>   local loader_function = assert( loadfile('mycode.lua') )
> - If we are on iniLuaTeX, we must:
>  1. ask the bytecode allocator (\newluabytecode) for a number (the
> index), which we store in \myindex and which, I believe, would be
> dumped in the format:
>   \newluabytecode\myindex
>  2. save our Lua loader function, which we got by loadfile, in the
> slot referenced by that index:
>   \directlua{ lua.bytecode[\myindex] = loader_function }
>  3. specify an "everyjob" via \everyjob that restores our Lua code by
> calling the loader function stored at the bytecode slot referenced by
> the TeX index:
>   \everyjob\expandafter{ \the\everyjob\directlua{ lua.bytecode[\myindex]() } }
> - If we are on a regular run, we just have to run the loader function
> to actually load our Lua code and be able to use it:
>   \directlua{ loader_function() }

Yes, something like that:-)
>
> This logic, however, doesn't seem to play well with Lua's require
> (and, by extension, luatexbase-modutils' require_module, which uses it
> under the hood) function[2], because it loads the Lua code internally;

in ltluatex the assumption is that you can just use require() rather than
needing a special wrapper (as require uses kpse anyway now)
the luatexbase emulation package does define \RequireLuaModule

> packages doing \dofile{ require('mycode.lua') } have no way of
> accessing the loader function, which is what needs to be stored in
> bytecode registers.

well yes that's true (suggestions welcome) but it seems to me that you can't
byte compile arbitrary code, and this is such a case, that  (for
simple use at least)
the code could be structured so that you can  byte compile each file separately.


On the other hand a more general scheme could probably work although
I'd need to try building a test case to follow the details below.
I see the general direction you are suggesting but some of the details
escape me:-)

>  Perhaps a custom searcher (see [3]) could be
> introduced. This searcher would be based on the default second
> searcher. First, it would load the code from the resolved path:
>   -- resolved_path is the path of the file containing the Lua code;
> this path would be obtained with package.searchpath
>   local loader_function = assert( loadfile(resolved_path) )
> This special searcher would have to know if it's on a dumping session
> or a normal run.
> If on a normal run, it would just execute that loader function to
> actually load the code and be done with it:
>   loader_function()
> If on iniLuaTeX, it would get a bytecode register index and save the
> loader function in the corresponding slot. I haven't yet figured out,
> however, how would this special searcher of mine keep track of the
> bytecode register index that it had been assigned by the allocation
> manager. Perhaps a LuaTeX attribute? Like this:
>   -- Get an index by the bytecode register allocator
>   local register_index = luatexbase.new_bytecode(resolved_path)
>   -- Store it in a LuaTeX attribute named after the resolved path of
> the Lua file we loaded with loadfile. These attributes are dumped, I
> think
>   lua.attribute[resolved_path] = register_index
>   -- Finally, spit out an "everyjob" to the TeX engine. This
> "everyjob" is supposed to execute the loader function later, during
> the normal run. We use the resolved path as the name of our attribute
>   tex.sprint( [[\everyjob\expandafter{ \the\everyjob\directlua{
> lua.bytecode[\csname ]] , resolved_path , [[\endcsname]() } }]] )
>
> This may be getting too awful, but I think that the possibility that
> Lua-using packages are dumped (along with their Lua code) is important
> for the future, as Lua code can be noticeably slower to process than
> "good old" TeX code.
>

yes we'll see what we can do, but also this would be the first latex format with
built in support for luatex allocations, so we need to be reasonably
conservative
It should however form the basis for building more advanced interfaces as above.

David


From kalrish.baakjen at gmail.com  Sat Sep  5 18:42:52 2015
From: kalrish.baakjen at gmail.com (=?UTF-8?Q?Kalrish_B=C3=A4akjen?=)
Date: Sat, 5 Sep 2015 18:42:52 +0200
Subject: [luatex] Allowing or switching to string indexes in Lua
	bytecode registers
In-Reply-To: <CAEW6iOhN3yOdWw=R53ntvAKHNW4CoDQiUo7bpCOHtCBK1kk57w@mail.gmail.com>
References: <CA+FEEpzNoBJKc5or1cZpnsaGt7Xk2yJZzGXd2DMYPdvo7JZ5RA@mail.gmail.com>
 <CAEW6iOhN3yOdWw=R53ntvAKHNW4CoDQiUo7bpCOHtCBK1kk57w@mail.gmail.com>
Message-ID: <CA+FEEpzJ2CQm4PVCpupcLmy2a8U3DkFtVa_sEe1DC5fTAuF-Bg@mail.gmail.com>

On Sat, Sep 5, 2015 at 2:08 PM, David Carlisle <d.p.carlisle at gmail.com> wrote:
> On 4 September 2015 at 23:43, Kalrish B?akjen <kalrish.baakjen at gmail.com> wrote:
>> Currently, all array elements of the lua.bytecode table, which must be
>> functions, are dumped as Lua bytecode to the format file by iniTeX. This
>> functionality is useful if one is dumping his own format from a split
>> preamble (to decrease compilation time) and uses custom Lua code: to avoid
>> loading it every time, one can assign consecutive slots of lua.bytecode to
>> the functions returned by loadfile, and then, in the main document, execute
>> those functions to recreate the code. More information about this can be
>> found in section 4.8.1 ("LUA bytecode registers") of the LuaTeX Reference
>> Manual[1] and in this StackExchange question[2].
>>
>> I think this functionality is also interesting for packages because it would
>> allow for a clean way of dumping them to a format, if the user so desires.
>> Currently, packages which use Lua code, such as fontspec or polyglossia,
>> can't be "preloaded" in a format file because the Lua code that they load is
>> not saved and, thus, cannot be restored in the actual run. The same person
>> who asked [2] already considered using \everyjob (in combination with the
>> \directlua call that loads the code) to solve this issue. While that
>> solution would indeed make it possible to dump those packages, it would be a
>> trick in the sense that Lua code would be loaded every run. Since users
>> (usually) dump their own format to save time, this doesn't seem to fit.
>>
>> However, as far as I know, this functionality is restricted to user code and
>> can't be effectively leveraged by packages, because the indexes of
>> lua.bytecode are numbers and there is no reasonable relation between numbers
>> and package names. Not even hashes of the names could be used, as far as I
>> understand, because iniLuaTeX only dumps the array part of the table (that
>> is: the consecutive non-nil slots, starting from 1).
>>
>> Therefore, I suggest that this mechanism (the Lua bytecode registers dumping
>> logic) is either extended to allow the use of string indexes, or entirely
>> switched to them (only strings allowed as indexes). That way, packages could
>> do (Lua code follows):
>
>
> The engine does not need to change if  tex allocation macros are available for
> bytecodes as they are for other register types, as then any name/number mapping
> is available in TeX code and so will be dumped into the format.
>
>
> In the ltluatex code that is planned to be part of the next LaTeX
> release and form the basis of
> a luatexbase update, there was already such an allocator for lua
> functions, but the
> bytecode allocator was just in lua.  We have just adjusted it so that
> the allocation count
> for bytecodes is also stored in a tex count register.
>
> I think this addresses your use case, you can see the code for the
> core ltluatex in the latex svn
> and for a luatexbase update based on this in github.
>
>
> http://latex-project.org/svnroot/latex2e-public/trunk/base/
>
> and
>
> https://github.com/josephwright/ltluatexsupp
>
> Like the original luatexbase code, the ltluatex code is designed to
> run in plain TeX despite its latex roots.
>
> David

Thank you very much!

I use TeX Live and, unfortunately, there doesn't seem to be a way to
use SVN LaTeX here. As I think ltluatex.dtx[1] is the relevant file, I
have tried to locate it in my tree, but haven't found it. I haven't
been able to use the Lua function (luatexbase.new_bytecode, as it
appears in ltluatex.dtx[1]) either; could you please tell me which
package must I load?

In the meantime, I've been scratching my head. My idea, for packages
that use Lua code, is as follows:
- Regardless of whether or not we are on iniLuaTeX, we must get a
loader function for our Lua code through loadfile:
  local loader_function = assert( loadfile('mycode.lua') )
- If we are on iniLuaTeX, we must:
 1. ask the bytecode allocator (\newluabytecode) for a number (the
index), which we store in \myindex and which, I believe, would be
dumped in the format:
  \newluabytecode\myindex
 2. save our Lua loader function, which we got by loadfile, in the
slot referenced by that index:
  \directlua{ lua.bytecode[\myindex] = loader_function }
 3. specify an "everyjob" via \everyjob that restores our Lua code by
calling the loader function stored at the bytecode slot referenced by
the TeX index:
  \everyjob\expandafter{ \the\everyjob\directlua{ lua.bytecode[\myindex]() } }
- If we are on a regular run, we just have to run the loader function
to actually load our Lua code and be able to use it:
  \directlua{ loader_function() }

This logic, however, doesn't seem to play well with Lua's require
(and, by extension, luatexbase-modutils' require_module, which uses it
under the hood) function[2], because it loads the Lua code internally;
packages doing \dofile{ require('mycode.lua') } have no way of
accessing the loader function, which is what needs to be stored in
bytecode registers. Perhaps a custom searcher (see [3]) could be
introduced. This searcher would be based on the default second
searcher. First, it would load the code from the resolved path:
  -- resolved_path is the path of the file containing the Lua code;
this path would be obtained with package.searchpath
  local loader_function = assert( loadfile(resolved_path) )
This special searcher would have to know if it's on a dumping session
or a normal run.
If on a normal run, it would just execute that loader function to
actually load the code and be done with it:
  loader_function()
If on iniLuaTeX, it would get a bytecode register index and save the
loader function in the corresponding slot. I haven't yet figured out,
however, how would this special searcher of mine keep track of the
bytecode register index that it had been assigned by the allocation
manager. Perhaps a LuaTeX attribute? Like this:
  -- Get an index by the bytecode register allocator
  local register_index = luatexbase.new_bytecode(resolved_path)
  -- Store it in a LuaTeX attribute named after the resolved path of
the Lua file we loaded with loadfile. These attributes are dumped, I
think
  lua.attribute[resolved_path] = register_index
  -- Finally, spit out an "everyjob" to the TeX engine. This
"everyjob" is supposed to execute the loader function later, during
the normal run. We use the resolved path as the name of our attribute
  tex.sprint( [[\everyjob\expandafter{ \the\everyjob\directlua{
lua.bytecode[\csname ]] , resolved_path , [[\endcsname]() } }]] )

This may be getting too awful, but I think that the possibility that
Lua-using packages are dumped (along with their Lua code) is important
for the future, as Lua code can be noticeably slower to process than
"good old" TeX code.

1: http://latex-project.org/svnroot/latex2e-public/trunk/base/ltluatex.dtx
2: http://www.lua.org/manual/5.3/manual.html#pdf-require
3: http://www.lua.org/manual/5.3/manual.html#pdf-package.searchers


From kalrish.baakjen at gmail.com  Sat Sep  5 22:39:36 2015
From: kalrish.baakjen at gmail.com (=?UTF-8?Q?Kalrish_B=C3=A4akjen?=)
Date: Sat, 5 Sep 2015 22:39:36 +0200
Subject: [luatex] Allowing or switching to string indexes in Lua
	bytecode registers
In-Reply-To: <CAEW6iOjGaCRsHrv6x_kFTEvAfvN+Srz6diwqefqCPup+WxFX9A@mail.gmail.com>
References: <CA+FEEpzNoBJKc5or1cZpnsaGt7Xk2yJZzGXd2DMYPdvo7JZ5RA@mail.gmail.com>
 <CAEW6iOhN3yOdWw=R53ntvAKHNW4CoDQiUo7bpCOHtCBK1kk57w@mail.gmail.com>
 <CA+FEEpzJ2CQm4PVCpupcLmy2a8U3DkFtVa_sEe1DC5fTAuF-Bg@mail.gmail.com>
 <CAEW6iOjGaCRsHrv6x_kFTEvAfvN+Srz6diwqefqCPup+WxFX9A@mail.gmail.com>
Message-ID: <CA+FEEpzyUqAd6LF+Of96+7riGTjfsNEuU_udw6QGbTR5qEaQRA@mail.gmail.com>

On Sat, Sep 5, 2015 at 7:17 PM, David Carlisle <d.p.carlisle at gmail.com> wrote:
> The relevant files are not yet on ctan (and so not in texlive) the sources
> are available from the web view of the svn, but you would need to
> extract the ltluatex.tex and ltluatex.lua files or wait for the next release
> (hopefully in a few weeks)
>
> meanwhile if you have ltluatex.dtx from SVN (make sure you have the current one,
> it's been updated a few times today)  then just make a file
> ltluatex.ins that looks like
>
> \input docstrip
> \generate{\file{ltluatex.tex}{\from{ltluatex.dtx}{tex,plain}}}
> \nopostamble
> \nopreamble
> \generate{\file{ltluatex.lua}{\from{ltluatex.dtx}{lua}}}
>
> run tex in that to get ltluatex.tex and .lua then
>
> \input{ltluatex}
>
> in a document should work.

Thank you! I'll see if I can try without breaking my installation, hehe.

> in ltluatex the assumption is that you can just use require() rather than
> needing a special wrapper (as require uses kpse anyway now)

If I have understood you correctly, the "custom searcher" that I
speculated about could solve the limitation in discussion without any
change on the packages' side (that is, without any "special wrapper";
they would continue to use require just as they do now, and the
searcher would take care of putting the code in a bytecode register or
restoring it from one if on a dumping session).

> it seems to me that you can't
> byte compile arbitrary code, and this is such a case, that  (for
> simple use at least)
> the code could be structured so that you can  byte compile each file separately.

Why can't arbitrary code be byte-compiled? Is what you refer to
related to what's mentioned in the LuaTeX Reference Manual (see
below)?

> Section 4.8.1 (LUA bytecode registers)
> Note: The function must not contain any upvalues. Currently, functions containing upvalues can be stored (and their upvalues are set to nil), but this is an artifact of the current Lua implementation and thus subject to change.

I had been wondering what the consequences of this were.

> On the other hand a more general scheme could probably work although
> I'd need to try building a test case to follow the details below.
> I see the general direction you are suggesting but some of the details
> escape me:-)

I can write some code, but not today :-). If the "custom searcher"
solution fits, I think that something at the core of LuaTeX (either
LuaTeX itself or the LuaTeX format) would require changes, which would
indeed not be something to decide lightly. Feel free to discuss
further.

Thank you!

From pragma at wxs.nl  Sun Sep  6 00:43:06 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Sun, 6 Sep 2015 00:43:06 +0200
Subject: [luatex] Allowing or switching to string indexes in Lua
 bytecode registers
In-Reply-To: <CA+FEEpzyUqAd6LF+Of96+7riGTjfsNEuU_udw6QGbTR5qEaQRA@mail.gmail.com>
References: <CA+FEEpzNoBJKc5or1cZpnsaGt7Xk2yJZzGXd2DMYPdvo7JZ5RA@mail.gmail.com>
 <CAEW6iOhN3yOdWw=R53ntvAKHNW4CoDQiUo7bpCOHtCBK1kk57w@mail.gmail.com>
 <CA+FEEpzJ2CQm4PVCpupcLmy2a8U3DkFtVa_sEe1DC5fTAuF-Bg@mail.gmail.com>
 <CAEW6iOjGaCRsHrv6x_kFTEvAfvN+Srz6diwqefqCPup+WxFX9A@mail.gmail.com>
 <CA+FEEpzyUqAd6LF+Of96+7riGTjfsNEuU_udw6QGbTR5qEaQRA@mail.gmail.com>
Message-ID: <55EB6FFA.3070905@wxs.nl>

On 9/5/2015 10:39 PM, Kalrish B?akjen wrote:

> Why can't arbitrary code be byte-compiled? Is what you refer to
> related to what's mentioned in the LuaTeX Reference Manual (see
> below)?
>
>> Section 4.8.1 (LUA bytecode registers)
>> Note: The function must not contain any upvalues. Currently, functions containing upvalues can be stored (and their upvalues are set to nil), but this is an artifact of the current Lua implementation and thus subject to change.
>
> I had been wondering what the consequences of this were.

It means that you have to make sure that you initialize your code 
properly as you cannot assume upvalues to be saved for you (just like a 
normal lua run will end with forgetting all its variables, luatex will 
forget them and loading a couple of initializations/settings runtime is 
no big deal as lua is quite fast. Of course data you initialize in your 
code blob is initialized properly because the bytecode is just normal 
lua code. Only the code writer knows what is worth initializing anyway 
so saving upvalues some way would introduce issues.)

>> On the other hand a more general scheme could probably work although
>> I'd need to try building a test case to follow the details below.
>> I see the general direction you are suggesting but some of the details
>> escape me:-)
>
> I can write some code, but not today :-). If the "custom searcher"
> solution fits, I think that something at the core of LuaTeX (either
> LuaTeX itself or the LuaTeX format) would require changes, which would
> indeed not be something to decide lightly. Feel free to discuss
> further.

Nothing will change in that department i.e. the team will not change the 
loader (if only because different macro packages have different demands).

If you want a different loader you can write it in lua and hook it into 
the normal loader. Keep in mind that luatex operates in tds and 
organization of files in there is well defined and controlled by 
variables in the configuration so that different macro packages don't 
clash and also loading can be restricted.

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From kalrish.baakjen at gmail.com  Mon Sep  7 01:25:22 2015
From: kalrish.baakjen at gmail.com (=?UTF-8?Q?Kalrish_B=C3=A4akjen?=)
Date: Mon, 7 Sep 2015 01:25:22 +0200
Subject: [luatex] Allowing or switching to string indexes in Lua
	bytecode registers
In-Reply-To: <55EB6FFA.3070905@wxs.nl>
References: <CA+FEEpzNoBJKc5or1cZpnsaGt7Xk2yJZzGXd2DMYPdvo7JZ5RA@mail.gmail.com>
 <CAEW6iOhN3yOdWw=R53ntvAKHNW4CoDQiUo7bpCOHtCBK1kk57w@mail.gmail.com>
 <CA+FEEpzJ2CQm4PVCpupcLmy2a8U3DkFtVa_sEe1DC5fTAuF-Bg@mail.gmail.com>
 <CAEW6iOjGaCRsHrv6x_kFTEvAfvN+Srz6diwqefqCPup+WxFX9A@mail.gmail.com>
 <CA+FEEpzyUqAd6LF+Of96+7riGTjfsNEuU_udw6QGbTR5qEaQRA@mail.gmail.com>
 <55EB6FFA.3070905@wxs.nl>
Message-ID: <CA+FEEpwQEMBBevHC4LOg5_pBi02S-czG=Ff7_jioQpadJDrCEw@mail.gmail.com>

Sorry for taking this long. I have been hacking on a "solution", but
it's not (yet, hopefully) working; I think it's because of a conflict
between the luatex and the luatexbase packages, but I have no clue
about why it's happening. It's not properly documented either;
basically, one has to run build.sh under bash. So this is more of a
status update than a proper response. I have uploaded the files in a
tarball[1], nonetheless; if you didn't mind having a look at them,
perhaps you could point me in the right direction.

After tinkering with this, I feel that so many hacks may not be worth
the benefit. After all, even if Lua code can be dumped behind the
scenes without requiring any change on the packages' side, calls that
change Lua state can't be dumped (with the current design). Hopefully,
a guru can shed some light on the matter :-).

Have a nice week!

1: https://drive.google.com/file/d/0B6J2lxNkmOp2blM1elZXMVdCRXM/view?usp=sharing

On Sun, Sep 6, 2015 at 12:43 AM, Hans Hagen <pragma at wxs.nl> wrote:
> On 9/5/2015 10:39 PM, Kalrish B?akjen wrote:
>
>> Why can't arbitrary code be byte-compiled? Is what you refer to
>> related to what's mentioned in the LuaTeX Reference Manual (see
>> below)?
>>
>>> Section 4.8.1 (LUA bytecode registers)
>>> Note: The function must not contain any upvalues. Currently, functions
>>> containing upvalues can be stored (and their upvalues are set to nil), but
>>> this is an artifact of the current Lua implementation and thus subject to
>>> change.
>>
>>
>> I had been wondering what the consequences of this were.
>
>
> It means that you have to make sure that you initialize your code properly
> as you cannot assume upvalues to be saved for you (just like a normal lua
> run will end with forgetting all its variables, luatex will forget them and
> loading a couple of initializations/settings runtime is no big deal as lua
> is quite fast. Of course data you initialize in your code blob is
> initialized properly because the bytecode is just normal lua code. Only the
> code writer knows what is worth initializing anyway so saving upvalues some
> way would introduce issues.)
>
>>> On the other hand a more general scheme could probably work although
>>> I'd need to try building a test case to follow the details below.
>>> I see the general direction you are suggesting but some of the details
>>> escape me:-)
>>
>>
>> I can write some code, but not today :-). If the "custom searcher"
>> solution fits, I think that something at the core of LuaTeX (either
>> LuaTeX itself or the LuaTeX format) would require changes, which would
>> indeed not be something to decide lightly. Feel free to discuss
>> further.
>
>
> Nothing will change in that department i.e. the team will not change the
> loader (if only because different macro packages have different demands).
>
> If you want a different loader you can write it in lua and hook it into the
> normal loader. Keep in mind that luatex operates in tds and organization of
> files in there is well defined and controlled by variables in the
> configuration so that different macro packages don't clash and also loading
> can be restricted.
>
> Hans
>
> -----------------------------------------------------------------
>                                           Hans Hagen | PRAGMA ADE
>               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
>     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
>                                              | www.pragma-pod.nl
> -----------------------------------------------------------------


From d.p.carlisle at gmail.com  Mon Sep  7 11:09:12 2015
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Mon, 7 Sep 2015 10:09:12 +0100
Subject: [luatex] Allowing or switching to string indexes in Lua
	bytecode registers
In-Reply-To: <CA+FEEpwQEMBBevHC4LOg5_pBi02S-czG=Ff7_jioQpadJDrCEw@mail.gmail.com>
References: <CA+FEEpzNoBJKc5or1cZpnsaGt7Xk2yJZzGXd2DMYPdvo7JZ5RA@mail.gmail.com>
 <CAEW6iOhN3yOdWw=R53ntvAKHNW4CoDQiUo7bpCOHtCBK1kk57w@mail.gmail.com>
 <CA+FEEpzJ2CQm4PVCpupcLmy2a8U3DkFtVa_sEe1DC5fTAuF-Bg@mail.gmail.com>
 <CAEW6iOjGaCRsHrv6x_kFTEvAfvN+Srz6diwqefqCPup+WxFX9A@mail.gmail.com>
 <CA+FEEpzyUqAd6LF+Of96+7riGTjfsNEuU_udw6QGbTR5qEaQRA@mail.gmail.com>
 <55EB6FFA.3070905@wxs.nl>
 <CA+FEEpwQEMBBevHC4LOg5_pBi02S-czG=Ff7_jioQpadJDrCEw@mail.gmail.com>
Message-ID: <CAEW6iOhK0DFSK1hJv0P+yxCe56EZq-vw337pYJqbua0gDCVAjQ@mail.gmail.com>

Thanks for that, I got some conflicts when I tried it, Also I wasn't
sure if you were testing using the existing luatexbase from ctan
(which doesn't use ltluatex code) or the version on github that does,

I suspect that we wouldn't want to overload dofile etc in the base
format (certainly not in the initial releases) however I don't see
anything in the proposed ltluatex code that would stop you making some
code along these lines into a package like the existing "mylatex" and
"mylatexformat" on ctan that overloads the latex package mechanism to
allow certain packages to be dumped into the format to at the same
time byte compile and save the package lua code.
In particular I was getting errors
attempt to index global 'luatexbase' (a nil value)
which I didn't trace completely but I think it's because the ltluatex
definition wasn't being inserted into everyjob in time
That is no doubt fixable, but I'd wait until the format code to define
luatexbase is stable and released before really testing such an
extension,

David

From kalrish.baakjen at gmail.com  Mon Sep  7 15:45:44 2015
From: kalrish.baakjen at gmail.com (=?UTF-8?Q?Kalrish_B=C3=A4akjen?=)
Date: Mon, 7 Sep 2015 15:45:44 +0200
Subject: [luatex] Allowing or switching to string indexes in Lua
	bytecode registers
In-Reply-To: <CAEW6iOhK0DFSK1hJv0P+yxCe56EZq-vw337pYJqbua0gDCVAjQ@mail.gmail.com>
References: <CA+FEEpzNoBJKc5or1cZpnsaGt7Xk2yJZzGXd2DMYPdvo7JZ5RA@mail.gmail.com>
 <CAEW6iOhN3yOdWw=R53ntvAKHNW4CoDQiUo7bpCOHtCBK1kk57w@mail.gmail.com>
 <CA+FEEpzJ2CQm4PVCpupcLmy2a8U3DkFtVa_sEe1DC5fTAuF-Bg@mail.gmail.com>
 <CAEW6iOjGaCRsHrv6x_kFTEvAfvN+Srz6diwqefqCPup+WxFX9A@mail.gmail.com>
 <CA+FEEpzyUqAd6LF+Of96+7riGTjfsNEuU_udw6QGbTR5qEaQRA@mail.gmail.com>
 <55EB6FFA.3070905@wxs.nl>
 <CA+FEEpwQEMBBevHC4LOg5_pBi02S-czG=Ff7_jioQpadJDrCEw@mail.gmail.com>
 <CAEW6iOhK0DFSK1hJv0P+yxCe56EZq-vw337pYJqbua0gDCVAjQ@mail.gmail.com>
Message-ID: <CA+FEEpzFy3utCKNA9xWibmQUqQKnC9uutkfHFrTRHVHmOq6AVg@mail.gmail.com>

> Thanks for that, I got some conflicts when I tried it, Also I wasn't
> sure if you were testing using the existing luatexbase from ctan
> (which doesn't use ltluatex code) or the version on github that does,
The CTAN version, I think.

> I suspect that we wouldn't want to overload dofile etc in the base
> format (certainly not in the initial releases) however I don't see
> anything in the proposed ltluatex code that would stop you making some
> code along these lines into a package like the existing "mylatex" and
> "mylatexformat" on ctan that overloads the latex package mechanism to
> allow certain packages to be dumped into the format to at the same
> time byte compile and save the package lua code.
Yes, a package or a Lua initialization script seems to be enough for now.

> In particular I was getting errors
> attempt to index global 'luatexbase' (a nil value)
> which I didn't trace completely but I think it's because the ltluatex
> definition wasn't being inserted into everyjob in time
> That is no doubt fixable, but I'd wait until the format code to define
> luatexbase is stable and released before really testing such an
> extension,
That error appeared often with different tables (luatexbase, fontspec,
l3kernel,?), but I think I'll give up for now and wait, as you
suggest.

Thanks a lot for your help and patience. Good luck with those releases!


From eduardoochs at gmail.com  Tue Sep  8 05:21:15 2015
From: eduardoochs at gmail.com (Eduardo Ochs)
Date: Tue, 8 Sep 2015 04:21:15 +0100
Subject: [luatex] [ANN] Not exactly a preprocessor: Dednat6
Message-ID: <CADs++6gXu0wLQHmbh1jyTLF+kSo0H9KZ55tbXUWbQvhZAQiUuQ@mail.gmail.com>

Hi all,

the documentation still lacks a lot, but the main ideas should be
clear, and the thing is easy to install and test... so here goes the
announcement:

  Dednat6: a preprocessor (well, not exactly) for drawing diagrams and
  derivation trees from their 2D representations

Dednat6's home page is here:

  http://angg.twu.net/dednat6.html

Here are links to some tests/demos, both source and output:

  http://angg.twu.net/dednat6/tests/0.pdf
  http://angg.twu.net/dednat6/tests/0.tex.html
  http://angg.twu.net/dednat6/tests/2.pdf
  http://angg.twu.net/dednat6/tests/2.tex.html
  http://angg.twu.net/dednat6/tests/3.pdf
  http://angg.twu.net/dednat6/tests/3.tex.html



Let me copy here one section of the documentation - one that may be
especially interesting to the people here, but that will be considered
too technical and esoteric in other mailing lists.

  7. LuaTeX
  =========

  Dednat6 uses very little of LuaTeX at the moment - essentially just
  tex.jobname, tex.inputlineno, tex.print from the Lua side, and
  \directlua from TeX.

  The following hacks were needed. 1) dednat6.lua loads this to make
  require behave like the require from Lua. 2) Dednat6's output function
  runs deletecomments to filter out comments before sending code to
  tex.print. 3) I had to use a

    \catcode`\^^J=10

  in the demos - 0.tex, 2.tex, 3.tex - to avoid having newlines become
  spurious "Omega"s.

  My guess is that (2) and (3) are needed because tex.print and \input
  use different catcode tables. At one point I tried to check the
  details of this using this script to run Rob Hoelz's lua-repl from
  LuaLaTeX, but at some point I gave up.

  One of the items in my to-do list is to make it easy to load and run
  lua-repl from dednat6.

  (Copied from: http://angg.twu.net/dednat6.html#luatex )



Cheers! All feedback welcome! =)
  Eduardo Ochs
  eduardoochs at gmail.com
  http://angg.twu.net/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20150908/64973908/attachment.html>

From d.p.carlisle at gmail.com  Tue Sep  8 21:49:40 2015
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Tue, 8 Sep 2015 20:49:40 +0100
Subject: [luatex] Logging of font names in box log output
Message-ID: <CAEW6iOi+UNDphpRc0Z2opacwkESQDUYCxce12edGg9cPgHWPMA@mail.gmail.com>

Hi I have a feeling this has come up before, but  the plain tex file


\font\a=cmr10
\font\b=cmr10

\setbox0\hbox{\a x\b y}
\scrollmode
\tracingonline1
\showbox0
\bye


produces a log of

.\b x
.\b y



in tex/pdftex/xetex/ptex/uptex

but in luatex it produces a log of

.\a x
.\b y

This is a major problem for the latex regression suite as it is very
hard to normalize out (as we do for the direction logging difference
where
"direction TLT" in luatex or  "yoko direction" in  ptex occur in
well defined places and can be factored into the comparison).

Would it be possible for luatex to match other tex variants and log
font names by the last name under which the font was loaded?

David

From pragma at wxs.nl  Tue Sep  8 22:22:19 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Tue, 8 Sep 2015 22:22:19 +0200
Subject: [luatex] Logging of font names in box log output
In-Reply-To: <CAEW6iOi+UNDphpRc0Z2opacwkESQDUYCxce12edGg9cPgHWPMA@mail.gmail.com>
References: <CAEW6iOi+UNDphpRc0Z2opacwkESQDUYCxce12edGg9cPgHWPMA@mail.gmail.com>
Message-ID: <55EF437B.8060209@wxs.nl>

On 9/8/2015 9:49 PM, David Carlisle wrote:
> Hi I have a feeling this has come up before, but  the plain tex file
>
>
> \font\a=cmr10
> \font\b=cmr10
>
> \setbox0\hbox{\a x\b y}
> \scrollmode
> \tracingonline1
> \showbox0
> \bye
>
>
> produces a log of
>
> ..\b x
> ..\b y
>
>
>
> in tex/pdftex/xetex/ptex/uptex
>
> but in luatex it produces a log of
>
> ..\a x
> ..\b y
>
> This is a major problem for the latex regression suite as it is very
> hard to normalize out (as we do for the direction logging difference
> where
> "direction TLT" in luatex or  "yoko direction" in  ptex occur in
> well defined places and can be factored into the comparison).
>
> Would it be possible for luatex to match other tex variants and log
> font names by the last name under which the font was loaded?

luatex doesn't have the same low level font loading / sharing code; in 
fact it is (pdf)tex that is weird in printing \b for \a and the logging 
in luatex is right (one of things we made sure of, as this confusing 
reporting had been annoying us)

also, be prepared for more differences in logging as log compatibility 
is not guaranteed (esp when we have cleaned up that bit)

you cannot even assume that luatex has the same output as pdftex (i.e. 
slightly different hyphenation and ligaturing code), again, we try to be 
very compatible but when we can make things cleaner (or better, for what 
it's worth, often meaning: removing an optimization or limitation no 
longer needed) we'll do it

an option (for you) is to just ignore the font name (or patch your font 
switch macro to write something to the log that you can compare)

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From d.p.carlisle at gmail.com  Tue Sep  8 22:38:58 2015
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Tue, 8 Sep 2015 21:38:58 +0100
Subject: [luatex] Logging of font names in box log output
In-Reply-To: <55EF437B.8060209@wxs.nl>
References: <CAEW6iOi+UNDphpRc0Z2opacwkESQDUYCxce12edGg9cPgHWPMA@mail.gmail.com>
 <55EF437B.8060209@wxs.nl>
Message-ID: <CAEW6iOhFbW9pp-a_4kdEVX9bkG1bks8t-84kjjPP3AbYweo4yw@mail.gmail.com>

On 8 September 2015 at 21:22, Hans Hagen <pragma at wxs.nl> wrote:
> On 9/8/2015 9:49 PM, David Carlisle wrote:
>>
>> Hi I have a feeling this has come up before, but  the plain tex file
>>
>>
>> \font\a=cmr10
>> \font\b=cmr10
>>
>> \setbox0\hbox{\a x\b y}
>> \scrollmode
>> \tracingonline1
>> \showbox0
>> \bye
>>
>>
>> produces a log of
>>
>> ..\b x
>> ..\b y
>>
>>
>>
>> in tex/pdftex/xetex/ptex/uptex
>>
>> but in luatex it produces a log of
>>
>> ..\a x
>> ..\b y
>>
>> This is a major problem for the latex regression suite as it is very
>> hard to normalize out (as we do for the direction logging difference
>> where
>> "direction TLT" in luatex or  "yoko direction" in  ptex occur in
>> well defined places and can be factored into the comparison).
>>
>> Would it be possible for luatex to match other tex variants and log
>> font names by the last name under which the font was loaded?
>
>
> luatex doesn't have the same low level font loading / sharing code; in fact
> it is (pdf)tex that is weird in printing \b for \a and the logging in luatex
> is right (one of things we made sure of, as this confusing reporting had
> been annoying us)

I'm surprised you say it's right here. Apart from the compatibility aspect
x and y are in fact typeset with the same font and the csname used at the point
the characters were set isn't really that relevant at the box level. the classic
log seems far more natural here. Perhaps you mean that the font is really loaded
twice in luatex, which would sort of explain the luatex log, but
certainly in [pdf|xe]tex
it would be weird to log these fonts differently at the box level.


>
> also, be prepared for more differences in logging as log compatibility is
> not guaranteed (esp when we have cleaned up that bit)

Yes that's clear, but as I tried to indicate in the original message
other differences eg direction and discretionary differences and small
numeric differences in glue stretching are all normalisable, but
this is virtually impossible to normalise apart from, as you suggest, discarding
font information all together.

>
> you cannot even assume that luatex has the same output as pdftex (i.e.
> slightly different hyphenation and ligaturing code), again, we try to be
> very compatible but when we can make things cleaner (or better, for what
> it's worth, often meaning: removing an optimization or limitation no longer
> needed) we'll do it

Yes that is all fine!

>
> an option (for you) is to just ignore the font name (or patch your font
> switch macro to write something to the log that you can compare)
>
> Hans
>

While log compatibility clearly isn't a top priority for you,
I would ask you again if you could consider this.
luatex is getting increasing use with latex but it is very hard to
support those users
if we can not somehow arrange the regression tests to give reliable
information about what does and does not work.

It has already shown up several problems in luatex, and in our macro
level support for luatex, but currently the test failures are swamped
by this font logging difference.

We are not asking that luatex produce the same output as pdftex or
that it always produce the same log, even if the visible output is the
same, but just, where possible, and in particular on input that is
valid with both engines, it is massively helpful if the logs differ in
predictable ways that can be normalised during diff.

David

From luigi.scarso at gmail.com  Tue Sep  8 23:21:33 2015
From: luigi.scarso at gmail.com (luigi scarso)
Date: Tue, 8 Sep 2015 23:21:33 +0200
Subject: [luatex] [ANN] Not exactly a preprocessor: Dednat6
In-Reply-To: <CADs++6gXu0wLQHmbh1jyTLF+kSo0H9KZ55tbXUWbQvhZAQiUuQ@mail.gmail.com>
References: <CADs++6gXu0wLQHmbh1jyTLF+kSo0H9KZ55tbXUWbQvhZAQiUuQ@mail.gmail.com>
Message-ID: <CAG5iGsA6wuATaUbRT7A+NBK2kWhW15pM0hFC30tACiKhV-8VGA@mail.gmail.com>

On Tue, Sep 8, 2015 at 5:21 AM, Eduardo Ochs <eduardoochs at gmail.com> wrote:

> Hi all,
>
> the documentation still lacks a lot, but the main ideas should be
> clear, and the thing is easy to install and test... so here goes the
> announcement:
>
>   Dednat6: a preprocessor (well, not exactly) for drawing diagrams and
>   derivation trees from their 2D representations
>
> Dednat6's home page is here:
>
>   http://angg.twu.net/dednat6.html
>
> Here are links to some tests/demos, both source and output:
>
>   http://angg.twu.net/dednat6/tests/0.pdf
>   http://angg.twu.net/dednat6/tests/0.tex.html
>   http://angg.twu.net/dednat6/tests/2.pdf
>   http://angg.twu.net/dednat6/tests/2.tex.html
>   http://angg.twu.net/dednat6/tests/3.pdf
>   http://angg.twu.net/dednat6/tests/3.tex.html
>
>
>
> Let me copy here one section of the documentation - one that may be
> especially interesting to the people here, but that will be considered
> too technical and esoteric in other mailing lists.
>
>   7. LuaTeX
>   =========
>
>   Dednat6 uses very little of LuaTeX at the moment - essentially just
>   tex.jobname, tex.inputlineno, tex.print from the Lua side, and
>   \directlua from TeX.
>
>   The following hacks were needed. 1) dednat6.lua loads this to make
>   require behave like the require from Lua. 2) Dednat6's output function
>   runs deletecomments to filter out comments before sending code to
>   tex.print. 3) I had to use a
>
>     \catcode`\^^J=10
>
>   in the demos - 0.tex, 2.tex, 3.tex - to avoid having newlines become
>   spurious "Omega"s.
>
>   My guess is that (2) and (3) are needed because tex.print and \input
>   use different catcode tables. At one point I tried to check the
>   details of this using this script to run Rob Hoelz's lua-repl from
>   LuaLaTeX, but at some point I gave up.
>
>   One of the items in my to-do list is to make it easy to load and run
>   lua-repl from dednat6.
>
>   (Copied from: http://angg.twu.net/dednat6.html#luatex )
>
>
>
> Cheers! All feedback welcome! =)
>   Eduardo Ochs
>   eduardoochs at gmail.com
>   http://angg.twu.net/
>
>
Thank you for the the nice links. I will (slowly) looking at them.

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20150908/6a8196a1/attachment.html>

From pragma at wxs.nl  Wed Sep  9 00:54:41 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Wed, 9 Sep 2015 00:54:41 +0200
Subject: [luatex] Logging of font names in box log output
In-Reply-To: <CAEW6iOhFbW9pp-a_4kdEVX9bkG1bks8t-84kjjPP3AbYweo4yw@mail.gmail.com>
References: <CAEW6iOi+UNDphpRc0Z2opacwkESQDUYCxce12edGg9cPgHWPMA@mail.gmail.com>
 <55EF437B.8060209@wxs.nl>
 <CAEW6iOhFbW9pp-a_4kdEVX9bkG1bks8t-84kjjPP3AbYweo4yw@mail.gmail.com>
Message-ID: <55EF6731.90508@wxs.nl>

Hi David,

 > ....

> While log compatibility clearly isn't a top priority for you,
> I would ask you again if you could consider this.
> luatex is getting increasing use with latex but it is very hard to
> support those users
> if we can not somehow arrange the regression tests to give reliable
> information about what does and does not work.

well, cleaning up (error) messaging will lead to small changes (in 
spacing for instance) so you probably have to adapt a bit again later

> It has already shown up several problems in luatex, and in our macro
> level support for luatex, but currently the test failures are swamped
> by this font logging difference.

it would be limiting if we would make 'comparing different engines to 
behave the same using the log' one of the boundary conditions for 
developments; of course we aim at compatibility when no callbacks are 
used but logging is an exception (we might for instance run into cases 
where info is simply not available or more info is available due to a 
different implementation); also, we're not yet completely done with 
providing hooks into each log message (i once played with an overload 
that output very structured xml in context but i kicked out that code 
because we still need to do some more work)

(btw, for years i have been working on the luatex variant of context and 
i explicitly don't pose limitations on the development of luatex by 
context compatibility demands .. which also means that i have to keep 
adapting code while we further develop luatex; imo, if someone really 
wants detailed compatibility, one should stick to pdftex or xetex; in 
fact, i expect that it will take many years before the context version 
of luatex will be stable and even then it's a somewhat different engine 
than pdftex or xetex)

> We are not asking that luatex produce the same output as pdftex or
> that it always produce the same log, even if the visible output is the
> same, but just, where possible, and in particular on input that is
> valid with both engines, it is massively helpful if the logs differ in
> predictable ways that can be normalised during diff.

sure, but fonts is one of these areas where the engines can differ

anyway, when I run this with context

\starttext

\font\a=cmr10
\font\b=cmr10

\setbox0\hbox{\a x\b y}
\scrollmode
\tracingonline1
\showbox0

\stoptext

i get

 > \box0=
\hbox(4.30554+1.94444)x10.5556, direction TLT
.\b x
.\b y

and when i run this with (my version of) plain for luatex

\font\a=cmr10
\font\b=cmr10

\setbox0\hbox{\a x\b y}
\scrollmode
\tracingonline1
\showbox0
\bye

i get

 > \box0=
\hbox(4.30554+1.94444)x10.5556, direction TLT
.\b x
.\b y

! OK.
l.7 \showbox0

but as said, because in luatex font loading is not something fixed and 
can be driven by the "define_font" callback and/or the "font.define" 
function and it's hard to say what you get without knowing in what way 
these are used (a macro package can even redefine \font and mess with 
the following \cs) ... do you test with the built-in fontloader or do 
you use a lua variant?

(in principle you can redefine \font to store the \cs and the callback 
to register names and that way make variants)

Hans


-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From d.p.carlisle at gmail.com  Wed Sep  9 01:09:39 2015
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Wed, 9 Sep 2015 00:09:39 +0100
Subject: [luatex] Logging of font names in box log output
In-Reply-To: <55EF6731.90508@wxs.nl>
References: <CAEW6iOi+UNDphpRc0Z2opacwkESQDUYCxce12edGg9cPgHWPMA@mail.gmail.com>
 <55EF437B.8060209@wxs.nl>
 <CAEW6iOhFbW9pp-a_4kdEVX9bkG1bks8t-84kjjPP3AbYweo4yw@mail.gmail.com>
 <55EF6731.90508@wxs.nl>
Message-ID: <CAEW6iOhKPJN+Jisk4qRMvaCHDFi9qLmZwn90dnTCxa+XOZd2Gw@mail.gmail.com>

> and when i run this with (my version of) plain for luatex

> i get

> \box0=
\> hbox(4.30554+1.94444)x10.5556, direction TLT
> .\b x
> .\b y

you do? interesting:-) I'll dig out the sources and see what's happening there!


> (btw, for years i have been working on the luatex variant of context and i explicitly don't pose limitations on the development of luatex by context compatibility demands .. which also means that i have to keep adapting code while we further develop luatex; imo, if someone really wants detailed compatibility, one should stick to pdftex or xetex; in fact, i expect that it will take many years before the context version of luatex will be stable and even then it's a somewhat different engine than pdftex or xetex)

Yes sure, but we weren't asking for compatible output so much as
mechanically understandable difference in output from the same input.
But actually I think you've given enough hints that we can probably
achieve that. (specifically while running the regression test suite,
logging for normal documents doesn't really need to be compatible
across engines in the same way.)

Anyway thanks for the consideration, we'll work something out:-)

David


From pragma at wxs.nl  Wed Sep  9 01:28:21 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Wed, 9 Sep 2015 01:28:21 +0200
Subject: [luatex] Logging of font names in box log output
In-Reply-To: <CAEW6iOhKPJN+Jisk4qRMvaCHDFi9qLmZwn90dnTCxa+XOZd2Gw@mail.gmail.com>
References: <CAEW6iOi+UNDphpRc0Z2opacwkESQDUYCxce12edGg9cPgHWPMA@mail.gmail.com>
 <55EF437B.8060209@wxs.nl>
 <CAEW6iOhFbW9pp-a_4kdEVX9bkG1bks8t-84kjjPP3AbYweo4yw@mail.gmail.com>
 <55EF6731.90508@wxs.nl>
 <CAEW6iOhKPJN+Jisk4qRMvaCHDFi9qLmZwn90dnTCxa+XOZd2Gw@mail.gmail.com>
Message-ID: <55EF6F15.8060608@wxs.nl>

Hi,

 > you do? interesting:-) I'll dig out the sources and see what's 
happening there!

it's a long time ago that i looked into this but i remember that this \a 
\b vs \a \a in tex is some kind of side effect (not a feature) ... the 
\a getting lost in the process as the message has to use the font id to 
get back to the \cs and

\font\a=cmr10
\font\b=cmr10

will (without callbacks) have the same id as the same file is used

i have of course a callback but the latex otf loader also does (maybe 
not for tfm files, so maybe you should test what an opentype file reports

so say that \a -> font id 10 and \b -> font id 10 then basically 10 
relates to \b (the most recent) but if you get \a \b instead of \b \b 
that can be an indication that the latex font loaded forces a different 
id (which can be practical in some cases) .. the fontloader can of 
course still use the same font resource

you can check it with:

\a \number\fontid\font
\b \number\fontid\font

if they're different then you know it's the fontloader cheating you

Hans


-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From d.p.carlisle at gmail.com  Wed Sep  9 01:33:26 2015
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Wed, 9 Sep 2015 00:33:26 +0100
Subject: [luatex] Logging of font names in box log output
In-Reply-To: <55EF6F15.8060608@wxs.nl>
References: <CAEW6iOi+UNDphpRc0Z2opacwkESQDUYCxce12edGg9cPgHWPMA@mail.gmail.com>
 <55EF437B.8060209@wxs.nl>
 <CAEW6iOhFbW9pp-a_4kdEVX9bkG1bks8t-84kjjPP3AbYweo4yw@mail.gmail.com>
 <55EF6731.90508@wxs.nl>
 <CAEW6iOhKPJN+Jisk4qRMvaCHDFi9qLmZwn90dnTCxa+XOZd2Gw@mail.gmail.com>
 <55EF6F15.8060608@wxs.nl>
Message-ID: <CAEW6iOh55D9H8Hi7fLB=tmeneS3gGO3OKTQA613QH4QArQFqyA@mail.gmail.com>

Hans

> if they're different then you know it's the fontloader cheating you

51  52

Hmm, I guess you have successfully passed the blame:-)

Thanks for that debugging information.

David

From luigi.scarso at gmail.com  Wed Sep  9 09:39:50 2015
From: luigi.scarso at gmail.com (luigi scarso)
Date: Wed, 9 Sep 2015 09:39:50 +0200
Subject: [luatex] Logging of font names in box log output
In-Reply-To: <CAEW6iOh55D9H8Hi7fLB=tmeneS3gGO3OKTQA613QH4QArQFqyA@mail.gmail.com>
References: <CAEW6iOi+UNDphpRc0Z2opacwkESQDUYCxce12edGg9cPgHWPMA@mail.gmail.com>
 <55EF437B.8060209@wxs.nl>
 <CAEW6iOhFbW9pp-a_4kdEVX9bkG1bks8t-84kjjPP3AbYweo4yw@mail.gmail.com>
 <55EF6731.90508@wxs.nl>
 <CAEW6iOhKPJN+Jisk4qRMvaCHDFi9qLmZwn90dnTCxa+XOZd2Gw@mail.gmail.com>
 <55EF6F15.8060608@wxs.nl>
 <CAEW6iOh55D9H8Hi7fLB=tmeneS3gGO3OKTQA613QH4QArQFqyA@mail.gmail.com>
Message-ID: <CAG5iGsCiBH2Rcwry=+DHK33ur1FATq_r+1v-Ut_SBwDr0MEg8w@mail.gmail.com>

On Wed, Sep 9, 2015 at 1:33 AM, David Carlisle <d.p.carlisle at gmail.com>
wrote:

> Hans
>
> > if they're different then you know it's the fontloader cheating you
>
> 51  52
>
> Hmm, I guess you have successfully passed the blame:-)
>
> Thanks for that debugging information.
>
> David
>

If you have a recent context installation,
you can use the latest luatex /luatexjit and the plain of context with

mtxrun --script plain --make
mtxrunjit --script plain --make
and invoke luatex plain with

mtxrun --script plain test.tex
mtxrunjit --script plain test.tex

It can happen that you see the message:


Preloading the plain format: codes, registers, parameters, fonts, more
fonts,
! Font \preloaded=manfnt not loadable: metric data not found or bad.
<to be read again>
\par
l.468

hit return in this case (we will fix it someday).

It could be a good idea to use the plain of context in your tests,
it can help to discriminate between engine and format issues.


--
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20150909/be441d9e/attachment-0001.html>

From d.p.carlisle at gmail.com  Wed Sep  9 10:28:35 2015
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Wed, 9 Sep 2015 09:28:35 +0100
Subject: [luatex] Logging of font names in box log output
In-Reply-To: <55EF6F15.8060608@wxs.nl>
References: <CAEW6iOi+UNDphpRc0Z2opacwkESQDUYCxce12edGg9cPgHWPMA@mail.gmail.com>
 <55EF437B.8060209@wxs.nl>
 <CAEW6iOhFbW9pp-a_4kdEVX9bkG1bks8t-84kjjPP3AbYweo4yw@mail.gmail.com>
 <55EF6731.90508@wxs.nl>
 <CAEW6iOhKPJN+Jisk4qRMvaCHDFi9qLmZwn90dnTCxa+XOZd2Gw@mail.gmail.com>
 <55EF6F15.8060608@wxs.nl>
Message-ID: <CAEW6iOjTgc5j-YZJz_b6DwOa=F7Rx3WCdd89Z7mNCSvtKmZZtA@mail.gmail.com>

Hans wrote

> \number\fontid\font

By the way \fontid doesn't seem to be documented in the luatex 0.80
manual (other than being listed as
an entry in the table returned by tex.extraprimitives)  could it be
added (to section 2.7 I would guess) thanks

With the hints you gave last night it was easy to find the right bits
of the manual to produce

\documentclass{article}

\begin{document}
\font\a=cmr10
\font\b=cmr10

\directlua{
for i,v in font.each() do
print(i .. ' ' .. v.name ..' ' .. v.size .. ' ' ..
tex.fontidentifier(i) .. "\string\n")
end
}
\end{document}


which produces a log ending in

15 cmr10 655360 \OT1/cmr/m/n/10

16 cmr10 655360 \a

17 cmr10 655360 \b

Which one way or another (details left to another day:-) is enough
information to
either modify the current font loader to recognise duplicate fonts, or
probably simpler
just detect this in the regression test suite and take appropriate action.
(eg \let\b\a would be enough for our purposes)

David

From d.p.carlisle at gmail.com  Wed Sep  9 17:21:34 2015
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Wed, 9 Sep 2015 16:21:34 +0100
Subject: [luatex] Logging of font names in box log output
In-Reply-To: <CAEW6iOjTgc5j-YZJz_b6DwOa=F7Rx3WCdd89Z7mNCSvtKmZZtA@mail.gmail.com>
References: <CAEW6iOi+UNDphpRc0Z2opacwkESQDUYCxce12edGg9cPgHWPMA@mail.gmail.com>
 <55EF437B.8060209@wxs.nl>
 <CAEW6iOhFbW9pp-a_4kdEVX9bkG1bks8t-84kjjPP3AbYweo4yw@mail.gmail.com>
 <55EF6731.90508@wxs.nl>
 <CAEW6iOhKPJN+Jisk4qRMvaCHDFi9qLmZwn90dnTCxa+XOZd2Gw@mail.gmail.com>
 <55EF6F15.8060608@wxs.nl>
 <CAEW6iOjTgc5j-YZJz_b6DwOa=F7Rx3WCdd89Z7mNCSvtKmZZtA@mail.gmail.com>
Message-ID: <CAEW6iOhw7Fc3zdbJEJvviWq3tVEjSOsi9NZpWjGNgvy+cp8BSg@mail.gmail.com>

With much help from Hans (and ignoring anything other than classic tfm
fonts for now)
I thought I'd close this thread with some successful code. This
reports \b for both x and y
in texlive 2015 luatex, to match pdftex output:



\directlua{
function mydeffont(n,s,i)
  for ii,vv in font.each() do
    if (n == vv.name) then
% and s == vv.size
% need to normalize size representations
% just equality here fails to match
print('font callback: ' .. n .. ' ' .. s .. ' ' .. vv.size)
     f=ii
    end
  end
  return f or font.read_tfm(n,s)
end
callback.register('define_font',mydeffont)
}



\font\a=cmr10
\font\b=cmr10

\setbox0\hbox{\a x\b y}
\scrollmode
\tracingonline1
\showbox0

\immediate\write16{a: \number\fontid\a}
\immediate\write16{b: \number\fontid\b}

\bye



If I may could I request two additions to the luatex manual?

a) list the new primitive \fontid in section 2.7 (or wherever else you
feel makes sense)

b) document that the define_font callback can return a fontid
(integer) The manual
documents it as returning a table, which meant I didn't know what to do having
detected a duplicate, but I found this text in the changelog which led
to the above.

* The 'define_font' callback interface has changed a little.
It is now:
retval = function (name,size,fontid)

where fontid is the internal font number of the font that
is currently being defined, and retval can be either a table
(as before) or a different, previously defined fontid. This is
useful if a previous definition can be reused instead of
creating a whole new font structure.


Thanks again for the help, I learned quite a bit about luatex font loading:-)

David

From luigi.scarso at gmail.com  Wed Sep  9 18:35:36 2015
From: luigi.scarso at gmail.com (luigi scarso)
Date: Wed, 9 Sep 2015 18:35:36 +0200
Subject: [luatex] Logging of font names in box log output
In-Reply-To: <CAEW6iOhw7Fc3zdbJEJvviWq3tVEjSOsi9NZpWjGNgvy+cp8BSg@mail.gmail.com>
References: <CAEW6iOi+UNDphpRc0Z2opacwkESQDUYCxce12edGg9cPgHWPMA@mail.gmail.com>
 <55EF437B.8060209@wxs.nl>
 <CAEW6iOhFbW9pp-a_4kdEVX9bkG1bks8t-84kjjPP3AbYweo4yw@mail.gmail.com>
 <55EF6731.90508@wxs.nl>
 <CAEW6iOhKPJN+Jisk4qRMvaCHDFi9qLmZwn90dnTCxa+XOZd2Gw@mail.gmail.com>
 <55EF6F15.8060608@wxs.nl>
 <CAEW6iOjTgc5j-YZJz_b6DwOa=F7Rx3WCdd89Z7mNCSvtKmZZtA@mail.gmail.com>
 <CAEW6iOhw7Fc3zdbJEJvviWq3tVEjSOsi9NZpWjGNgvy+cp8BSg@mail.gmail.com>
Message-ID: <CAG5iGsAcPadNThQu3YDL5x0_FPGAk8QCDxiO-U92k7pBVtU50A@mail.gmail.com>

On Wed, Sep 9, 2015 at 5:21 PM, David Carlisle <d.p.carlisle at gmail.com>
wrote:

> With much help from Hans (and ignoring anything other than classic tfm
> fonts for now)
> I thought I'd close this thread with some successful code. This
> reports \b for both x and y
> in texlive 2015 luatex, to match pdftex output:
>
>
>
> \directlua{
> function mydeffont(n,s,i)
>   for ii,vv in font.each() do
>     if (n == vv.name) then
> % and s == vv.size
> % need to normalize size representations
> % just equality here fails to match
> print('font callback: ' .. n .. ' ' .. s .. ' ' .. vv.size)
>      f=ii
>     end
>   end
>   return f or font.read_tfm(n,s)
> end
> callback.register('define_font',mydeffont)
> }
>
>
>
> \font\a=cmr10
> \font\b=cmr10
>
> \setbox0\hbox{\a x\b y}
> \scrollmode
> \tracingonline1
> \showbox0
>
> \immediate\write16{a: \number\fontid\a}
> \immediate\write16{b: \number\fontid\b}
>
> \bye
>
>
>
> If I may could I request two additions to the luatex manual?
>
> a) list the new primitive \fontid in section 2.7 (or wherever else you
> feel makes sense)
>
> b) document that the define_font callback can return a fontid
> (integer) The manual
> documents it as returning a table, which meant I didn't know what to do
> having
> detected a duplicate, but I found this text in the changelog which led
> to the above.
>
> * The 'define_font' callback interface has changed a little.
> It is now:
> retval = function (name,size,fontid)
>
> where fontid is the internal font number of the font that
> is currently being defined, and retval can be either a table
> (as before) or a different, previously defined fontid. This is
> useful if a previous definition can be reused instead of
> creating a whole new font structure.
>
>
ok, I will do in a couple of days.





-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20150909/ffbe1174/attachment.html>

From pragma at wxs.nl  Wed Sep  9 19:17:16 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Wed, 9 Sep 2015 19:17:16 +0200
Subject: [luatex] Logging of font names in box log output
In-Reply-To: <CAEW6iOhw7Fc3zdbJEJvviWq3tVEjSOsi9NZpWjGNgvy+cp8BSg@mail.gmail.com>
References: <CAEW6iOi+UNDphpRc0Z2opacwkESQDUYCxce12edGg9cPgHWPMA@mail.gmail.com>
 <55EF437B.8060209@wxs.nl>
 <CAEW6iOhFbW9pp-a_4kdEVX9bkG1bks8t-84kjjPP3AbYweo4yw@mail.gmail.com>
 <55EF6731.90508@wxs.nl>
 <CAEW6iOhKPJN+Jisk4qRMvaCHDFi9qLmZwn90dnTCxa+XOZd2Gw@mail.gmail.com>
 <55EF6F15.8060608@wxs.nl>
 <CAEW6iOjTgc5j-YZJz_b6DwOa=F7Rx3WCdd89Z7mNCSvtKmZZtA@mail.gmail.com>
 <CAEW6iOhw7Fc3zdbJEJvviWq3tVEjSOsi9NZpWjGNgvy+cp8BSg@mail.gmail.com>
Message-ID: <55F0699C.10008@wxs.nl>

On 9/9/2015 5:21 PM, David Carlisle wrote:

> a) list the new primitive \fontid in section 2.7 (or wherever else you
> feel makes sense)

done

> b) document that the define_font callback can return a fontid
> (integer) The manual
> documents it as returning a table, which meant I didn't know what to do having
> detected a duplicate, but I found this text in the changelog which led
> to the above.
>
> * The 'define_font' callback interface has changed a little.
> It is now:
> retval = function (name,size,fontid)
>
> where fontid is the internal font number of the font that
> is currently being defined, and retval can be either a table
> (as before) or a different, previously defined fontid. This is
> useful if a previous definition can be reused instead of
> creating a whole new font structure.

done

it could be the id of an already defined font (e.g. with font.define)

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From d.p.carlisle at gmail.com  Wed Sep  9 19:20:29 2015
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Wed, 9 Sep 2015 18:20:29 +0100
Subject: [luatex] Logging of font names in box log output
In-Reply-To: <55F0699C.10008@wxs.nl>
References: <CAEW6iOi+UNDphpRc0Z2opacwkESQDUYCxce12edGg9cPgHWPMA@mail.gmail.com>
 <55EF437B.8060209@wxs.nl>
 <CAEW6iOhFbW9pp-a_4kdEVX9bkG1bks8t-84kjjPP3AbYweo4yw@mail.gmail.com>
 <55EF6731.90508@wxs.nl>
 <CAEW6iOhKPJN+Jisk4qRMvaCHDFi9qLmZwn90dnTCxa+XOZd2Gw@mail.gmail.com>
 <55EF6F15.8060608@wxs.nl>
 <CAEW6iOjTgc5j-YZJz_b6DwOa=F7Rx3WCdd89Z7mNCSvtKmZZtA@mail.gmail.com>
 <CAEW6iOhw7Fc3zdbJEJvviWq3tVEjSOsi9NZpWjGNgvy+cp8BSg@mail.gmail.com>
 <55F0699C.10008@wxs.nl>
Message-ID: <CAEW6iOh4cGgtqi=86aoucwguaNNt5hOOyf0mVaSPSe0xLvrJ1g@mail.gmail.com>

Luigi, Hans,

Thanks for the manual additions.

David

