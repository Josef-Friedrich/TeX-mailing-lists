From d.p.carlisle at gmail.com  Wed May  6 11:48:16 2015
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Wed, 6 May 2015 10:48:16 +0100
Subject: [luatex] version number of luatex manual
Message-ID: <CAEW6iOj4g-abFC9RJKAvHgS4hf9TGJddpkUqu28kv5RG_=zuEg@mail.gmail.com>

Just a small point really but it confused me for a bit:-)

The version of the manual (as included in texlive 2015 pretest) seems to
cover
version 0.80.0 (eg that's the version given in the banner in section 2.2

But the yellow title cover page says

beta 0.79.3

Could that be changed to 0.80.0 ?

Thanks


David
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20150506/c964acc1/attachment.html>

From luigi.scarso at gmail.com  Wed May  6 11:51:53 2015
From: luigi.scarso at gmail.com (luigi scarso)
Date: Wed, 6 May 2015 11:51:53 +0200
Subject: [luatex] version number of luatex manual
In-Reply-To: <CAEW6iOj4g-abFC9RJKAvHgS4hf9TGJddpkUqu28kv5RG_=zuEg@mail.gmail.com>
References: <CAEW6iOj4g-abFC9RJKAvHgS4hf9TGJddpkUqu28kv5RG_=zuEg@mail.gmail.com>
Message-ID: <CAG5iGsAheo4qKkNsHbp=ZuLow5RUugSb0bX+Aksn7HnWQybeGQ@mail.gmail.com>

On Wed, May 6, 2015 at 11:48 AM, David Carlisle <d.p.carlisle at gmail.com>
wrote:

>
>
> Just a small point really but it confused me for a bit:-)
>
> The version of the manual (as included in texlive 2015 pretest) seems to
> cover
> version 0.80.0 (eg that's the version given in the banner in section 2.2
>
> But the yellow title cover page says
>
> beta 0.79.3
>
> Could that be changed to 0.80.0 ?
>
> Thanks
>
>
> David
>
> yes, thank you for the report.
We will do in a next update  --- we are fixing some bugs discovered during
the latest bachotex meeting ---,
probably today or tomorrow at most.

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20150506/95c3c956/attachment.html>

From joseph.wright at morningstar2.co.uk  Wed May  6 15:14:43 2015
From: joseph.wright at morningstar2.co.uk (Joseph Wright)
Date: Wed, 6 May 2015 14:14:43 +0100
Subject: [luatex] Assignment of codes (particularly \catcode) based on
	Unicode data
Message-ID: <554A13C3.7070906@morningstar2.co.uk>

Hello all,

As some people will have seen, the LaTeX team have recently integrated
setting of codes (\catcode, \lccode, etc.) for the entire Unicode range
 into the kernel when XeTeX/LuaTeX are in use. This is not a functional
change for end users but does mean that the team now have some control
over these important settings. Notably, the new data file we have
created (unicode-letters.def) is compatible with plain TeX and works
with both XeTeX and LuaTeX. We are therefore hopeful that it will
provide useful not only to LaTeX users but also to those using
plain-basef formats.

For the initial pass we have adopted the settings applied by
unicode-letters.tex (XeTeX)/luatex-unicode-letters.tex (LuaTeX) as-is.
We have constructed a new (TeX) script to generate this data from the
raw Unicode data files.

Most of the settings are straight-forward and shared between XeTeX and
LuaTeX. For example, characters marked as Unicode as letters have
\catcode 11, \lccode and \uccode are set up based on case relationships,
etc. However, we would like to raise one area that may need revision.

Based on the current files, we have a block to set \XeTeXcharclass,
which only applies to XeTeX. The logic followed in that code is that
characters in the file LineBreak.txt which have class "ID" (ideographs)
not only set the \XeTeXcharclass class to 1 but also set the \catcode of
the code point to 11. That leads to a difference between the two Unicode
engines. My current feeling is that the data file should split this
process such that the category code change applies to both XeTeX and
LuaTeX, with the XeTeX-specific code separate. Does this make sense and
indeed does the current assignment make sense?

We are very keen to hear about any other logic changes that may be
required in the data file. This is a complex area and we have at present
done little other than copy the current logic.
--
Joseph Wright

From asyropoulos at yahoo.com  Wed May  6 17:04:49 2015
From: asyropoulos at yahoo.com (Apostolos Syropoulos)
Date: Wed, 6 May 2015 15:04:49 +0000
Subject: [luatex] [XeTeX] Assignment of codes (particularly \catcode)
 based on Unicode data
In-Reply-To: <554A13C3.7070906@morningstar2.co.uk>
References: <554A13C3.7070906@morningstar2.co.uk>
Message-ID: <1802671521.1166454.1430924689291.JavaMail.yahoo@mail.yahoo.com>

Hello,

I checked a bit the file and I have noticed that 


\L 1F10 1F18 1F10 % 

while xgreek.sty defines 


\global\lccode"1F10="1F10 \global\uccode"1F10="0395

You see the uppercase of 'GREEK SMALL LETTER EPSILON WITH PSILI'
is 'GREEK LETTER EPSILON' and not 'GREEK LETTER EPSILON WITH PSILI. 

Some time ago I reported this to the Unicode people and they told me 

something like "we cannot change it now" (I do not remember the exact 

wording but the essence remains the same.) Naturally, all \lccodes and
\uccodes for Greek letters are wrong and I suspect many more are wrong. 


A.S.

PS Of course people who use the xgreek package have no problem.

 ----------------------
Apostolos Syropoulos
Xanthi, Greece

From aksdb at gmx.de  Wed May  6 18:57:26 2015
From: aksdb at gmx.de (Andreas Schneider)
Date: Wed, 6 May 2015 18:57:26 +0200
Subject: [luatex] YAML support?
Message-ID: <554A47F6.7080006@gmx.de>

Hi,

is there any chance to integrate YAML support into luatex? For example:
https://github.com/gvvaughan/lyaml
I have a few API documentations written in Swagger which uses YAML as
the default definition language. Also I tend to write configuration
files in YAML which I could then use in the TeX world too :-)

Best Regards,
Andreas

P.S.: I'm not subscribed to this list, so please CC me.

From luigi.scarso at gmail.com  Wed May  6 19:24:52 2015
From: luigi.scarso at gmail.com (luigi scarso)
Date: Wed, 6 May 2015 19:24:52 +0200
Subject: [luatex] YAML support?
In-Reply-To: <554A47F6.7080006@gmx.de>
References: <554A47F6.7080006@gmx.de>
Message-ID: <CAG5iGsCmJc2qqxa_WEd865dEN+NyNTBtL6+p_PE0s-20H7sTOw@mail.gmail.com>

On Wed, May 6, 2015 at 6:57 PM, Andreas Schneider <aksdb at gmx.de> wrote:

> Hi,
>
> is there any chance to integrate YAML support into luatex? For example:
> https://github.com/gvvaughan/lyaml
>
the swiglib project
oundry.supelec.fr/scm/viewvc.php/trunk/?root=swiglib
has some native modules,
so support for
http://pyyaml.org/wiki/LibYAML
can possibly  be added.
But why you cannot use
https://github.com/gvvaughan/lyaml
as is ?




-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20150506/6661aa27/attachment.html>

From joseph.wright at morningstar2.co.uk  Wed May  6 22:15:07 2015
From: joseph.wright at morningstar2.co.uk (Joseph Wright)
Date: Wed, 6 May 2015 21:15:07 +0100
Subject: [luatex] [XeTeX] Assignment of codes (particularly \catcode)
 based on Unicode data
In-Reply-To: <554A20B3.9060602@gmail.com>
References: <554A13C3.7070906@morningstar2.co.uk> <554A20B3.9060602@gmail.com>
Message-ID: <554A764B.3020906@morningstar2.co.uk>

On 06/05/2015 15:09, Jonathan Kew wrote:
> On 6/5/15 14:14, Joseph Wright wrote:
> 
>> Based on the current files, we have a block to set \XeTeXcharclass,
>> which only applies to XeTeX. The logic followed in that code is that
>> characters in the file LineBreak.txt which have class "ID" (ideographs)
>> not only set the \XeTeXcharclass class to 1 but also set the \catcode of
>> the code point to 11. That leads to a difference between the two Unicode
>> engines. My current feeling is that the data file should split this
>> process such that the category code change applies to both XeTeX and
>> LuaTeX, with the XeTeX-specific code separate. Does this make sense and
>> indeed does the current assignment make sense?
>>
> 
> ISTM that the most appropriate (default) \catcode for characters with
> class ID is clearly letter (11), and would suggest that LuaTeX should
> follow XeTeX in this.

Well for LaTeX at least the team get to make the call here and I think
we will pull everything into line.

> So yes, splitting out the XeTeX-specific code and having LuaTeX share
> the catcode assignments makes sense.

OK, if there are no objections I have a plan on this (I'll actually keep
all of the data, I think, and alter the assignment code).

> After all, if users can write control sequences such as
> 
>   \hello
>   \hall?
>   \????????????
>   \???
>   \????
> 
> they should equally well be able to write
> 
>   \??
>   \?????
> 
> and have each of these treated as single control sequences, too. This
> will not work if category ID characters are given catcode 12.

Entirely reasonable.

> If you're making improvements to unicode-letters.def, I would suggest
> also adding a section that assigns catcode 15 (invalid) to the code
> values "D800 - "DFFF (i.e. the UTF-16 surrogates, which should never be
> used in isolation as characters).

Noted: easy enough to add.
--
Joseph Wright



From joseph.wright at morningstar2.co.uk  Wed May  6 22:22:26 2015
From: joseph.wright at morningstar2.co.uk (Joseph Wright)
Date: Wed, 6 May 2015 21:22:26 +0100
Subject: [luatex] [XeTeX] Assignment of codes (particularly \catcode)
 based on Unicode data
In-Reply-To: <1802671521.1166454.1430924689291.JavaMail.yahoo@mail.yahoo.com>
References: <554A13C3.7070906@morningstar2.co.uk>
 <1802671521.1166454.1430924689291.JavaMail.yahoo@mail.yahoo.com>
Message-ID: <554A7802.8010104@morningstar2.co.uk>

On 06/05/2015 16:04, Apostolos Syropoulos wrote:
> Hello,
> 
> I checked a bit the file and I have noticed that 
> 
> 
> \L 1F10 1F18 1F10 % 
> 
> while xgreek.sty defines 
> 
> 
> \global\lccode"1F10="1F10 \global\uccode"1F10="0395
> 
> You see the uppercase of 'GREEK SMALL LETTER EPSILON WITH PSILI'
> is 'GREEK LETTER EPSILON' and not 'GREEK LETTER EPSILON WITH PSILI. 
> 
> Some time ago I reported this to the Unicode people and they told me 
> 
> something like "we cannot change it now" (I do not remember the exact 
> 
> wording but the essence remains the same.) Naturally, all \lccodes and
> \uccodes for Greek letters are wrong and I suspect many more are wrong. 

This is slightly at a tangent from my original question (whether we are
processing the Unicode data in the right way), but is worth
consideration. It also has some impact on expl3 code related to case
changing (which does not use \lccode/\uccode).

I guess one could imagine deviating from the Unicode data but there are
issues. First, the current position is at least easy to explain. Second,
the current approach is the same position taken by I guess many other
pieces of software, so is cross-compatible with other stuff. Third, as a
non-Greek I can't comment on the technical correctness of what you say!
Is there some place I could see this discussed in detail? (I'm a bit
confused as to what 'GREEK CAPITAL LETTER EPSILON WITH PSILI' represents
if it's not the upper case of 'GREEK SMALL LETTER EPSILON WITH PSILI': I
notice in xgreek you map U+1F18 to U+0395 for upper casing and U+1F10
for lower casing.)
--
Joseph Wright

From joseph.wright at morningstar2.co.uk  Wed May  6 22:24:23 2015
From: joseph.wright at morningstar2.co.uk (Joseph Wright)
Date: Wed, 6 May 2015 21:24:23 +0100
Subject: [luatex] [XeTeX] Assignment of codes (particularly \catcode)
 based on Unicode data
In-Reply-To: <CAEW6iOhz26MF465aga53x0DhyWtMeDUNFw-R0vMt8h_BOHs7MQ@mail.gmail.com>
References: <554A13C3.7070906@morningstar2.co.uk>
 <1802671521.1166454.1430924689291.JavaMail.yahoo@mail.yahoo.com>
 <554A3366.6080800@Rhul.Ac.Uk>	<554A4644.3000308@gmail.com>
 <113794183.1336333.1430935324591.JavaMail.yahoo@mail.yahoo.com>
 <554A59E8.7080302@Rhul.Ac.Uk>
 <1598922118.1378080.1430937981487.JavaMail.yahoo@mail.yahoo.com>
 <554A683E.9070607@Rhul.Ac.Uk>
 <CAEW6iOhz26MF465aga53x0DhyWtMeDUNFw-R0vMt8h_BOHs7MQ@mail.gmail.com>
Message-ID: <554A7877.4040305@morningstar2.co.uk>

On 06/05/2015 21:06, David Carlisle wrote:
> On 6 May 2015 at 20:15, Philip Taylor <P.Taylor at rhul.ac.uk> wrote:
>>
>>
>> Apostolos Syropoulos wrote:
>>
>>> It seems to me that most people have no idea what Unicode is and what is really
>>> involved.
>>
>> OK, so if we restrict the Universe of Discourse to the set of native
>> Hellenic speakers who know what Unicode is, know the importance of being
>> able to use it to identify the correct upper case of (for example)
>> 'GREEK SMALL LETTER EPSILON WITH PSILI', and hold an informed opinion on
>> the matter, would you expect that 100% of these would agree that the
>> uppercase is 'GREEK LETTER EPSILON' and not 'GREEK LETTER EPSILON WITH
>> PSILI', or would you expect that some percentage (perhaps small) would
>> hold the opposite point of view ?
>>
>> ** Phil.
>>
> 
> I don't think that's the right question. Even if everyone, including
> the Unicode technical committee,
> agreed some properties are incorrect for some characters, it isn't
> clear we should change
> them at this level.
> 
> I think that unicode-letters.def makes most sense as a
> fully automated representation of the UCD data files in TeX syntax.
> 
> That way everyone knows what data is in there.
> 
> Individual language packages have far fewer characters to worry about
> and can over-ride
> the base settings where appropriate.

Indeed: provided hyphenation is correct then we are OK. (LuaTeX of
course is rather more flexible there than XeTeX.)
--
Joseph Wright


From aksdb at gmx.de  Wed May  6 21:33:56 2015
From: aksdb at gmx.de (aksdb at gmx.de)
Date: Wed, 6 May 2015 21:33:56 +0200
Subject: [luatex] YAML support?
In-Reply-To: <CAG5iGsCmJc2qqxa_WEd865dEN+NyNTBtL6+p_PE0s-20H7sTOw@mail.gmail.com>
References: <554A47F6.7080006@gmx.de>
 <CAG5iGsCmJc2qqxa_WEd865dEN+NyNTBtL6+p_PE0s-20H7sTOw@mail.gmail.com>
Message-ID: <20150506193356.5767246.3599.4696@gmx.de>

An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20150506/6f5558f5/attachment.html>

From luigi.scarso at gmail.com  Thu May  7 00:02:52 2015
From: luigi.scarso at gmail.com (luigi scarso)
Date: Thu, 7 May 2015 00:02:52 +0200
Subject: [luatex] YAML support?
In-Reply-To: <20150506193356.5767246.3599.4696@gmx.de>
References: <554A47F6.7080006@gmx.de>
 <CAG5iGsCmJc2qqxa_WEd865dEN+NyNTBtL6+p_PE0s-20H7sTOw@mail.gmail.com>
 <20150506193356.5767246.3599.4696@gmx.de>
Message-ID: <CAG5iGsDB-9T=zE7Y0GaVmHzgV68eEe5hcQ85NchK6-eogMqo_g@mail.gmail.com>

On Wed, May 6, 2015 at 9:33 PM, <aksdb at gmx.de> wrote:

> The problem is, that a native c library is needed in addition to the Lua
> wrapper. Therefore I cannot simply install Luatex (and context) but need to
> build and distribute a custom lib.
>
> My ultimate goal is to offer a simple guide for my colleagues on how to
> build the manuals I write in context. That will not work anymore if I
> require them to also install (and possibly build) further libs.
>
> An integration into the luatex "distribution" is in my opinion the only
> sane approach for my intend :)
>
> Perhaps it's better to move this discussion in the context list then. I'm
not a YAML expert, but maybe what you need it's doable in pure Lua.




-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20150507/d4b013c3/attachment-0001.html>

From asyropoulos at yahoo.com  Thu May  7 19:28:29 2015
From: asyropoulos at yahoo.com (Apostolos Syropoulos)
Date: Thu, 7 May 2015 17:28:29 +0000
Subject: [luatex] [XeTeX] Assignment of codes (particularly \catcode)
 based on Unicode data
In-Reply-To: <554A7802.8010104@morningstar2.co.uk>
References: <554A13C3.7070906@morningstar2.co.uk>
 <1802671521.1166454.1430924689291.JavaMail.yahoo@mail.yahoo.com>
 <554A7802.8010104@morningstar2.co.uk>
Message-ID: <120941796.2088241.1431019709926.JavaMail.yahoo@mail.yahoo.com>

> pieces of software, so is cross-compatible with other stuff. Third, as a
> non-Greek I can't comment on the technical correctness of what you say!

Obviously we are educated people here and I would not dare to say that you do not speak
English...


> Is there some place I could see this discussed in detail? (I'm a bit
> confused as to what 'GREEK CAPITAL LETTER EPSILON WITH PSILI' represents
> if it's not the upper case of 'GREEK SMALL LETTER EPSILON WITH
> PSILI': I
> notice in xgreek you map U+1F18 to U+0395 for upper casing and U+1F10
> for lower casing.)
 
First of all let me say that Greek is not English and therefore there are
things here that you do not encounter in English. Now, one must realize that
the acute accent (tonos in Unicode parlance), is not part of the letter as 

the umlaut in the case of the letter ?. The tonos is there to indicate where
the stress should go in a word. The tonos is dropped in words where all
letters are capital or uppercase. As in English and other languages the
first letter of the word that follows a period is always is in uppercase
form. However, the rest of the word is in lowercase form and this means that
accents should not be dropped and this is exactly the reason why you write

???! ???, ???! (Do you see the accent in Epsilon and Alpha?) 


Naturally, the same principle applies to texts that are written in the polytonic
version of Greek. Now there is an exception to this general rule. In Greek
the word ? means or. However, the feminine article is ? so in order to avoid
confusion, ? retains its accent when is uppercased.



Now, I think it Jonathan that brought in to the discussion the "problem" with
the dialytika that appear when a word is transformed into uppercase. This problem
was solved in Omega by using an Omega Transformation Process. However, I solved
the same problem in an OpenType font that included Caps & Small Caps. The following
text 


? ????? ????? ? ? ???????? ?? ?? ????;

should be transformed as follows:

? ????? ????? ? ? ???????? ?? ?? ????;

A.S.



----------------------
Apostolos Syropoulos
Xanthi, Greece


From michal.h21 at gmail.com  Wed May 13 17:49:11 2015
From: michal.h21 at gmail.com (Michal Hoftich)
Date: Wed, 13 May 2015 17:49:11 +0200
Subject: [luatex] Experimental Harfbuzz package
Message-ID: <CAOCj1Of9BLV3Pmt3vfRJifO6M-UOmfVRxStByJcj_OGXd=yk0g@mail.gmail.com>

Hi all,

I've tried to use Lua bindings for Harfbuzz text shaper, provided by
Sile [1], with LuaLaTeX. The Sile Harfbuzz bindings library provides
two functions, one loads a font to Harfbuzz, the second does actual
text shaping with selected font.

I used sample font loader from LuaTeX wiki [2] as the base. It seems
to work for both OpenType and classical TeX fonts, with little
modification. For OpenType fonts,  immediately following glyph nodes
with the same font, language and attributes are collected in
pre_linebreak_filter callback, the text is processed with Harfbuzz,
table with characters is returned, new glyphs with properties of old
nodes are created and the old nodes are replaced with the new ones.
All node types other than glyph are leaved in the node list as they
are.

This means that only separate parts of a word may be shaped, when it
contains whatsit node for example, which may result in missing
ligature or other features sometimes. Also, because only a word is
processed at any moment, this may not suffice for complex scripts like
Arabic, where it is important where line start ending play role in the
shaping (if I understand it correctly). In particular, my Arabic tests
seems to be OK with some fonts, but they seems to fail with Khaled
Hosny's Amiri for some reason.

The package for LuaLaTeX is located on Github [3], some sample files
show  Latin, Devanagari, Cyrillic and Greek scripts [4]. Note that
hyphenation of Greek and Russian seems to work using Babel. The other
example shows various Asian and Arabic scripts: [5].

The package is highly experimental and I am sure it has many
shortcomings, I listed some issues in the README, but at least it is a
proof of concept that Harfbuzz can be used with LuaTeX.

Best regards,
Michal


[1] https://github.com/simoncozens/sile
[2] http://wiki.luatex.org/index.php/Use_a_TrueType_font
[3] https://github.com/michal-h21/luatex-harfbuzz-shaper
[4] https://github.com/michal-h21/luatex-harfbuzz-shaper/blob/master/examples/ahoj.pdf
[5] https://github.com/michal-h21/luatex-harfbuzz-shaper/blob/master/examples/scripts.pdf

From luigi.scarso at gmail.com  Wed May 13 18:07:30 2015
From: luigi.scarso at gmail.com (luigi scarso)
Date: Wed, 13 May 2015 18:07:30 +0200
Subject: [luatex] Experimental Harfbuzz package
In-Reply-To: <CAOCj1Of9BLV3Pmt3vfRJifO6M-UOmfVRxStByJcj_OGXd=yk0g@mail.gmail.com>
References: <CAOCj1Of9BLV3Pmt3vfRJifO6M-UOmfVRxStByJcj_OGXd=yk0g@mail.gmail.com>
Message-ID: <CAG5iGsC0=7_ZKm_wFbgksbqFJ440urA5nYq8rjteujQ87rS7Bg@mail.gmail.com>

On Wed, May 13, 2015 at 5:49 PM, Michal Hoftich <michal.h21 at gmail.com>
wrote:

> Hi all,
>
> I've tried to use Lua bindings for Harfbuzz text shaper, provided by
> Sile [1], with LuaLaTeX. The Sile Harfbuzz bindings library provides
> two functions, one loads a font to Harfbuzz, the second does actual
> text shaping with selected font.
>
> For this kind of binding could be useful the
the swiglib project
 http://swiglib.foundry.supelec.fr
 foundry.supelec.fr/scm/viewvc.php/trunk/?root=swiglib

--
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20150513/8f14d9f6/attachment.html>

From michal.h21 at gmail.com  Thu May 14 16:48:25 2015
From: michal.h21 at gmail.com (Michal Hoftich)
Date: Thu, 14 May 2015 16:48:25 +0200
Subject: [luatex] Experimental Harfbuzz package
In-Reply-To: <CAG5iGsC0=7_ZKm_wFbgksbqFJ440urA5nYq8rjteujQ87rS7Bg@mail.gmail.com>
References: <CAOCj1Of9BLV3Pmt3vfRJifO6M-UOmfVRxStByJcj_OGXd=yk0g@mail.gmail.com>
 <CAG5iGsC0=7_ZKm_wFbgksbqFJ440urA5nYq8rjteujQ87rS7Bg@mail.gmail.com>
Message-ID: <CAOCj1Oc31FVDxtsyV+d+Kp9FWZ8ajk01DJh8oyZ2FtA-PnLyiw@mail.gmail.com>

>>
> For this kind of binding could be useful the
> the swiglib project
>  http://swiglib.foundry.supelec.fr
>  foundry.supelec.fr/scm/viewvc.php/trunk/?root=swiglib
>

Thanks for the link Luigi, I will look at it.

Michal

From h_kitagawa2001 at yahoo.co.jp  Fri May 22 02:46:28 2015
From: h_kitagawa2001 at yahoo.co.jp (Hironori KITAGAWA)
Date: Fri, 22 May 2015 09:46:28 +0900
Subject: [luatex] Segfault with null argument to -output-comment
Message-ID: <555E7C64.9060704@yahoo.co.jp>

Hello all,

LuaTeX raises a segmentation fault,
when -output-comment is just null:

--- a.tex ---
\expandafter\ifx\csname pdfoutput\endcsname\relax
   \else\pdfoutput0 \fi
abc\bye
---

$ luatex -output-comment= a.tex
This is LuaTeX, Version beta-0.80.0 (TeX Live 2015) (rev 5238)
  restricted \write18 enabled.
(./a.texzsh: segmentation fault (core dumped)  luatex -output-comment= a.tex

Other engines, such as tex, pdftex (and aleph) work fine:

$ tex -output-comment= a.tex
This is TeX, Version 3.14159265 (TeX Live 2015) (preloaded format=tex)
(./a.tex [1] )
Output written on a.dvi (1 page, 188 bytes).
Transcript written on a.log.

$ pdftex -output-comment= a.tex
This is pdfTeX, Version 3.14159265-2.6-1.40.16 (TeX Live 2015) 
(preloaded format=pdftex)
  restricted \write18 enabled.
entering extended mode
(./a.tex [1] )
Output written on a.dvi (1 page, 188 bytes).
Transcript written on a.log.

Regards
Hironori KITAGAWA <h_kitagawa2001 at yahoo.co.jp>

From luigi.scarso at gmail.com  Fri May 22 07:44:15 2015
From: luigi.scarso at gmail.com (luigi scarso)
Date: Fri, 22 May 2015 07:44:15 +0200
Subject: [luatex] Segfault with null argument to -output-comment
In-Reply-To: <555E7C64.9060704@yahoo.co.jp>
References: <555E7C64.9060704@yahoo.co.jp>
Message-ID: <CAG5iGsD_yMnqvr7ZZKHGadPGHGkN7UBtSB4EGfuf+QWn1bQndw@mail.gmail.com>

On Fri, May 22, 2015 at 2:46 AM, Hironori KITAGAWA <
h_kitagawa2001 at yahoo.co.jp> wrote:

> Hello all,
>
> LuaTeX raises a segmentation fault,
> when -output-comment is just null:
>
> --- a.tex ---
> \expandafter\ifx\csname pdfoutput\endcsname\relax
>   \else\pdfoutput0 \fi
> abc\bye
> ---
>
> $ luatex -output-comment= a.tex
> This is LuaTeX, Version beta-0.80.0 (TeX Live 2015) (rev 5238)
>  restricted \write18 enabled.
> (./a.texzsh: segmentation fault (core dumped)  luatex -output-comment=
> a.tex
>
> Other engines, such as tex, pdftex (and aleph) work fine:
>
> $ tex -output-comment= a.tex
> This is TeX, Version 3.14159265 (TeX Live 2015) (preloaded format=tex)
> (./a.tex [1] )
> Output written on a.dvi (1 page, 188 bytes).
> Transcript written on a.log.
>
> $ pdftex -output-comment= a.tex
> This is pdfTeX, Version 3.14159265-2.6-1.40.16 (TeX Live 2015) (preloaded
> format=pdftex)
>  restricted \write18 enabled.
> entering extended mode
> (./a.tex [1] )
> Output written on a.dvi (1 page, 188 bytes).
> Transcript written on a.log.
>
> Regards
> Hironori KITAGAWA <h_kitagawa2001 at yahoo.co.jp>
>

Confirmed, thank you for the report .
I will fix asap.
-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20150522/33dcb932/attachment.html>

From luigi.scarso at gmail.com  Fri May 22 12:21:59 2015
From: luigi.scarso at gmail.com (luigi scarso)
Date: Fri, 22 May 2015 12:21:59 +0200
Subject: [luatex] Segfault with null argument to -output-comment
In-Reply-To: <CAG5iGsD_yMnqvr7ZZKHGadPGHGkN7UBtSB4EGfuf+QWn1bQndw@mail.gmail.com>
References: <555E7C64.9060704@yahoo.co.jp>
 <CAG5iGsD_yMnqvr7ZZKHGadPGHGkN7UBtSB4EGfuf+QWn1bQndw@mail.gmail.com>
Message-ID: <CAG5iGsAapOs92ez7re-jQ3+BFfL-Y+CeeMUeKgYVYEf04opNQw@mail.gmail.com>

On Fri, May 22, 2015 at 7:44 AM, luigi scarso <luigi.scarso at gmail.com>
wrote:

>
>
> On Fri, May 22, 2015 at 2:46 AM, Hironori KITAGAWA <
> h_kitagawa2001 at yahoo.co.jp> wrote:
>
>> Hello all,
>>
>> LuaTeX raises a segmentation fault,
>> when -output-comment is just null:
>>
>> --- a.tex ---
>> \expandafter\ifx\csname pdfoutput\endcsname\relax
>>   \else\pdfoutput0 \fi
>> abc\bye
>> ---
>>
>> $ luatex -output-comment= a.tex
>> This is LuaTeX, Version beta-0.80.0 (TeX Live 2015) (rev 5238)
>>  restricted \write18 enabled.
>> (./a.texzsh: segmentation fault (core dumped)  luatex -output-comment=
>> a.tex
>>
>> Other engines, such as tex, pdftex (and aleph) work fine:
>>
>> $ tex -output-comment= a.tex
>> This is TeX, Version 3.14159265 (TeX Live 2015) (preloaded format=tex)
>> (./a.tex [1] )
>> Output written on a.dvi (1 page, 188 bytes).
>> Transcript written on a.log.
>>
>> $ pdftex -output-comment= a.tex
>> This is pdfTeX, Version 3.14159265-2.6-1.40.16 (TeX Live 2015) (preloaded
>> format=pdftex)
>>  restricted \write18 enabled.
>> entering extended mode
>> (./a.tex [1] )
>> Output written on a.dvi (1 page, 188 bytes).
>> Transcript written on a.log.
>>
>> Regards
>> Hironori KITAGAWA <h_kitagawa2001 at yahoo.co.jp>
>>
>
> Confirmed, thank you for the report .
> I will fix asap.
> --
> luigi
>

A patch in trunk,
revision 5253.

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20150522/6fdb4b99/attachment.html>

From reinhard.kotucha at googlemail.com  Fri May 22 21:46:10 2015
From: reinhard.kotucha at googlemail.com (Reinhard Kotucha)
Date: Fri, 22 May 2015 21:46:10 +0200
Subject: [luatex] Segfault with null argument to -output-comment
In-Reply-To: <CAG5iGsAapOs92ez7re-jQ3+BFfL-Y+CeeMUeKgYVYEf04opNQw@mail.gmail.com>
References: <555E7C64.9060704@yahoo.co.jp>
 <CAG5iGsD_yMnqvr7ZZKHGadPGHGkN7UBtSB4EGfuf+QWn1bQndw@mail.gmail.com>
 <CAG5iGsAapOs92ez7re-jQ3+BFfL-Y+CeeMUeKgYVYEf04opNQw@mail.gmail.com>
Message-ID: <21855.34690.479618.888823@zaphod.ms25.net>

On 2015-05-22 at 12:21:59 +0200, luigi scarso wrote:

 > A patch in trunk,
 > revision 5253.

Hi Luigi,
there is another issue regarding command line arguments.  It's a minor
issue but sometimes annoying.  AFAIK Knuth's TeX had no optional
arguments but some implementations added some.  These implementations
also issued a warning message

  [*]tex: unrecognized option '-foo'

if they encounter an argument beginning with a minus sign which they
are not aware of.

This was acceptable in the past, at least for all the other engines
though I must admit that it was sometimes annoying that I had to tell
TeX that *my* options begin with '+' and had to invoke TeX by a
wrapper script which replaces all '-' signs with '+' in advance.
Well, I think that this behavior is acceptable because reading command
line arguments from a TeX file is an ugly hack anyway and I'm probably
the only one doing such nasty things.

However, in LuaTeX it's desirable to suppress the warning message
because the command line (arg) is accessible by Lua code inside the
TeX file.  Thus it should be possible to make use of it without beeing
bothered or even confused by this message.

I suppose that the warning message is not intended in LuaTeX because
it had been removed already from former releases but came back in
TL-2014, if I remember correctly.  Maybe it comes from one of the
Web2C/Kpathsea .ch files or so and just had been overlooked in recent
releases.

Luigi, could you look into it, please?  Or discuss it with Taco, Hans,
and Hartmut if you are unsure?  IMO the message is confusing if
additional arguments are processed with Lua code later.

Regards,
  Reinhard

-- 
------------------------------------------------------------------
Reinhard Kotucha                            Phone: +49-511-3373112
Marschnerstr. 25
D-30167 Hannover                    mailto:reinhard.kotucha at web.de
------------------------------------------------------------------

From d.p.carlisle at gmail.com  Fri May 22 23:02:52 2015
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Fri, 22 May 2015 22:02:52 +0100
Subject: [luatex] \Ucharcat
Message-ID: <CAEW6iOjZVDGYOrvt5JANyitrH=OY6tX6fV8XGwLWLn+CnJ_JFg@mail.gmail.com>

Hi,

xetex in the tl2015 release has added a new primitive \Ucharcat
which is like Uchar but takes a second integer specifying a catcode.

\Ucharcat 65 11  expands to letter A
\Ucharcat 65 12  expands to a character A, etc.

This is rather more useful than \Uchar as it allows arbitrary character
tokens to be generated via expansion.

Would there be interest in adding a matching primitive in luatex?

It can be implemented in lua at the cost of one extra expansion step
(although the same is true of \Uchar of course)

Whether or not it gets implemented as a primitive, I wonder if this is the best
lua implementation? Comments welcome:-)

\ifx\newcatcodetable\@undefined
  \chardef\ucharcat at table"7000
\else
  \newcatcodetable\ucharcat at table
\fi
\luatexinitcatcodetable\ucharcat at table
\directlua{%
function UcharcatLua()
  local mych = newtoken.scan_int()
  local mycat = newtoken.scan_int()
  tex.setcatcode(\the\numexpr\ucharcat at table\relax,mych,mycat)
  tex.sprint(\the\numexpr\ucharcat at table\relax,unicode.utf8.char(mych))
end
}
\def\Ucharcat{\directlua{UcharcatLua()}}



I'd hoped to avoid dedicating a catcode table table for this
and instead just set the catcode, print, and set back.
However it seems that the printing happens with the catcode
table value in force at the end of \directua not the value at
the point of the tex.sprint. (The manual could be more explicit
on that point but I think that's right?)



David

From pragma at wxs.nl  Sat May 23 01:05:02 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Sat, 23 May 2015 01:05:02 +0200
Subject: [luatex] \Ucharcat
In-Reply-To: <CAEW6iOjZVDGYOrvt5JANyitrH=OY6tX6fV8XGwLWLn+CnJ_JFg@mail.gmail.com>
References: <CAEW6iOjZVDGYOrvt5JANyitrH=OY6tX6fV8XGwLWLn+CnJ_JFg@mail.gmail.com>
Message-ID: <555FB61E.1000106@wxs.nl>

On 5/22/2015 11:02 PM, David Carlisle wrote:
> Hi,
>
> xetex in the tl2015 release has added a new primitive \Ucharcat
> which is like Uchar but takes a second integer specifying a catcode.
>
> \Ucharcat 65 11  expands to letter A
> \Ucharcat 65 12  expands to a character A, etc.
>
> This is rather more useful than \Uchar as it allows arbitrary character
> tokens to be generated via expansion.
>
> Would there be interest in adding a matching primitive in luatex?
>
> It can be implemented in lua at the cost of one extra expansion step
> (although the same is true of \Uchar of course)
>
> Whether or not it gets implemented as a primitive, I wonder if this is the best
> lua implementation? Comments welcome:-)
>
> \ifx\newcatcodetable\@undefined
>    \chardef\ucharcat at table"7000
> \else
>    \newcatcodetable\ucharcat at table
> \fi
> \luatexinitcatcodetable\ucharcat at table
> \directlua{%
> function UcharcatLua()
>    local mych = newtoken.scan_int()
>    local mycat = newtoken.scan_int()
>    tex.setcatcode(\the\numexpr\ucharcat at table\relax,mych,mycat)
>    tex.sprint(\the\numexpr\ucharcat at table\relax,unicode.utf8.char(mych))
> end
> }
> \def\Ucharcat{\directlua{UcharcatLua()}}
>
> I'd hoped to avoid dedicating a catcode table table for this
> and instead just set the catcode, print, and set back.
> However it seems that the printing happens with the catcode
> table value in force at the end of \directua not the value at
> the point of the tex.sprint. (The manual could be more explicit
> on that point but I think that's right?)

well, the whole idea of luatex and having lua is that we can avoid all 
kind of extensions (i can think of a truckload of handy helpers for 
context but deliberately don't implement them in luatex because it can 
done with help of lua and is also macro package specific)

your lua solution looks ok to me, if it's real critital you can speed it 
up a bit with locals (normally lua is pretty fast)

we have on the (low priority) agenda a cleanup of some of the input 
handler code (your case relates to input handling and lua prints get 
injected, currently a bit more complex than needed because we started 
out with multiple lua instances)

at some point i can imagine an extra lua print function that print a 
string with given catcode (something tex.cprint(catcode,string,..) but 
for that we need to carry an extra around) so it's then part of the 
cleanup (so that would simplify the \Ucharcat definition then) ... i've 
added a reminder in the tracker

you can consider passing the catcodetable so you can define the function 
before the table

\directlua{%
function UcharcatLua()
    local myct  = newtoken.scan_int()
    local mych  = newtoken.scan_int()
    local mycat = newtoken.scan_int()
    tex.setcatcode(myct,mych,mycat)
    tex.sprint(myct,unicode.utf8.char(mych))
end
}

\newcatcodetable\Ucharcatcodetable

\initcatcodetable\Ucharcatcodetable

\def\Ucharcat{\directlua{UcharcatLua()}\Ucharcatcodetable}

A:\the\catcode65:\Ucharcat 65 11:A:\the\catcode65\par
A:\the\catcode65:\Ucharcat 65  5:A:\the\catcode65\par
A:\the\catcode65:\Ucharcat 65 11:A:\the\catcode65\par

the following avoids the catcodetable:

\directlua{%
local cct = nil
local chr = nil
function UcharcatLua()
    chr = newtoken.scan_int()
    cct = tex.getcatcode(chr)
    tex.setcatcode(chr,newtoken.scan_int())
    tex.sprint(unicode.utf8.char(chr),
      "\\directlua{UcharcatLuaFollowup()}")
end
function UcharcatLuaFollowup()
    tex.setcatcode(chr,cct)
end
}
\def\Ucharcat{\directlua{UcharcatLua()}}

A:\the\catcode65:\Ucharcat 65 11:A:\the\catcode65\par
A:\the\catcode65:\Ucharcat 65  5:A:\the\catcode65\par
A:\the\catcode65:\Ucharcat 65 11:A:\the\catcode65\par


Hans


-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From pragma at wxs.nl  Sat May 23 01:07:58 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Sat, 23 May 2015 01:07:58 +0200
Subject: [luatex] Segfault with null argument to -output-comment
In-Reply-To: <21855.34690.479618.888823@zaphod.ms25.net>
References: <555E7C64.9060704@yahoo.co.jp>
 <CAG5iGsD_yMnqvr7ZZKHGadPGHGkN7UBtSB4EGfuf+QWn1bQndw@mail.gmail.com>
 <CAG5iGsAapOs92ez7re-jQ3+BFfL-Y+CeeMUeKgYVYEf04opNQw@mail.gmail.com>
 <21855.34690.479618.888823@zaphod.ms25.net>
Message-ID: <555FB6CE.8050601@wxs.nl>

On 5/22/2015 9:46 PM, Reinhard Kotucha wrote:
> On 2015-05-22 at 12:21:59 +0200, luigi scarso wrote:
>
>   > A patch in trunk,
>   > revision 5253.
>
> Hi Luigi,
> there is another issue regarding command line arguments.  It's a minor
> issue but sometimes annoying.  AFAIK Knuth's TeX had no optional
> arguments but some implementations added some.  These implementations
> also issued a warning message
>
>    [*]tex: unrecognized option '-foo'
>
> if they encounter an argument beginning with a minus sign which they
> are not aware of.
>
> This was acceptable in the past, at least for all the other engines
> though I must admit that it was sometimes annoying that I had to tell
> TeX that *my* options begin with '+' and had to invoke TeX by a
> wrapper script which replaces all '-' signs with '+' in advance.
> Well, I think that this behavior is acceptable because reading command
> line arguments from a TeX file is an ugly hack anyway and I'm probably
> the only one doing such nasty things.
>
> However, in LuaTeX it's desirable to suppress the warning message
> because the command line (arg) is accessible by Lua code inside the
> TeX file.  Thus it should be possible to make use of it without beeing
> bothered or even confused by this message.

indeed

> I suppose that the warning message is not intended in LuaTeX because
> it had been removed already from former releases but came back in
> TL-2014, if I remember correctly.  Maybe it comes from one of the
> Web2C/Kpathsea .ch files or so and just had been overlooked in recent
> releases.
>
> Luigi, could you look into it, please?  Or discuss it with Taco, Hans,
> and Hartmut if you are unsure?  IMO the message is confusing if
> additional arguments are processed with Lua code later.

indeed there should be no warning, i made a tracker

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From pragma at wxs.nl  Sat May 23 12:01:09 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Sat, 23 May 2015 12:01:09 +0200
Subject: [luatex] \Ucharcat
In-Reply-To: <CAEW6iOjZVDGYOrvt5JANyitrH=OY6tX6fV8XGwLWLn+CnJ_JFg@mail.gmail.com>
References: <CAEW6iOjZVDGYOrvt5JANyitrH=OY6tX6fV8XGwLWLn+CnJ_JFg@mail.gmail.com>
Message-ID: <55604FE5.6030909@wxs.nl>

Hi David,

Here is a better example. Instead of directlua, we register a function 
and call that one. The funny expandafters make sure we call them 
out-of-order. It works ok in luatex-plain. In fact, \directlua itself 
could be reimplemented as function but it is slightly slower then so we 
keep it as core primitive.

(Btw, some day soon I'm going to see if some backend primitives can be 
replaced by directlua + tokenscanner calls). The smaller the core and 
the more decoupled the backend is from the scanner, the better.)

\directlua{
     gadgets = gadgets or { } % reserved namespace

     gadgets.functions = { }
     local registered  = { }

     function gadgets.functions.reserve()
         local numb = newtoken.scan_int()
         local name = newtoken.scan_string()
         local okay = string.gsub(name,"[\string\\ ]","")
         registered[okay] = numb
         texio.write_nl("reserving lua function '"..okay.."' with number 
"..numb)
     end

     function gadgets.functions.register(name,f)
         local okay = string.gsub(name,"[\string\\ ]","")
         local numb = registered[okay]
         if numb then
             texio.write_nl("registering lua function '"..okay.."' with 
number "..numb)
             lua.get_functions_table()[numb] = f
         else
             texio.write_nl("lua function '"..okay.."' is not reserved")
         end
     end

}

\newcount\lastallocatedluafunction

\def\newluafunction#1%
   {\ifdefined#1\else
      \global\advance\lastallocatedluafunction 1
      \global\chardef#1\lastallocatedluafunction
      \directlua{gadgets.functions.reserve()}#1{\detokenize{#1}}%
    \fi}

\newluafunction\UcharcatLuaOne
\newluafunction\UcharcatLuaTwo

\directlua {

     local cct = nil
     local chr = nil

     gadgets.functions.register("UcharcatLuaOne",function()
         chr = newtoken.scan_int()
         cct = tex.getcatcode(chr)
         tex.setcatcode(chr,newtoken.scan_int())
         tex.sprint(unicode.utf8.char(chr))
     end)

     gadgets.functions.register("UcharcatLuaTwo",function()
         tex.setcatcode(chr,cct)
     end)

}

\def\Ucharcat
   {\expandafter\expandafter\expandafter\luafunction
    \expandafter\expandafter\expandafter\UcharcatLuaTwo
    \luafunction\UcharcatLuaOne}

A:\the\catcode65:\Ucharcat 65 11:A:\the\catcode65\par
A:\the\catcode65:\Ucharcat 65  5:A:\the\catcode65\par
A:\the\catcode65:\Ucharcat 65 11:A:\the\catcode65\par

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From luigi.scarso at gmail.com  Sat May 23 13:04:39 2015
From: luigi.scarso at gmail.com (luigi scarso)
Date: Sat, 23 May 2015 13:04:39 +0200
Subject: [luatex] Segfault with null argument to -output-comment
In-Reply-To: <555FB6CE.8050601@wxs.nl>
References: <555E7C64.9060704@yahoo.co.jp>
 <CAG5iGsD_yMnqvr7ZZKHGadPGHGkN7UBtSB4EGfuf+QWn1bQndw@mail.gmail.com>
 <CAG5iGsAapOs92ez7re-jQ3+BFfL-Y+CeeMUeKgYVYEf04opNQw@mail.gmail.com>
 <21855.34690.479618.888823@zaphod.ms25.net>	<555FB6CE.8050601@wxs.nl>
Message-ID: <CAG5iGsDyjGiUTX3iMgUPz7qDQ-fUEGJ4T37CKcGxrk372nifxA@mail.gmail.com>

On Sat, May 23, 2015 at 1:07 AM, Hans Hagen <pragma at wxs.nl> wrote:

> On 5/22/2015 9:46 PM, Reinhard Kotucha wrote:
>
>> On 2015-05-22 at 12:21:59 +0200, luigi scarso wrote:
>>
>>   > A patch in trunk,
>>   > revision 5253.
>>
>> Hi Luigi,
>> there is another issue regarding command line arguments.  It's a minor
>> issue but sometimes annoying.  AFAIK Knuth's TeX had no optional
>> arguments but some implementations added some.  These implementations
>> also issued a warning message
>>
>>    [*]tex: unrecognized option '-foo'
>>
>> if they encounter an argument beginning with a minus sign which they
>> are not aware of.
>>
>> This was acceptable in the past, at least for all the other engines
>> though I must admit that it was sometimes annoying that I had to tell
>> TeX that *my* options begin with '+' and had to invoke TeX by a
>> wrapper script which replaces all '-' signs with '+' in advance.
>> Well, I think that this behavior is acceptable because reading command
>> line arguments from a TeX file is an ugly hack anyway and I'm probably
>> the only one doing such nasty things.
>>
>> However, in LuaTeX it's desirable to suppress the warning message
>> because the command line (arg) is accessible by Lua code inside the
>> TeX file.  Thus it should be possible to make use of it without beeing
>> bothered or even confused by this message.
>>
>
> indeed
>
>  I suppose that the warning message is not intended in LuaTeX because
>> it had been removed already from former releases but came back in
>> TL-2014, if I remember correctly.  Maybe it comes from one of the
>> Web2C/Kpathsea .ch files or so and just had been overlooked in recent
>> releases.
>>
>> Luigi, could you look into it, please?  Or discuss it with Taco, Hans,
>> and Hartmut if you are unsure?  IMO the message is confusing if
>> additional arguments are processed with Lua code later.
>>
>
> indeed there should be no warning, i made a tracker
>
> Hm.

$ luatex --fmt=luatex-plain --foo  "test.tex"
luatex: unrecognized option '--foo'
This is LuaTeX, Version beta-0.80.1 experimental
 \write18 enabled.
(./test.tex
:
:


$ luatex --fmt=luatex-plain --lua=test.lua  --foo  "test.tex"
This is LuaTeX, Version beta-0.80.1 experimental
 \write18 enabled.
(./test.tex
:
:
(test.lua is empty)

Perhaps we should explain this in the manual,
but in general I think it's not a good idea to suppress the message
"unrecognized option" .


-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20150523/1984bc2d/attachment.html>

From d.p.carlisle at gmail.com  Sat May 23 18:29:16 2015
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Sat, 23 May 2015 17:29:16 +0100
Subject: [luatex] \Ucharcat
In-Reply-To: <55604FE5.6030909@wxs.nl>
References: <CAEW6iOjZVDGYOrvt5JANyitrH=OY6tX6fV8XGwLWLn+CnJ_JFg@mail.gmail.com>
 <55604FE5.6030909@wxs.nl>
Message-ID: <CAEW6iOgzQ322CcJK3P2tVYQjCmC8MaOn-x3kW+ECaZEdx1gpaQ@mail.gmail.com>

Hans,

Thanks for the code suggestions, helpful to get a feel of the interface
for getting tokens back from lua, I need to play with \luafunction more:-)

David

From pragma at wxs.nl  Sun May 24 11:07:00 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Sun, 24 May 2015 11:07:00 +0200
Subject: [luatex] \Ucharcat
In-Reply-To: <CAEW6iOgzQ322CcJK3P2tVYQjCmC8MaOn-x3kW+ECaZEdx1gpaQ@mail.gmail.com>
References: <CAEW6iOjZVDGYOrvt5JANyitrH=OY6tX6fV8XGwLWLn+CnJ_JFg@mail.gmail.com>
 <55604FE5.6030909@wxs.nl>
 <CAEW6iOgzQ322CcJK3P2tVYQjCmC8MaOn-x3kW+ECaZEdx1gpaQ@mail.gmail.com>
Message-ID: <556194B4.5080902@wxs.nl>

On 5/23/2015 6:29 PM, David Carlisle wrote:

> Thanks for the code suggestions, helpful to get a feel of the interface
> for getting tokens back from lua, I need to play with \luafunction more:-)

It has some drawbacks, for instance you need to make sure the functions 
are registered and lua code like that is not stored in the format (one 
can of course write code for that) so it needs runtime initialization. 
So using a \directlua is not bad per se.

You can also chain like this:

\directlua{

	function one()
           tex.sprint("first")
           tex.sprint("\\directlua{tex.print("two()")")
         end
         function two()
           tex.sprint("second")
         end
}

\directlua{one()}

and do the push/pop catcode in one and two. The performance difference 
is small, in fact you can measure it being a bit slower than using 
\luafunction but on the average \directlua calls are neglectable 
compared to the rest of the typesetting. So go for what is most 
convenient and readable (\luafunctions are harder to trace for instance 
as they are kind of anonyumous, while for \directlua you see errors more 
clearly).

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From taco at docwolves.nl  Sun May 24 12:26:31 2015
From: taco at docwolves.nl (Taco Hoekwater)
Date: Sun, 24 May 2015 12:26:31 +0200
Subject: [luatex] Segfault with null argument to -output-comment
In-Reply-To: <CAG5iGsDyjGiUTX3iMgUPz7qDQ-fUEGJ4T37CKcGxrk372nifxA@mail.gmail.com>
References: <555E7C64.9060704@yahoo.co.jp>
 <CAG5iGsD_yMnqvr7ZZKHGadPGHGkN7UBtSB4EGfuf+QWn1bQndw@mail.gmail.com>
 <CAG5iGsAapOs92ez7re-jQ3+BFfL-Y+CeeMUeKgYVYEf04opNQw@mail.gmail.com>
 <21855.34690.479618.888823@zaphod.ms25.net> <555FB6CE.8050601@wxs.nl>
 <CAG5iGsDyjGiUTX3iMgUPz7qDQ-fUEGJ4T37CKcGxrk372nifxA@mail.gmail.com>
Message-ID: <F5CA9AF3-36CF-4719-BC25-C6D0D50A8EDC@docwolves.nl>

Hi,

> Op 23 mei 2015 om 13:04 heeft luigi scarso <luigi.scarso at gmail.com> het volgende geschreven:
> 
> Hm.
> 
> $ luatex --fmt=luatex-plain --foo  "test.tex" 
> luatex: unrecognized option '--foo'
> This is LuaTeX, Version beta-0.80.1 experimental 
>  \write18 enabled.
> (./test.tex
> :
> :
> 
> 
> $ luatex --fmt=luatex-plain --lua=test.lua  --foo  "test.tex" 
> This is LuaTeX, Version beta-0.80.1 experimental 
>  \write18 enabled.
> (./test.tex
> :
> :
> (test.lua is empty)
> 
> Perhaps we should explain this in the manual,
> but in general I think it's not a good idea to suppress the message
> "unrecognized option" .

This is working exactly as intended. Please do not change the behaviour.

Best wishes,
Taco


From pragma at wxs.nl  Sun May 24 12:59:27 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Sun, 24 May 2015 12:59:27 +0200
Subject: [luatex] Segfault with null argument to -output-comment
In-Reply-To: <F5CA9AF3-36CF-4719-BC25-C6D0D50A8EDC@docwolves.nl>
References: <555E7C64.9060704@yahoo.co.jp>
 <CAG5iGsD_yMnqvr7ZZKHGadPGHGkN7UBtSB4EGfuf+QWn1bQndw@mail.gmail.com>
 <CAG5iGsAapOs92ez7re-jQ3+BFfL-Y+CeeMUeKgYVYEf04opNQw@mail.gmail.com>
 <21855.34690.479618.888823@zaphod.ms25.net> <555FB6CE.8050601@wxs.nl>
 <CAG5iGsDyjGiUTX3iMgUPz7qDQ-fUEGJ4T37CKcGxrk372nifxA@mail.gmail.com>
 <F5CA9AF3-36CF-4719-BC25-C6D0D50A8EDC@docwolves.nl>
Message-ID: <5561AF0F.8020602@wxs.nl>

On 5/24/2015 12:26 PM, Taco Hoekwater wrote:
> Hi,
>
>> Op 23 mei 2015 om 13:04 heeft luigi scarso <luigi.scarso at gmail.com> het volgende geschreven:
>>
>> Hm.
>>
>> $ luatex --fmt=luatex-plain --foo  "test.tex"
>> luatex: unrecognized option '--foo'
>> This is LuaTeX, Version beta-0.80.1 experimental
>>   \write18 enabled.
>> (./test.tex
>> :
>> :
>>
>>
>> $ luatex --fmt=luatex-plain --lua=test.lua  --foo  "test.tex"
>> This is LuaTeX, Version beta-0.80.1 experimental
>>   \write18 enabled.
>> (./test.tex
>> :
>> :
>> (test.lua is empty)
>>
>> Perhaps we should explain this in the manual,
>> but in general I think it's not a good idea to suppress the message
>> "unrecognized option" .
>
> This is working exactly as intended. Please do not change the behaviour.

Indeed, so the two example runs can be added to the manual as with:

When a lua script is specified there is will be no checking on 
unrecognized options because the lua code itself can be driven by options.

(As we do pass options to context it would mean that we'd get a whole 
list of confusing unrecognized options.)

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From reinhard.kotucha at googlemail.com  Sun May 24 09:11:02 2015
From: reinhard.kotucha at googlemail.com (Reinhard Kotucha)
Date: Sun, 24 May 2015 09:11:02 +0200
Subject: [luatex] Segfault with null argument to -output-comment
In-Reply-To: <CAG5iGsDyjGiUTX3iMgUPz7qDQ-fUEGJ4T37CKcGxrk372nifxA@mail.gmail.com>
References: <555E7C64.9060704@yahoo.co.jp>
 <CAG5iGsD_yMnqvr7ZZKHGadPGHGkN7UBtSB4EGfuf+QWn1bQndw@mail.gmail.com>
 <CAG5iGsAapOs92ez7re-jQ3+BFfL-Y+CeeMUeKgYVYEf04opNQw@mail.gmail.com>
 <21855.34690.479618.888823@zaphod.ms25.net>	<555FB6CE.8050601@wxs.nl>
 <CAG5iGsDyjGiUTX3iMgUPz7qDQ-fUEGJ4T37CKcGxrk372nifxA@mail.gmail.com>
Message-ID: <21857.31110.43321.864017@zaphod.ms25.net>

On 2015-05-23 at 13:04:39 +0200, luigi scarso wrote:

 > > Hm.
 > 
 > $ luatex --fmt=luatex-plain --foo  "test.tex"
 > luatex: unrecognized option '--foo'
 > This is LuaTeX, Version beta-0.80.1 experimental
 >  \write18 enabled.
 > (./test.tex
 > :
 > :
 > 
 > 
 > $ luatex --fmt=luatex-plain --lua=test.lua  --foo  "test.tex"
 > This is LuaTeX, Version beta-0.80.1 experimental
 >  \write18 enabled.
 > (./test.tex
 > :
 > :
 > (test.lua is empty)
 > 
 > Perhaps we should explain this in the manual,

This looks like bug which will disappear when the warning message is
removed. 

 > but in general I think it's not a good idea to suppress the message
 > "unrecognized option" .

You obviously have optional arguments in mind which are defined in
LuaTeX, the program.  In this case warnings were probably acceptable.
But what I have in mind is to support additional options within a .tex
file and evaluate the arg table in order to determine their content.

It's annoying if luatex complains that it's not aware of the optional
arguments I defined myself.  But when luatex reads the command-line,
it doesn't know how people evaluate Lua's arg table later.  Therefore
the only reasonable solution is to avoid the warning message.

Regards,
  Reinhard

-- 
------------------------------------------------------------------
Reinhard Kotucha                            Phone: +49-511-3373112
Marschnerstr. 25
D-30167 Hannover                    mailto:reinhard.kotucha at web.de
------------------------------------------------------------------

From thenders at gmail.com  Tue May 26 13:57:23 2015
From: thenders at gmail.com (Troy Henderson)
Date: Tue, 26 May 2015 06:57:23 -0500
Subject: [luatex] luamplib + picture
Message-ID: <CAFP+xFJo5S1sjurAYnYgVa7dhtAJ6a_EfRNXR6vX0Zf1jhjyAA@mail.gmail.com>

In MetaPost, the following code produces

2 "textual" "textual"

as expected.

% Begin code %
picture pct;
pct:=btex{a\,b}etex;

show length pct;
for tkn within pct:
  for str="bounded", "clipped", "filled", "stroked", "textual":
    if scantokens str tkn: show str; fi
  endfor
endfor

beginfig(0)
endfig;
end
% End code %

However, using luamplib (with lualatex), the following code produces

1 "stroked"

which is unexpected.

    \begin{mplibcode}
        picture pct;
        pct:=btex a\,b" etex;

        show length pct;
        for tkn within pct:
            for str="bounded", "clipped", "filled", "stroked", "textual":
                if scantokens str tkn: show str; fi
            endfor
        endfor

        beginfig(0)
        endfig;
    \end{mplibcode}

Why does luamplib indicate that the btex/etex has length 1, and why does
that picture have only 1 stroked token?

Troy Henderson
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20150526/74522d8c/attachment.html>

From nomosnomos at gmail.com  Tue May 26 15:23:53 2015
From: nomosnomos at gmail.com (Dohyun Kim)
Date: Tue, 26 May 2015 22:23:53 +0900
Subject: [luatex] luamplib + picture
In-Reply-To: <CAFP+xFJo5S1sjurAYnYgVa7dhtAJ6a_EfRNXR6vX0Zf1jhjyAA@mail.gmail.com>
References: <CAFP+xFJo5S1sjurAYnYgVa7dhtAJ6a_EfRNXR6vX0Zf1jhjyAA@mail.gmail.com>
Message-ID: <CAFzmAm0rQARQn8_D6Pc1M4gRVXwi2-pCTPhrzdGCmVuLkpD2CA@mail.gmail.com>

2015-05-26 20:57 GMT+09:00 Troy Henderson <thenders at gmail.com>:
>
> Why does luamplib indicate that the btex/etex has length 1, and why does
> that picture have only 1 stroked token?
>

btex ... etex is not allowed in mplib module.  If you try to use that
in an mplib session, you will get an error message such as:

    ! You can only use `btex' or `verbatimtex' in a file.

Therefore, you can only use an independent .mp file to get a textual
element from btex ... etex.

As a workaround to use btex ... etex, luamplib has a code as follows
that translates btex ... etex into a unitsquare picture:

    image( addto currentpicture doublepath unitsquare; ) ...

and after the end of mplib session, luamplib replaces the unitsqaure
picture with a relevant TeX box which is scaled and/or transformed
according to the result of scaling and transformation of the
unitsqaure picutre.

In a word, btex ... etex is just a unitsqaure in the eyes of mplib
module; ie. 1 stroked element.

AFAIK, the only way to get a textual picture in an mplib session is
using infont operator:

    pct:="a b" infont "cmr10";

But in this case you would get just one textual element, not two.

Regards,
-- 
Dohyun Kim
Seoul, Republic of Korea

From luigi.scarso at gmail.com  Thu May 28 14:38:06 2015
From: luigi.scarso at gmail.com (luigi scarso)
Date: Thu, 28 May 2015 14:38:06 +0200
Subject: [luatex] Segfault with null argument to -output-comment
In-Reply-To: <5561AF0F.8020602@wxs.nl>
References: <555E7C64.9060704@yahoo.co.jp>
 <CAG5iGsD_yMnqvr7ZZKHGadPGHGkN7UBtSB4EGfuf+QWn1bQndw@mail.gmail.com>
 <CAG5iGsAapOs92ez7re-jQ3+BFfL-Y+CeeMUeKgYVYEf04opNQw@mail.gmail.com>
 <21855.34690.479618.888823@zaphod.ms25.net>	<555FB6CE.8050601@wxs.nl>
 <CAG5iGsDyjGiUTX3iMgUPz7qDQ-fUEGJ4T37CKcGxrk372nifxA@mail.gmail.com>
 <F5CA9AF3-36CF-4719-BC25-C6D0D50A8EDC@docwolves.nl>	<5561AF0F.8020602@wxs.nl>
Message-ID: <CAG5iGsBX3M3_0NVfkXFdYTehKuMf2NuLTCdnh5W1N8Er0UCZBw@mail.gmail.com>

On Sun, May 24, 2015 at 12:59 PM, Hans Hagen <pragma at wxs.nl> wrote:

> On 5/24/2015 12:26 PM, Taco Hoekwater wrote:
>
>> Hi,
>>
>>  Op 23 mei 2015 om 13:04 heeft luigi scarso <luigi.scarso at gmail.com> het
>>> volgende geschreven:
>>>
>>> Hm.
>>>
>>> $ luatex --fmt=luatex-plain --foo  "test.tex"
>>> luatex: unrecognized option '--foo'
>>> This is LuaTeX, Version beta-0.80.1 experimental
>>>   \write18 enabled.
>>> (./test.tex
>>> :
>>> :
>>>
>>>
>>> $ luatex --fmt=luatex-plain --lua=test.lua  --foo  "test.tex"
>>> This is LuaTeX, Version beta-0.80.1 experimental
>>>   \write18 enabled.
>>> (./test.tex
>>> :
>>> :
>>> (test.lua is empty)
>>>
>>> Perhaps we should explain this in the manual,
>>> but in general I think it's not a good idea to suppress the message
>>> "unrecognized option" .
>>>
>>
>> This is working exactly as intended. Please do not change the behaviour.
>>
>
> Indeed, so the two example runs can be added to the manual as with:
>
> When a lua script is specified there is will be no checking on
> unrecognized options because the lua code itself can be driven by options.
>
> (As we do pass options to context it would mean that we'd get a whole list
> of confusing unrecognized options.)
>
> Done in revision 5262.


-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20150528/265f2c5d/attachment.html>

From elie.roux at telecom-bretagne.eu  Sat May 30 11:50:16 2015
From: elie.roux at telecom-bretagne.eu (=?UTF-8?B?w4lsaWUgUm91eA==?=)
Date: Sat, 30 May 2015 11:50:16 +0200
Subject: [luatex] Reading registry to find Windows fonts
Message-ID: <556987D8.2000007@telecom-bretagne.eu>

Dear All,

An issue[0] was raised recently, from a user who had fonts installed
under Windows, recognized by his softwares but not LuaTeX (nor XeTeX).
Apparently[1] the fonts are installed through a mechanism documented by
MS[2] consisting in adding the font in the list of fonts in the Windows
Registry.

Lua has several modules allowing to read the registry, there's an entry
in the FAQ[3], and another module not listed in the FAQ[4].

As ConTeXt may also benefit from reading the registry (there's a ConTeXt
user in [2]), what do you think would be the best solution to access the
registry from LuaTeX? Should a module like lua-winreg be distributed (as
a dll) in TeXLive? Should it be built in LuaTeX?

Thank you very much,
-- 
Elie

[0]: https://github.com/lualatex/luaotfload/issues/270
[1]: http://forum.high-logic.com/viewtopic.php?f=12&t=5612&p=25551#p25552
[2]:
https://msdn.microsoft.com/en-us/library/windows/desktop/dd144833%28v=vs.85%29.aspx
[3]: http://www.luafaq.org/#T3.7
[4]: https://github.com/moteus/lua-winreg

From pragma at wxs.nl  Sat May 30 13:33:28 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Sat, 30 May 2015 13:33:28 +0200
Subject: [luatex] Reading registry to find Windows fonts
In-Reply-To: <556987D8.2000007@telecom-bretagne.eu>
References: <556987D8.2000007@telecom-bretagne.eu>
Message-ID: <5569A008.5090004@wxs.nl>

On 5/30/2015 11:50 AM, ?lie Roux wrote:
> Dear All,
>
> An issue[0] was raised recently, from a user who had fonts installed
> under Windows, recognized by his softwares but not LuaTeX (nor XeTeX).
> Apparently[1] the fonts are installed through a mechanism documented by
> MS[2] consisting in adding the font in the list of fonts in the Windows
> Registry.

did the user update the font database

> Lua has several modules allowing to read the registry, there's an entry
> in the FAQ[3], and another module not listed in the FAQ[4].
>
> As ConTeXt may also benefit from reading the registry (there's a ConTeXt
> user in [2]), what do you think would be the best solution to access the
> registry from LuaTeX? Should a module like lua-winreg be distributed (as
> a dll) in TeXLive? Should it be built in LuaTeX?

such a dll would add yet another dependency (even worse: on an operating 
system)

personally i'd never rely on this as for long term stable processing it 
makes sense to know what font (file) you use and where it sits

anyway, a dll is not needed as one can do this:

local command = [[reg QUERY "HKLM\SOFTWARE\Microsoft\Windows 
NT\CurrentVersion\Fonts"]]
local pattern = ".-[\n\r]+%s+(.-)%s%(([^%)]+)%)%s+REG_SZ%s+(%S+)%s+"

local function getnamesfromregistry()
     local data = os.resultof(command)
     local list = { }
     for name, format, filename in string.gmatch(data,pattern) do
         list[name] = filename
     end
     return list
end

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From elie.roux at telecom-bretagne.eu  Sat May 30 15:05:34 2015
From: elie.roux at telecom-bretagne.eu (=?UTF-8?B?w4lsaWUgUm91eA==?=)
Date: Sat, 30 May 2015 15:05:34 +0200
Subject: [luatex] Reading registry to find Windows fonts
In-Reply-To: <5569A008.5090004@wxs.nl>
References: <556987D8.2000007@telecom-bretagne.eu> <5569A008.5090004@wxs.nl>
Message-ID: <5569B59E.9010607@telecom-bretagne.eu>

>> An issue[0] was raised recently, from a user who had fonts installed
>> under Windows, recognized by his softwares but not LuaTeX (nor XeTeX).
>> Apparently[1] the fonts are installed through a mechanism documented by
>> MS[2] consisting in adding the font in the list of fonts in the Windows
>> Registry.
> 
> did the user update the font database

Yes, but would that make any difference? If a user has a font in a
non-standard directory and the font is only referenced in the registry,
I don't think ConTeXt could find it?

> such a dll would add yet another dependency (even worse: on an operating
> system)

Not very satisfying indeed...

> personally i'd never rely on this as for long term stable processing it
> makes sense to know what font (file) you use and where it sits

Sure, but users expectations are often surprising...

> anyway, a dll is not needed as one can do this:
> 
> local command = [[reg QUERY "HKLM\SOFTWARE\Microsoft\Windows
> NT\CurrentVersion\Fonts"]]
> local pattern = ".-[\n\r]+%s+(.-)%s%(([^%)]+)%)%s+REG_SZ%s+(%S+)%s+"
> 
> local function getnamesfromregistry()
>     local data = os.resultof(command)
>     local list = { }
>     for name, format, filename in string.gmatch(data,pattern) do
>         list[name] = filename
>     end
>     return list
> end

This is brilliant, I think it's the best solution so far. I don't know
much (if anything) about Windows, so I'd never have been to find it out
myself!

Thank you very much!
-- 
Elie

From pragma at wxs.nl  Sat May 30 15:22:30 2015
From: pragma at wxs.nl (Hans Hagen)
Date: Sat, 30 May 2015 15:22:30 +0200
Subject: [luatex] Reading registry to find Windows fonts
In-Reply-To: <5569B59E.9010607@telecom-bretagne.eu>
References: <556987D8.2000007@telecom-bretagne.eu> <5569A008.5090004@wxs.nl>
 <5569B59E.9010607@telecom-bretagne.eu>
Message-ID: <5569B996.1050005@wxs.nl>

On 5/30/2015 3:05 PM, ?lie Roux wrote:
>>> An issue[0] was raised recently, from a user who had fonts installed
>>> under Windows, recognized by his softwares but not LuaTeX (nor XeTeX).
>>> Apparently[1] the fonts are installed through a mechanism documented by
>>> MS[2] consisting in adding the font in the list of fonts in the Windows
>>> Registry.
>>
>> did the user update the font database
>
> Yes, but would that make any difference? If a user has a font in a
> non-standard directory and the font is only referenced in the registry,
> I don't think ConTeXt could find it?

that would be a pretty fragile setup (and makes support in case of 
problems hard)

>> such a dll would add yet another dependency (even worse: on an operating
>> system)
>
> Not very satisfying indeed...
>
>> personally i'd never rely on this as for long term stable processing it
>> makes sense to know what font (file) you use and where it sits
>
> Sure, but users expectations are often surprising...

well, if they use tex they should realize that there can be many 
resources involved and that a bit of resource management helps to avoid 
unwanted results

>> anyway, a dll is not needed as one can do this:
>>
>> local command = [[reg QUERY "HKLM\SOFTWARE\Microsoft\Windows
>> NT\CurrentVersion\Fonts"]]
>> local pattern = ".-[\n\r]+%s+(.-)%s%(([^%)]+)%)%s+REG_SZ%s+(%S+)%s+"
>>
>> local function getnamesfromregistry()
>>      local data = os.resultof(command)
>>      local list = { }
>>      for name, format, filename in string.gmatch(data,pattern) do
>>          list[name] = filename
>>      end
>>      return list
>> end
>
> This is brilliant, I think it's the best solution so far. I don't know
> much (if anything) about Windows, so I'd never have been to find it out
> myself!

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From p.stephani2 at gmail.com  Sun May 31 08:41:05 2015
From: p.stephani2 at gmail.com (Philipp Stephani)
Date: Sun, 31 May 2015 06:41:05 +0000
Subject: [luatex] Reading registry to find Windows fonts
In-Reply-To: <556987D8.2000007@telecom-bretagne.eu>
References: <556987D8.2000007@telecom-bretagne.eu>
Message-ID: <CAArVCkShuUUfK8XB+OxRbZbzamNnyyjXHwMi+R8ZWF8D7sN3sg@mail.gmail.com>

A few years ago I implemented a library to retrieve the list of fonts on
Windows, OS X, and Linux: https://www.ctan.org/pkg/lualatex-platform
I don't think it's widely used, but when I wrote it it worked reliably an
all three OSes (http://tracker.luatex.org/view.php?id=555), and could be
used as a starting point.

?lie Roux <elie.roux at telecom-bretagne.eu> schrieb am Sa., 30. Mai 2015 um
11:51 Uhr:

> Dear All,
>
> An issue[0] was raised recently, from a user who had fonts installed
> under Windows, recognized by his softwares but not LuaTeX (nor XeTeX).
> Apparently[1] the fonts are installed through a mechanism documented by
> MS[2] consisting in adding the font in the list of fonts in the Windows
> Registry.
>
> Lua has several modules allowing to read the registry, there's an entry
> in the FAQ[3], and another module not listed in the FAQ[4].
>
> As ConTeXt may also benefit from reading the registry (there's a ConTeXt
> user in [2]), what do you think would be the best solution to access the
> registry from LuaTeX? Should a module like lua-winreg be distributed (as
> a dll) in TeXLive? Should it be built in LuaTeX?
>
> Thank you very much,
> --
> Elie
>
> [0]: https://github.com/lualatex/luaotfload/issues/270
> [1]: http://forum.high-logic.com/viewtopic.php?f=12&t=5612&p=25551#p25552
> [2]:
>
> https://msdn.microsoft.com/en-us/library/windows/desktop/dd144833%28v=vs.85%29.aspx
> [3]: http://www.luafaq.org/#T3.7
> [4]: https://github.com/moteus/lua-winreg
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20150531/a7826ea9/attachment-0001.html>

From elie.roux at telecom-bretagne.eu  Sun May 31 11:41:57 2015
From: elie.roux at telecom-bretagne.eu (=?UTF-8?B?w4lsaWUgUm91eA==?=)
Date: Sun, 31 May 2015 11:41:57 +0200
Subject: [luatex] Reading registry to find Windows fonts
In-Reply-To: <CAArVCkShuUUfK8XB+OxRbZbzamNnyyjXHwMi+R8ZWF8D7sN3sg@mail.gmail.com>
References: <556987D8.2000007@telecom-bretagne.eu>
 <CAArVCkShuUUfK8XB+OxRbZbzamNnyyjXHwMi+R8ZWF8D7sN3sg@mail.gmail.com>
Message-ID: <556AD765.6060807@telecom-bretagne.eu>

Le 31/05/2015 08:41, Philipp Stephani a ?crit :
> A few years ago I implemented a library to retrieve the list of fonts on
> Windows, OS X, and Linux: https://www.ctan.org/pkg/lualatex-platform
> I don't think it's widely used, but when I wrote it it worked reliably
> an all three OSes (http://tracker.luatex.org/view.php?id=555), and could
> be used as a starting point.

Thanks a lot for the pointer! The solution with "reg" has a major
problem which is that "reg" cannot be added to "shell_escape_commands"
for obvious security reasons, so it cannot be run  in a normal luatex
process... So your solutions seems a good one. I see that the .lua file
uses "module", does it still work with latest luatex?

Thank you,
-- 
Elie

