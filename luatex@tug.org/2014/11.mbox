From siepo at cybercomm.nl  Sat Nov  1 12:29:29 2014
From: siepo at cybercomm.nl (Siep Kroonenberg)
Date: Sat, 1 Nov 2014 12:29:29 +0100
Subject: [luatex] Calling texlua from texlua,
	with a space in the tex binary path
Message-ID: <20141101112929.GA5193@bitmuis.thuis.internal>

I am investigating this in connection with my epspdf texlua script,
which calls luatex at some point. A user who had installed miktex
under Program Files ran into a problem. When I ran my test suite --
another texlua script -- I ran into more problems.

So I wrote a texlua test script which calls another texlua script in
the same directory and ran it with portable miktex, with TL/linux
and with TL/w32. Note that TL is portable out of the box in all
respects that matter here. None has its binaries on the searchpath.

The test script tests 4 cases:

1. texlua not on the searchpath; use os.execute with full texlua path

linux ok
tl/w32 ok
miktex:
  luatex --version: ok
  luatex with script: message 'x:\mik' is not
    recognized as an internal or external command,
    operable program or batch file

2. texlua not on the searchpath; use os.spawn with full texlua path

linux ok
tl/w32 no output, not even with luatex --version
miktex no output, not even with luatex --version

3. texlua on the searchpath; use os.execute

linux ok
tl/w32 ok
miktex ok

4. texlua on the searchpath; use os.spawn

linux ok
tl/w32 ok
miktex ok

Are 1. and 2. even supposed to work on Windows?

Testfiles, plus the above description, available on
https://www.dropbox.com/s/4ezask7isyor195/tlu_call_problem.zip?dl=0

-- 
Siep Kroonenberg

From h_kitagawa2001 at yahoo.co.jp  Sat Nov  1 12:59:44 2014
From: h_kitagawa2001 at yahoo.co.jp (Hironori KITAGAWA)
Date: Sat, 1 Nov 2014 20:59:44 +0900
Subject: [luatex] glyph width with palt + kern features
Message-ID: <20141101205944.fcd80a13d1a15574150b276c@yahoo.co.jp>

Hello,

I typeset the following source with XeTeX and LuaTeX:

%%% palt_kern.tex
\ifdefined\directlua\input luaotfload.sty\fi
\font\G=SourceHanSansJP-Regular:+palt;-kern at 100pt
\hbox{\G \vrule ??\vrule}% (A)

\font\G=SourceHanSansJP-Regular:+palt;+kern at 100pt
\hbox{\G \vrule ??\vrule}% (B)

\end
%%%

In the output by XeTeX (palt_kern_xe.pdf),
the second line of output (B) is slightly shorter then the first line (A).

However, the output by LuaTeX r5074 + luaotfload v2.5 
(palt_kern_lotf.pdf) does not so. I also tested with
context -fmt=luatex-plain, but the result is same.


Regards 
Hironori KITAGAWA <h_kitagawa2001 at yahoo.co.jp>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: palt_kern_lotf.pdf
Type: application/pdf
Size: 10350 bytes
Desc: not available
URL: <http://tug.org/pipermail/luatex/attachments/20141101/053cefa2/attachment-0002.pdf>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: palt_kern_xe.pdf
Type: application/pdf
Size: 3426 bytes
Desc: not available
URL: <http://tug.org/pipermail/luatex/attachments/20141101/053cefa2/attachment-0003.pdf>

From luigi.scarso at gmail.com  Sat Nov  1 17:17:39 2014
From: luigi.scarso at gmail.com (luigi scarso)
Date: Sat, 1 Nov 2014 17:17:39 +0100
Subject: [luatex] glyph width with palt + kern features
In-Reply-To: <20141101205944.fcd80a13d1a15574150b276c@yahoo.co.jp>
References: <20141101205944.fcd80a13d1a15574150b276c@yahoo.co.jp>
Message-ID: <CAG5iGsAiiwCNiHQiJR68XAA=NcA18cM3jwncGmcXz7sNbN6s5Q@mail.gmail.com>

On Sat, Nov 1, 2014 at 12:59 PM, Hironori KITAGAWA <
h_kitagawa2001 at yahoo.co.jp> wrote:

> Hello,
>
> I typeset the following source with XeTeX and LuaTeX:
>
> %%% palt_kern.tex
> \ifdefined\directlua\input luaotfload.sty\fi
> \font\G=SourceHanSansJP-Regular:+palt;-kern at 100pt
> \hbox{\G \vrule ??\vrule}% (A)
>
> \font\G=SourceHanSansJP-Regular:+palt;+kern at 100pt
> \hbox{\G \vrule ??\vrule}% (B)
>
> \end
> %%%
>
> In the output by XeTeX (palt_kern_xe.pdf),
> the second line of output (B) is slightly shorter then the first line (A).
>
> However, the output by LuaTeX r5074 + luaotfload v2.5
> (palt_kern_lotf.pdf) does not so. I also tested with
> context -fmt=luatex-plain, but the result is same.
>
>
> Regards
> Hironori KITAGAWA <h_kitagawa2001 at yahoo.co.jp>
>

I have taken the fonts from
http://sourceforge.net/projects/source-han-sans.adobe/files/SourceHanSansJP-1.000.zip

%%% palt_kern.tex
%\ifdefined\directlua\input luaotfload.sty\fi
\font\G=SourceHanSansJP-Regular:+palt;-kern at 100pt
\hbox{\G \vrule ??\vrule}% (A)

\font\G=SourceHanSansJP-Regular:+palt;+kern at 100pt
\hbox{\G \vrule ??\vrule}% (B)

\end
%%%

$> mtxrun --script plain palt_kern.tex

The pdf looks like palt_kern_xe.tex
with luatex experimental
-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20141101/6903453b/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: palt_kern.pdf
Type: application/pdf
Size: 8082 bytes
Desc: not available
URL: <http://tug.org/pipermail/luatex/attachments/20141101/6903453b/attachment.pdf>

From h_kitagawa2001 at yahoo.co.jp  Sat Nov  1 23:39:36 2014
From: h_kitagawa2001 at yahoo.co.jp (Hironori KITAGAWA)
Date: Sun, 2 Nov 2014 07:39:36 +0900
Subject: [luatex] glyph width with palt + kern features
In-Reply-To: <CAG5iGsAiiwCNiHQiJR68XAA=NcA18cM3jwncGmcXz7sNbN6s5Q@mail.gmail.com>
References: <20141101205944.fcd80a13d1a15574150b276c@yahoo.co.jp>
 <CAG5iGsAiiwCNiHQiJR68XAA=NcA18cM3jwncGmcXz7sNbN6s5Q@mail.gmail.com>
Message-ID: <20141102073936.20809852a51c55dcb23eb586@yahoo.co.jp>

Hello,

On Sat, 1 Nov 2014 17:17:39 +0100
luigi scarso <luigi.scarso at gmail.com> wrote:

> On Sat, Nov 1, 2014 at 12:59 PM, Hironori KITAGAWA <
> h_kitagawa2001 at yahoo.co.jp> wrote:
> 
> > However, the output by LuaTeX r5074 + luaotfload v2.5
> > (palt_kern_lotf.pdf) does not so. I also tested with
> > context -fmt=luatex-plain, but the result is same.

> $> mtxrun --script plain palt_kern.tex
> 
> The pdf looks like palt_kern_xe.tex
> with luatex experimental

Yes, I confirmed that "mtxrun --script plain" works.
But, in my PC, only "mtxrun --script plain" produces
same output with XeTeX.

$ xetex palt_kern.pdf (=: OK)
$ context palt_kern.tex 
  --> NG (both TL2014 and context standalone)
$ mtxrun --script plain palt_kern.tex
  --> OK 
$ luatex palt_kern.tex (loading luaotfload.sty)
  --> NG

-- 
Hironori KITAGAWA <h_kitagawa2001 at yahoo.co.jp>

From reinhard.kotucha at web.de  Sun Nov  2 00:06:48 2014
From: reinhard.kotucha at web.de (Reinhard Kotucha)
Date: Sun, 2 Nov 2014 00:06:48 +0100
Subject: [luatex] Calling texlua from texlua,
 with a space in the tex binary path
In-Reply-To: <20141101112929.GA5193@bitmuis.thuis.internal>
References: <20141101112929.GA5193@bitmuis.thuis.internal>
Message-ID: <21589.26504.261104.19415@zaphod.ms25.net>

On 2014-11-01 at 12:29:29 +0100, Siep Kroonenberg wrote:

 > I am investigating this in connection with my epspdf texlua script,
 > which calls luatex at some point. A user who had installed miktex
 > under Program Files ran into a problem. When I ran my test suite --
 > another texlua script -- I ran into more problems.
 > 
 > So I wrote a texlua test script which calls another texlua script in
 > the same directory and ran it with portable miktex, with TL/linux
 > and with TL/w32. Note that TL is portable out of the box in all
 > respects that matter here. None has its binaries on the searchpath.

Hi Siep,
I must admit that I don't know what you mean with "None has its
binaries on the searchpath.".  LuaTeX has to be in PATH, otherwise the
shebang line

  #!/usr/bin/env texlua

wouldn't work.

When I apply the patch below to your script I see that the line

  os.setenv('PATH', os.selfdir..pathsep..os.getenv('PATH'))

adds something to PATH which exists there already.


PATH[1]: 	/home/reinhard/bin/prepend
PATH[2]: 	/opt/gs/9.15/bin
PATH[3]: 	/usr/local/texlive/2014/bin/x86_64-linux
PATH[4]: 	/usr/local/bin
PATH[5]: 	/usr/bin
PATH[6]: 	/bin
PATH[7]: 	/opt/bin
PATH[8]: 	/usr/x86_64-pc-linux-gnu/gcc-bin/4.5.4
PATH[9]: 	/usr/games/bin
PATH[10]: 	/home/reinhard/bin
PATH[11]: 	/usr/local/speedata-publisher/bin

prepending "/usr/local/texlive/2014/bin/x86_64-linux" (os.selfdir) to PATH

PATH[1]: 	/usr/local/texlive/2014/bin/x86_64-linux
PATH[2]: 	/home/reinhard/bin/prepend
PATH[3]: 	/opt/gs/9.15/bin
PATH[4]: 	/usr/local/texlive/2014/bin/x86_64-linux
PATH[5]: 	/usr/local/bin
PATH[6]: 	/usr/bin
PATH[7]: 	/bin
PATH[8]: 	/opt/bin
PATH[9]: 	/usr/x86_64-pc-linux-gnu/gcc-bin/4.5.4
PATH[10]: 	/usr/games/bin
PATH[11]: 	/home/reinhard/bin
PATH[12]: 	/usr/local/speedata-publisher/bin

There is no reason to have /usr/local/texlive/2014/bin/x86_64-linux
twice in PATH.  If you apply my patch, what do you get on Windows?

Regards,
  Reinhard



--- tlu_caller.tlu-siepo	2014-11-01 11:57:53.000000000 +0100
+++ tlu_caller.tlu	2014-11-01 23:29:20.000000000 +0100
@@ -16,6 +16,16 @@
   io.read()
 end
 
+function show_path(pathsep)
+  local PATH=os.getenv('PATH')
+  local path = string.explode(PATH, pathsep)
+  print() -- insert \n.
+  for i,v in ipairs(path) do
+    print ('PATH['..i..']: ', v)
+  end
+  print()
+end
+
 dirsep = (os.type=='unix' and '/') or '\\'
 pathsep = (os.type=='unix' and ':') or ';'
 
@@ -45,7 +55,10 @@
 os.spawn({otherprog, '--version'})
 --]]
 
+show_path(pathsep)
+print ('prepending "'..os.selfdir..'" (os.selfdir) to PATH')
 os.setenv('PATH', os.selfdir..pathsep..os.getenv('PATH'))
+show_path(pathsep)
 
 next_test()
 
@@ -64,3 +77,10 @@
 os.spawn({luabare, '--version'})
 os.spawn({otherbare, '--version'})
 --]]
+
+-- Local Variables:
+--  lua-indent-level: 2
+--  tab-width: 2
+--  indent-tabs-mode: nil
+-- End:
+-- vim:set tabstop=2 expandtab: #


From Herbert.Voss at FU-Berlin.DE  Sun Nov  2 11:19:35 2014
From: Herbert.Voss at FU-Berlin.DE (Herbert Voss)
Date: Sun, 2 Nov 2014 11:19:35 +0100
Subject: [luatex] virtual font example from the documentation
Message-ID: <54560537.3060900@FU-Berlin.DE>

This is an example from the LuaTeX documentation (pp 166--167)
which works well in the past.

\directlua {
  callback.register('define_font',
    function (name,size)
      if name == 'cmr10-red' then
		f = font.read_tfm('cmr10',size)
		f.name = 'cmr10-red'
		f.type = 'virtual'
		f.fonts = {{ name = 'cmr10', size = size }}
		for i,v in pairs(f.characters) do
		  if (string.char(i)):find('[tacohanshartmut]') then
			v.commands = {{'special','pdf: 1 0 0 rg'},{'char',i},{'special','pdf:
0 g'},}
		  else
			v.commands = {{'char',i}}
		  end
		end
	  else
		f = font.read_tfm(name,size)
	  end
      return f
    end)
}

\font\myfont = cmr10-red at 10pt \myfont This is a line of text \par
\font\myfontx= cmr10 at 10pt \myfontx Here is another line of text

\bye


But with current up-to-date TeXLive I get a segmentation fault:

This is LuaTeX, Version beta-0.79.1 (TeX Live 2014/dev) (rev 4972)
 restricted \write18 enabled.
(./vfont.texSpeicherzugriffsfehler
[ ... ]

or at least a wrong output, the character table is missing:

voss at shania:~/tmp> luatex vfont.tex
This is LuaTeX, Version beta-0.79.1 (TeX Live 2014/dev) (rev 4972)
 restricted \write18 enabled.
(./vfont.tex
LuaTeX warning: lua-loaded font [51] (cmr10-red) has no character table!
[1{/usr/local/texlive/2014/texmf-var/fonts/map/pdftex/updmap/pdftex.map}])
(see the transcript file for additional
information)<</usr/local/texlive/2014/te
xmf-dist/fonts/type1/public/amsfonts/cm/cmr10.pfb>
Output written on vfont.pdf (1 page, 13026 bytes).
Transcript written on vfont.log.

---------------------------------------------------------------------

If I use the updated callback syntax:

\input luatexbase.sty

\directlua {
  luatexbase.add_to_callback('define_font',
    function (name,size)
[ ... ]
----------------------------------------------------------------------

then I always get a segmentation fault.


Can someone confirm this behaviour?

Herbert

From siepo at cybercomm.nl  Sun Nov  2 11:37:14 2014
From: siepo at cybercomm.nl (Siep Kroonenberg)
Date: Sun, 2 Nov 2014 11:37:14 +0100
Subject: [luatex] [MiKTeX]  Calling texlua from texlua,
 with a space in the tex binary path
In-Reply-To: <21589.26504.261104.19415@zaphod.ms25.net>
References: <20141101112929.GA5193@bitmuis.thuis.internal>
 <21589.26504.261104.19415@zaphod.ms25.net>
Message-ID: <20141102103714.GA1868@bitmuis.thuis.internal>

On Sun, Nov 02, 2014 at 12:06:48AM +0100, Reinhard Kotucha wrote:
> On 2014-11-01 at 12:29:29 +0100, Siep Kroonenberg wrote:
> 
>  > I am investigating this in connection with my epspdf texlua script,
>  > which calls luatex at some point. A user who had installed miktex
>  > under Program Files ran into a problem. When I ran my test suite --
>  > another texlua script -- I ran into more problems.
>  > 
>  > So I wrote a texlua test script which calls another texlua script in
>  > the same directory and ran it with portable miktex, with TL/linux
>  > and with TL/w32. Note that TL is portable out of the box in all
>  > respects that matter here. None has its binaries on the searchpath.
> 
> Hi Siep,
> I must admit that I don't know what you mean with "None has its
> binaries on the searchpath.".  LuaTeX has to be in PATH, otherwise the
> shebang line
> 
>   #!/usr/bin/env texlua
> 
> wouldn't work.

I am talking about calling the script with the full path of the
script interpreter, which contains a space:

X:\>"\\vbitmuis\tldev\Mas ter\bin\win32\texlua" x:\epspdf\lua\tlu_call\tlu_caller_rk.tlu

Output from the patched version:

PATH[1]:        C:\WINDOWS\system32
PATH[2]:        C:\WINDOWS
PATH[3]:        C:\WINDOWS\System32\Wbem

prepending "//vbitmuis/tldev/Mas ter/bin/win32" (os.selfdir) to PATH

PATH[1]:        C:\WINDOWS\system32
PATH[2]:        C:\WINDOWS
PATH[3]:        C:\WINDOWS\System32\Wbem

Note that under TL/w32 os.getenv returns the parent path. Maybe
this should be considered a bug, although the modified path is
visible to child processes.

For completeness: this is the output with portable miktex:

X:\>"x:\mik port\miktex\bin\texlua" x:\epspdf\lua\tlu_call\tlu_caller_rk.t
1. os.execute
'x:\mik' is not recognized as an internal or external command,
operable program or batch file.
...

PATH[1]:        C:\WINDOWS\system32
PATH[2]:        C:\WINDOWS
PATH[3]:        C:\WINDOWS\System32\Wbem

prepending "x:\mik port\miktex\bin" (os.selfdir) to PATH

PATH[1]:        x:\mik port\miktex\bin
PATH[2]:        C:\WINDOWS\system32
PATH[3]:        C:\WINDOWS
PATH[4]:        C:\WINDOWS\System32\Wbem

Under MikTeX, os.getenv does return the modified path.

-- 
Siep Kroonenberg

From luigi.scarso at gmail.com  Sun Nov  2 15:16:53 2014
From: luigi.scarso at gmail.com (luigi scarso)
Date: Sun, 2 Nov 2014 15:16:53 +0100
Subject: [luatex] virtual font example from the documentation
In-Reply-To: <54560537.3060900@FU-Berlin.DE>
References: <54560537.3060900@FU-Berlin.DE>
Message-ID: <CAG5iGsBUVU+YEQBqroovU=YoDGwBqJQOvMynTUaVDnLv349OEA@mail.gmail.com>

On Sun, Nov 2, 2014 at 11:19 AM, Herbert Voss <Herbert.Voss at fu-berlin.de>
wrote:

> This is an example from the LuaTeX documentation (pp 166--167)
> which works well in the past.
>
> \directlua {
>   callback.register('define_font',
>     function (name,size)
>       if name == 'cmr10-red' then
>                 f = font.read_tfm('cmr10',size)
>                 f.name = 'cmr10-red'
>                 f.type = 'virtual'
>                 f.fonts = {{ name = 'cmr10', size = size }}
>                 for i,v in pairs(f.characters) do
>                   if (string.char(i)):find('[tacohanshartmut]') then
>                         v.commands = {{'special','pdf: 1 0 0
> rg'},{'char',i},{'special','pdf:
> 0 g'},}
>                   else
>                         v.commands = {{'char',i}}
>                   end
>                 end
>           else
>                 f = font.read_tfm(name,size)
>           end
>       return f
>     end)
> }
>
> \font\myfont = cmr10-red at 10pt \myfont This is a line of text \par
> \font\myfontx= cmr10 at 10pt \myfontx Here is another line of text
>
> \bye
>
No seg fault with luatex  experimental
$ luatex --version
This is LuaTeX, Version beta-0.79.2 (TeX Live 2015/dev)


-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20141102/3f4ada8f/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: test.pdf
Type: application/pdf
Size: 27812 bytes
Desc: not available
URL: <http://tug.org/pipermail/luatex/attachments/20141102/3f4ada8f/attachment-0001.pdf>

From Herbert.Voss at FU-Berlin.DE  Sun Nov  2 15:39:48 2014
From: Herbert.Voss at FU-Berlin.DE (Herbert Voss)
Date: Sun, 2 Nov 2014 15:39:48 +0100
Subject: [luatex] virtual font example from the documentation
In-Reply-To: <CAG5iGsBUVU+YEQBqroovU=YoDGwBqJQOvMynTUaVDnLv349OEA@mail.gmail.com>
References: <54560537.3060900@FU-Berlin.DE>
 <CAG5iGsBUVU+YEQBqroovU=YoDGwBqJQOvMynTUaVDnLv349OEA@mail.gmail.com>
Message-ID: <63941.84.191.174.82.1414939188.webmail@webmail.zedat.fu-berlin.de>


luigi scarso schrieb:

> No seg fault with luatex  experimental
> $ luatex --version
> This is LuaTeX, Version beta-0.79.2 (TeX Live 2015/dev)

Where can I download that version?

Herbert


From reinhard.kotucha at web.de  Sun Nov  2 16:03:58 2014
From: reinhard.kotucha at web.de (Reinhard Kotucha)
Date: Sun, 2 Nov 2014 16:03:58 +0100
Subject: [luatex] virtual font example from the documentation
In-Reply-To: <63941.84.191.174.82.1414939188.webmail@webmail.zedat.fu-berlin.de>
References: <54560537.3060900@FU-Berlin.DE>
 <CAG5iGsBUVU+YEQBqroovU=YoDGwBqJQOvMynTUaVDnLv349OEA@mail.gmail.com>
 <63941.84.191.174.82.1414939188.webmail@webmail.zedat.fu-berlin.de>
Message-ID: <21590.18398.36357.434477@zaphod.ms25.net>

On 2014-11-02 at 15:39:48 +0100, Herbert Voss wrote:

 > 
 > luigi scarso schrieb:
 > 
 > > No seg fault with luatex  experimental
 > > $ luatex --version
 > > This is LuaTeX, Version beta-0.79.2 (TeX Live 2015/dev)
 > 
 > Where can I download that version?

   svn co http://foundry.supelec.fr/svn/luatex

Regards,
  Reinhard

-- 
------------------------------------------------------------------
Reinhard Kotucha                            Phone: +49-511-3373112
Marschnerstr. 25
D-30167 Hannover                    mailto:reinhard.kotucha at web.de
------------------------------------------------------------------

From jan.klever at gmx.de  Sun Nov  2 17:58:32 2014
From: jan.klever at gmx.de (Jan Klever)
Date: Sun, 2 Nov 2014 17:58:32 +0100
Subject: [luatex] luatex and EB Garamond Ligatures
Message-ID: <545662B8.6080702@gmx.de>

Hello,

running the following code with luatex (format plain, not latex), I get 
ligatures for italic but *not* for regular text. What am I missing?

$ luatex --version
This is LuaTeX, Version beta-0.79.1 (TeX Live 2014) (rev 4971)

$ otfinfo -v EBGaramond*
EBGaramond12-Italic.otf:Version 0.016+
EBGaramond12-Regular.otf:Version 0.016+

----8<----
\input luatex-basics
\input luatex-fonts

\font\ebgaramondregular = name:ebgaramond12regular:+liga at 12pt
\font\ebgaramonditalic  = name:ebgaramond12italic:+liga at 12pt

\ebgaramondregular
fi, ff, ffi

\ebgaramonditalic
fi, ff, ffi

\bye
---->8----

Regards
Jan

From Herbert.Voss at FU-Berlin.DE  Mon Nov  3 10:06:20 2014
From: Herbert.Voss at FU-Berlin.DE (Herbert Voss)
Date: Mon, 3 Nov 2014 10:06:20 +0100
Subject: [luatex] luatex and EB Garamond Ligatures
In-Reply-To: <545662B8.6080702@gmx.de>
References: <545662B8.6080702@gmx.de>
Message-ID: <5457458C.8020601@FU-Berlin.DE>

Am 02.11.2014 um 17:58 schrieb Jan Klever:

> running the following code with luatex (format plain, not latex), I get
> ligatures for italic but *not* for regular text. What am I missing?

> $ otfinfo -v EBGaramond*
> EBGaramond12-Italic.otf:Version 0.016+
> EBGaramond12-Regular.otf:Version 0.016+

I have no problem with the current version from
http://openfontlibrary.org/en/font/eb-garamond

voss at shania:~/.fonts/Garamond> otfinfo -v EBGaramond12*
EBGaramond12-AllSC.otf:Version 0.014e
EBGaramond12-Italic.otf:Version 0.014e
EBGaramond12-Regular.otf:Version 0.014e
EBGaramond12-SC.otf:Version 0.014e


\input luaotfload.sty

\font\ebgaramondregular = name:EBGaramond12-Regular:+liga at 12pt
\font\ebgaramonditalic  = name:EBGaramond12-Italic:+liga at 12pt

\ebgaramondregular
fi, ff, ffi

\ebgaramonditalic
fi, ff, ffi

\bye



Herbert


From luigi.scarso at gmail.com  Mon Nov  3 10:17:43 2014
From: luigi.scarso at gmail.com (luigi scarso)
Date: Mon, 3 Nov 2014 10:17:43 +0100
Subject: [luatex] glyph width with palt + kern features
In-Reply-To: <20141102073936.20809852a51c55dcb23eb586@yahoo.co.jp>
References: <20141101205944.fcd80a13d1a15574150b276c@yahoo.co.jp>
 <CAG5iGsAiiwCNiHQiJR68XAA=NcA18cM3jwncGmcXz7sNbN6s5Q@mail.gmail.com>
 <20141102073936.20809852a51c55dcb23eb586@yahoo.co.jp>
Message-ID: <CAG5iGsCPFJHVHQyrp4DDUgVaazyUf8GuucAsxpxNK2_TqYxF8Q@mail.gmail.com>

On Sat, Nov 1, 2014 at 11:39 PM, Hironori KITAGAWA <
h_kitagawa2001 at yahoo.co.jp> wrote:

> Hello,
>
> On Sat, 1 Nov 2014 17:17:39 +0100
> luigi scarso <luigi.scarso at gmail.com> wrote:
>
> > On Sat, Nov 1, 2014 at 12:59 PM, Hironori KITAGAWA <
> > h_kitagawa2001 at yahoo.co.jp> wrote:
> >
> > > However, the output by LuaTeX r5074 + luaotfload v2.5
> > > (palt_kern_lotf.pdf) does not so. I also tested with
> > > context -fmt=luatex-plain, but the result is same.
>
> > $> mtxrun --script plain palt_kern.tex
> >
> > The pdf looks like palt_kern_xe.tex
> > with luatex experimental
>
> Yes, I confirmed that "mtxrun --script plain" works.
> But, in my PC, only "mtxrun --script plain" produces
> same output with XeTeX.
>
> $ xetex palt_kern.pdf (=: OK)
> $ context palt_kern.tex
>   --> NG (both TL2014 and context standalone)


In context it' s better to use the feature sets

\definefontfeature [KernNo][palt=yes,kern=no]
\definefontfeature [KernYes][palt=yes,kern=yes]

\definefont[GA][SourceHanSansJP-Regular*KernNo at 100pt]
\definefont[GB][SourceHanSansJP-Regular*KernYes at 100pt]

\starttext


\hbox{\GA \vrule ??\vrule}% (A)

\hbox{\GB \vrule ??\vrule}% (B)

\stoptext

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20141103/24ecfe36/attachment.html>

From kakuto at fuk.kindai.ac.jp  Mon Nov  3 11:50:29 2014
From: kakuto at fuk.kindai.ac.jp (Akira Kakuto)
Date: Mon, 3 Nov 2014 19:50:29 +0900
Subject: [luatex]  [MiKTeX] Calling texlua from texlua,
	with a space in the tex binary path
Message-ID: <25FBC5140A1D4793B8224D0D086B58C9@CJ3001517A>

Dear Siep Kroonenberg,

> Note that under TL/w32 os.getenv returns the parent path. Maybe
> this should be considered a bug, although the modified path is
> visible to child processes.

I don't know details, and I didn't change original code for os.setenv and os.getenv.
Please see:

http://tug.org/pipermail/luatex/2013-August/004572.html
http://tug.org/pipermail/luatex/2013-August/004573.html

Best regards,
Akira


From siepo at cybercomm.nl  Mon Nov  3 12:10:04 2014
From: siepo at cybercomm.nl (Siep Kroonenberg)
Date: Mon, 3 Nov 2014 12:10:04 +0100
Subject: [luatex] [MiKTeX] Calling texlua from texlua,
 with a space in the tex binary path
In-Reply-To: <25FBC5140A1D4793B8224D0D086B58C9@CJ3001517A>
References: <25FBC5140A1D4793B8224D0D086B58C9@CJ3001517A>
Message-ID: <20141103111004.GA1996@bitmuis.thuis.internal>

On Mon, Nov 03, 2014 at 07:50:29PM +0900, Akira Kakuto wrote:
> Dear Siep Kroonenberg,
> 
> >Note that under TL/w32 os.getenv returns the parent path. Maybe
> >this should be considered a bug, although the modified path is
> >visible to child processes.
> 
> I don't know details, and I didn't change original code for os.setenv and os.getenv.
> Please see:
> 
> http://tug.org/pipermail/luatex/2013-August/004572.html
> http://tug.org/pipermail/luatex/2013-August/004573.html

So this has been observed before. As I already mentioned, MiKTeX does
return the value set by setenv. So does Linux, as I just tested.

-- 
Siep Kroonenberg

From kakuto at fuk.kindai.ac.jp  Mon Nov  3 13:34:57 2014
From: kakuto at fuk.kindai.ac.jp (Akira Kakuto)
Date: Mon, 3 Nov 2014 21:34:57 +0900
Subject: [luatex] [MiKTeX] Calling texlua from texlua,
	with a space in the tex binary path
Message-ID: <5B5EEC690C904A978D7B95AC38B781CF@CJ3001517A>

Dear Siep Kroonenberg,

> So this has been observed before. As I already mentioned, MiKTeX does
> return the value set by setenv. So does Linux, as I just tested.

A difference may be that I'm using a dynamic library for lua52.
I think it may be possible that TL/w32 is right and MiKTeX and Linux are wrong.

Thanks,
Akira


From jan.klever at gmx.de  Mon Nov  3 17:48:47 2014
From: jan.klever at gmx.de (Jan Klever)
Date: Mon, 3 Nov 2014 17:48:47 +0100
Subject: [luatex] luatex and EB Garamond Ligatures
In-Reply-To: <5457458C.8020601@FU-Berlin.DE>
References: <545662B8.6080702@gmx.de> <5457458C.8020601@FU-Berlin.DE>
Message-ID: <5457B1EF.8070905@gmx.de>

Hello Herbert,

Am 03.11.2014 10:06, schrieb Herbert Voss:
> I have no problem with the current version from
> http://openfontlibrary.org/en/font/eb-garamond
[...]
> \input luaotfload.sty

OK, that's working for me too. It's not the Version of the font, but:

* \input luaotfload.sty gives correct ligatures
* \input luatex-fonts does not

although the same otf-file is used for loading the font. Anyway, it's 
working this way.

Thank you very much for your help!
\bye Jan


From kakuto at fuk.kindai.ac.jp  Mon Nov  3 23:22:39 2014
From: kakuto at fuk.kindai.ac.jp (Akira Kakuto)
Date: Tue, 4 Nov 2014 07:22:39 +0900
Subject: [luatex]  luatex and EB Garamond Ligatures
Message-ID: <C625A5127F8F4A6B952F0F54E1227FDD@CJ3001517A>

Dear Jan Klever,

Interesting. For 'palt' and 'kern', ConTeXt is better than
luaotfload, while for 'liga' luaotfload is better than ConTeXt.

\definefontfeature [LigYes][liga=yes]
\definefont[ebgaramondregular][name:ebgaramond12-regular*LigYes at 12pt]
\definefont[ebgaramonditalic][name:ebgaramond12-italic*LigYes at 12pt]

\starttext
\ebgaramondregular
fi, ff, ffi

\ebgaramonditalic
fi, ff, ffi

\stoptext


Thanks,
Akira

From luigi.scarso at gmail.com  Tue Nov  4 00:12:43 2014
From: luigi.scarso at gmail.com (luigi scarso)
Date: Tue, 4 Nov 2014 00:12:43 +0100
Subject: [luatex] luatex and EB Garamond Ligatures
In-Reply-To: <C625A5127F8F4A6B952F0F54E1227FDD@CJ3001517A>
References: <C625A5127F8F4A6B952F0F54E1227FDD@CJ3001517A>
Message-ID: <CAG5iGsD0a0EMSW-1nGx=+uGVZ_+Ba3sjxVJdXRkHgtdd2V3djg@mail.gmail.com>

On Mon, Nov 3, 2014 at 11:22 PM, Akira Kakuto <kakuto at fuk.kindai.ac.jp>
wrote:

> Dear Jan Klever,
>
> Interesting. For 'palt' and 'kern', ConTeXt is better than
> luaotfload, while for 'liga' luaotfload is better than ConTeXt.
>
> \definefontfeature [LigYes][liga=yes]
> \definefont[ebgaramondregular][name:ebgaramond12-regular*LigYes at 12pt]
> \definefont[ebgaramonditalic][name:ebgaramond12-italic*LigYes at 12pt]
>
> \starttext
> \ebgaramondregular
> fi, ff, ffi
>
> \ebgaramonditalic
> fi, ff, ffi
>
> \stoptext
>
>
> Thanks,
> Akira
>

\definefontfeature [LigYes][default][liga=yes]
\definefont[ebgaramondregular][name:ebgaramond12-regular*LigYes at 12pt]
\definefont[ebgaramonditalic][name:ebgaramond12-italic*LigYes at 12pt]

\starttext
\ebgaramondregular
fi, ff, ffi

\ebgaramonditalic
fi, ff, ffi

\stoptext

or


\definefont[ebgaramondregular][name:ebgaramond12-regular*default at 12pt]
\definefont[ebgaramonditalic][name:ebgaramond12-italic*default at 12pt]

\starttext
\ebgaramondregular
fi, ff, ffi

\ebgaramonditalic
fi, ff, ffi

\stoptext


or


\definefontfamily [garamond] [rm] [ebgaramond]
\setupbodyfont[garamond]
\starttext
fi, ff, ffi

\it fi, ff, ffi
\stoptext

All have the ligatures as expected.

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20141104/de6edc86/attachment-0001.html>

From kakuto at fuk.kindai.ac.jp  Tue Nov  4 06:42:08 2014
From: kakuto at fuk.kindai.ac.jp (Akira Kakuto)
Date: Tue, 4 Nov 2014 14:42:08 +0900
Subject: [luatex] luatex and EB Garamond Ligatures
Message-ID: <074D17B2AC2F41FCA956365D67B396C5@CJ3001517A>

Hi  Luigi,

> All have the ligatures as expected.

Thank you very much.

Best regards,
Akira


From kakuto at fuk.kindai.ac.jp  Wed Nov  5 06:32:24 2014
From: kakuto at fuk.kindai.ac.jp (Akira Kakuto)
Date: Wed, 5 Nov 2014 14:32:24 +0900
Subject: [luatex] [MiKTeX] Calling texlua from texlua,
	with a space in the tex binary path
Message-ID: <A46FB34CC6A74DC781C52E5F216CE609@CJ3001517A>

Dear Siep Kroonenberg,

>> So this has been observed before. As I already mentioned, MiKTeX does
>> return the value set by setenv. So does Linux, as I just tested.
>
> A difference may be that I'm using a dynamic library for lua52.
> I think it may be possible that TL/w32 is right and MiKTeX and Linux are wrong.

If you need values of variables setenved in the current
process, please initialize kpse and use kpse.var_value().
FYI, os.getenv() is defined in the lua52.dll and os.setenv()
is defined in the texlua.

Thanks,
Akira


From kakuto at fuk.kindai.ac.jp  Wed Nov  5 06:49:53 2014
From: kakuto at fuk.kindai.ac.jp (Akira Kakuto)
Date: Wed, 5 Nov 2014 14:49:53 +0900
Subject: [luatex] [MiKTeX] Calling texlua from texlua,
	with a space in the tex binary path
Message-ID: <24AAD1AA3A8E4484A1D600D796E07E54@CJ3001517A>

Dear Siep Kroonenberg,

> If you need values of variables setenved in the current
> process, please initialize kpse and use kpse.var_value().
> FYI, os.getenv() is defined in the lua52.dll and os.setenv()
> is defined in the texlua.

I have
ThisIsTheValue
ThisIsTheValue

by
texlua curr.tlu

Here curr.tlu and child.tlu are

-- curr.tlu
kpse.set_program_name('test')
os.setenv('XXXYYY', 'ThisIsTheValue')
print(kpse.var_value('XXXYYY'))
os.execute('texlua child.tlu')


-- child.tlu
print(os.getenv('XXXYYY'))


Thanks,
Akira


From siepo at cybercomm.nl  Thu Nov  6 11:21:35 2014
From: siepo at cybercomm.nl (Siep Kroonenberg)
Date: Thu, 6 Nov 2014 11:21:35 +0100
Subject: [luatex] [MiKTeX] Calling texlua from texlua,
 with a space in the tex binary path
In-Reply-To: <24AAD1AA3A8E4484A1D600D796E07E54@CJ3001517A>
References: <24AAD1AA3A8E4484A1D600D796E07E54@CJ3001517A>
Message-ID: <20141106102135.GA2595@bitmuis.thuis.internal>

On Wed, Nov 05, 2014 at 02:49:53PM +0900, Akira Kakuto wrote:
> Dear Siep Kroonenberg,
> 
> >If you need values of variables setenved in the current
> >process, please initialize kpse and use kpse.var_value().
> >FYI, os.getenv() is defined in the lua52.dll and os.setenv()
> >is defined in the texlua.

Thanks. This is better than to keep track of the variable oneself.

By the way, why 'test' in kpse.set_program_name? For me, it only
worked after substituting 'texlua'.

-- 
Siep Kroonenberg

From kakuto at fuk.kindai.ac.jp  Thu Nov  6 16:40:48 2014
From: kakuto at fuk.kindai.ac.jp (Akira Kakuto)
Date: Fri, 7 Nov 2014 00:40:48 +0900
Subject: [luatex] [MiKTeX] Calling texlua from texlua,
	with a space in the tex binary path
Message-ID: <515249E7157442668C738585FE14475D@CJ3001517A>

Dear Siep Kroonenberg,

> By the way, why 'test' in kpse.set_program_name?

In my previous example, the program name was irrelevant.
kpse.set_program_name() was used only to initialize kpse.
If program name is necessary, it should be the real program name.

Thanks,
Akira


From luigi.scarso at gmail.com  Tue Nov 11 11:42:18 2014
From: luigi.scarso at gmail.com (luigi scarso)
Date: Tue, 11 Nov 2014 11:42:18 +0100
Subject: [luatex] Luatex 0.79.2 announcement
Message-ID: <CAG5iGsCt3+=GvVgTA5kgyvqKYMKfe+77D+_DHgR6oL920zNBLQ@mail.gmail.com>

New luatex release, 0.79.2 .

Changes:

* WARNING: the structure of the format file is changed.
  After  the  Web2C \TeX's magic constant: "W2TX"  there is now
  a FORMAT_ID, a 32bit field that cannot be between 0 and 256 (included)
  so that there are no conflicts with the preexisting  structure
  of the format.
  The value can be seen with --debug-format and currently is
  907 (the sum of the values of the bytes of the ASCII string "don knuth").

* There is a new set of lua functions for StructElement and Attribute,
  convenient (even if not indispensable) for tagged pdf.


* several bugfixes and improvements.


The archives can be downloaded from supelec as usual:

        https://foundry.supelec.fr/projects/luatex/

You could also check out the sources via anonymous svn:

  svn co --username anonsvn --password anonsvn              \
      https://foundry.supelec.fr/svn/luatex/tags/beta-0.79.2
<https://foundry.supelec.fr/svn/luatex/tags/beta-0.79.1>

Bugs and feature requests can be added to the issue tracker at

       http://tracker.luatex.org

Have fun,
Hans, Taco, Luigi

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20141111/9a29f46d/attachment.html>

From sh-list at posteo.net  Mon Nov 17 18:19:58 2014
From: sh-list at posteo.net (Stephan Hennig)
Date: Mon, 17 Nov 2014 18:19:58 +0100
Subject: [luatex] inserting user-defined whatsit node
Message-ID: <546A2E3E.7010507@posteo.net>

Hi,

in the attached example, the hyphenate callback is used to scan for
glyph nodes corresponding to the character 'x'.  If such nodes are
found, a copy of that node is inserted before the node in question
(effectively doubling all 'x').  This works fine.

It breaks, however, if a user-defined whatsit node is inserted instead
of a copy of a glyph node.  Error message is

  ! Unidentified user defined whatsit.

The LuaTeX manual has this about user-defined whatsits:

  The LuaTeX engine will simply step over such whatsits without
  ever looking at the contents.

Why does the example break?

Best regards,
Stephan Hennig


% -*- coding: utf-8 -*-
\directlua{
% Declare constants.
  local GLYPH = node.id('glyph')
  local WHATSIT = node.id('whatsit')
  local USER_DEFINED = node.subtype('user_defined')
  local MYCHARCODE = string.byte('x')
  local Ncopy = node.copy
  local Nnew = node.new
  local Ninsert_before = node.insert_before
  local Ntraverse = node.traverse
% Create user-defined whatsit.
  local what = Nnew(WHATSIT, USER_DEFINED)
  what.user_id = 20141117
% Register callback.
  callback.register('hyphenate',
    function (head, tail)
      for n in Ntraverse(head) do
        if n.id == GLYPH and n.char == MYCHARCODE then
%          Ninsert_before(head, n, Ncopy(n))
          Ninsert_before(head, n, Ncopy(what))
        end
      end
      lang.hyphenate(head, tail)
    end
  )
}
text
\bye


> This is LuaTeX, Version beta-0.79.1 (TeX Live 2014/W32TeX) (rev 4971)  (format=luatex 2014.7.9)  17 NOV 2014 14:20
>  restricted \write18 enabled.
> **udwhatsit.tex
> (./udwhatsit.tex [1{c:/texlive/2014/texmf-var/fonts/map/pdftex/updmap/pdftex.map
> }]
> ! Unidentified user defined whatsit.
> \plainoutput ...headline \pagebody \makefootline }
>                                                   \advancepageno \ifnum \out...
> <output> {\plainoutput 
>               }
> \supereject {-\par \penalty -\@MM 
>                                   
> \bye {-\par \vfill \supereject 
>                                \end 
> l.29 \bye
>        
> ? 
> )<<c:/texlive/2014/texmf-dist/fonts/type1/public/amsfonts/cm/cmr10.pfb>
> Output written on udwhatsit.pdf (1 page, 10206 bytes).
> 
> PDF statistics: 12 PDF objects out of 1000 (max. 8388607)
>  7 compressed objects within 1 object stream
>  0 named destinations out of 1000 (max. 131072)
>  1 words of extra memory for PDF output out of 10000 (max. 10000000)
> 

From sh-list at posteo.net  Tue Nov 18 18:01:01 2014
From: sh-list at posteo.net (Stephan Hennig)
Date: Tue, 18 Nov 2014 18:01:01 +0100
Subject: [luatex] inserting user-defined whatsit node
In-Reply-To: <546A2E3E.7010507@posteo.net>
References: <546A2E3E.7010507@posteo.net>
Message-ID: <546B7B4D.6030401@posteo.net>

Am 17.11.2014 um 18:19 schrieb Stephan Hennig:

> It breaks, however, if a user-defined whatsit node is inserted instead
> of a copy of a glyph node.  Error message is
> 
>   ! Unidentified user defined whatsit.
> 
> The LuaTeX manual has this about user-defined whatsits:
> 
>   The LuaTeX engine will simply step over such whatsits without
>   ever looking at the contents.
> 
> Why does the example break?

Typing 'H' at the error prompt reveals that the error occurs when the
node is (finally) deleted:

> ? H
> The type of the value in a user defined whatsit node should be one
> of 'a' (attribute list), 'd' (number), 'n' (node list), 's' (string),
> or 't' (tokenlist). Yours has an unknown type, and therefore I don't
> know how to free the node's value. A memory leak may result.


The solution is to initialize the whatsit's node 'type' field.

Best regards,
Stephan Hennig


From sh-list at posteo.net  Tue Nov 18 18:18:05 2014
From: sh-list at posteo.net (Stephan Hennig)
Date: Tue, 18 Nov 2014 18:18:05 +0100
Subject: [luatex] What are user-defined whatsit nodes?
Message-ID: <546B7F4D.6050409@posteo.net>

Hi,

inserting a user-defined whatsit node between two characters that can
form a valid ligature within a font, e.g., between two characters 'f'
and 'i', prevents the ligaturing mechanism to apply the ligature (see
attached example).

So far, I did interpret the description of user-defined whatsit nodes

  The LuaTeX engine will simply step over such whatsits
  without ever looking at the contents.

as

  User-defined whatsit nodes are kind of phantom nodes that
  never interfere with how LuaTeX works internally. However,
  they may disappear from a node list whenever LuaTeX removes
  nodes adjacent to a user-defined whatsit node.

Though, another view at user-defined whatsit nodes is equally valid

  User-defined whatsit nodes are whatsit nodes and as such
  their presence within a node list might interfere with how
  LuaTeX works internally.

Can LuaTeX developers confirm that the former interpretation is wrong?
If so, I propose adding a clarifying note to the manual.

Thanks,
Stephan Hennig


% -*- coding: utf-8 -*-
\directlua{
% Declare constants.
  local GLYPH = node.id('glyph')
  local WHATSIT = node.id('whatsit')
  local USER_DEFINED = node.subtype('user_defined')
  local CHAR_f = string.byte('f')
  local CHAR_i = string.byte('i')
  local Ncopy = node.copy
  local Nnew = node.new
  local Ninsert_before = node.insert_before
  local Ntraverse = node.traverse
% Create user-defined whatsit.
  local what = Nnew(WHATSIT, USER_DEFINED)
  what.user_id = 20141117
  what.type = 100
  what.value = 0
% Register callback.
  callback.register('hyphenate',
    function (head, tail)
%     Iterate over node list.
      for n in Ntraverse(head) do
        if n.id == GLYPH and n.char == CHAR_i then
          local p = n.prev
          if p.id == GLYPH and p.char == CHAR_f then
            Ninsert_before(head, n, Ncopy(what))
          end
        end
      end
      lang.hyphenate(head, tail)
    end
  )
}
fishing
\bye


From sh-list at posteo.net  Fri Nov 21 18:31:09 2014
From: sh-list at posteo.net (Stephan Hennig)
Date: Fri, 21 Nov 2014 18:31:09 +0100
Subject: [luatex] What are user-defined whatsit nodes?
In-Reply-To: <546B7F4D.6050409@posteo.net>
References: <546B7F4D.6050409@posteo.net>
Message-ID: <546F76DD.3070303@posteo.net>

Am 18.11.2014 um 18:18 schrieb Stephan Hennig:

> Can LuaTeX developers confirm that the former interpretation is wrong?
> If so, I propose adding a clarifying note to the manual.

To put it differently, is user-defined whatsits inhibiting ligatures a
bug or intentional?

Best regards,
Stephan Hennig


From luigi.scarso at gmail.com  Fri Nov 21 19:10:34 2014
From: luigi.scarso at gmail.com (luigi scarso)
Date: Fri, 21 Nov 2014 19:10:34 +0100
Subject: [luatex] What are user-defined whatsit nodes?
In-Reply-To: <546F76DD.3070303@posteo.net>
References: <546B7F4D.6050409@posteo.net>	<546F76DD.3070303@posteo.net>
Message-ID: <CAG5iGsCjqGzRkhzyBv0X6mJNoG0UgR190QiYYpFpOqrqVVwkMw@mail.gmail.com>

On Fri, Nov 21, 2014 at 6:31 PM, Stephan Hennig <sh-list at posteo.net> wrote:

>
> To put it differently, is user-defined whatsits inhibiting ligatures a
> bug or intentional?
>
> intentional
anything non-glyph or non-disc will inhibit ligatures  building


-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20141121/64963300/attachment.html>

From sh-list at posteo.net  Sat Nov 22 23:25:31 2014
From: sh-list at posteo.net (Stephan Hennig)
Date: Sat, 22 Nov 2014 23:25:31 +0100
Subject: [luatex] What are user-defined whatsit nodes?
In-Reply-To: <CAG5iGsCjqGzRkhzyBv0X6mJNoG0UgR190QiYYpFpOqrqVVwkMw@mail.gmail.com>
References: <546B7F4D.6050409@posteo.net>	<546F76DD.3070303@posteo.net>
 <CAG5iGsCjqGzRkhzyBv0X6mJNoG0UgR190QiYYpFpOqrqVVwkMw@mail.gmail.com>
Message-ID: <54710D5B.5030808@posteo.net>

Am 21.11.2014 um 19:10 schrieb luigi scarso:
> On Fri, Nov 21, 2014 at 6:31 PM, Stephan Hennig <sh-list at posteo.net> wrote:
> 
>>
>> To put it differently, is user-defined whatsits inhibiting ligatures a
>> bug or intentional?
>>
>> intentional
> anything non-glyph or non-disc will inhibit ligatures  building

OK, thanks for the clarification!

These (side-)effects of user-defined whatsits make me wonder what
use-cases have been in mind when introducing this type of node?
Attributes seem so much more attractive for squeezing additional
information into a node list, because they should be handled
transparently (I think).

But never mind, I'm currently looking into ways to make TeX smarter with
regards to ligatures.  I've recently found the selnolig package
utilizing user-defined whatsit nodes for inhibiting selected ligatures.
 Before asking further questions regarding ligatures I just wanted to
get some clarification about the whatsit approach.

The selnolig's whatsit approach works, but it's again not free of
side-effects.  It gets in the way with the hyphenation algorithm in that
the whatsit marks a word boundary causing problems with minimum
hyphenation length calculation.  Note how setting \righthyphenmin=5 in
the attached example prevents t-t hyphenation in the word 'butterflies.'
(Let's ignore the fact that the fl ligature is indeed valid in this
example.)  The problem is more serious in German with its many compound
words.  Babel shortcuts like "|, which insert real glue if I recall
correctly, suffer from the same problem.

Any ideas how to prevent selected ligatures without causing side-effects?

Best regards,
Stephan Hennig

% -*- coding: utf-8 -*-
\directlua{
% Declare constants.
  local GLYPH = node.id('glyph')
  local WHATSIT = node.id('whatsit')
  local USER_DEFINED = node.subtype('user_defined')
  local CHAR_f = string.byte('f')
  local CHAR_l = string.byte('l')
  local Ncopy = node.copy
  local Nnew = node.new
  local Ninsert_before = node.insert_before
  local Ntraverse = node.traverse
% Create user-defined whatsit.
  local what = Nnew(WHATSIT, USER_DEFINED)
  what.user_id = 20141117
  what.type = 100
  what.value = 0
% Register callback.
  callback.register('hyphenate',
    function (head, tail)
%     Iterate over node list.
      for n in Ntraverse(head) do
        if n.id == GLYPH and n.char == CHAR_l then
          local p = n.prev
          if p.id == GLYPH and p.char == CHAR_f then
            Ninsert_before(head, n, Ncopy(what))
          end
        end
      end
      lang.hyphenate(head, tail)
    end
  )
}
\righthyphenmin=3
\showhyphens{butterflies}
\righthyphenmin=5
\showhyphens{butterflies}
\bye


From mico.loretan at mac.com  Sun Nov 23 15:22:45 2014
From: mico.loretan at mac.com (Mico Loretan)
Date: Sun, 23 Nov 2014 22:22:45 +0800
Subject: [luatex] luatex Digest, Vol 71, Issue 15
In-Reply-To: <mailman.3.1416740401.14052.luatex@tug.org>
References: <mailman.3.1416740401.14052.luatex@tug.org>
Message-ID: <CCEBECC0-AD15-4C0A-BD74-21B1007C8A15@mac.com>

Regarding selnolig's alleged interference with LuaTeX's hyphenation algorithm: Please post an MWE to show how you use the package. (E.g., did you set the package's "english" option?) The package provides no rules for suppressing "tt" ligatures, and it shouldn't be suppressing the "fl" ligature in "butterflies" either. (In short, selnolig shouldn't operate on the word "butterflies" at all, unless you've privided additional ligature suppression rules via \nolig instructions.) Without having further information, I'm not sure it's right to blame selnolig for a failure to find the hyphenation point between the two "t"s in butterflies. 

(Am currently in Hong Kong airport, waiting for my flight to London. Probably won't be able to read, let alone respond to, email messages for the next 18 to 24 hours.)

Best, Mico

Sent from my iPhone.

> On Nov 23, 2014, at 19:00, luatex-request at tug.org wrote:
> 
> Send luatex mailing list submissions to
>    luatex at tug.org
> 
> To subscribe or unsubscribe via the World Wide Web, visit
>    http://tug.org/mailman/listinfo/luatex
> or, via email, send a message with subject or body 'help' to
>    luatex-request at tug.org
> 
> You can reach the person managing the list at
>    luatex-owner at tug.org
> 
> When replying, please edit your Subject line so it is more specific
> than "Re: Contents of luatex digest..."
> 
> 
> Today's Topics:
> 
>   1. Re: What are user-defined whatsit nodes? (Stephan Hennig)
> 
> 
> ----------------------------------------------------------------------
> 
> Message: 1
> Date: Sat, 22 Nov 2014 23:25:31 +0100
> From: Stephan Hennig <sh-list at posteo.net>
> To: "LuaTeX discussion." <luatex at tug.org>
> Subject: Re: [luatex] What are user-defined whatsit nodes?
> Message-ID: <54710D5B.5030808 at posteo.net>
> Content-Type: text/plain; charset="us-ascii"
> 
>> Am 21.11.2014 um 19:10 schrieb luigi scarso:
>>> On Fri, Nov 21, 2014 at 6:31 PM, Stephan Hennig <sh-list at posteo.net> wrote:
>>> 
>>> 
>>> To put it differently, is user-defined whatsits inhibiting ligatures a
>>> bug or intentional?
>>> 
>>> intentional
>> anything non-glyph or non-disc will inhibit ligatures  building
> 
> OK, thanks for the clarification!
> 
> These (side-)effects of user-defined whatsits make me wonder what
> use-cases have been in mind when introducing this type of node?
> Attributes seem so much more attractive for squeezing additional
> information into a node list, because they should be handled
> transparently (I think).
> 
> But never mind, I'm currently looking into ways to make TeX smarter with
> regards to ligatures.  I've recently found the selnolig package
> utilizing user-defined whatsit nodes for inhibiting selected ligatures.
> Before asking further questions regarding ligatures I just wanted to
> get some clarification about the whatsit approach.
> 
> The selnolig's whatsit approach works, but it's again not free of
> side-effects.  It gets in the way with the hyphenation algorithm in that
> the whatsit marks a word boundary causing problems with minimum
> hyphenation length calculation.  Note how setting \righthyphenmin=5 in
> the attached example prevents t-t hyphenation in the word 'butterflies.'
> (Let's ignore the fact that the fl ligature is indeed valid in this
> example.)  The problem is more serious in German with its many compound
> words.  Babel shortcuts like "|, which insert real glue if I recall
> correctly, suffer from the same problem.
> 
> Any ideas how to prevent selected ligatures without causing side-effects?
> 
> Best regards,
> Stephan Hennig
> 
> % -*- coding: utf-8 -*-
> \directlua{
> % Declare constants.
>  local GLYPH = node.id('glyph')
>  local WHATSIT = node.id('whatsit')
>  local USER_DEFINED = node.subtype('user_defined')
>  local CHAR_f = string.byte('f')
>  local CHAR_l = string.byte('l')
>  local Ncopy = node.copy
>  local Nnew = node.new
>  local Ninsert_before = node.insert_before
>  local Ntraverse = node.traverse
> % Create user-defined whatsit.
>  local what = Nnew(WHATSIT, USER_DEFINED)
>  what.user_id = 20141117
>  what.type = 100
>  what.value = 0
> % Register callback.
>  callback.register('hyphenate',
>    function (head, tail)
> %     Iterate over node list.
>      for n in Ntraverse(head) do
>        if n.id == GLYPH and n.char == CHAR_l then
>          local p = n.prev
>          if p.id == GLYPH and p.char == CHAR_f then
>            Ninsert_before(head, n, Ncopy(what))
>          end
>        end
>      end
>      lang.hyphenate(head, tail)
>    end
>  )
> }
> \righthyphenmin=3
> \showhyphens{butterflies}
> \righthyphenmin=5
> \showhyphens{butterflies}
> \bye
> 
> 
> 
> ------------------------------
> 
> Subject: Digest Footer
> 
> _______________________________________________
> luatex mailing list
> luatex at tug.org
> http://tug.org/mailman/listinfo/luatex
> 
> 
> ------------------------------
> 
> End of luatex Digest, Vol 71, Issue 15
> **************************************


From mico.loretan at mac.com  Sun Nov 23 16:47:45 2014
From: mico.loretan at mac.com (Mico Loretan)
Date: Sun, 23 Nov 2014 23:47:45 +0800
Subject: [luatex]  What are user-defined whatsit nodes
In-Reply-To: <mailman.3.1416740401.14052.luatex@tug.org>
References: <mailman.3.1416740401.14052.luatex@tug.org>
Message-ID: <7B2DB9AB-224F-4D2E-BA74-91A4BC6CF410@mac.com>

Perusing your code in a bit more depth, it looks like yourwhatsit-inserting function is registered with the hyphenate callback. In contrast, selnolig's main function is registered with the ligaturing callback. As such, it shouldn't affect TeX's hyphenation at all, and it certainly shouldn't have the side-effects you mention. Please advise if I'm missing something important in your setup. Best, Mico


> 
>> Am 21.11.2014 um 19:10 schrieb luigi scarso:
>>> On Fri, Nov 21, 2014 at 6:31 PM, Stephan Hennig <sh-list at posteo.net> wrote:
>>> 
>>> 
>>> To put it differently, is user-defined whatsits inhibiting ligatures a
>>> bug or intentional?
>>> 
>>> intentional
>> anything non-glyph or non-disc will inhibit ligatures  building
> 
> OK, thanks for the clarification!
> 
> These (side-)effects of user-defined whatsits make me wonder what
> use-cases have been in mind when introducing this type of node?
> Attributes seem so much more attractive for squeezing additional
> information into a node list, because they should be handled
> transparently (I think).
> 
> But never mind, I'm currently looking into ways to make TeX smarter with
> regards to ligatures.  I've recently found the selnolig package
> utilizing user-defined whatsit nodes for inhibiting selected ligatures.
> Before asking further questions regarding ligatures I just wanted to
> get some clarification about the whatsit approach.
> 
> The selnolig's whatsit approach works, but it's again not free of
> side-effects.  It gets in the way with the hyphenation algorithm in that
> the whatsit marks a word boundary causing problems with minimum
> hyphenation length calculation.  Note how setting \righthyphenmin=5 in
> the attached example prevents t-t hyphenation in the word 'butterflies.'
> (Let's ignore the fact that the fl ligature is indeed valid in this
> example.)  The problem is more serious in German with its many compound
> words.  Babel shortcuts like "|, which insert real glue if I recall
> correctly, suffer from the same problem.
> 
> Any ideas how to prevent selected ligatures without causing side-effects?
> 
> Best regards,
> Stephan Hennig
> 
> % -*- coding: utf-8 -*-
> \directlua{
> % Declare constants.
>  local GLYPH = node.id('glyph')
>  local WHATSIT = node.id('whatsit')
>  local USER_DEFINED = node.subtype('user_defined')
>  local CHAR_f = string.byte('f')
>  local CHAR_l = string.byte('l')
>  local Ncopy = node.copy
>  local Nnew = node.new
>  local Ninsert_before = node.insert_before
>  local Ntraverse = node.traverse
> % Create user-defined whatsit.
>  local what = Nnew(WHATSIT, USER_DEFINED)
>  what.user_id = 20141117
>  what.type = 100
>  what.value = 0
> % Register callback.
>  callback.register('hyphenate',
>    function (head, tail)
> %     Iterate over node list.
>      for n in Ntraverse(head) do
>        if n.id == GLYPH and n.char == CHAR_l then
>          local p = n.prev
>          if p.id == GLYPH and p.char == CHAR_f then
>            Ninsert_before(head, n, Ncopy(what))
>          end
>        end
>      end
>      lang.hyphenate(head, tail)
>    end
>  )
> }
> \righthyphenmin=3
> \showhyphens{butterflies}
> \righthyphenmin=5
> \showhyphens{butterflies}
> \bye
> 
> 
> 
> ------------------------------
> 
> Subject: Digest Footer
> 
> _______________________________________________
> luatex mailing list
> luatex at tug.org
> http://tug.org/mailman/listinfo/luatex
> 
> 
> ------------------------------
> 
> End of luatex Digest, Vol 71, Issue 15
> **************************************


From pragma at wxs.nl  Sun Nov 23 19:43:09 2014
From: pragma at wxs.nl (Hans Hagen)
Date: Sun, 23 Nov 2014 19:43:09 +0100
Subject: [luatex] What are user-defined whatsit nodes?
In-Reply-To: <54710D5B.5030808@posteo.net>
References: <546B7F4D.6050409@posteo.net>	<546F76DD.3070303@posteo.net>
 <CAG5iGsCjqGzRkhzyBv0X6mJNoG0UgR190QiYYpFpOqrqVVwkMw@mail.gmail.com>
 <54710D5B.5030808@posteo.net>
Message-ID: <54722ABD.1060507@wxs.nl>

On 11/22/2014 11:25 PM, Stephan Hennig wrote:
> Am 21.11.2014 um 19:10 schrieb luigi scarso:
>> On Fri, Nov 21, 2014 at 6:31 PM, Stephan Hennig <sh-list at posteo.net> wrote:
>>
>>>
>>> To put it differently, is user-defined whatsits inhibiting ligatures a
>>> bug or intentional?
>>>
>>> intentional
>> anything non-glyph or non-disc will inhibit ligatures  building
>
> OK, thanks for the clarification!
>
> These (side-)effects of user-defined whatsits make me wonder what
> use-cases have been in mind when introducing this type of node?
> Attributes seem so much more attractive for squeezing additional
> information into a node list, because they should be handled
> transparently (I think).
>
> But never mind, I'm currently looking into ways to make TeX smarter with
> regards to ligatures.  I've recently found the selnolig package
> utilizing user-defined whatsit nodes for inhibiting selected ligatures.
>   Before asking further questions regarding ligatures I just wanted to
> get some clarification about the whatsit approach.
>
> The selnolig's whatsit approach works, but it's again not free of
> side-effects.  It gets in the way with the hyphenation algorithm in that
> the whatsit marks a word boundary causing problems with minimum
> hyphenation length calculation.  Note how setting \righthyphenmin=5 in
> the attached example prevents t-t hyphenation in the word 'butterflies.'
> (Let's ignore the fact that the fl ligature is indeed valid in this
> example.)  The problem is more serious in German with its many compound
> words.  Babel shortcuts like "|, which insert real glue if I recall
> correctly, suffer from the same problem.
>
> Any ideas how to prevent selected ligatures without causing side-effects?
>
> Best regards,
> Stephan Hennig
>
> % -*- coding: utf-8 -*-
> \directlua{
> % Declare constants.
>    local GLYPH = node.id('glyph')
>    local WHATSIT = node.id('whatsit')
>    local USER_DEFINED = node.subtype('user_defined')
>    local CHAR_f = string.byte('f')
>    local CHAR_l = string.byte('l')
>    local Ncopy = node.copy
>    local Nnew = node.new
>    local Ninsert_before = node.insert_before
>    local Ntraverse = node.traverse
> % Create user-defined whatsit.
>    local what = Nnew(WHATSIT, USER_DEFINED)
>    what.user_id = 20141117
>    what.type = 100
>    what.value = 0
> % Register callback.
>    callback.register('hyphenate',
>      function (head, tail)
> %     Iterate over node list.
>        for n in Ntraverse(head) do
>          if n.id == GLYPH and n.char == CHAR_l then
>            local p = n.prev
>            if p.id == GLYPH and p.char == CHAR_f then
>              Ninsert_before(head, n, Ncopy(what))
>            end
>          end
>        end
>        lang.hyphenate(head, tail)
>      end
>    )
> }
> \righthyphenmin=3
> \showhyphens{butterflies}
> \righthyphenmin=5
> \showhyphens{butterflies}
> \bye

Assuming some explicit control (you mention attributes) you can just 
reconstruct the original from the (nested) ligatures, like:

     local glyph_id = node.id("glyph")

     function nolig(head)
         current = head
         while current do
             local n = current.next
             if current.id == glyph_id and current[999] == 1 then
                 local c = current.components
                 if c then
                     local t = node.slide(c)
                     local x = current
                     local p = current.prev
                     if p then
                         p.next = c
                         c.prev = p
                     else
                         head = c
                     end
                     if n then
                         t.next = n
                         n.prev = t
                     end
                     x.components = nil
                     node.free(x)
                     n = c
                 end
             end
             current = n
         end
         return head
     end

     -- hook this function into the hlist handler after font
     -- handling; this is of course macro package dependent as
     -- is the 999 attribute

\def\nolig#1{\begingroup\attribute999=1\relax#1\endgroup}

e\nolig{ff}e

e\nolig{ffi}cient


Hans



-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From sh-list at posteo.net  Sun Nov 23 23:29:06 2014
From: sh-list at posteo.net (Stephan Hennig)
Date: Sun, 23 Nov 2014 23:29:06 +0100
Subject: [luatex] What are user-defined whatsit nodes
In-Reply-To: <7B2DB9AB-224F-4D2E-BA74-91A4BC6CF410@mac.com>
References: <mailman.3.1416740401.14052.luatex@tug.org>
 <7B2DB9AB-224F-4D2E-BA74-91A4BC6CF410@mac.com>
Message-ID: <54725FB2.2060300@posteo.net>

Am 23.11.2014 um 16:47 schrieb Mico Loretan:

Hi Mico,

> Perusing your code in a bit more depth, it looks like
> yourwhatsit-inserting function is registered with the hyphenate
> callback. In contrast, selnolig's main function is registered with
> the ligaturing callback.

Ah, great!  I somehow missed that.  The reason is that I do have local
test code that takes another approach, instead of inhibiting ligatures
it breaks-up wrong ligatures.  During my tests I made one observation:
the ligature breaking works (partly) as long as Type1 fonts are used.
When the OTF fonts are used, i.e., the fontspec/luaotfload packages,
there are no ligatures inserted during the ligaturing callback.[1]  When
I saw your whatsit approach I realized that that must indeed be
compatible with fontspec/luaotfload, but instead of retrying the
ligaturing callback I tried to insert the whatsit as early as possible.
 My bad.

Anyway, I'm actually less interested in the technical details of
suppressing ligatures (which is why I ask on this list about that), but
more in how to identify wrong ligatures.

Mico and anybody else, I'd like to invite you to join the
trennmuster at dante.de list ('trennmuster' is German for hyphenation
patterns).  We have an approach in mind that (to me) seems superior to
the current approach taken by the selnolig package that I'd like to
discuss with you over there first.  Because the discussion will not only
be technical but certainly touch linguistic questions.  We can get back
here again any time if there's anything engine related to be discussed.
 Main language of the trennmuster list is German, but English
discussions are welcome as well.  You can register at
<URL:https://lists.dante.de/mailman/listinfo/trennmuster>.  Hope to see
you there!

Best regards,
Stephan Hennig

[1] No code to backup my observation this time, but I think it must have
to do with the fact that fontspec/luaotfload do font feature handling at
the node list level and apparently later than the ligature callback.
Does luaotfload provide another set of callbacks to hook up into
luaotfload's node list processing?


From sh-list at posteo.net  Sun Nov 23 23:49:50 2014
From: sh-list at posteo.net (Stephan Hennig)
Date: Sun, 23 Nov 2014 23:49:50 +0100
Subject: [luatex] What are user-defined whatsit nodes?
In-Reply-To: <54722ABD.1060507@wxs.nl>
References: <546B7F4D.6050409@posteo.net>	<546F76DD.3070303@posteo.net>
 <CAG5iGsCjqGzRkhzyBv0X6mJNoG0UgR190QiYYpFpOqrqVVwkMw@mail.gmail.com>
 <54710D5B.5030808@posteo.net> <54722ABD.1060507@wxs.nl>
Message-ID: <5472648E.3000106@posteo.net>

Am 23.11.2014 um 19:43 schrieb Hans Hagen:

> you can just reconstruct the original from the (nested) ligatures,

I have experimented with code like that.  The problem is that triple
ligatures can be broken in two ways:


  ffl   =>
             ff + l  Leuchtstofflampe (fluorescent lamp)

             f + fl  Tiefflieger (low-level attack aircraft)

The former case is easy, since components of the ffl ligature are glyphs
'ff' and 'l'.  The second case requires to compose the fl ligature from
raw font information, since it is not readily available.  Effectively,
this means implementing a full ligaturing routine.  I wouldn't want to
do that.  Is there any interface available that given two glyphs returns
a ligature of those glyphs?

Best regards,
Stephan Hennig


From pragma at wxs.nl  Mon Nov 24 00:38:19 2014
From: pragma at wxs.nl (Hans Hagen)
Date: Mon, 24 Nov 2014 00:38:19 +0100
Subject: [luatex] What are user-defined whatsit nodes?
In-Reply-To: <5472648E.3000106@posteo.net>
References: <546B7F4D.6050409@posteo.net>	<546F76DD.3070303@posteo.net>
 <CAG5iGsCjqGzRkhzyBv0X6mJNoG0UgR190QiYYpFpOqrqVVwkMw@mail.gmail.com>
 <54710D5B.5030808@posteo.net> <54722ABD.1060507@wxs.nl>
 <5472648E.3000106@posteo.net>
Message-ID: <54726FEB.3080202@wxs.nl>

On 11/23/2014 11:49 PM, Stephan Hennig wrote:
> Am 23.11.2014 um 19:43 schrieb Hans Hagen:
>
>> you can just reconstruct the original from the (nested) ligatures,
>
> I have experimented with code like that.  The problem is that triple
> ligatures can be broken in two ways:
>
>
>    ffl   =>
>               ff + l  Leuchtstofflampe (fluorescent lamp)
>
>               f + fl  Tiefflieger (low-level attack aircraft)
>
> The former case is easy, since components of the ffl ligature are glyphs
> 'ff' and 'l'.  The second case requires to compose the fl ligature from
> raw font information, since it is not readily available.  Effectively,
> this means implementing a full ligaturing routine.  I wouldn't want to
> do that.  Is there any interface available that given two glyphs returns
> a ligature of those glyphs?

that's not the way open type works ... some fonts can turn ffl into the 
ffl ligature, others do it stepwise and yet others implement for 
instance ff ligatures by kerning two (different) f's, in fact the whole 
concept of ligature in open type is a kind of generic substitution and 
does not always relate to ligatures .. the feature can be mixed into 
other features as well


-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From sh-list at posteo.net  Mon Nov 24 20:02:23 2014
From: sh-list at posteo.net (Stephan Hennig)
Date: Mon, 24 Nov 2014 20:02:23 +0100
Subject: [luatex] What are user-defined whatsit nodes?
In-Reply-To: <54726FEB.3080202@wxs.nl>
References: <546B7F4D.6050409@posteo.net>	<546F76DD.3070303@posteo.net>
 <CAG5iGsCjqGzRkhzyBv0X6mJNoG0UgR190QiYYpFpOqrqVVwkMw@mail.gmail.com>
 <54710D5B.5030808@posteo.net> <54722ABD.1060507@wxs.nl>
 <5472648E.3000106@posteo.net> <54726FEB.3080202@wxs.nl>
Message-ID: <547380BF.9020402@posteo.net>

Am 24.11.2014 um 00:38 schrieb Hans Hagen:
> On 11/23/2014 11:49 PM, Stephan Hennig wrote:
>>
>> Is there any interface available that given two glyphs returns
>> a ligature of those glyphs?
> 
> that's not the way open type works ... some fonts can turn ffl into the 
> ffl ligature, others do it stepwise and yet others implement for 
> instance ff ligatures by kerning two (different) f's, in fact the whole 
> concept of ligature in open type is a kind of generic substitution and 
> does not always relate to ligatures .. the feature can be mixed into 
> other features as well

OK.  As I don't want to put focus on the actual low-level ligaturing
anyway, then, is there any interface to communicate to luaotfload where
to put ligatures and where not?  The whatsit approach seems to work for
the time being, but I'd prefer an official communication channel
nevertheless.

I'd like to generalize the idea a bit.  There are other typographic
problems that can be solved by node list operations.  Think about
long-s/round-s substitution.  I'd welcome luaotfload doing the actual
substitution (the font handling), but would like to give hints to
luaotfload about where to apply the substitution and where not.  What do
you think?

Best regards,
Stephan Hennig


From khaledhosny at eglug.org  Mon Nov 24 20:23:36 2014
From: khaledhosny at eglug.org (Khaled Hosny)
Date: Mon, 24 Nov 2014 21:23:36 +0200
Subject: [luatex] What are user-defined whatsit nodes?
In-Reply-To: <547380BF.9020402@posteo.net>
References: <546B7F4D.6050409@posteo.net> <546F76DD.3070303@posteo.net>
 <CAG5iGsCjqGzRkhzyBv0X6mJNoG0UgR190QiYYpFpOqrqVVwkMw@mail.gmail.com>
 <54710D5B.5030808@posteo.net> <54722ABD.1060507@wxs.nl>
 <5472648E.3000106@posteo.net> <54726FEB.3080202@wxs.nl>
 <547380BF.9020402@posteo.net>
Message-ID: <20141124192336.GA22926@khaled-laptop>

On Mon, Nov 24, 2014 at 08:02:23PM +0100, Stephan Hennig wrote:
> Am 24.11.2014 um 00:38 schrieb Hans Hagen:
> > On 11/23/2014 11:49 PM, Stephan Hennig wrote:
> >>
> >> Is there any interface available that given two glyphs returns
> >> a ligature of those glyphs?
> > 
> > that's not the way open type works ... some fonts can turn ffl into the 
> > ffl ligature, others do it stepwise and yet others implement for 
> > instance ff ligatures by kerning two (different) f's, in fact the whole 
> > concept of ligature in open type is a kind of generic substitution and 
> > does not always relate to ligatures .. the feature can be mixed into 
> > other features as well
> 
> OK.  As I don't want to put focus on the actual low-level ligaturing
> anyway, then, is there any interface to communicate to luaotfload where
> to put ligatures and where not?  The whatsit approach seems to work for
> the time being, but I'd prefer an official communication channel
> nevertheless.

The ?official? Unicode was for suppressing a ligature is by inserting a
ZWNJ character, so I guess inserting a whatsit is as close (of course if
one can get a ZWNJ to the output stream so that ligature suppression is
maintained even when text is copied around, that would be even better
IMO).

Regards,
Khaled

From sh-list at posteo.net  Wed Nov 26 20:18:27 2014
From: sh-list at posteo.net (Stephan Hennig)
Date: Wed, 26 Nov 2014 20:18:27 +0100
Subject: [luatex] What are user-defined whatsit nodes?
In-Reply-To: <20141124192336.GA22926@khaled-laptop>
References: <546B7F4D.6050409@posteo.net> <546F76DD.3070303@posteo.net>
 <CAG5iGsCjqGzRkhzyBv0X6mJNoG0UgR190QiYYpFpOqrqVVwkMw@mail.gmail.com>
 <54710D5B.5030808@posteo.net> <54722ABD.1060507@wxs.nl>
 <5472648E.3000106@posteo.net> <54726FEB.3080202@wxs.nl>
 <547380BF.9020402@posteo.net> <20141124192336.GA22926@khaled-laptop>
Message-ID: <54762783.1000701@posteo.net>

Am 24.11.2014 um 20:23 schrieb Khaled Hosny:

> The ?official? Unicode was for suppressing a ligature is by inserting a
> ZWNJ character, so I guess inserting a whatsit is as close

That seems to work just as well (see attached example).  But ideally,
I'd like to not do the low-level node handling myself.  I'll post a
proposal of what I have in mind in a few days.


> (of course if one can get a ZWNJ to the output stream so that
> ligature suppression is maintained even when text is copied around,
> that would be even better IMO).

Doesn't look like that's happening, currently.

> BT
> /F1 9.96264 Tf 1 0 0 1 91.925 759.927 Tm [(butterflies)-333(butterflies)]TJ
> 1 0 0 1 303.509 105.18 Tm [(1)]TJ
> ET

Best regards,
Stephan Hennig

% -*- coding: utf-8 -*-
\pdfcompresslevel=0
\directlua{
% Declare constants.
  local GLYPH = node.id('glyph')
  local CHAR_f = string.byte('f')
  local CHAR_l = string.byte('l')
  local Ncopy = node.copy
  local Nnew = node.new
  local Ninsert_before = node.insert_before
  local Ntraverse = node.traverse
% Create ZWNJ template.
  local zwnj = Nnew(GLYPH)
  zwnj.char = 0x200c
% Register callback.
  callback.register('ligaturing',
    function (head, tail)
%     Iterate over node list.
      for n in Ntraverse(head) do
        if n.id == GLYPH and n.char == CHAR_l then
          local p = n.prev
          if p.id == GLYPH and p.char == CHAR_f then
            local zwnjx = Ncopy(zwnj)
            zwnjx.font = n.font
            zwnjx.lang = n.lang
            Ninsert_before(head, n, zwnjx)
          end
        end
      end
      node.ligaturing(head, tail)
    end
  )
}
\righthyphenmin=3
\showhyphens{butterflies}butterflies
\righthyphenmin=5
\showhyphens{butterflies}butterflies
\bye


From mico.loretan at mac.com  Thu Nov 27 13:29:04 2014
From: mico.loretan at mac.com (Mico Loretan)
Date: Thu, 27 Nov 2014 13:29:04 +0100
Subject: [luatex]  What are user-defined whatsit nodes?
In-Reply-To: <mailman.1.1417086001.1410.luatex@tug.org>
References: <mailman.1.1417086001.1410.luatex@tug.org>
Message-ID: <0E87CAC7-2DB2-4941-96BD-8E488C74F0BC@mac.com>

Funny that the ZWNJ method should come up, as it so happens that I'm working on updating selnolig. 

The next version will offer a choice of tree methods for suppressing ligatures. In addition to the current method (i.e.,insertion of a whatsit) I'm thinking of implementing two further methods: the ZWNJ method you describe (very flexible, but requires an Opentype font), and what I'll call the babel method for obvious reasons: insertion  of a discretionary that provides 0.03em of whitespace in case there's no line break. The babel method will work with any font (and, its name notwithstanding, doesn't require that babel be loaded). 

In terms of programming, whereas the whatsit method works with the "ligaturing" callback, the two newer methods need to work with the "pre_linebreak_filter" callback, which takes an input and provides a return. (The ligaturing callback, by contrast, takes two inputs but does not provide a return value.) 

I've subscribed to the Trennmuster list, by the way. 

Best, Mico

Sent from my iPhone.

> Message: 1
> Date: Wed, 26 Nov 2014 20:18:27 +0100
> From: Stephan Hennig <sh-list at posteo.net>
> To: "LuaTeX discussion." <luatex at tug.org>
> Subject: Re: [luatex] What are user-defined whatsit nodes?
> 
>> Am 24.11.2014 um 20:23 schrieb Khaled Hosny:
>> 
>> The ?official? Unicode was for suppressing a ligature is by inserting a
>> ZWNJ character, so I guess inserting a whatsit is as close
> 
> That seems to work just as well (see attached example).  But ideally,
> I'd like to not do the low-level node handling myself.  I'll post a
> proposal of what I have in mind in a few days.
> 
> 
>> (of course if one can get a ZWNJ to the output stream so that
>> ligature suppression is maintained even when text is copied around,
>> that would be even better IMO).
> 
> Doesn't look like that's happening, currently.
> 
>> BT
>> /F1 9.96264 Tf 1 0 0 1 91.925 759.927 Tm [(butterflies)-333(butterflies)]TJ
>> 1 0 0 1 303.509 105.18 Tm [(1)]TJ
>> ET
> 
> Best regards,
> Stephan Hennig
> 
> % -*- coding: utf-8 -*-
> \pdfcompresslevel=0
> \directlua{
> % Declare constants.
>  local GLYPH = node.id('glyph')
>  local CHAR_f = string.byte('f')
>  local CHAR_l = string.byte('l')
>  local Ncopy = node.copy
>  local Nnew = node.new
>  local Ninsert_before = node.insert_before
>  local Ntraverse = node.traverse
> % Create ZWNJ template.
>  local zwnj = Nnew(GLYPH)
>  zwnj.char = 0x200c
> % Register callback.
>  callback.register('ligaturing',
>    function (head, tail)
> %     Iterate over node list.
>      for n in Ntraverse(head) do
>        if n.id == GLYPH and n.char == CHAR_l then
>          local p = n.prev
>          if p.id == GLYPH and p.char == CHAR_f then
>            local zwnjx = Ncopy(zwnj)
>            zwnjx.font = n.font
>            zwnjx.lang = n.lang
>            Ninsert_before(head, n, zwnjx)
>          end
>        end
>      end
>      node.ligaturing(head, tail)
>    end
>  )
> }
> \righthyphenmin=3
> \showhyphens{butterflies}butterflies
> \righthyphenmin=5
> \showhyphens{butterflies}butterflies
> \bye
> 
> 
> 
> ------------------------------
> 
> Subject: Digest Footer
> 
> _______________________________________________
> luatex mailing list
> luatex at tug.org
> http://tug.org/mailman/listinfo/luatex
> 
> 
> ------------------------------
> 
> End of luatex Digest, Vol 71, Issue 19
> **************************************


