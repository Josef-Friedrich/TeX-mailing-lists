From pragma at wxs.nl  Wed Jan  1 11:43:07 2014
From: pragma at wxs.nl (Hans Hagen)
Date: Wed, 1 Jan 2014 11:43:07 +0100
Subject: [luatex] [dev-context] Luatex 0.78.0 announcement
In-Reply-To: <F8AF0EE7-595F-4339-905A-4C1D230345C7@docwolves.nl>
References: <52C2EC21.9070102@bittext.nl>
 <CALBOmsZooQ+GP5Z95ki8rBi+GaG=QOuON-WDh8ecR8fK5ActNQ@mail.gmail.com>
 <F8AF0EE7-595F-4339-905A-4C1D230345C7@docwolves.nl>
Message-ID: <52C3F13B.5080003@wxs.nl>

On 12/31/2013 8:26 PM, Taco hoekwater wrote:
> Hi,
>
>> Op 31 dec. 2013 om 20:17 heeft Mojca Miklavec <mojca.miklavec.lists at gmail.com> het volgende geschreven:
>>
>> Taco,
>>
>> when building luatex I stumbled upon the attached problem. Do you have
>> any clue what I should check?
>>
>> Metapost compiles just fine natively, but when cross-compiling, it
>> seems that it fails for some reason I don't understand.
>>
>> Please let me know what I should check (last time I tried the whole TL
>> compiled fine, but I haven't checked for a while already).
>>
>
> The cross-compiler is trying to build its own ctangle, which fails because ctangleboot in the build tree cannot find texmf.cnf. But, Afaik, it should not even try to build ctangle. Configure is supposed to check whether there is a working ctangle exe in PATH already. At least, that is what I remember.  But I cannot actually test anything on the ipad right now.

actually it does need the tangle related bins which is why they are 
provided too (we did lots of tests and crosscompiling 32/64 bit should 
work on linux as well as under msys but different command line switched 
are needed; the compilation under msys is dead slow due to inefficient 
configure)

> (It could also be a timestamp problem, but I thought we had all of those fixed a few years back)


Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From mojca.miklavec.lists at gmail.com  Thu Jan  2 09:59:17 2014
From: mojca.miklavec.lists at gmail.com (Mojca Miklavec)
Date: Thu, 2 Jan 2014 09:59:17 +0100
Subject: [luatex] [dev-context] Luatex 0.78.0 announcement
In-Reply-To: <F8AF0EE7-595F-4339-905A-4C1D230345C7@docwolves.nl>
References: <52C2EC21.9070102@bittext.nl>
 <CALBOmsZooQ+GP5Z95ki8rBi+GaG=QOuON-WDh8ecR8fK5ActNQ@mail.gmail.com>
 <F8AF0EE7-595F-4339-905A-4C1D230345C7@docwolves.nl>
Message-ID: <CALBOmsayK2EYOZhoR_SD=Fc+Ov92fuTT5yZbihws0sF7dAhLaQ@mail.gmail.com>

On Tue, Dec 31, 2013 at 8:26 PM, Taco hoekwater wrote:
>> Op 31 dec. 2013 om 20:17 heeft Mojca Miklavec het volgende geschreven:
>>
>> Taco,
>>
>> when building luatex I stumbled upon the attached problem. Do you have
>> any clue what I should check?
>>
>> Metapost compiles just fine natively, but when cross-compiling, it
>> seems that it fails for some reason I don't understand.
>>
>> Please let me know what I should check (last time I tried the whole TL
>> compiled fine, but I haven't checked for a while already).
>>
>
> The cross-compiler is trying to build its own ctangle, which fails because ctangleboot in the build tree cannot find texmf.cnf. But, Afaik, it should not even try to build ctangle. Configure is supposed to check whether there is a working ctangle exe in PATH already. At least, that is what I remember.  But I cannot actually test anything on the ipad right now.

What I don't understand is why it cannot find texmf.cnf because the
file is there.

But anyway ... with some further manual compilation (simply running
"make" elsewhere in the tree after the failure) I somehow stumbled
upon

Undefined symbols:
  "_fopen$UNIX2003", referenced from:

and http://www.cocoawithlove.com/2009/09/building-for-earlier-os-versions-in.html
suggested me to add
    -isysroot /Developer/SDKs/MacOSX10.5.sdk -mmacosx-version-min=10.5

I thought the second argument was equivalent to
    export MACOSX_DEPLOYMENT_TARGET=10.5
but apparently adding -mmacosx-version-min=10.5 solved the problem.

Please don't ask me how this was related to the failure to find texmf.cnf.

Mojca


From taco at elvenkind.com  Thu Jan  2 10:07:41 2014
From: taco at elvenkind.com (Taco Hoekwater)
Date: Thu, 2 Jan 2014 10:07:41 +0100
Subject: [luatex] [dev-context] Luatex 0.78.0 announcement
In-Reply-To: <CALBOmsayK2EYOZhoR_SD=Fc+Ov92fuTT5yZbihws0sF7dAhLaQ@mail.gmail.com>
References: <52C2EC21.9070102@bittext.nl>
 <CALBOmsZooQ+GP5Z95ki8rBi+GaG=QOuON-WDh8ecR8fK5ActNQ@mail.gmail.com>
 <F8AF0EE7-595F-4339-905A-4C1D230345C7@docwolves.nl>
 <CALBOmsayK2EYOZhoR_SD=Fc+Ov92fuTT5yZbihws0sF7dAhLaQ@mail.gmail.com>
Message-ID: <52C52C5D.6010209@elvenkind.com>

On 01/02/2014 09:59 AM, Mojca Miklavec wrote:
>
> Please don't ask me how this was related to the failure to find texmf.cnf.

Does that mean that the problem is now fixed?

Best wishes,
Taco


From mojca.miklavec.lists at gmail.com  Thu Jan  2 10:11:53 2014
From: mojca.miklavec.lists at gmail.com (Mojca Miklavec)
Date: Thu, 2 Jan 2014 10:11:53 +0100
Subject: [luatex] [dev-context] Luatex 0.78.0 announcement
In-Reply-To: <52C52C5D.6010209@elvenkind.com>
References: <52C2EC21.9070102@bittext.nl>
 <CALBOmsZooQ+GP5Z95ki8rBi+GaG=QOuON-WDh8ecR8fK5ActNQ@mail.gmail.com>
 <F8AF0EE7-595F-4339-905A-4C1D230345C7@docwolves.nl>
 <CALBOmsayK2EYOZhoR_SD=Fc+Ov92fuTT5yZbihws0sF7dAhLaQ@mail.gmail.com>
 <52C52C5D.6010209@elvenkind.com>
Message-ID: <CALBOmsYfi2Kwe3KTV_fupCFJr8cB71nB41SwFvcBgPuY+aLQHA@mail.gmail.com>

On Thu, Jan 2, 2014 at 10:07 AM, Taco Hoekwater wrote:
> On 01/02/2014 09:59 AM, Mojca Miklavec wrote:
>>
>>
>> Please don't ask me how this was related to the failure to find texmf.cnf.
>
> Does that mean that the problem is now fixed?

Yes. (Even though remaining "problem" is now that I don't understand
why it is fixed.)

Mojca

From zappathustra at free.fr  Thu Jan  2 10:58:26 2014
From: zappathustra at free.fr (Paul Isambert)
Date: Thu, 2 Jan 2014 10:58:26 +0100
Subject: [luatex] [Dev-luatex] Luatex 0.78.0 announcement
In-Reply-To: <52C2EC21.9070102@bittext.nl>
References: <52C2EC21.9070102@bittext.nl>
Message-ID: <20140102095827.54528A610F@smtp3-g21.free.fr>

Taco Hoekwater <taco at bittext.nl> a ?crit:
> Hi,
> 
> I have just uploaded the archives for a new luatex release, 0.78.0.
> This release merges some experimental branches, and fixes a few of the 
> outstanding bugs.

Thanks Taco and the team!

> * Instead of using expanded fonts, just calculate the expanded
>    width of glyphs where needed, and carry expand info in the
>    glyph nodes (all based on Hans' suggestions). All font expansion
>    functions are disabled and most are removed.

Nice: now glyphs in expanded lines still have their original ?font?
field.

If I?m not mistaken, the width of and expanded glyph (or kern) is:

    n.width + n.width * n.expansion_factor/1,000,000

Is that correct?

[Note that ?expansion_factor? is mentionned but not documented for
kerns.]

> * New, faster (but limited) direct node access from lua, see
>    the manual for details

>From what I can understand from the manual, ?node.getnext(n)? is
faster than ?node.next(n)? which is faster than ?n.next?; but faster
still is ?node.direct.getnext(node.direct.todirect(n))?; is that
correct?

[The ?todirect? function is said to exist in both ?node? and
?node.direct?, but it is only in the latter.]


Finally, when I tried to run the new LuaTeX with old formats, I got a
?segmentation fault? rather than a ?fatal format error?.

Happy new year to all,
Paul


From pragma at wxs.nl  Thu Jan  2 19:06:54 2014
From: pragma at wxs.nl (Hans Hagen)
Date: Thu, 2 Jan 2014 19:06:54 +0100
Subject: [luatex] [Dev-luatex] Luatex 0.78.0 announcement
In-Reply-To: <20140102095827.54528A610F@smtp3-g21.free.fr>
References: <52C2EC21.9070102@bittext.nl>
 <20140102095827.54528A610F@smtp3-g21.free.fr>
Message-ID: <52C5AABE.4060305@wxs.nl>

On 1/2/2014 10:58 AM, Paul Isambert wrote:
> Taco Hoekwater <taco at bittext.nl> a ?crit:
>> Hi,
>>
>> I have just uploaded the archives for a new luatex release, 0.78.0.
>> This release merges some experimental branches, and fixes a few of the
>> outstanding bugs.
>
> Thanks Taco and the team!
>
>> * Instead of using expanded fonts, just calculate the expanded
>>     width of glyphs where needed, and carry expand info in the
>>     glyph nodes (all based on Hans' suggestions). All font expansion
>>     functions are disabled and most are removed.
>
> Nice: now glyphs in expanded lines still have their original ?font?
> field.
>
> If I?m not mistaken, the width of and expanded glyph (or kern) is:
>
>      n.width + n.width * n.expansion_factor/1,000,000
>
> Is that correct?
>
> [Note that ?expansion_factor? is mentionned but not documented for
> kerns.]

because expanded kerns might disappear (makes no sense to expand kerns) 
or become optional

>> * New, faster (but limited) direct node access from lua, see
>>     the manual for details
>
>>From what I can understand from the manual, ?node.getnext(n)? is
> faster than ?node.next(n)? which is faster than ?n.next?; but faster
> still is ?node.direct.getnext(node.direct.todirect(n))?; is that
> correct?
>
> [The ?todirect? function is said to exist in both ?node? and
> ?node.direct?, but it is only in the latter.]

yes, but only faster in extreme cases (it's also a trade of between 
readability n.next and speed node.direct.getnext(n))

Hans


-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From mailing_list at arcor.de  Fri Jan  3 18:07:25 2014
From: mailing_list at arcor.de (Stephan Hennig)
Date: Fri, 3 Jan 2014 18:07:25 +0100
Subject: [luatex] information about ligatures
In-Reply-To: <20131231083713.ADCDB82290@smtp6-g21.free.fr>
References: <52C1D1F7.6020009@arcor.de>
 <20131231083713.ADCDB82290@smtp6-g21.free.fr>
Message-ID: <52C6EE4D.1090709@arcor.de>

Am 31.12.2013 09:37, schrieb Paul Isambert:
> Stephan Hennig <mailing_list at arcor.de> a ?crit:
> 
> Ligatures are char nodes (id 37) with special subtype 2, and they have
> a ?components? field which is a nodelist containing the ligature?s
> components.

I have already read about subtype 2 and the components field, but have
never seen a glyph node of that subtype in pre_linebreak_filter.
Instead, I can see glyph nodes of subtype 256 corresponding to standard
Unicode ligatures, e.g., 0xfb02 (?).  That is, bit 8 is set in subtype,
which I can't find any documentation about.  For that reason, I have
never checked the 'components' field, but it is indeed there.  Thanks!

Attached is a tiny node list printer.  It hooks into
pre_linebreak_filter and prints the type and subtype of each node in a
list and some more information for glyph and disc nodes on the next
line.  Here's the beginning of the node list corresponding to the word
'flavour':

> [node] glyph        subtype: 256 next: t prev: t
> [node] +char: ? 0XFB02   components: t left:  2 right:  3 lang:   0 font:  16
> [node]   glyph        subtype:   0 next: t prev: n
> [node]   +char: f 0X66     components: n left:  2 right:  3 lang:   0 font:  16
> [node]   glyph        subtype:   0 next: n prev: t
> [node]   +char: l 0X6C     components: n left:  2 right:  3 lang:   0 font:  16
> [node] glyph        subtype: 256 next: t prev: t
> [node] +char: a 0X61     components: n left:  2 right:  3 lang:   0 font:  16
> [node] kern         subtype:   1 next: t prev: t

In fact, all top-level glyph nodes seem to be of subtype 256 in
pre_linebreak_filter.  What does that mean?  (You can find the full node
list corresponding to TeX input 'flavour specific office trick' at the
end of this mail.  With a proper font, the ck ligature is also present
there.)

Can somebody please provide TeX input that results in a glyph node with
bit 1 of subtype set?


> Note that you should also consider discretionary nodes; and
> ?pre_linebreak_filter? will not catch ligatures in boxes (use
> ?hpack_filter? for that).

Yeah, I am aware of that.

Happy new year!
Stephan Hennig


> This is LuaTeX, Version beta-0.76.0-2013120414 (rev 4627)  (format=lualatex 2013.12.11)  3 JAN 2014 18:05
> [...]
> [node] whatsit      subtype:   6 next: t prev: t
> [node] hlist        subtype:   3 next: t prev: t
> [node] glyph        subtype: 256 next: t prev: t
> [node] +char: ? 0XFB02   components: t lang:   0 font:  16
> [node]   glyph        subtype:   0 next: t prev: n
> [node]   +char: f 0X66     components: n lang:   0 font:  16
> [node]   glyph        subtype:   0 next: n prev: t
> [node]   +char: l 0X6C     components: n lang:   0 font:  16
> [node] glyph        subtype: 256 next: t prev: t
> [node] +char: a 0X61     components: n lang:   0 font:  16
> [node] kern         subtype:   1 next: t prev: t
> [node] glyph        subtype: 256 next: t prev: t
> [node] +char: v 0X76     components: n lang:   0 font:  16
> [node] kern         subtype:   1 next: t prev: t
> [node] glyph        subtype: 256 next: t prev: t
> [node] +char: o 0X6F     components: n lang:   0 font:  16
> [node] glyph        subtype: 256 next: t prev: t
> [node] +char: u 0X75     components: n lang:   0 font:  16
> [node] glyph        subtype: 256 next: t prev: t
> [node] +char: r 0X72     components: n lang:   0 font:  16
> [node] glue         subtype:   0 next: t prev: t
> [node] glyph        subtype: 256 next: t prev: t
> [node] +char: s 0X73     components: n lang:   0 font:  16
> [node] glyph        subtype: 256 next: t prev: t
> [node] +char: p 0X70     components: n lang:   0 font:  16
> [node] kern         subtype:   1 next: t prev: t
> [node] glyph        subtype: 256 next: t prev: t
> [node] +char: e 0X65     components: n lang:   0 font:  16
> [node] disc         subtype:   3 next: t prev: t
> [node] +pre
> [node]   glyph        subtype:   0 next: n prev: t
> [node]   +char: - 0X2D     components: n lang:   0 font:  16
> [node] +post
> [node] +replace
> [node] glyph        subtype: 256 next: t prev: t
> [node] +char: c 0X63     components: n lang:   0 font:  16
> [node] glyph        subtype: 256 next: t prev: t
> [node] +char: i 0X69     components: n lang:   0 font:  16
> [node] glyph        subtype: 256 next: t prev: t
> [node] +char: ? 0XFB01   components: t lang:   0 font:  16
> [node]   glyph        subtype:   0 next: t prev: n
> [node]   +char: f 0X66     components: n lang:   0 font:  16
> [node]   glyph        subtype:   0 next: n prev: t
> [node]   +char: i 0X69     components: n lang:   0 font:  16
> [node] glyph        subtype: 256 next: t prev: t
> [node] +char: c 0X63     components: n lang:   0 font:  16
> [node] glue         subtype:   0 next: t prev: t
> [node] glyph        subtype: 256 next: t prev: t
> [node] +char: o 0X6F     components: n lang:   0 font:  16
> [node] glyph        subtype: 256 next: t prev: t
> [node] +char: ? 0XFB03   components: t lang:   0 font:  16
> [node]   glyph        subtype:   0 next: t prev: n
> [node]   +char: ? 0XFB00   components: t lang:   0 font:  16
> [node]     glyph        subtype:   0 next: t prev: n
> [node]     +char: f 0X66     components: n lang:   0 font:  16
> [node]     disc         subtype:   3 next: t prev: t
> [node]     +pre
> [node]       glyph        subtype:   0 next: n prev: t
> [node]       +char: - 0X2D     components: n lang:   0 font:  16
> [node]     +post
> [node]     +replace
> [node]     glyph        subtype:   0 next: n prev: t
> [node]     +char: f 0X66     components: n lang:   0 font:  16
> [node]   glyph        subtype:   0 next: n prev: t
> [node]   +char: i 0X69     components: n lang:   0 font:  16
> [node] glyph        subtype: 256 next: t prev: t
> [node] +char: c 0X63     components: n lang:   0 font:  16
> [node] glyph        subtype: 256 next: t prev: t
> [node] +char: e 0X65     components: n lang:   0 font:  16
> [node] glue         subtype:   0 next: t prev: t
> [node] glyph        subtype: 256 next: t prev: t
> [node] +char: t 0X74     components: n lang:   0 font:  16
> [node] glyph        subtype: 256 next: t prev: t
> [node] +char: r 0X72     components: n lang:   0 font:  16
> [node] glyph        subtype: 256 next: t prev: t
> [node] +char: i 0X69     components: n lang:   0 font:  16
> [node] glyph        subtype: 256 next: t prev: t
> [node] +char: c 0X63     components: n lang:   0 font:  16
> [node] kern         subtype:   1 next: t prev: t
> [node] glyph        subtype: 256 next: t prev: t
> [node] +char: k 0X6B     components: n lang:   0 font:  16
> [node] penalty      subtype:   0 next: t prev: t
> [node] glue         subtype:  15 next: n prev: t
-------------- next part --------------
local unicode = require('unicode')

local Nid = node.id
local Ntraverse = node.traverse
local Ntype = node.type
local Sformat = string.format
local Srep = string.rep
local Uchar = unicode.utf8.char

local M = {}

local err, warn, info, log = luatexbase.errwarinf('print_node')

-- Table of functions printing detailed node information.
local print_node_details
-- A string one can grep for in the log file.
local grep_prefix = '[node] '

local function print_node_list(head, indent)
   local grep_indent = grep_prefix .. Srep(' ', indent)
   -- Traverse node list.
   for n in Ntraverse(head) do
      -- Print general node information.
      texio.write(Sformat('%s%-12s subtype: %3d next: %1s prev: %1s\n', grep_indent, Ntype(n.id), n.subtype, n.next and 't' or 'n', n.prev and 't' or 'n'))
      -- Print detailed node information.
      if print_node_details[n.id] then print_node_details[n.id](n, indent) end
   end
end

print_node_details = {

   [Nid('glyph')] = function(n, indent)
      local grep_indent = grep_prefix .. Srep(' ', indent)
      texio.write(Sformat('%s+char: %s %#-8X components: %1s lang: %3d font: %3d\n', grep_indent, Uchar(n.char), n.char, n.components and 't' or 'n', n.lang, n.font))
      -- Ligature components?
      if n.components then print_node_list(n.components, indent+2) end
   end,

   [Nid('disc')] = function(n, indent)
      local grep_indent = grep_prefix .. Srep(' ', indent)
      texio.write(Sformat('%s+pre\n', grep_indent))
      print_node_list(n.pre, indent+2)
      texio.write(Sformat('%s+post\n', grep_indent))
      print_node_list(n.post, indent+2)
      texio.write(Sformat('%s+replace\n', grep_indent))
      print_node_list(n.replace, indent+2)
   end,

}

local function __cb_pre_linebreak_filter(head, groupcode)
   print_node_list(head, 0)
   return true
end

local function register_filter()
   luatexbase.add_to_callback('pre_linebreak_filter', __cb_pre_linebreak_filter, 'print_node')
end
M.register_filter = register_filter

return M
-------------- next part --------------
\listfiles
\RequirePackage{luatexbase-mcb}
\documentclass{article}
\usepackage{fontspec}
%\setmainfont{Unifraktur Maguntia}
% available at http://www.google.com/fonts
\directlua{
  local pn = require('print_node')
  pn.register_filter()
}
\begin{document}
flavour
specific
office
trick
\end{document}

From zappathustra at free.fr  Sun Jan  5 16:40:44 2014
From: zappathustra at free.fr (Paul Isambert)
Date: Sun, 5 Jan 2014 16:40:44 +0100
Subject: [luatex] information about ligatures
In-Reply-To: <52C6EE4D.1090709@arcor.de>
References: <52C1D1F7.6020009@arcor.de>
 <20131231083713.ADCDB82290@smtp6-g21.free.fr> <52C6EE4D.1090709@arcor.de>
Message-ID: <20140105154045.44C8F8224F@smtp6-g21.free.fr>

Stephan Hennig <mailing_list at arcor.de> a ?crit:
> Am 31.12.2013 09:37, schrieb Paul Isambert:
> > Stephan Hennig <mailing_list at arcor.de> a ?crit:
> > 
> > Ligatures are char nodes (id 37) with special subtype 2, and they have
> > a ?components? field which is a nodelist containing the ligature?s
> > components.
> 
> I have already read about subtype 2 and the components field, but have
> never seen a glyph node of that subtype in pre_linebreak_filter.
> Instead, I can see glyph nodes of subtype 256 corresponding to standard
> Unicode ligatures, e.g., 0xfb02 (?).  That is, bit 8 is set in subtype,
> which I can't find any documentation about.  For that reason, I have
> never checked the 'components' field, but it is indeed there.  Thanks!

[...]

> In fact, all top-level glyph nodes seem to be of subtype 256 in
> pre_linebreak_filter.  What does that mean?  (You can find the full node
> list corresponding to TeX input 'flavour specific office trick' at the
> end of this mail.  With a proper font, the ck ligature is also present
> there.)
> 
> Can somebody please provide TeX input that results in a glyph node with
> bit 1 of subtype set?

My two cents is that you?re using luaotfload and that luaotfload sets
?subtype? to 256 for some reason; you?ll see ligatures with proper
subtype 2 if you let TeX do its job with fonts (so use TFM, obviously).
E.g. this in plain TeX:

    \setbox0=\hbox{fi}
    \directlua{%
      texio.write_nl("This ligature has subtype " .. tex.box[0].head.subtype)
    }
    \bye

It should print ?This ligature has subtype 2?.

Why luaotfload sets ?subtype? to 256 ? if that is indeed the case ?, I
really don?t know.

Best,
Paul


From philipp.gesang at alumni.uni-heidelberg.de  Sun Jan  5 19:03:37 2014
From: philipp.gesang at alumni.uni-heidelberg.de (Philipp Gesang)
Date: Sun, 5 Jan 2014 19:03:37 +0100
Subject: [luatex] information about ligatures
In-Reply-To: <20140105154045.44C8F8224F@smtp6-g21.free.fr>
References: <52C1D1F7.6020009@arcor.de>
 <20131231083713.ADCDB82290@smtp6-g21.free.fr>
 <52C6EE4D.1090709@arcor.de>
 <20140105154045.44C8F8224F@smtp6-g21.free.fr>
Message-ID: <20140105180337.GB19715@phlegethon>

???<date: 2014-01-05, Sunday>???<from: Paul Isambert>???

> Stephan Hennig <mailing_list at arcor.de> a ?crit:
> > Am 31.12.2013 09:37, schrieb Paul Isambert:
> > > Stephan Hennig <mailing_list at arcor.de> a ?crit:
> > > 
> > > Ligatures are char nodes (id 37) with special subtype 2, and they have
> > > a ?components? field which is a nodelist containing the ligature?s
> > > components.
> > 
> > I have already read about subtype 2 and the components field, but have
> > never seen a glyph node of that subtype in pre_linebreak_filter.
> > Instead, I can see glyph nodes of subtype 256 corresponding to standard
> > Unicode ligatures, e.g., 0xfb02 (?).  That is, bit 8 is set in subtype,
> > which I can't find any documentation about.  For that reason, I have
> > never checked the 'components' field, but it is indeed there.  Thanks!
> 
> [...]
> 
> > In fact, all top-level glyph nodes seem to be of subtype 256 in
> > pre_linebreak_filter.  What does that mean?  (You can find the full node
> > list corresponding to TeX input 'flavour specific office trick' at the
> > end of this mail.  With a proper font, the ck ligature is also present
> > there.)
> > 
> > Can somebody please provide TeX input that results in a glyph node with
> > bit 1 of subtype set?
> 
> My two cents is that you?re using luaotfload and that luaotfload sets
> ?subtype? to 256 for some reason; you?ll see ligatures with proper
> subtype 2 if you let TeX do its job with fonts (so use TFM, obviously).
> E.g. this in plain TeX:
> 
>     \setbox0=\hbox{fi}
>     \directlua{%
>       texio.write_nl("This ligature has subtype " .. tex.box[0].head.subtype)
>     }
>     \bye
> 
> It should print ?This ligature has subtype 2?.
> 
> Why luaotfload sets ?subtype? to 256 ? if that is indeed the case ?, I
> really don?t know.

It depends on whether the ?liga? feature is active and whether
you use base mode or node mode. E.g. in Context:

    \def \showligasubtype{%
      \fontname\font
      \setbox0=\hbox{fi}
      \startluacode
        context("This ligature has subtype " .. tex.box[0].head.subtype)
      \stopluacode
    }
    
    \definefontfeature [basemode]     [mode=base,liga=no]
    \definefontfeature [basemodeliga] [mode=base,liga=yes]
    \definefontfeature [nodemode]     [mode=node,liga=no]
    \definefontfeature [nodemodeliga] [mode=node,liga=yes]
    
    \starttext
      {\definedfont[file:lmroman10-regular.otf*basemode]\showligasubtype\endgraf}
      {\definedfont[file:lmroman10-regular.otf*basemodeliga]\showligasubtype\endgraf}
      {\definedfont[file:lmroman10-regular.otf*nodemode]\showligasubtype\endgraf}
      {\definedfont[file:lmroman10-regular.otf*nodemodeliga]\showligasubtype\endgraf}
    \stoptext
    
The values are:

      mode | liga
           |  -     +
      -----+--------
      base | 256     2
      node | 256   258

(Note that (node, +liga) = (base, +liga) + 256.) Outside Context
it depends on how you use the fontloader. E.g.:

    \ifdefined \luatexsuppresslongerror
      \input luaotfload.sty
    \fi
    \font \mainbase     = file:lmroman10-regular.otf:mode=base;-liga
    \font \mainbaseliga = file:lmroman10-regular.otf:mode=base;+liga
    \font \mainnode     = file:lmroman10-regular.otf:mode=node;-liga
    \font \mainnodeliga = file:lmroman10-regular.otf:mode=node;+liga
    
    \def \showligasubtype{%
      \fontname\font
      \setbox0=\hbox{fi}
      \directlua{
        tex.sprint("[", font.getfont(font.current()).properties.mode, "]")
        tex.sprint("This ligature has subtype " .. tex.box[0].head.subtype)
      }
    }
    
    {\mainbase     \showligasubtype \endgraf}
    {\mainbaseliga \showligasubtype \endgraf}
    {\mainnode     \showligasubtype \endgraf}
    {\mainnodeliga \showligasubtype \endgraf}
    
    \bye

Run this with the bare fontloader, you get

      mode | liga
           |  -     +
      -----+--------
      base | 256     2
      node | 256   256

With luaotfload, however, it?s

      mode | liga
           |  -     +
      -----+--------
      base | 256   258
      node | 256   256

Values >= 256 are due to the node processor calling
node.protect_glyphs() on the node list. (Grep the fontloader for
?protectglyphs?, Hans doesn?t like underscores.) I?m  not exactly
sure as to why Luaotfload differs from the bare fontloader, but
it?s likely due to some features being active by default.

Best regards,
Philipp

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 490 bytes
Desc: not available
URL: <http://tug.org/pipermail/luatex/attachments/20140105/a7523cae/attachment.bin>

From mailing_list at arcor.de  Mon Jan  6 18:13:52 2014
From: mailing_list at arcor.de (Stephan Hennig)
Date: Mon, 6 Jan 2014 18:13:52 +0100
Subject: [luatex] information about ligatures
In-Reply-To: <20140105180337.GB19715@phlegethon>
References: <52C1D1F7.6020009@arcor.de>
 <20131231083713.ADCDB82290@smtp6-g21.free.fr> <52C6EE4D.1090709@arcor.de>
 <20140105154045.44C8F8224F@smtp6-g21.free.fr>
 <20140105180337.GB19715@phlegethon>
Message-ID: <52CAE450.7080500@arcor.de>

Am 05.01.2014 19:03, schrieb Philipp Gesang:
> 
> It depends on whether the ?liga? feature is active and whether
> you use base mode or node mode.

Well, let me add a related question.  To quote from the luaotfload manual:

> node mode works by processing TeX's internal node list directly at
> the Lua end

What callback does luaotfload use for the processing?  And what is the
way to go for packages fighting for a callback?  If callbacks are "just
chained", how can I be sure that luaotfload has already done its
processing before my package?


> E.g. in Context: [...] The values are:
> 
>       mode | liga
>            |  -     +
>       -----+--------
>       base | 256     2
>       node | 256   258
> 
> Run this with the bare fontloader, you get
> 
>       mode | liga
>            |  -     +
>       -----+--------
>       base | 256     2
>       node | 256   256
> 
> With luaotfload, however, it?s
> 
>       mode | liga
>            |  -     +
>       -----+--------
>       base | 256   258
>       node | 256   256

OK, what does that teach me?  I think I'll just look at (and follow) the
components field to parse ligatures and hope for the best ...

Best regards,
Stephan Hennig


From mailing_list at arcor.de  Mon Jan  6 18:14:15 2014
From: mailing_list at arcor.de (Stephan Hennig)
Date: Mon, 6 Jan 2014 18:14:15 +0100
Subject: [luatex] information about ligatures
In-Reply-To: <20140105154045.44C8F8224F@smtp6-g21.free.fr>
References: <52C1D1F7.6020009@arcor.de>
 <20131231083713.ADCDB82290@smtp6-g21.free.fr> <52C6EE4D.1090709@arcor.de>
 <20140105154045.44C8F8224F@smtp6-g21.free.fr>
Message-ID: <52CAE467.7090403@arcor.de>

Am 05.01.2014 16:40, schrieb Paul Isambert:
> Stephan Hennig <mailing_list at arcor.de> a ?crit:
>> 
>> Can somebody please provide TeX input that results in a glyph node with
>> bit 1 of subtype set?
> 
> My two cents is that you?re using luaotfload and that luaotfload sets
> ?subtype? to 256 for some reason; you?ll see ligatures with proper
> subtype 2 if you let TeX do its job with fonts (so use TFM, obviously).
> E.g. this in plain TeX:
> 
>     \setbox0=\hbox{fi}
>     \directlua{%
>       texio.write_nl("This ligature has subtype " .. tex.box[0].head.subtype)
>     }
>     \bye
> 
> It should print ?This ligature has subtype 2?.

Thanks!  Yes, current target is LuaLaTeX with luaotfload.  But
preferably it should also work with TFM fonts.

Best regards,
Stephan Hennig

From phg at phi-gamma.net  Mon Jan  6 20:10:59 2014
From: phg at phi-gamma.net (Philipp Gesang)
Date: Mon, 6 Jan 2014 20:10:59 +0100
Subject: [luatex] information about ligatures
In-Reply-To: <52CAE450.7080500@arcor.de>
References: <52C1D1F7.6020009@arcor.de>
 <20131231083713.ADCDB82290@smtp6-g21.free.fr>
 <52C6EE4D.1090709@arcor.de>
 <20140105154045.44C8F8224F@smtp6-g21.free.fr>
 <20140105180337.GB19715@phlegethon> <52CAE450.7080500@arcor.de>
Message-ID: <20140106191059.GA3219@phlegethon>

???<date: 2014-01-06, Monday>???<from: Stephan Hennig>???

> Am 05.01.2014 19:03, schrieb Philipp Gesang:
> > 
> > It depends on whether the ?liga? feature is active and whether
> > you use base mode or node mode.
> 
> Well, let me add a related question.  To quote from the luaotfload manual:
> 
> > node mode works by processing TeX's internal node list directly at
> > the Lua end
> 
> What callback does luaotfload use for the processing?

The font handler is applied to both the pre_linebreak_filter and
the hpack_filter.

https://github.com/phi-gamma/luaotfload/blob/texlive2014/luaotfload.dtx#L1919

>                                                        And what is the
> way to go for packages fighting for a callback?

luatexbase.add_to_callback() without priority (append).

>                                                  If callbacks are "just
> chained", how can I be sure that luaotfload has already done its
> processing before my package?

Luaotfload inserts the callbacks into the chain at highest
priority. As long as you do not specify a priority, you should be
fine.

> > E.g. in Context: [...] The values are:
> > 
> >       mode | liga
> >            |  -     +
> >       -----+--------
> >       base | 256     2
> >       node | 256   258
> > 
> > Run this with the bare fontloader, you get
> > 
> >       mode | liga
> >            |  -     +
> >       -----+--------
> >       base | 256     2
> >       node | 256   256
> > 
> > With luaotfload, however, it?s
> > 
> >       mode | liga
> >            |  -     +
> >       -----+--------
> >       base | 256   258
> >       node | 256   256
> 
> OK, what does that teach me?

That you should be able to call the inverse operation
(node.unprotect_glyphs()) on the node list to restore the
original values.

>                               I think I'll just look at (and follow) the
> components field to parse ligatures and hope for the best ...

I came up with this heuristic:
http://tex.stackexchange.com/a/120529/14066

Best,
Philipp


-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 490 bytes
Desc: not available
URL: <http://tug.org/pipermail/luatex/attachments/20140106/a63ad497/attachment.bin>

From mailing_list at arcor.de  Thu Jan  9 18:49:36 2014
From: mailing_list at arcor.de (Stephan Hennig)
Date: Thu, 9 Jan 2014 18:49:36 +0100
Subject: [luatex] information about ligatures
In-Reply-To: <20140106191059.GA3219@phlegethon>
References: <52C1D1F7.6020009@arcor.de>
 <20131231083713.ADCDB82290@smtp6-g21.free.fr> <52C6EE4D.1090709@arcor.de>
 <20140105154045.44C8F8224F@smtp6-g21.free.fr>
 <20140105180337.GB19715@phlegethon> <52CAE450.7080500@arcor.de>
 <20140106191059.GA3219@phlegethon>
Message-ID: <52CEE130.30601@arcor.de>

Am 06.01.2014 20:10, schrieb Philipp Gesang:
> ???<date: 2014-01-06, Monday>???<from: Stephan Hennig>???
>> 
>> What callback does luaotfload use for the processing?
> 
> The font handler is applied to both the pre_linebreak_filter and
> the hpack_filter.

Interesting.  I'd have expected luaotfload being active earlier on, like
in the ligaturing and kerning callbacks.  Why is luaotfload active only
that late?


>> And what is the way to go for packages fighting for a callback?
> 
> luatexbase.add_to_callback() without priority (append).
> 
>> If callbacks are "just chained", how can I be sure that luaotfload
>> has already done its processing before my package?
> 
> Luaotfload inserts the callbacks into the chain at highest priority.
> As long as you do not specify a priority, you should be fine.

Thanks!  (Somehow I have the feeling that I've had asked the same
question already before. :)


>> >       mode | liga
>> >            |  -     +
>> >       -----+--------
>> >       base | 256   258
>> >       node | 256   256
>> 
>> OK, what does that teach me?
> 
> That you should be able to call the inverse operation
> (node.unprotect_glyphs()) on the node list to restore the
> original values.

Didn't got that.


>> I think I'll just look at (and follow) the components field to
>> parse ligatures and hope for the best ...
> 
> I came up with this heuristic:
> http://tex.stackexchange.com/a/120529/14066

Yes, I'm already doing something similar.  For the time being it works.
 Will reconsider node.unprotect_glyphs() in stormy weather.

Best regards,
Stephan Hennig


From mailing_list at arcor.de  Thu Jan  9 19:10:21 2014
From: mailing_list at arcor.de (Stephan Hennig)
Date: Thu, 9 Jan 2014 19:10:21 +0100
Subject: [luatex] concerning lccodes
Message-ID: <52CEE60D.1000604@arcor.de>

Hi,

sorry, this a plain TeX question (didn't read the interesting chapters
of the TeXbook).  Are lccodes language dependent?  I can only see a
single table tex.lccode in LuaTeX.

What I want is to get the lccode of characters from glyph nodes, which
might be of various languages.  I'm currently doing something like

  lc = tex.getlccode(n.char)

but shouldn't n.lang be taken into account in the conversion?

And BTW, what information is provided in field uchyph in glyph nodes?

Best regards,
Stephan Hennig

From patrick at gundla.ch  Thu Jan  9 20:28:06 2014
From: patrick at gundla.ch (Patrick Gundlach)
Date: Thu, 9 Jan 2014 20:28:06 +0100
Subject: [luatex] concerning lccodes
In-Reply-To: <52CEE60D.1000604@arcor.de>
References: <52CEE60D.1000604@arcor.de>
Message-ID: <AE370CBE-3260-4586-81A5-52EBFED938A4@gundla.ch>


> sorry, this a plain TeX question (didn't read the interesting chapters
> of the TeXbook).  Are lccodes language dependent?  I can only see a
> single table tex.lccode in LuaTeX.

I can't give you an authoritative answer, but no, the lccodes are not language dependent.


> What I want is to get the lccode of characters from glyph nodes, which
> might be of various languages.  I'm currently doing something like
> 
>  lc = tex.getlccode(n.char)
> 
> but shouldn't n.lang be taken into account in the conversion?

IMO it should.


> And BTW, what information is provided in field uchyph in glyph nodes?


from the TeX book:

If the starting letter is not lowercase (i.e., if it doesn?t equal its own \lccode), hyphenation is abandoned unless \uchyph is positive.


>From LuaTeX's manual:

Because the \uchyph value is saved in the actual nodes, its handling is subtly different from TEX82: changes to \uchyph become effective immediately, not at the end of the current partial paragraph.


I don't know if uchyph must be true within the whole word or just the upper case character at the beginning.

Patrick



From mailing_list at arcor.de  Thu Jan  9 20:59:55 2014
From: mailing_list at arcor.de (Stephan Hennig)
Date: Thu, 9 Jan 2014 20:59:55 +0100
Subject: [luatex] concerning lccodes
In-Reply-To: <AE370CBE-3260-4586-81A5-52EBFED938A4@gundla.ch>
References: <52CEE60D.1000604@arcor.de>
 <AE370CBE-3260-4586-81A5-52EBFED938A4@gundla.ch>
Message-ID: <52CEFFBB.4090707@arcor.de>

Am 09.01.2014 20:28, schrieb Patrick Gundlach:

>> And BTW, what information is provided in field uchyph in glyph
>> nodes?
> 
> 
> from the TeX book:
> 
> If the starting letter is not lowercase (i.e., if it doesn?t equal
> its own \lccode), hyphenation is abandoned unless \uchyph is
> positive.

OK, thanks!  Will refer to the TeXbook for further information.


> I don't know if uchyph must be true within the whole word or just the
> upper case character at the beginning.

Which makes me wonder, what LuaTeX considers a word (with regards to
hyphenation)?  A sequence of letter class glyph nodes of the same
language, optionally intersected by kern, penalty or discretionary
nodes, except ... ?

Best regards,
Stephan Hennig


From mailing_list at arcor.de  Fri Jan 10 00:54:27 2014
From: mailing_list at arcor.de (Stephan Hennig)
Date: Fri, 10 Jan 2014 00:54:27 +0100
Subject: [luatex] concerning lccodes
In-Reply-To: <52CEFFBB.4090707@arcor.de>
References: <52CEE60D.1000604@arcor.de>
 <AE370CBE-3260-4586-81A5-52EBFED938A4@gundla.ch> <52CEFFBB.4090707@arcor.de>
Message-ID: <52CF36B3.1020208@arcor.de>

Am 09.01.2014 20:59, schrieb Stephan Hennig:
> Am 09.01.2014 20:28, schrieb Patrick Gundlach:
> 
>> from the TeX book:
>> 
>> If the starting letter is not lowercase (i.e., if it doesn?t equal
>> its own \lccode), hyphenation is abandoned unless \uchyph is
>> positive.
> 
> OK, thanks!  Will refer to the TeXbook for further information.
> 
> 
>> I don't know if uchyph must be true within the whole word or just the
>> upper case character at the beginning.
> 
> Which makes me wonder, what LuaTeX considers a word (with regards to
> hyphenation)?  A sequence of letter class glyph nodes of the same
> language, optionally intersected by kern, penalty or discretionary
> nodes, except ... ?

Have found the answer in the same paragraph.

Best regards,
Stephan Hennig


From zappathustra at free.fr  Fri Jan 10 08:41:42 2014
From: zappathustra at free.fr (Paul Isambert)
Date: Fri, 10 Jan 2014 08:41:42 +0100
Subject: [luatex] concerning lccodes
In-Reply-To: <AE370CBE-3260-4586-81A5-52EBFED938A4@gundla.ch>
References: <52CEE60D.1000604@arcor.de>
 <AE370CBE-3260-4586-81A5-52EBFED938A4@gundla.ch>
Message-ID: <20140110074143.F2C1C4B00E8@smtp2-g21.free.fr>

> I don't know if uchyph must be true within the whole word or just the upper case character at the beginning.

I wanted to test that, but it seems there?s a bug and \uchyph isn?t obeyed
anyway:

    \uchyph=0
    \showhyphens{Declaration}% Shows Dec-la-ra-tion
    \bye

Some investigation shows that the ?uchyph? field of the char nodes is
properly set, but ineffective.

So that?s for the bug tracker.

Best,
Paul


From bernd at dante.de  Fri Jan 10 11:45:10 2014
From: bernd at dante.de (Bernd Raichle)
Date: Fri, 10 Jan 2014 11:45:10 +0100
Subject: [luatex] concerning lccodes
In-Reply-To: <AE370CBE-3260-4586-81A5-52EBFED938A4@gundla.ch>
References: <52CEE60D.1000604@arcor.de>
 <AE370CBE-3260-4586-81A5-52EBFED938A4@gundla.ch>
Message-ID: <21199.53046.217603.954794@comedy.dante.de>

On Thursday, 9 January 2014 20:28:06 +0100,
Patrick Gundlach <patrick at gundla.ch> writes:
 > 
 > > sorry, this a plain TeX question (didn't read the interesting
 > > chapters of the TeXbook).  Are lccodes language dependent?  I can
 > > only see a single table tex.lccode in LuaTeX.
 > 
 > I can't give you an authoritative answer, but no, the lccodes are
 > not language dependent.

This is true for Knuthian TeX (described in the TeXbook).

Starting with v2 e-TeX has the feature that the \lccode values used
when reading the hyphenation patterns are stored in the internal
hyphenation pattern trie if \savinghyphcodes is > 0 and these values
are used for hyphenation.



\begin{note}

It was IMHo not the best design decision in TeX to intermix the
lowercasing and uppercasing functionality based on the token character
code level with the hyphenation glyph code equivalent class
functionality on the node glyph code level ... because this intermixes
character codes with glyph codes, i.e., it makes life easier if both
coding schemes are more or less the same, i.e., input encoding and
font encoding are more or less the same in TeX.  It was reasonable at
the time of TeX(82)'s birth.

For e-TeX the design decision to extend this lccode functionality is
also ok, because e-TeX only adds small things to TeX and keeps
compatibility.

For LuaTeX it will be better to distinguish between the two worlds of
lowercasing/uppercasing entity codes and hyphenation entity codes.


(And for compatibility, just add some defaults to link between
the "old" \lccode<n>+\uchyph dependency to the newly introduced things.)

\end{note}


 > > What I want is to get the lccode of characters from glyph nodes,
 > > which might be of various languages.  I'm currently doing
 > > something like
 > > 
 > >  lc = tex.getlccode(n.char)
 > > 
 > > but shouldn't n.lang be taken into account in the conversion?
 > 
 > IMO it should.

Yes!  (atleast similar to the e-TeX functionality)


[...]


Bernd
(in the old days I was a member of the e-TeX team ;-)

From taco at elvenkind.com  Mon Jan 13 14:36:56 2014
From: taco at elvenkind.com (Taco Hoekwater)
Date: Mon, 13 Jan 2014 14:36:56 +0100
Subject: [luatex] Luatex 0.78.2 announcement
Message-ID: <52D3EBF8.8030002@elvenkind.com>

Hi,

I have just uploaded the archives for a new luatex release, 0.78.2.
This release merges some experimental branches, and fixes a few of the 
outstanding bugs.

Changes:

* Extended lua fontloader's info() function to include data
   from the 'pfminfo' and 'names' structure.

* Removed a recent extension in the lua fontloader library that
   made loading fonts with lots of glyphs slow (ArialUnicoce.ttf).
   Note: the extension made sure that there were no duplicate
   glyph names in the font after loading.

* Restored --recorder output for lua files (dofile/loadfile/io.open)

* One-at-a-time pattern adding from lua used to require enormous
   amounts of memory

* luatex's fontloader.to_table() no longer reports 'altuni' table
   information for alternates that are solely driven by the font
   encoding. This fixes loading time issues for fonts that fill
   encodings by copying a single glyph many times, like e.g.
   LastResort.ttf from Apple.

* The datestamp no longer appears in any banners. The associated
   \luatexdatestamp primitive is deprecated and will be removed
   in 0.80.0.

* Synchronization with the TeXLive sources updated the following
   libraries:
   * cairo is now 1.12.16
   * pixman is now 0.32.4
   * lua is now 5.2.3
   * zlib is now 1.2.8
   * poppler is now 0.25.0

* That same TL synchronization also fixes these issues:
   * Always write "\nendstream" to the PDF for PDF/A-1b compliance.
   * Large file support (>4GB) in Lua
   * Big images could overflow on systems where sizeof(long)=4.
   * In writing CID CFF fonts to the PDF, and end_dict() was missing.
   * Unknown 'post' table versions (found in some broken ttf/otf
     fonts) are now treated as-if they specified version 3.0.
   * Fix crashes on 32-bit systems caused by bad C header inclusion
     order
   * Handle '--luac' and '--luaconly' properly
   * luatex is now released under GPLv2+, not just GPLv2.
   * luatex can now find .ofm metric files even if the extension
     is not given explicitly.

* node.unset_attribute() was broken in 0.78.0

* The UTF-8 commandline patch from 0.78.0 for Win32 was removed
   again (did not work properly)


The archives can be downloaded from supelec as usual:

         https://foundry.supelec.fr/projects/luatex/

You could also check out the sources via anonymous svn:

   svn co --username anonsvn --password anonsvn              \
       https://foundry.supelec.fr/svn/luatex/tags/beta-0.78.2

Bugs and feature requests can be added to the issue tracker at

        http://tracker.luatex.org

Have fun,

Taco

From Kornel.Benko at berlin.de  Mon Jan 13 14:48:04 2014
From: Kornel.Benko at berlin.de (Kornel Benko)
Date: Mon, 13 Jan 2014 14:48:04 +0100
Subject: [luatex] lualatex runs in an infinite loop with JASATeX +
	system fonts
In-Reply-To: <CAO7dr0gSd0cYHQUeF6Wc-0ft8RMWZbDN54HxtCnvsJd=wFZ-7Q@mail.gmail.com>
References: <CAO7dr0hu7pquCgAw+Lc6dkyi-Sf+Y2S_z0AdYDEp3SFSBE+Rwg@mail.gmail.com>
 <CAO7dr0gSd0cYHQUeF6Wc-0ft8RMWZbDN54HxtCnvsJd=wFZ-7Q@mail.gmail.com>
Message-ID: <1578296.hRNmlpCN6h@amd64>

Is really nobody there to help in this issue?

	Kornel

Am Mittwoch, 25. Dezember 2013 um 18:09:24, schrieb Scott Kostyshak <skostysh at lyx.org>
> On Wed, Dec 25, 2013 at 5:50 PM, Scott Kostyshak <skostysh at lyx.org> wrote:
> > Dear all,
> >
> > My guess is that the following behavior is not caused by a problem in
> > LuaTeX (it would be nice to have confirmation for this though), but
> > this seemed the most appropriate place to ask for advice.
> 
> Now I'm guessing (based on the observation that it happens in both
> xelatex and lualatex and only with fontspec loaded) that this is
> either a fontspec issue or a bug in the class file.
> 
> Scott
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20140113/92cb3d29/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: This is a digitally signed message part.
URL: <http://tug.org/pipermail/luatex/attachments/20140113/92cb3d29/attachment.bin>

From skostysh at lyx.org  Mon Jan 13 14:55:15 2014
From: skostysh at lyx.org (Scott Kostyshak)
Date: Mon, 13 Jan 2014 08:55:15 -0500
Subject: [luatex] lualatex runs in an infinite loop with JASATeX +
	system fonts
In-Reply-To: <1578296.hRNmlpCN6h@amd64>
References: <CAO7dr0hu7pquCgAw+Lc6dkyi-Sf+Y2S_z0AdYDEp3SFSBE+Rwg@mail.gmail.com>
 <CAO7dr0gSd0cYHQUeF6Wc-0ft8RMWZbDN54HxtCnvsJd=wFZ-7Q@mail.gmail.com>
 <1578296.hRNmlpCN6h@amd64>
Message-ID: <CAO7dr0gxpWL9VNXJEoQ-NYg89odt8PMd825AG=N8hoqsTyj4OA@mail.gmail.com>

I posted an issue on fontspec, but haven't heard back yet:
https://github.com/wspr/fontspec/issues/164

I'm still looking for confirmation that it was the correct place to report to.

Scott

On Mon, Jan 13, 2014 at 8:48 AM, Kornel Benko <Kornel.Benko at berlin.de> wrote:
> Is really nobody there to help in this issue?
>
>
>
> Kornel
>
>
>
> Am Mittwoch, 25. Dezember 2013 um 18:09:24, schrieb Scott Kostyshak
> <skostysh at lyx.org>
>
>> On Wed, Dec 25, 2013 at 5:50 PM, Scott Kostyshak <skostysh at lyx.org> wrote:
>
>> > Dear all,
>
>> >
>
>> > My guess is that the following behavior is not caused by a problem in
>
>> > LuaTeX (it would be nice to have confirmation for this though), but
>
>> > this seemed the most appropriate place to ask for advice.
>
>>
>
>> Now I'm guessing (based on the observation that it happens in both
>
>> xelatex and lualatex and only with fontspec loaded) that this is
>
>> either a fontspec issue or a bug in the class file.
>
>>
>
>> Scott

From Philipp.Gesang at alumni.uni-heidelberg.de  Mon Jan 13 15:11:43 2014
From: Philipp.Gesang at alumni.uni-heidelberg.de (Philipp Gesang)
Date: Mon, 13 Jan 2014 15:11:43 +0100
Subject: [luatex] [Dev-luatex] Luatex 0.78.2 announcement
In-Reply-To: <52D3EBF8.8030002@elvenkind.com>
References: <52D3EBF8.8030002@elvenkind.com>
Message-ID: <20140113141143.GA21572@acheron>

Hi Taco and everybody involved in the release,

after some tests with version 0.78 I am impressed at the speed
the fontloader now boasts. Even when calling fullinfo() building
the font index now takes less than half the time than with 0.76.
Thank you guys!

Btw. which version of Luatex is targeted for inclusion in Texlive
2014? The reference still expects version 1.0 in spring 2014 ...

Best regards,
Philipp


???<date: 2014-01-13, Monday>???<from: Taco Hoekwater>???

> Hi,
> 
> I have just uploaded the archives for a new luatex release, 0.78.2.
> This release merges some experimental branches, and fixes a few of the 
> outstanding bugs.
> 
> Changes:
> 
> * Extended lua fontloader's info() function to include data
>    from the 'pfminfo' and 'names' structure.
> 
> * Removed a recent extension in the lua fontloader library that
>    made loading fonts with lots of glyphs slow (ArialUnicoce.ttf).
>    Note: the extension made sure that there were no duplicate
>    glyph names in the font after loading.
> 
> * Restored --recorder output for lua files (dofile/loadfile/io.open)
> 
> * One-at-a-time pattern adding from lua used to require enormous
>    amounts of memory
> 
> * luatex's fontloader.to_table() no longer reports 'altuni' table
>    information for alternates that are solely driven by the font
>    encoding. This fixes loading time issues for fonts that fill
>    encodings by copying a single glyph many times, like e.g.
>    LastResort.ttf from Apple.
> 
> * The datestamp no longer appears in any banners. The associated
>    \luatexdatestamp primitive is deprecated and will be removed
>    in 0.80.0.
> 
> * Synchronization with the TeXLive sources updated the following
>    libraries:
>    * cairo is now 1.12.16
>    * pixman is now 0.32.4
>    * lua is now 5.2.3
>    * zlib is now 1.2.8
>    * poppler is now 0.25.0
> 
> * That same TL synchronization also fixes these issues:
>    * Always write "\nendstream" to the PDF for PDF/A-1b compliance.
>    * Large file support (>4GB) in Lua
>    * Big images could overflow on systems where sizeof(long)=4.
>    * In writing CID CFF fonts to the PDF, and end_dict() was missing.
>    * Unknown 'post' table versions (found in some broken ttf/otf
>      fonts) are now treated as-if they specified version 3.0.
>    * Fix crashes on 32-bit systems caused by bad C header inclusion
>      order
>    * Handle '--luac' and '--luaconly' properly
>    * luatex is now released under GPLv2+, not just GPLv2.
>    * luatex can now find .ofm metric files even if the extension
>      is not given explicitly.
> 
> * node.unset_attribute() was broken in 0.78.0
> 
> * The UTF-8 commandline patch from 0.78.0 for Win32 was removed
>    again (did not work properly)
> 
> 
> The archives can be downloaded from supelec as usual:
> 
>          https://foundry.supelec.fr/projects/luatex/
> 
> You could also check out the sources via anonymous svn:
> 
>    svn co --username anonsvn --password anonsvn              \
>        https://foundry.supelec.fr/svn/luatex/tags/beta-0.78.2
> 
> Bugs and feature requests can be added to the issue tracker at
> 
>         http://tracker.luatex.org
> 
> Have fun,
> 
> Taco
> _______________________________________________
> dev-luatex mailing list
> dev-luatex at ntg.nl
> http://www.ntg.nl/mailman/listinfo/dev-luatex
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 490 bytes
Desc: not available
URL: <http://tug.org/pipermail/luatex/attachments/20140113/e395cee8/attachment.bin>

From taco at elvenkind.com  Mon Jan 13 16:14:49 2014
From: taco at elvenkind.com (Taco Hoekwater)
Date: Mon, 13 Jan 2014 16:14:49 +0100
Subject: [luatex] [Dev-luatex] Luatex 0.78.2 announcement
In-Reply-To: <20140113141143.GA21572@acheron>
References: <52D3EBF8.8030002@elvenkind.com> <20140113141143.GA21572@acheron>
Message-ID: <52D402E9.9030105@elvenkind.com>


Hi,

On 01/13/2014 03:11 PM, Philipp Gesang wrote:
>
> Btw. which version of Luatex is targeted for inclusion in Texlive
> 2014? The reference still expects version 1.0 in spring 2014 ...

The reference needs updating ;)

TL2014 will have luatex 0.80, but that is a somewhat meaningless
remark since we do not quite know what will be included yet. Likely
mostly bugfixes though, and the merge of luajittex.

Best wishes,
Taco



From luigi.scarso at gmail.com  Mon Jan 13 16:52:02 2014
From: luigi.scarso at gmail.com (luigi scarso)
Date: Mon, 13 Jan 2014 16:52:02 +0100
Subject: [luatex] Luajittex 0.78.2 announcement
Message-ID: <CAG5iGsCPQRm7hLHTR89xUY=V_Jho7rfC01GgyKW9xA1Be4+bVQ@mail.gmail.com>

New release Luajittex beta-0.78.2, which  follows luatex beta-0.78.2 .

>From NEWS.luajittex:
"""
This update is brought to you by the
crited project where we need a fast luatex / context combi in order to meet
our demands.
This version is optimized for typesetting critical editions with context.
"""

Given that the current plan is to merge luatex and luajittex, it's possible
that this is last release of luajittex as a distinct  project from luatex.


-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20140113/bfc1f98c/attachment-0001.html>

From stefano.franchi at gmail.com  Mon Jan 13 18:32:49 2014
From: stefano.franchi at gmail.com (stefano franchi)
Date: Mon, 13 Jan 2014 11:32:49 -0600
Subject: [luatex] Installing luatex beta to work with lualatex?
Message-ID: <CAJODLwZLXvXQKOiKq9WKunXE5g0wBd7U+VviL3kdtP3sOD=fCg@mail.gmail.com>

Dear all,

I tried to test out the new 0.78.2 beta version of luatex but I cannot
figure out how to get it to work with lualatex. Here is what I did:

1. Downloaded and compiled the luatex executable

2. Moved the executable to the standard  TL location
(/usr/local/texlive/2013/bin/x86_64-linux/luatex) and moved the old
executable (version 0.76) to a different name

3. Rebuilt all formats with tlmgr

Now starting luatex from the shell correctly invokes version 0.78,2, but
calling lualatex still runs the old version (0.76).

Is there any other step I am supposed to take?


Cheers,

Stefano

-- 
__________________________________________________
Stefano Franchi
Associate Research Professor
Department of Hispanic Studies            Ph:   +1 (979) 845-2125
Texas A&M University                          Fax:  +1 (979) 845-6421
College Station, Texas, USA

stefano at tamu.edu
http://stefano.cleinias.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20140113/d317ff2a/attachment.html>

From luigi.scarso at gmail.com  Mon Jan 13 18:40:43 2014
From: luigi.scarso at gmail.com (luigi scarso)
Date: Mon, 13 Jan 2014 18:40:43 +0100
Subject: [luatex] Installing luatex beta to work with lualatex?
In-Reply-To: <CAJODLwZLXvXQKOiKq9WKunXE5g0wBd7U+VviL3kdtP3sOD=fCg@mail.gmail.com>
References: <CAJODLwZLXvXQKOiKq9WKunXE5g0wBd7U+VviL3kdtP3sOD=fCg@mail.gmail.com>
Message-ID: <CAG5iGsCgOFD7Ja3yuJNL-oc4MyyshuLLA0Tc5HJuo9zkBm_9yQ@mail.gmail.com>

On Mon, Jan 13, 2014 at 6:32 PM, stefano franchi
<stefano.franchi at gmail.com>wrote:

> Dear all,
>
> I tried to test out the new 0.78.2 beta version of luatex but I cannot
> figure out how to get it to work with lualatex. Here is what I did:
>
> 1. Downloaded and compiled the luatex executable
>
> 2. Moved the executable to the standard  TL location
> (/usr/local/texlive/2013/bin/x86_64-linux/luatex) and moved the old
> executable (version 0.76) to a different name
>
> 3. Rebuilt all formats with tlmgr
>
> Now starting luatex from the shell correctly invokes version 0.78,2, but
> calling lualatex still runs the old version (0.76).
>
> Is there any other step I am supposed to take?
>
>
> Cheers,
>
> Stefano
>
> hm.

$> ls -al $(which lualatex)

should show something about lualatex

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20140113/8b229716/attachment.html>

From stefano.franchi at gmail.com  Mon Jan 13 18:50:39 2014
From: stefano.franchi at gmail.com (stefano franchi)
Date: Mon, 13 Jan 2014 11:50:39 -0600
Subject: [luatex] Installing luatex beta to work with lualatex?
In-Reply-To: <CAG5iGsCgOFD7Ja3yuJNL-oc4MyyshuLLA0Tc5HJuo9zkBm_9yQ@mail.gmail.com>
References: <CAJODLwZLXvXQKOiKq9WKunXE5g0wBd7U+VviL3kdtP3sOD=fCg@mail.gmail.com>
 <CAG5iGsCgOFD7Ja3yuJNL-oc4MyyshuLLA0Tc5HJuo9zkBm_9yQ@mail.gmail.com>
Message-ID: <CAJODLwZoaGDeJwtTn+QpH8a5HPAOLeohhV7r=4AWb+9HNcBA4A@mail.gmail.com>

Well , after about 10 attempts, it finally worked: the new version is now
called. I have no idea why it didn't work before---I'll impute that to
cosmic rays or malevolent influences from my enemies.

Sorry about the noise and many thanks for the release. The speedup is quite
noticeable.


Cheers,

Stefano

-- 
__________________________________________________
Stefano Franchi
Associate Research Professor
Department of Hispanic Studies            Ph:   +1 (979) 845-2125
Texas A&M University                          Fax:  +1 (979) 845-6421
College Station, Texas, USA

stefano at tamu.edu
http://stefano.cleinias.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20140113/cd90436d/attachment.html>

From mailing_list at arcor.de  Sat Jan 18 10:41:58 2014
From: mailing_list at arcor.de (Stephan Hennig)
Date: Sat, 18 Jan 2014 10:41:58 +0100
Subject: [luatex] prev field in discretionary nodes
Message-ID: <52DA4C66.3020102@arcor.de>

Hi,

below you can find a textual representation of the discretionary node
resulting from the command \discretionary{a-}{b}{c}.  Lines beginning
with a + sign contain additional information to the preceding line.

nl: <node    199 <    208 >    236 : disc 0>
nl: +pre:
nl:   <node    212 <    181 >    218 : glyph 1>
nl:   +char: a
nl:   <node    181 <    218 >    nil : glyph 1>
nl:   +char: -
nl: +post:
nl:   <node    214 <    224 >    nil : glyph 1>
nl:   +char: b
nl: +replace:
nl:   <node    216 <    230 >    nil : glyph 1>
nl:   +char: c

In this example, one can see that nodes 181, 224, 230 (first nodes in
sub-lists) do have a prev field set.  But that points neither to the
discretionary node (208) nor to any preceding node in the node list (not
shown here).

What do the first prev fields in pre, post, replace sub-lists of
discretionary nodes point to?

Best regards,
Stephan Hennig
-------------- next part --------------
local Uchar = unicode.utf8.char
local DISC = node.id('disc')
local GLYPH = node.id('glyph')

local function print_list(head, indent)
   local si = string.rep(' ', indent)
   for n in node.traverse(head) do
      luatexbase.module_log('nl', '%s%s', si, tostring(n))
      if n.id == GLYPH then
         luatexbase.module_log('nl', '%s%s %s', si, '+char:', Uchar(n.char))
         if n.components then print_list(n.components, indent+2) end
      elseif n.id == DISC then
         luatexbase.module_log('nl', '%s%s', si, '+pre:')
         print_list(n.pre, indent+2)
         luatexbase.module_log('nl', '%s%s', si, '+post:')
         print_list(n.post, indent+2)
         luatexbase.module_log('nl', '%s%s', si, '+replace:')
         print_list(n.replace, indent+2)
      end
   end
end

local function cb(head)
   print_list(head, 0)
   luatexbase.module_log('nl', '%s', '***')
   lang.hyphenate(head)
end

luatexbase.add_to_callback('hyphenate', cb, 'test_h')
-------------- next part --------------
\input luatexbase.sty
\directlua{
  dofile('disc-prev.lua')
}
\discretionary{a-}{b}{c}
\bye

From mailing_list at arcor.de  Sun Jan 19 23:11:05 2014
From: mailing_list at arcor.de (Stephan Hennig)
Date: Sun, 19 Jan 2014 23:11:05 +0100
Subject: [luatex] prev field in discretionary nodes
In-Reply-To: <52DA4C66.3020102@arcor.de>
References: <52DA4C66.3020102@arcor.de>
Message-ID: <52DC4D79.6050608@arcor.de>

Am 18.01.2014 10:41, schrieb Stephan Hennig:

> What do the first prev fields in pre, post, replace sub-lists of
> discretionary nodes point to?

To expand a bit on the question and to give some context: I have been
trying to build a discretionary node and after doing the necessary
pointer handling, it seemed natural to hand-weave the discretionary into
an existing node list (without changing head) by doing something along
the lines

  disc.prev = <firstnodetoreplace>.prev
  disc.next = <lastnodetoreplace>.next
  disc.prev.next = disc
  disc.next.prev = disc

But that went massively wrong (don't remember details anymore).  Now,
what I actually did was replacing part of a node list with a
discretionary node where the replaced node list was put back into the
'replacement' sub-list of the discretionary node, i.e.,

  a x y z a   =>   a \discretionary{b b}{c c}{x y z} a

So, the fact that I reused sub-list xyz within the discretionary could
have been the reason for the failure, too.  (I did set x.prev as well as
z.next to nil.)

After some tinkering, I eventually refrained from reusing the cut node
list and used node.insert_before to insert the final discretionary node
instead of the hand-weaving, applying both changes at once.  That
worked, but let the original problem in the dark for me.  This leads me
to another question:

  What are best practices for node list manipulation?

Is reusing node lists in general safe?  When does one better operate on
node list copies?  Can nodes be linked manually by manipulating next and
prev fields?  Why do you better use node.insert_before/after even when
not changing head?  ...

And I'm still interested in my original question what the first prev
fields in discretionary sub-lists point to? :-)

Best regards,
Stephan Hennig

From taco at elvenkind.com  Mon Jan 20 11:29:49 2014
From: taco at elvenkind.com (Taco Hoekwater)
Date: Mon, 20 Jan 2014 11:29:49 +0100
Subject: [luatex] prev field in discretionary nodes
In-Reply-To: <52DA4C66.3020102@arcor.de>
References: <52DA4C66.3020102@arcor.de>
Message-ID: <C53D7C9C-D21B-498A-ABED-1F0DD63A3AF9@elvenkind.com>

Hi,

On 18 Jan 2014, at 10:41, Stephan Hennig <mailing_list at arcor.de> wrote:

> Hi,
> 
> below you can find a textual representation of the discretionary node
> resulting from the command \discretionary{a-}{b}{c}.  Lines beginning
> with a + sign contain additional information to the preceding line.
> 
> nl: <node    199 <    208 >    236 : disc 0>
> nl: +pre:
> nl:   <node    212 <    181 >    218 : glyph 1>
> nl:   +char: a
> nl:   <node    181 <    218 >    nil : glyph 1>
> nl:   +char: -
> nl: +post:
> nl:   <node    214 <    224 >    nil : glyph 1>
> nl:   +char: b
> nl: +replace:
> nl:   <node    216 <    230 >    nil : glyph 1>
> nl:   +char: c
> 
> In this example, one can see that nodes 181, 224, 230 (first nodes in
> sub-lists) do have a prev field set.  But that points neither to the
> discretionary node (208) nor to any preceding node in the node list (not
> shown here).

> What do the first prev fields in pre, post, replace sub-lists of
> discretionary nodes point to?
> 

214, 216, and 218 are the field headers of the various lists inside
the discretionary node (the pre,post,replace fields). It is a bit of a trick
that helps the discretionary replacement code in the paragraph builder.

Best wishes,
Taco


From taco at elvenkind.com  Mon Jan 20 11:37:15 2014
From: taco at elvenkind.com (Taco Hoekwater)
Date: Mon, 20 Jan 2014 11:37:15 +0100
Subject: [luatex] prev field in discretionary nodes
In-Reply-To: <52DC4D79.6050608@arcor.de>
References: <52DA4C66.3020102@arcor.de> <52DC4D79.6050608@arcor.de>
Message-ID: <31F4CD69-A171-47EE-8D96-A3BC69EBD7EF@elvenkind.com>


On 19 Jan 2014, at 23:11, Stephan Hennig <mailing_list at arcor.de> wrote:

> After some tinkering, I eventually refrained from reusing the cut node
> list and used node.insert_before to insert the final discretionary node
> instead of the hand-weaving, applying both changes at once.  That
> worked, but let the original problem in the dark for me.  This leads me
> to another question:
> 
>  What are best practices for node list manipulation?

insert_before and insert_after, definitely. 

> Is reusing node lists in general safe?  

Assuming you are certain that there are no internal TeX references
to that node list left after your manipulation. Otherwise no. And you have
to be aware of the fact  that during paragraph line breaking and page 
building internal references to node ids are kept in auxiliary arrays 
outside of your control.

> When does one better operate on node list copies?

See above, but in case of doubt, I would always make a copy. Leaking
a few nodes at the end of the run is better than crashing :)

> Can nodes be linked manually by manipulating next and
> prev fields?  

In principle, yes.

> Why do you better use node.insert_before/after even when
> not changing head?  ?

Because it is easy to forget a prev or next, but also because 
insert_before / insert_after actually check that prev and next
are valid (active) nodes.

Best wishes,
Taco



From mailing_list at arcor.de  Tue Jan 21 21:01:18 2014
From: mailing_list at arcor.de (Stephan Hennig)
Date: Tue, 21 Jan 2014 21:01:18 +0100
Subject: [luatex] prev field in discretionary nodes
In-Reply-To: <31F4CD69-A171-47EE-8D96-A3BC69EBD7EF@elvenkind.com>
References: <52DA4C66.3020102@arcor.de> <52DC4D79.6050608@arcor.de>
 <31F4CD69-A171-47EE-8D96-A3BC69EBD7EF@elvenkind.com>
Message-ID: <52DED20E.1070500@arcor.de>

Am 20.01.2014 11:37, schrieb Taco Hoekwater:
> On 19 Jan 2014, at 23:11, Stephan Hennig <mailing_list at arcor.de> wrote:
> 
>> Is reusing node lists in general safe?  
> 
> Assuming you are certain that there are no internal TeX references
> to that node list left after your manipulation. Otherwise no.

What about the nodes pointed to by first prev fields in discretionary
nodes?  Can discretionary nodes be safely removed from a list or can
that break something due to the internal references described in your
other mail?


>> Why do you better use node.insert_before/after even when
>> not changing head?  ?
> 
> Because it is easy to forget a prev or next, but also because 
> insert_before / insert_after actually check that prev and next
> are valid (active) nodes.

And they set-up prev fields in sub-lists of discretionary nodes, which
cannot be done manually.  Are there any other such nodes that /require/
the use of insert_before/after?

Best regards,
Stephan Hennig

From taco at elvenkind.com  Wed Jan 22 14:17:45 2014
From: taco at elvenkind.com (Taco Hoekwater)
Date: Wed, 22 Jan 2014 14:17:45 +0100
Subject: [luatex] prev field in discretionary nodes
In-Reply-To: <52DED20E.1070500@arcor.de>
References: <52DA4C66.3020102@arcor.de> <52DC4D79.6050608@arcor.de>
 <31F4CD69-A171-47EE-8D96-A3BC69EBD7EF@elvenkind.com>
 <52DED20E.1070500@arcor.de>
Message-ID: <44E2C64F-F661-435D-9C80-0A03E88A45C4@elvenkind.com>


On 21 Jan 2014, at 21:01, Stephan Hennig <mailing_list at arcor.de> wrote:

> Am 20.01.2014 11:37, schrieb Taco Hoekwater:
>> On 19 Jan 2014, at 23:11, Stephan Hennig <mailing_list at arcor.de> wrote:
>> 
>>> Is reusing node lists in general safe?  
>> 
>> Assuming you are certain that there are no internal TeX references
>> to that node list left after your manipulation. Otherwise no.
> 
> What about the nodes pointed to by first prev fields in discretionary
> nodes?  Can discretionary nodes be safely removed from a list or can
> that break something due to the internal references described in your
> other mail?

It should be safe to mess with the list as long as it is not added to the 
vertical list yet (so no messing about inside post_linebreak_filter).

> And they set-up prev fields in sub-lists of discretionary nodes, which
> cannot be done manually.  Are there any other such nodes that /require/
> the use of insert_before/after?

I don?t think so (but do not have the sources handy).

Best wishes,
Taco



From mailing_list at arcor.de  Sun Jan 26 18:39:48 2014
From: mailing_list at arcor.de (Stephan Hennig)
Date: Sun, 26 Jan 2014 18:39:48 +0100
Subject: [luatex] towards non-standard hyphenation support in LuaTeX
Message-ID: <52E54864.3040301@arcor.de>

[ To tex-hyphen at tug.org
  CC luatex at tug.org
  CC lualatex-dev at tug.org
  Please keep tex-hyphen copied in your replies.]


Hi,

I'd like to invite you to checkout
<URL:https://github.com/sh2d/padrinoma>.  The repository contains a
package that provides support for pattern driven node list manipulations
in LuaTeX.

There are a handful of typographic features missing in TeX that involve
certain kinds of glyph replacement and in principle can be implemented
at the node list level in LuaTeX.  Examples are non-standard
hyphenation, smart ligature building or long/round s handling in
black-letter fonts.  There's two main questions that need to be answered
when doing low-level operations like this on node lists:

  a) Where to apply manipulations?

  b) What manipulations to apply?

The purpose of the padrinoma package is to give a higher-level answer to
the first question.  Given suitable patterns (that look like ordinary
Liang patterns), the package can scan a node list, apply the patterns to
the words found and return data structures that contain the results of
the pattern matching.

Some basic, illustrative examples of how that can be used can be found
in directory examples/pdnm/.  Document hyph-mark-color.tex colours all
letter pairs surrounding valid hyphenation points in a word (without
falling-back to LuaTeX's lang.hyphenate function).  Document
hyph-mark-explicit.tex is similar, but inserts a certain character at a
valid hyphenation position instead of the colouring.  Document
german-nstd-hyph.tex is a bit more ambitious and shows an attempt to
bring non-standard ck hyphenation to German users.  Example patterns are
provided.

Quick start:  To compile the sample documents, the following files

  lua-classes/cls_pdnm*.lua
  lua-modules/pdnm*.lua

have to be placed in a local TEXMF tree.  In general, mktexlsr needs to
be run afterwards.  Then move to the example documents and compile them
using LuaLaTeX.

There's not much user-level documentation, currently.  That's because
the package doesn't contain user-level code. :-)  The API of Lua modules
and classes is documented in LuaDoc format.  Documentation of examples,
on the other hand, is terse or non-existent.  If you want to play with
the example documents, look for a line

>   nlm.register_manipulation('hyph-la.pat.txt', 'pdnm_hyph-mark-explicit')

or similar.  The first argument to the function call is the name of an
ordinary pattern file (plain UTF-8 text) and the second argument is the
name of a Lua module implementing a particular kind of node list
manipulation.

Directory lua-classes/ contains basic data structures needed for the
pattern matching.  Pure TeX hackers need not care about the code there.
 Directory lua-modules/ contains modules that apply the data structures
from the former directory to LuaTeX's node lists.

What works: The example documents, see above.

What's missing: Much!

I'm announcing the package here, because it is at a point where input
and code contributions from people more firm in TeX and LaTeX internals
than me is desired.

Format:

  * A user-level TeX and LaTeX interface is missing.

  * How should a low-level LuaTeX interface look like?
    If the approach shown here proves useful, I think
    non-standard hyphenation and other application should get
    first class support similar to regular hyphenation by formats.

  * What about Babel/Polyglossia/hyph-utf8 integration?

Plain TeX:

  * Currently, only a very basic notion of a "word" is implemented.
    Basically, a word is a series of glyph, discretionary or
    user-defined whatsit nodes.  Plain TeX has a much more sophisticated
    notion of a "word subject to hyphenation".
      => see file lua-modules/pdnm_nl_iterate_words.lua

  * The language of a "word" is currently completely ignored.

  * "Words" are currently not checked against the list of hyphenation
    exceptions.

  * There's no way to locally switch off a particular manipulation for
    a single word or phrase.  This is needed for words where certain
    glyph replacements might not be desirable, e.g., names for better
    recognition.

  * And much more ...

Prospectively, I hope that LuaTeX gets means to apply more than one type
of patterns and custom manipulations to a node list built-in so that
this package renders superfluous.  (Well, if this approach works out,
Hans and Taco might as well get reluctant adding that functionality to
the core. :-)  Until then, please share your ideas and -- more important
-- your coding skills!

Happy TeXing!
Stephan Hennig

From taco at docwolves.nl  Mon Jan 27 13:28:06 2014
From: taco at docwolves.nl (Taco Hoekwater)
Date: Mon, 27 Jan 2014 13:28:06 +0100
Subject: [luatex] towards non-standard hyphenation support in LuaTeX
In-Reply-To: <52E54864.3040301@arcor.de>
References: <52E54864.3040301@arcor.de>
Message-ID: <52E650D6.4090207@docwolves.nl>


Hi Stephan,

On 01/26/2014 06:39 PM, Stephan Hennig wrote:
>
> Prospectively, I hope that LuaTeX gets means to apply more than one type
> of patterns and custom manipulations to a node list built-in so that
> this package renders superfluous.

Having a built-in could defeat its own purpose, depending on what it
actually has to do. You want to keep the special lua code anyway, so
there could be a lot of going back and forth between C and lua, which
is not the best in terms of efficiency (put mildly). OTOH, I can imagine
a helper function that somehow produces the words & associated language
of a node list, and that may be helpful, I do not know?

Best wishes,
Taco




From mailing_list at arcor.de  Mon Jan 27 15:33:57 2014
From: mailing_list at arcor.de (Stephan Hennig)
Date: Mon, 27 Jan 2014 15:33:57 +0100
Subject: [luatex] [lltx] towards non-standard hyphenation support in
	LuaTeX
In-Reply-To: <52E650D6.4090207@docwolves.nl>
References: <52E54864.3040301@arcor.de> <52E650D6.4090207@docwolves.nl>
Message-ID: <52E66E55.1080504@arcor.de>

Am 27.01.2014 13:28, schrieb Taco Hoekwater:
> On 01/26/2014 06:39 PM, Stephan Hennig wrote:
>>
>> Prospectively, I hope that LuaTeX gets means to apply more than one type
>> of patterns and custom manipulations to a node list built-in so that
>> this package renders superfluous.
> 
> Having a built-in could defeat its own purpose, depending on what it
> actually has to do. You want to keep the special lua code anyway, so
> there could be a lot of going back and forth between C and lua, which
> is not the best in terms of efficiency (put mildly).

True.  One concern is/was also speed, but having read the node access
chapter in the latest LuaTeX manual

>> When implementing this direct approach the regular index by key 
>> variant was also optimized, so direct access only makes sense when 
>> we?re accessing nodes millions of times (which happens in some
>> font processing for instance).

the node list manipulations considered here are perhaps cheap compared
to some font handling. :-)


> OTOH, I can imagine a helper function that somehow produces the words
> & associated language of a node list, and that may be helpful, I do
> not know?

Yeah, a built-in iterator over words of a certain property would be most
welcome.  I have two kinds of properties in mind:

  * any word subject to regular hyphenation

    When applying non-standard hyphenation, I think that should apply
    to words subject to regular hyphenation only.  Same for weighted
    hyphenation.  (I have a vague idea about how the latter can be
    tackled, but that needs some more discussion.  I'll write another
    mail about that.)

  * any word

    Such an iterator is needed for arbitrary glyph substitutions, e.g.,
    non-greedy ligature building or round/long-s handling.

Can't say, if there's a demand for other properties as well.

But one thing to consider for such iterators:  One might want to
consider other than "word" nodes as well during node list traversal to
control manipulations (switch it off locally).  That could be difficult
if an iterator only returns glyph and discretionary nodes.  It could
make sense to be able to iterate over words as well as non-word nodes
like this:

  for n1,n2 in words(head) do
     Operate on list head with n1 and n2 being references to
     the first and last node of the current word.
  end

  for n1,n2 in words(head, true) do
     As above, but n1 can be any type of node (an inter-word node)
     and n2 is nil in that case.
  end

Just an idea.  One use-case is to take action on certain (user_defined
or late_lua) whatsit nodes in a list.  I know that there's also
attributes to store secondary information in node lists, which perhaps
renders this proposed second syntax useless ...

Best regards,
Stephan Hennig


From mailing_list at arcor.de  Mon Jan 27 19:01:13 2014
From: mailing_list at arcor.de (Stephan Hennig)
Date: Mon, 27 Jan 2014 19:01:13 +0100
Subject: [luatex] [tex-hyphen] [lltx] towards non-standard hyphenation
 support in LuaTeX
In-Reply-To: <52E66E55.1080504@arcor.de>
References: <52E54864.3040301@arcor.de> <52E650D6.4090207@docwolves.nl>
 <52E66E55.1080504@arcor.de>
Message-ID: <52E69EE9.2040702@arcor.de>

Am 27.01.2014 15:33, schrieb Stephan Hennig:

> But one thing to consider for such iterators:

Another thing, the iterator should be robust in the sense that a user
can replace first and last node of the current word, e.g., during
ligature building.

There can even be times when a manipulation needs to change nodes
outside the current word, e.g., insert a node before the first or after
the last node of a word.  For that reason, when returning two word nodes
n1,n2, the iterator should not save n2.next in the state, but rather the
next node returned as n1.  That way, on could insert/replace inter-word
nodes without wrecking havoc.

Best regards,
Stephan Hennig


From daniel.flipo at free.fr  Wed Jan 29 10:26:26 2014
From: daniel.flipo at free.fr (Daniel Flipo)
Date: Wed, 29 Jan 2014 10:26:26 +0100
Subject: [luatex] <language> object returned by lang.new
Message-ID: <52E8C942.4070900@free.fr>

Hi all,

Sorry for this stupid question, but I can't figure out how to get the 
name of <language> object returned by lang.new() when called during the 
luatex/lualatex format building :-(

I need it to compute the <number> id for French with lang.id() in order 
to compare it to glyph_nodes '.lang' id and decide whether the current 
language is French or not.

Thanks in advance for your hints and best wishes,
-- 
Daniel Flipo

