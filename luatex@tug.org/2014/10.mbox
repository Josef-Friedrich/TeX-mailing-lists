From cloos at jhcloos.com  Wed Oct  1 00:02:49 2014
From: cloos at jhcloos.com (James Cloos)
Date: Tue, 30 Sep 2014 18:02:49 -0400
Subject: [luatex] Using a --lua preload to control output
Message-ID: <m3iok4sr5i.fsf@carbon.jhcloos.org>

I've been using a bool created by \newif to control whether some content
gets added to a document.  And for other reasons, I'm using lualatex for
these documents.

I'd like to be able to specify at the command line whether to include
the optional bits.

Using a --lua preload looks like the only easy way to do that.  But I've
not yet needed to do any \directlua calls.

Does anyone have any tips on the best way of doing this?

Thanks,

-JimC
-- 
James Cloos <cloos at jhcloos.com>         OpenPGP: 0x997A9F17ED7DAEA6

From kfeuerherm at wlu.ca  Wed Oct  1 16:56:18 2014
From: kfeuerherm at wlu.ca (Karljurgen Feuerherm)
Date: Wed, 1 Oct 2014 14:56:18 +0000
Subject: [luatex] Luabidi/polyglossia/bidi
Message-ID: <D0518E51.8215%kfeuerherm@wlu.ca>

Greetings-

I had been using XeLaTeX to typeset a Hebrew textbook I'm working on; but once I started introducing media9 buttons into RTL text, I ran into difficulty. The solution posed was a kind of hack described here: http://tex.stackexchange.com/questions/188434/media-button-in-rtl, I.e. To run LuaLaTex but trick polyglossia into thinking it was using XeTeX's bidi when in fact it was luabidi. So I've been using luaTeX the last few months with success, but of course I was waiting for this to bite me....

...which lately it has. I understand that ordinarily I should offer an MWE highlighting the problem, but in this case that is likely to be difficult, so let me try to describe the problem.

Briefly, I haver found lately that \texthebrew{} commands were swallowing the following space, which I patched by adding a \ after the command; but more recently I've noticed (maybe it was happening before and I just didn't see it) that after a \texthebrew{} we don't get back to LTR mode properly, so that the remainder of a paragraph can end up right justified.

I suppose this is because of some updates to polyglossia or bidi, or alternatively lack thereof to luabidi. I wonder whether anyone can suggest approaches I can investigate to get back on the road? (possibly rolling back updates to polyglossia or bidi, but I don't know how to do that....)

With thanks,

K

Karlj?rgen G. Feuerherm, PhD | 2-139 Department of History | Wilfrid Laurier University | 75 University Avenue West | Waterloo, Ontario N2L 3C5

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20141001/c6f78dd3/attachment.html>

From ctan.upload at gmail.com  Wed Oct  1 17:12:35 2014
From: ctan.upload at gmail.com (Vafa Khalighi)
Date: Thu, 2 Oct 2014 01:12:35 +1000
Subject: [luatex] Luabidi/polyglossia/bidi
In-Reply-To: <D0518E51.8215%kfeuerherm@wlu.ca>
References: <D0518E51.8215%kfeuerherm@wlu.ca>
Message-ID: <CANhu2X9EyHk1KQfbeqU=UsiJofSymfOCkJRhySZUto41rHdiOw@mail.gmail.com>

I am the author of both bidi and luabidi packages so my statements
should have some values :) (just kidding)

It is a long time that I wrote luabidi code and that code certainly is
obsolete since luatex chaged a lot. On the other hand, I neither use
polyglossia nor know how it works. If you provide a minimal example,
maybe I can help. I am sorry that I am not helping but just few notes:

*  With respect to xetex, I think the problem that you are facing will
go away when you update to texlive 2015 in due time. But the sad thing
is that you can have to wait so long.

* I am in the process of supporting luatex in my bidi package; that
takes some time since I need to test things with care and on the other
hand I expect to recieve an answer from Philipp Gesang to port context
unicode-bidi algorithm to plain/LaTeX. So once that is done, you can
safely use polyglossia and there is no need to fool polyglossia.


Vafa

On Thu, Oct 2, 2014 at 12:56 AM, Karljurgen Feuerherm <kfeuerherm at wlu.ca> wrote:
> Greetings?
>
> I had been using XeLaTeX to typeset a Hebrew textbook I?m working on; but
> once I started introducing media9 buttons into RTL text, I ran into
> difficulty. The solution posed was a kind of hack described here:
> http://tex.stackexchange.com/questions/188434/media-button-in-rtl, I.e. To
> run LuaLaTex but trick polyglossia into thinking it was using XeTeX?s bidi
> when in fact it was luabidi. So I?ve been using luaTeX the last few months
> with success, but of course I was waiting for this to bite me?.
>
> ?which lately it has. I understand that ordinarily I should offer an MWE
> highlighting the problem, but in this case that is likely to be difficult,
> so let me try to describe the problem.
>
> Briefly, I haver found lately that \texthebrew{} commands were swallowing
> the following space, which I patched by adding a \ after the command; but
> more recently I?ve noticed (maybe it was happening before and I just didn?t
> see it) that after a \texthebrew{} we don?t get back to LTR mode properly,
> so that the remainder of a paragraph can end up right justified.
>
> I suppose this is because of some updates to polyglossia or bidi, or
> alternatively lack thereof to luabidi. I wonder whether anyone can suggest
> approaches I can investigate to get back on the road? (possibly rolling back
> updates to polyglossia or bidi, but I don?t know how to do that?.)
>
> With thanks,
>
> K
>
> Karlj?rgen G. Feuerherm, PhD | 2-139 Department of History | Wilfrid Laurier
> University | 75 University Avenue West | Waterloo, Ontario N2L 3C5
>


From kfeuerherm at wlu.ca  Thu Oct  9 18:59:12 2014
From: kfeuerherm at wlu.ca (Karljurgen Feuerherm)
Date: Thu, 9 Oct 2014 16:59:12 +0000
Subject: [luatex] Luabidi/polyglossia/bidi
Message-ID: <D05C356A.8986%kfeuerherm@wlu.ca>

Vafa, (attempts to reply off-list for some reason are causing bounces)

Since your off list note, I?ve done a few things to get around the problem. E.g.  I created a command

\newcommand{\thb}[1]{\mbox{}\texthebrew{#1}\mbox{}}

And this solved the problems I described to you. But if I embed it in
another command like

\newcommand{\bgdkpt}{\thb{??????}}

(because I use that sequence frequently) the problem resurfaces (I get the impression that somehow this is related to how \newcommand works but haven?t found the solution yet). In any case, I have created an MWE which illustrates the general bug, attached:
??
\documentclass{memoir}
\usepackage{fontspec,libertine,polyglossia}
\setotherlanguage[]{hebrew}
\newfontfamily{\hebrewfont}[Script=Hebrew]{SBL Hebrew}
\begin{document}
This is banal and boring text. This is banal and boring text. This is banal and boring text. This is banal and boring text. This is banal and boring text. This is banal and boring text. This is \texthebrew{?????} rather than English.

Now let's try a list:
\begin{itemize}
\item An English item.
\item \texthebrew{?????} rather than English. \texthebrew{?????} rather than English. \texthebrew{?????} rather than English. \texthebrew{?????} rather than English. \texthebrew{?????} rather than English. \texthebrew{?????} rather than English. \texthebrew{?????} rather than English. \texthebrew{?????} rather than English. \texthebrew{?????} rather than English.
\item An English item.
\item \texthebrew{?????} rather than English.
\end{itemize}
\end{document}
??

When compiled with XeLaTeXmk, works as expected. But if I put the fake ?bidi.sty" in the directory (i.e. An alias called bidi.sty which points to luabidi.sty) and compile with LuaLaTeXmk, I get the screwed up text. (I?m on a Mac, I can?t speak for Windows behaviour unfortunately. So I?ve
attached logs too.) As I mentioned before, this *used* to work. I think it is caused by an incompatibility introduced with polyglossia. The PDF
documentation says polyglossia dates back to May, but I?m pretty sure that?s not true?. I?d revert it and see, but I don?t know how and haven?t
found how to do it on Google?.

If you or anyone else has any thoughts on this, I?d be happy to hear about them. With thanks,

K

Karlj?rgen G. Feuerherm, PhD | 2-139 Department of History | Wilfrid Laurier University | 75 University Avenue West | Waterloo, Ontario N2L 3C5


From: Karlj?rgen Feuerherm <kfeuerherm at wlu.ca<mailto:kfeuerherm at wlu.ca>>
Reply-To: "LuaTeX discussion." <luatex at tug.org<mailto:luatex at tug.org>>
Date: Wednesday, October 1, 2014 at 10:56
To: "luatex at tug.org<mailto:luatex at tug.org>" <luatex at tug.org<mailto:luatex at tug.org>>
Subject: [luatex] Luabidi/polyglossia/bidi

Greetings?

I had been using XeLaTeX to typeset a Hebrew textbook I?m working on; but once I started introducing media9 buttons into RTL text, I ran into difficulty. The solution posed was a kind of hack described here: http://tex.stackexchange.com/questions/188434/media-button-in-rtl, I.e. To run LuaLaTex but trick polyglossia into thinking it was using XeTeX?s bidi when in fact it was luabidi. So I?ve been using luaTeX the last few months with success, but of course I was waiting for this to bite me?.

?which lately it has. I understand that ordinarily I should offer an MWE highlighting the problem, but in this case that is likely to be difficult, so let me try to describe the problem.

Briefly, I haver found lately that \texthebrew{} commands were swallowing the following space, which I patched by adding a \ after the command; but more recently I?ve noticed (maybe it was happening before and I just didn?t see it) that after a \texthebrew{} we don?t get back to LTR mode properly, so that the remainder of a paragraph can end up right justified.

I suppose this is because of some updates to polyglossia or bidi, or alternatively lack thereof to luabidi. I wonder whether anyone can suggest approaches I can investigate to get back on the road? (possibly rolling back updates to polyglossia or bidi, but I don?t know how to do that?.)

With thanks,

K

Karlj?rgen G. Feuerherm, PhD | 2-139 Department of History | Wilfrid Laurier University | 75 University Avenue West | Waterloo, Ontario N2L 3C5

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20141009/fbdb8bf8/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PolyglossiaTest.log
Type: application/octet-stream
Size: 70492 bytes
Desc: PolyglossiaTest.log
URL: <http://tug.org/pipermail/luatex/attachments/20141009/fbdb8bf8/attachment-0002.obj>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PolyglossiaTestwithLua.log
Type: application/octet-stream
Size: 95474 bytes
Desc: PolyglossiaTestwithLua.log
URL: <http://tug.org/pipermail/luatex/attachments/20141009/fbdb8bf8/attachment-0003.obj>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PolyglossiaTestwithLua.pdf
Type: application/pdf
Size: 17313 bytes
Desc: PolyglossiaTestwithLua.pdf
URL: <http://tug.org/pipermail/luatex/attachments/20141009/fbdb8bf8/attachment-0001.pdf>

From frank.mittelbach at latex-project.org  Sat Oct 11 17:07:53 2014
From: frank.mittelbach at latex-project.org (Mittelbach, Frank)
Date: Sat, 11 Oct 2014 17:07:53 +0200
Subject: [luatex] an issue with \rpcode
Message-ID: <543947C9.5060105@latex-project.org>

while trying to make Taco's linebreaker code I came across some behavior 
that I found rather weird

in essense it looks as if \rpcode is not ending up in the char table 
unless \lpcode for the same char is set first (and non-zero)

\pdfprotrudechars=1

%\lpcode\font 50 = 1
\rpcode\font 50 = 200
\efcode\font 50 = 333

\directlua{
local function FMItable (name,t)
     print ("---- looking at table ", name, tostring(t))
       for k, v in pairs(t) do
	print("    ", k,"=", tostring(v))
       end
     print("----------------")
end
  FMItable("char 50",font.fonts[font.current()].characters[50])
}

\bye

--------------------

if you uncomment the lpcode line then both values show up. But what is 
puzzling me even more is that if I change the values and then run this 
directlua bit again, nothing changes (could of course be that I should 
define FMItable differently but ...

anybody any clue?

thanks
frank








http://tex.stackexchange.com/q/205615/10109

From pragma at wxs.nl  Sun Oct 12 13:38:47 2014
From: pragma at wxs.nl (Hans Hagen)
Date: Sun, 12 Oct 2014 13:38:47 +0200
Subject: [luatex] an issue with \rpcode
In-Reply-To: <543947C9.5060105@latex-project.org>
References: <543947C9.5060105@latex-project.org>
Message-ID: <543A6847.7050008@wxs.nl>

On 10/11/2014 5:07 PM, Mittelbach, Frank wrote:
> while trying to make Taco's linebreaker code I came across some behavior
> that I found rather weird
>
> in essense it looks as if \rpcode is not ending up in the char table
> unless \lpcode for the same char is set first (and non-zero)
>
> \pdfprotrudechars=1
>
> %\lpcode\font 50 = 1
> \rpcode\font 50 = 200
> \efcode\font 50 = 333
>
> \directlua{
> local function FMItable (name,t)
>      print ("---- looking at table ", name, tostring(t))
>        for k, v in pairs(t) do
>      print("    ", k,"=", tostring(v))
>        end
>      print("----------------")
> end
>   FMItable("char 50",font.fonts[font.current()].characters[50])
> }
>
> \bye
>
> --------------------
>
> if you uncomment the lpcode line then both values show up. But what is
> puzzling me even more is that if I change the values and then run this
> directlua bit again, nothing changes (could of course be that I should
> define FMItable differently but ...
>
> anybody any clue?

sure .. the table that you see is a cached one and if you change a rp 
value after the font definition it is not reflected in there

see page 158 of luatex manual : cache field in passed tfm data tbale

keep in mind that normally one will only set the protrusion values when 
a font is loaded because once a font is used they are frozen

(currently these values are em related but at some point they might 
become glyph width related)

\starttext

\directlua{
     function fonts.constructors.aftercopyingcharacters(target,original)
         target.cache = "renew"
     end
}

\pdfprotrudechars=1

\font\foo = LMRoman10-Regular*default,quality at 12.3pt

\foo

\lpcode\foo 45 = 2000\relax
\rpcode\foo 45 = 2000\relax
\efcode\foo 45 = 4000\relax

\directlua{
     print("data at tex end")
     inspect(font.fonts              [font.current()].characters[45])
     print("original passed data")
     inspect(fonts.hashes.identifiers[font.current()].characters[45])
}

test

\stoptext


-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From luigi.scarso at gmail.com  Sun Oct 12 13:49:53 2014
From: luigi.scarso at gmail.com (luigi scarso)
Date: Sun, 12 Oct 2014 13:49:53 +0200
Subject: [luatex] an issue with \rpcode
In-Reply-To: <543A6847.7050008@wxs.nl>
References: <543947C9.5060105@latex-project.org>	<543A6847.7050008@wxs.nl>
Message-ID: <CAG5iGsBBhmKwj86kD58DPK2D2vJ=WaSwja0E_OcBhrK7j2QMqg@mail.gmail.com>

On Sun, Oct 12, 2014 at 1:38 PM, Hans Hagen <pragma at wxs.nl> wrote:

> On 10/11/2014 5:07 PM, Mittelbach, Frank wrote:
>
>> while trying to make Taco's linebreaker code I came across some behavior
>> that I found rather weird
>>
>> in essense it looks as if \rpcode is not ending up in the char table
>> unless \lpcode for the same char is set first (and non-zero)
>>
>> \pdfprotrudechars=1
>>
>> %\lpcode\font 50 = 1
>> \rpcode\font 50 = 200
>> \efcode\font 50 = 333
>>
>> \directlua{
>> local function FMItable (name,t)
>>      print ("---- looking at table ", name, tostring(t))
>>        for k, v in pairs(t) do
>>      print("    ", k,"=", tostring(v))
>>        end
>>      print("----------------")
>> end
>>   FMItable("char 50",font.fonts[font.current()].characters[50])
>> }
>>
>> \bye
>>
>> --------------------
>>
>> if you uncomment the lpcode line then both values show up. But what is
>> puzzling me even more is that if I change the values and then run this
>> directlua bit again, nothing changes (could of course be that I should
>> define FMItable differently but ...
>>
>> anybody any clue?
>>
>
> sure .. the table that you see is a cached one and if you change a rp
> value after the font definition it is not reflected in there
>
> see page 158 of luatex manual : cache field in passed tfm data tbale
>
> keep in mind that normally one will only set the protrusion values when a
> font is loaded because once a font is used they are frozen
>
> (currently these values are em related but at some point they might become
> glyph width related)
>
> \starttext
>
> \directlua{
>     function fonts.constructors.aftercopyingcharacters(target,original)
>         target.cache = "renew"
>     end
> }
>
> \pdfprotrudechars=1
>
> \font\foo = LMRoman10-Regular*default,quality at 12.3pt
>
> \foo
>
> \lpcode\foo 45 = 2000\relax
> \rpcode\foo 45 = 2000\relax
> \efcode\foo 45 = 4000\relax
>
> \directlua{
>     print("data at tex end")
>     inspect(font.fonts              [font.current()].characters[45])
>     print("original passed data")
>     inspect(fonts.hashes.identifiers[font.current()].characters[45])
> }
>
> test
>
> \stoptext
>
>
with luatex-plain from contexst mkiv

%%
%% test-hans-1
\directlua{
    function fonts.constructors.aftercopyingcharacters(target,original)
        target.cache = "renew"
    end
}

\pdfprotrudechars=1

\font\foo = file:lmroman12-regular
\foo

\lpcode\foo 45 = 2000\relax
\rpcode\foo 45 = 2000\relax
\efcode\foo 45 = 4000\relax

\directlua{
    print("data at tex end")
    inspect(font.fonts              [font.current()].characters[45])
    print("original passed data")
    inspect(fonts.hashes.identifiers[font.current()].characters[45])
}

test
\bye





$ luatex --fmt=luatex-plain test-hans-1.tex
This is LuaTeX, Version beta-0.79.1
 \write18 enabled.
(./test-hans-1.tex
(/opt/luatex/standalone-mkiv-new/tex/texmf-context/tex/generic/context/luatex/l
uatex-basics.tex)
(/opt/luatex/standalone-mkiv-new/tex/texmf-context/tex/generic/context/luatex/l
uatex-fonts.tex <push namespace>
</opt/luatex/standalone-mkiv-new/tex/texmf-cont
ext/tex/generic/context/luatex/luatex-fonts-merged.lua>(using cache:
/opt/luatex
/standalone-mkiv-new/tex/texmf-cache/luatex-cache/generic)
<luatex-fonts.lua loa
ded in 0.051 seconds> <pop namespace>)
(/opt/luatex/standalone-mkiv-new/tex/texmf-context/tex/generic/context/luatex/l
uatex-math.tex(load luc:
/opt/luatex/standalone-mkiv-new/tex/texmf-cache/luatex-
cache/generic/fonts/otf/lmroman10-regular.luc)(load luc:
/opt/luatex/standalone-
mkiv-new/tex/texmf-cache/luatex-cache/generic/fonts/otf/lmroman7-regular.luc)(lo
ad luc:
/opt/luatex/standalone-mkiv-new/tex/texmf-cache/luatex-cache/generic/fon
ts/otf/lmroman5-regular.luc)(load luc:
/opt/luatex/standalone-mkiv-new/tex/texmf
-cache/luatex-cache/generic/fonts/otf/lmmono10-regular.luc)(load luc:
/opt/luate
x/standalone-mkiv-new/tex/texmf-cache/luatex-cache/generic/fonts/otf/lmromanslan
t10-regular.luc)(load luc:
/opt/luatex/standalone-mkiv-new/tex/texmf-cache/luate
x-cache/generic/fonts/otf/lmroman10-italic.luc)(load luc:
/opt/luatex/standalone
-mkiv-new/tex/texmf-cache/luatex-cache/generic/fonts/otf/lmroman10-bold.luc)(loa
d luc:
/opt/luatex/standalone-mkiv-new/tex/texmf-cache/luatex-cache/generic/font
s/otf/lmroman10-bolditalic.luc)(load luc:
/opt/luatex/standalone-mkiv-new/tex/te
xmf-cache/luatex-cache/generic/fonts/otf/latinmodern-math.luc))
(/opt/luatex/standalone-mkiv-new/tex/texmf-context/tex/generic/context/luatex/l
uatex-languages.tex)
(/opt/luatex/standalone-mkiv-new/tex/texmf-context/tex/generic/context/luatex/l
uatex-mplib.tex)(load luc:
/opt/luatex/standalone-mkiv-new/tex/texmf-cache/luate
x-cache/generic/fonts/otf/lmroman12-regular.luc)data at tex end
table={
 ["bot_accent"]=0,
 ["depth"]=0,
 ["expansion_factor"]=4000,
 ["height"]=191103,
 ["index"]=64,
 ["italic"]=0,
 ["left_protruding"]=2000,
 ["right_protruding"]=2000,
 ["top_accent"]=0,
 ["used"]=false,
 ["width"]=256377,
}
original passed data
table={
 ["height"]=191102.976,
 ["index"]=64,
 ["width"]=256376.832,
}
 [1{/opt/luatex/standalone-mkiv-
new/tex/texmf/fonts/map/pdftex/plain/pdftex.map}])</opt/luatex/standalone-mkiv-n
ew/tex/texmf/fonts/opentype/public/lm/lmroman10-regular.otf></opt/luatex/standal
one-mkiv-new/tex/texmf/fonts/opentype/public/lm/lmroman12-regular.otf>
Output written on test-hans-1.pdf (1 page, 5021 bytes).
Transcript written on test-hans-1.log.



-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20141012/6a387e29/attachment.html>

From pragma at wxs.nl  Sun Oct 12 14:01:01 2014
From: pragma at wxs.nl (Hans Hagen)
Date: Sun, 12 Oct 2014 14:01:01 +0200
Subject: [luatex] an issue with \rpcode
In-Reply-To: <CAG5iGsBBhmKwj86kD58DPK2D2vJ=WaSwja0E_OcBhrK7j2QMqg@mail.gmail.com>
References: <543947C9.5060105@latex-project.org>	<543A6847.7050008@wxs.nl>
 <CAG5iGsBBhmKwj86kD58DPK2D2vJ=WaSwja0E_OcBhrK7j2QMqg@mail.gmail.com>
Message-ID: <543A6D7D.5020506@wxs.nl>

 > On 10/12/2014 1:49 PM, luigi scarso wrote:

I'll add support for this:

\directlua{fonts.constructors.cacheintex = false}

(only useful for generic usage)

> On Sun, Oct 12, 2014 at 1:38 PM, Hans Hagen <pragma at wxs.nl
> <mailto:pragma at wxs.nl>> wrote:
>
>     On 10/11/2014 5:07 PM, Mittelbach, Frank wrote:
>
>         while trying to make Taco's linebreaker code I came across some
>         behavior
>         that I found rather weird
>
>         in essense it looks as if \rpcode is not ending up in the char table
>         unless \lpcode for the same char is set first (and non-zero)
>
>         \pdfprotrudechars=1
>
>         %\lpcode\font 50 = 1
>         \rpcode\font 50 = 200
>         \efcode\font 50 = 333
>
>         \directlua{
>         local function FMItable (name,t)
>               print ("---- looking at table ", name, tostring(t))
>                 for k, v in pairs(t) do
>               print("    ", k,"=", tostring(v))
>                 end
>               print("----------------")
>         end
>            FMItable("char 50",font.fonts[font.current()]__.characters[50])
>         }
>
>         \bye
>
>         --------------------
>
>         if you uncomment the lpcode line then both values show up. But
>         what is
>         puzzling me even more is that if I change the values and then
>         run this
>         directlua bit again, nothing changes (could of course be that I
>         should
>         define FMItable differently but ...
>
>         anybody any clue?
>
>
>     sure .. the table that you see is a cached one and if you change a
>     rp value after the font definition it is not reflected in there
>
>     see page 158 of luatex manual : cache field in passed tfm data tbale
>
>     keep in mind that normally one will only set the protrusion values
>     when a font is loaded because once a font is used they are frozen
>
>     (currently these values are em related but at some point they might
>     become glyph width related)
>
>     \starttext
>
>     \directlua{
>          function
>     fonts.constructors.__aftercopyingcharacters(target,__original)
>              target.cache = "renew"
>          end
>     }
>
>     \pdfprotrudechars=1
>
>     \font\foo = LMRoman10-Regular*default,__quality at 12.3pt
>
>     \foo
>
>     \lpcode\foo 45 = 2000\relax
>     \rpcode\foo 45 = 2000\relax
>     \efcode\foo 45 = 4000\relax
>
>     \directlua{
>          print("data at tex end")
>          inspect(font.fonts              [font.current()].characters[__45])
>          print("original passed data")
>
>     inspect(fonts.hashes.__identifiers[font.current()].__characters[45])
>     }
>
>     test
>
>     \stoptext
>
>
> with luatex-plain from contexst mkiv
> %%
> %% test-hans-1
> \directlua{
>      function fonts.constructors.aftercopyingcharacters(target,original)
>          target.cache = "renew"
>      end
> }
>
> \pdfprotrudechars=1
>
> \font\foo = file:lmroman12-regular
> \foo
>
> \lpcode\foo 45 = 2000\relax
> \rpcode\foo 45 = 2000\relax
> \efcode\foo 45 = 4000\relax
>
> \directlua{
>      print("data at tex end")
>      inspect(font.fonts              [font.current()].characters[45])
>      print("original passed data")
>      inspect(fonts.hashes.identifiers[font.current()].characters[45])
> }
>
> test
> \bye
>
>
>
>
>
> $ luatex --fmt=luatex-plain test-hans-1.tex
> This is LuaTeX, Version beta-0.79.1
>   \write18 enabled.
> (./test-hans-1.tex
> (/opt/luatex/standalone-mkiv-new/tex/texmf-context/tex/generic/context/luatex/l
> uatex-basics.tex)
> (/opt/luatex/standalone-mkiv-new/tex/texmf-context/tex/generic/context/luatex/l
> uatex-fonts.tex <push namespace>
> </opt/luatex/standalone-mkiv-new/tex/texmf-cont
> ext/tex/generic/context/luatex/luatex-fonts-merged.lua>(using cache:
> /opt/luatex
> /standalone-mkiv-new/tex/texmf-cache/luatex-cache/generic)
> <luatex-fonts.lua loa
> ded in 0.051 seconds> <pop namespace>)
> (/opt/luatex/standalone-mkiv-new/tex/texmf-context/tex/generic/context/luatex/l
> uatex-math.tex(load luc:
> /opt/luatex/standalone-mkiv-new/tex/texmf-cache/luatex-
> cache/generic/fonts/otf/lmroman10-regular.luc)(load luc:
> /opt/luatex/standalone-
> mkiv-new/tex/texmf-cache/luatex-cache/generic/fonts/otf/lmroman7-regular.luc)(lo
> ad luc:
> /opt/luatex/standalone-mkiv-new/tex/texmf-cache/luatex-cache/generic/fon
> ts/otf/lmroman5-regular.luc)(load luc:
> /opt/luatex/standalone-mkiv-new/tex/texmf
> -cache/luatex-cache/generic/fonts/otf/lmmono10-regular.luc)(load luc:
> /opt/luate
> x/standalone-mkiv-new/tex/texmf-cache/luatex-cache/generic/fonts/otf/lmromanslan
> t10-regular.luc)(load luc:
> /opt/luatex/standalone-mkiv-new/tex/texmf-cache/luate
> x-cache/generic/fonts/otf/lmroman10-italic.luc)(load luc:
> /opt/luatex/standalone
> -mkiv-new/tex/texmf-cache/luatex-cache/generic/fonts/otf/lmroman10-bold.luc)(loa
> d luc:
> /opt/luatex/standalone-mkiv-new/tex/texmf-cache/luatex-cache/generic/font
> s/otf/lmroman10-bolditalic.luc)(load luc:
> /opt/luatex/standalone-mkiv-new/tex/te
> xmf-cache/luatex-cache/generic/fonts/otf/latinmodern-math.luc))
> (/opt/luatex/standalone-mkiv-new/tex/texmf-context/tex/generic/context/luatex/l
> uatex-languages.tex)
> (/opt/luatex/standalone-mkiv-new/tex/texmf-context/tex/generic/context/luatex/l
> uatex-mplib.tex)(load luc:
> /opt/luatex/standalone-mkiv-new/tex/texmf-cache/luate
> x-cache/generic/fonts/otf/lmroman12-regular..luc)data at tex end
> table={
>   ["bot_accent"]=0,
>   ["depth"]=0,
>   ["expansion_factor"]=4000,
>   ["height"]=191103,
>   ["index"]=64,
>   ["italic"]=0,
>   ["left_protruding"]=2000,
>   ["right_protruding"]=2000,
>   ["top_accent"]=0,
>   ["used"]=false,
>   ["width"]=256377,
> }
> original passed data
> table={
>   ["height"]=191102.976,
>   ["index"]=64,
>   ["width"]=256376.832,
> }
>   [1{/opt/luatex/standalone-mkiv-
> new/tex/texmf/fonts/map/pdftex/plain/pdftex.map}])</opt/luatex/standalone-mkiv-n
> ew/tex/texmf/fonts/opentype/public/lm/lmroman10-regular.otf></opt/luatex/standal
> one-mkiv-new/tex/texmf/fonts/opentype/public/lm/lmroman12-regular.otf>
> Output written on test-hans-1.pdf (1 page, 5021 bytes).
> Transcript written on test-hans-1.log.
>
>
>
> --
> luigi


-- 

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
     tel: 038 477 53 69 | voip: 087 875 68 74 | www.pragma-ade.com
                                              | www.pragma-pod.nl
-----------------------------------------------------------------

From luatex at nililand.de  Mon Oct 13 12:48:53 2014
From: luatex at nililand.de (Ulrike Fischer)
Date: Mon, 13 Oct 2014 12:48:53 +0200
Subject: [luatex] an issue with \rpcode
References: <543947C9.5060105@latex-project.org> <543A6847.7050008@wxs.nl>
Message-ID: <n015jf4ramdi.dlg@nililand.de>

Am Sun, 12 Oct 2014 13:38:47 +0200 schrieb Hans Hagen:


>> in essense it looks as if \rpcode is not ending up in the char table
>> unless \lpcode for the same char is set first (and non-zero)

> \starttext
> 
> \directlua{
>      function fonts.constructors.aftercopyingcharacters(target,original)
>          target.cache = "renew"
>      end
> }
> 
> \pdfprotrudechars=1
> 
> \font\foo = LMRoman10-Regular*default,quality at 12.3pt
> 
> \foo
> 
> \lpcode\foo 45 = 2000\relax
> \rpcode\foo 45 = 2000\relax
> \efcode\foo 45 = 4000\relax
> 
> \directlua{
>      print("data at tex end")
>      inspect(font.fonts              [font.current()].characters[45])
>      print("original passed data")
>      inspect(fonts.hashes.identifiers[font.current()].characters[45])
> }
> 
> test
> 
> \stoptext


When I comment the \lpcode line in this code it shows the same
problem that Frank mentioned at the begin: the right_protrusion
value is missing in the table. 



-- 
Ulrike Fischer 
http://www.troubleshooting-tex.de/


From luigi.scarso at gmail.com  Mon Oct 13 14:13:31 2014
From: luigi.scarso at gmail.com (luigi scarso)
Date: Mon, 13 Oct 2014 14:13:31 +0200
Subject: [luatex] an issue with \rpcode
In-Reply-To: <n015jf4ramdi.dlg@nililand.de>
References: <543947C9.5060105@latex-project.org>	<543A6847.7050008@wxs.nl>
 <n015jf4ramdi.dlg@nililand.de>
Message-ID: <CAG5iGsBdiwPLBnsJYi=4YTHWDw2ceATfE4C0ap9PAUtj6ciRHA@mail.gmail.com>

On Mon, Oct 13, 2014 at 12:48 PM, Ulrike Fischer <luatex at nililand.de> wrote:

> Am Sun, 12 Oct 2014 13:38:47 +0200 schrieb Hans Hagen:
>
>
> >> in essense it looks as if \rpcode is not ending up in the char table
> >> unless \lpcode for the same char is set first (and non-zero)
>
> > \starttext
> >
> > \directlua{
> >      function fonts.constructors.aftercopyingcharacters(target,original)
> >          target.cache = "renew"
> >      end
> > }
> >
> > \pdfprotrudechars=1
> >
> > \font\foo = LMRoman10-Regular*default,quality at 12.3pt
> >
> > \foo
> >
> > \lpcode\foo 45 = 2000\relax
> > \rpcode\foo 45 = 2000\relax
> > \efcode\foo 45 = 4000\relax
> >
> > \directlua{
> >      print("data at tex end")
> >      inspect(font.fonts              [font.current()].characters[45])
> >      print("original passed data")
> >      inspect(fonts.hashes.identifiers[font.current()].characters[45])
> > }
> >
> > test
> >
> > \stoptext
>
>
> When I comment the \lpcode line in this code it shows the same
> problem that Frank mentioned at the begin: the right_protrusion
> value is missing in the table.
>
>
>
> --
> Ulrike Fischer
> http://www.troubleshooting-tex.de/
>
> hm  I see in the code


  if (get_charinfo_lp(co) != 0) {
        lua_pushstring(L, "left_protruding");
        lua_pushnumber(L, get_charinfo_lp(co));
        lua_rawset(L, -3);
    }

    if (get_charinfo_lp(co) != 0) {
        lua_pushstring(L, "right_protruding");
        lua_pushnumber(L, get_charinfo_rp(co));
        lua_rawset(L, -3);
    }

but I guess from pdftex.web that it should be

  if (get_charinfo_lp(co) != 0) {
        lua_pushstring(L, "left_protruding");
        lua_pushnumber(L, get_charinfo_lp(co));
        lua_rawset(L, -3);
    }

    if (get_charinfo_rp(co) != 0) {
        lua_pushstring(L, "right_protruding");
        lua_pushnumber(L, get_charinfo_rp(co));
        lua_rawset(L, -3);
    }


directlua{
    function fonts.constructors.aftercopyingcharacters(target,original)
        target.cache = "renew"
    end
}

\pdfprotrudechars=1

\font\foo = file:lmroman12-regular
\foo

%\lpcode\foo 45 = 2000\relax
\rpcode\foo 45 = 2000\relax
\efcode\foo 45 = 4000\relax

\directlua{
    print("data at tex end")
    inspect(font.fonts              [font.current()].characters[45])
    print("original passed data")
    inspect(fonts.hashes.identifiers[font.current()].characters[45])
}

test
\bye


data at tex end
table={
 ["bot_accent"]=0,
 ["depth"]=0,
 ["expansion_factor"]=4000,
 ["height"]=191103,
 ["index"]=64,
 ["italic"]=0,
 ["right_protruding"]=2000,
 ["top_accent"]=0,
 ["used"]=false,
 ["width"]=256377,
}
original passed data
table={
 ["height"]=191102.976,
 ["index"]=64,
 ["width"]=256376.832,
}





Committed revision 5063, luatex experimental.

--
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20141013/28ce9f1f/attachment.html>

From luigi.scarso at gmail.com  Mon Oct 13 15:55:28 2014
From: luigi.scarso at gmail.com (luigi scarso)
Date: Mon, 13 Oct 2014 15:55:28 +0200
Subject: [luatex] an issue with \rpcode
In-Reply-To: <CAG5iGsBdiwPLBnsJYi=4YTHWDw2ceATfE4C0ap9PAUtj6ciRHA@mail.gmail.com>
References: <543947C9.5060105@latex-project.org>	<543A6847.7050008@wxs.nl>
 <n015jf4ramdi.dlg@nililand.de>
 <CAG5iGsBdiwPLBnsJYi=4YTHWDw2ceATfE4C0ap9PAUtj6ciRHA@mail.gmail.com>
Message-ID: <CAG5iGsD++YKac5HS0WyvUSR-zp=+NqRNd7DP0cV7qOSnzg+qMw@mail.gmail.com>

On Mon, Oct 13, 2014 at 2:13 PM, luigi scarso <luigi.scarso at gmail.com>
wrote:
>
>
>
> Committed revision 5063, luatex experimental.
>
> Sorry a bit of mess at my end.
Rev. 5065 , luatex experimental.

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20141013/de44d7e6/attachment.html>

From andreas.matthias at gmail.com  Mon Oct 20 17:16:32 2014
From: andreas.matthias at gmail.com (Andreas Matthias)
Date: Mon, 20 Oct 2014 17:16:32 +0200
Subject: [luatex] TeX scanner
Message-ID: <gjlfhb-rej.ln1@winky.hogwarts>

Is it possible to call the TeX scanner from within Lua?

I would like to put a string into a box and then work on the node list.
If the string were available on the TeX side I would 

  \setbox0\hbox{...}

and the use it on the Lua side

  tex.box[0]

But what should I do if the string is generated on the Lua side and
thus no available on the TeX side? Is it possible to call the TeX
scanner to read this string?


Ciao
Andreas


From luigi.scarso at gmail.com  Mon Oct 20 18:29:33 2014
From: luigi.scarso at gmail.com (luigi scarso)
Date: Mon, 20 Oct 2014 18:29:33 +0200
Subject: [luatex] TeX scanner
In-Reply-To: <gjlfhb-rej.ln1@winky.hogwarts>
References: <gjlfhb-rej.ln1@winky.hogwarts>
Message-ID: <CAG5iGsB1Szx2fukLCKBJG7cCLtvwR1z0Z814wWOzH5NmyvqLXQ@mail.gmail.com>

\directlua {
    function followup(n)
        print(tex.box[n].list.width)
        print(tex.box[n].list.height)
        print(tex.box[n].list.depth)
        tex.print(tex.box[n].list.width  .. "\string\\par")
        tex.print(tex.box[n].list.height .. "\string\\par")
        tex.print(tex.box[n].list.depth  .. "\string\\par")
    end
}
\directlua {
    tex.print([[\string\setbox0=\string\hbox{foo}]])
    tex.print([[\string\directlua{followup(0)}]])
}

(credit: H. Hagen)


On Mon, Oct 20, 2014 at 5:16 PM, Andreas Matthias <
andreas.matthias at gmail.com> wrote:

> Is it possible to call the TeX scanner from within Lua?
>
> I would like to put a string into a box and then work on the node list.
> If the string were available on the TeX side I would
>
>   \setbox0\hbox{...}
>
> and the use it on the Lua side
>
>   tex.box[0]
>
> But what should I do if the string is generated on the Lua side and
> thus no available on the TeX side? Is it possible to call the TeX
> scanner to read this string?
>
>
> Ciao
> Andreas
>
>

\directlua {
    function followup(n)
        print(tex.box[n].list.width)
        print(tex.box[n].list.height)
        print(tex.box[n].list.depth)
        tex.print(tex.box[n].list.width  .. "\string\\par")
        tex.print(tex.box[n].list.height .. "\string\\par")
        tex.print(tex.box[n].list.depth  .. "\string\\par")
    end
}
\directlua {
    tex.print([[\string\setbox0=\string\hbox{foo}]])
    tex.print([[\string\directlua{followup(0)}]])
}

(the code is from H. Hagen)
-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20141020/7c325ce7/attachment.html>

From andreas.matthias at gmail.com  Mon Oct 20 19:51:44 2014
From: andreas.matthias at gmail.com (Andreas Matthias)
Date: Mon, 20 Oct 2014 19:51:44 +0200
Subject: [luatex] TeX scanner
References: <gjlfhb-rej.ln1@winky.hogwarts>
 <CAG5iGsB1Szx2fukLCKBJG7cCLtvwR1z0Z814wWOzH5NmyvqLXQ@mail.gmail.com>
Message-ID: <gmufhb-nql.ln1@winky.hogwarts>

luigi scarso wrote:

> \directlua {
> ? ? function followup(n)
> ? ? ? ? print(tex.box[n].list.width)
> ? ? ? ? print(tex.box[n].list.height)
> ? ? ? ? print(tex.box[n].list.depth)
> ? ? ? ? tex.print(tex.box[n].list.width ?.. "\string\\par")
> ? ? ? ? tex.print(tex.box[n].list.height .. "\string\\par")
> ? ? ? ? tex.print(tex.box[n].list.depth ?.. "\string\\par")
> ? ? end
> }
> \directlua {
> ? ? tex.print([[\string\setbox0=\string\hbox{foo}]])
> ? ? tex.print([[\string\directlua{followup(0)}]])
> }
> 
> (the code is from H. Hagen)


That's it. Thanks!

The argument of tex.print is fed to the TeX scanner. I've read this
part of the documentation over and over again, but didn't get it right.
Thanks for the code.


Ciao
Andreas


From Herbert.Voss at FU-Berlin.DE  Tue Oct 28 20:21:55 2014
From: Herbert.Voss at FU-Berlin.DE (Herbert Voss)
Date: Tue, 28 Oct 2014 20:21:55 +0100
Subject: [luatex] fontloader
Message-ID: <544FECD3.8000107@FU-Berlin.DE>

Why do I get the error:

linlibertine-r.luc)(load luc: 
/usr/local/texlive/2014/texmf-var/luatex-cache/gen
eric/fonts/otf/linbiolinum-r.luc)error: 
...xmf-dist/tex/luatex/luaotfload/luaotfload-fontloader.lua:9291: 
attempt to perform arithmetic on local 'factor' (a nil value)
.
l.19 19: cmex10\par

----------------------------------------

Herbert


\input luaotfload.sty
\font\test={Linux Libertine O}
\font\sf={Linux Biolinum O}
\test foo
\sf foo

\directlua{
for i,v in font.each() do
   if v.fontname then
     tex.print(i .. ": " .. tostring(v.fontname) .. "\string\\par")
   else
     tex.print(i .. ": " .. tostring(v.name) .. "\string\\par")
   end
end
}
\bye

From luatex at nililand.de  Wed Oct 29 11:00:01 2014
From: luatex at nililand.de (Ulrike Fischer)
Date: Wed, 29 Oct 2014 11:00:01 +0100
Subject: [luatex] fontloader
References: <544FECD3.8000107@FU-Berlin.DE>
Message-ID: <1he49vz3t4ji5$.dlg@nililand.de>

Am Tue, 28 Oct 2014 20:21:55 +0100 schrieb Herbert Voss:

> Why do I get the error:
> 
> linlibertine-r.luc)(load luc: 
> /usr/local/texlive/2014/texmf-var/luatex-cache/gen
> eric/fonts/otf/linbiolinum-r.luc)error: 
> ...xmf-dist/tex/luatex/luaotfload/luaotfload-fontloader.lua:9291: 
> attempt to perform arithmetic on local 'factor' (a nil value)
> .
> l.19 19: cmex10\par
> 
> ----------------------------------------
> 
> Herbert
> 
> 
> \input luaotfload.sty
> \font\test={Linux Libertine O}
> \font\sf={Linux Biolinum O}
> \test foo
> \sf foo
> 
> \directlua{
> for i,v in font.each() do
>    if v.fontname then
>      tex.print(i .. ": " .. tostring(v.fontname) .. "\string\\par")
>    else
>      tex.print(i .. ": " .. tostring(v.name) .. "\string\\par")
>    end
> end
> }
> \bye


>From this
http://tex.stackexchange.com/questions/126903/print-font-name-using-luatex 
and a remark in the luaotfload documentation I understand that
font.each is not safe. This here seems to work

for i,v in pairs(fonts.hashes.identifiers)

But it does show only the opentype fonts. I don't know which table
you can safely query to find out something about normal tfm-fonts. 

-- 
Ulrike Fischer 
http://www.troubleshooting-tex.de/


From Herbert.Voss at FU-Berlin.DE  Thu Oct 30 19:57:14 2014
From: Herbert.Voss at FU-Berlin.DE (Herbert Voss)
Date: Thu, 30 Oct 2014 19:57:14 +0100
Subject: [luatex] fontloader
In-Reply-To: <1he49vz3t4ji5$.dlg@nililand.de>
References: <544FECD3.8000107@FU-Berlin.DE> <1he49vz3t4ji5$.dlg@nililand.de>
Message-ID: <54528A0A.4070609@FU-Berlin.DE>

Am 29.10.2014 um 11:00 schrieb Ulrike Fischer:

>> linlibertine-r.luc)(load luc: 
>> /usr/local/texlive/2014/texmf-var/luatex-cache/gen
>> eric/fonts/otf/linbiolinum-r.luc)error: 
>> ...xmf-dist/tex/luatex/luaotfload/luaotfload-fontloader.lua:9291: 
>> attempt to perform arithmetic on local 'factor' (a nil value)
>> .
>> l.19 19: cmex10\par

> 
>>From this
> http://tex.stackexchange.com/questions/126903/print-font-name-using-luatex 
> and a remark in the luaotfload documentation I understand that
> font.each is not safe. This here seems to work

thanks for the link. However, I deleted the cache and the font
file list and there was no more an error.  Curious ...

Herbert


