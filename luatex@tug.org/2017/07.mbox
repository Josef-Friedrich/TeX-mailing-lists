From w.m.l at gmx.net  Thu Jul  6 01:37:38 2017
From: w.m.l at gmx.net (Robert)
Date: Thu, 6 Jul 2017 01:37:38 +0200
Subject: [luatex] font expansion
Message-ID: <ojjt7s$hh7$1@blaine.gmane.org>

Hi,

I'm resending this post from last year (19 April), as I never got an 
answer, and the questions still pertain to luatex 1.0.4:

Firstly, the manual says:

| When \adjustspacing has value 2, hz optimization will be applied to
| glyphs and kerns. When the value is 3, only glyphs will be treated.
| A value smaller than 2 disables this feature.

However, what I see is:
  * a difference between \adjustspacing=0 and \adjustspacing=1,
  * a difference between \adjustspacing=1 and \adjustspacing=2,
  * no difference between \adjustspacing=2 and \adjustspacing=3
(regardless of whether the font is expanded with \expandglyphsinfont or 
via the luaotfload interface).

So it seems that the former "compatibility" level 1 (same line breaks as 
without expansion), which according to the manual should no longer 
exist, still does; while the new level 3 does not (all the kerns are the 
same as for level 2). Could somebody explain this?

Here's a test file:
----------
\hsize=6cm
\tracingoutput1
\showboxbreadth\maxdimen
\showboxdepth\maxdimen
\input luaotfload.sty
\font\x="Latin Modern Roman" at 10pt \x
%\font\x="Latin Modern Roman:expansion=default" at 10pt \x
\expandglyphsinfont\x 20 20 5 autoexpand
\def\z#1{\adjustspacing=#1 When adjustspacing has value 2,
   hz optimization will be applied to glyphs and kerns.
   When the value is 3, only glyphs will be treated.
   A value smaller than 2 disables this feature.\par}
\z0\z1\z2\z3
\bye
----------

Secondly, I wonder about the status of the "autoexpand" qualifier to 
\expandglyphsinfont. AFAICT it is silently ignored, and fonts are always 
autoexpanded. Is this correct? Or would it still be possible to use 
pre-expanded font instances (say, from a MM font)?


Best,
-- 
  Robert

-- 
  Robert


From pragma at wxs.nl  Thu Jul  6 14:02:24 2017
From: pragma at wxs.nl (Hans Hagen)
Date: Thu, 6 Jul 2017 14:02:24 +0200
Subject: [luatex] font expansion
In-Reply-To: <ojjt7s$hh7$1@blaine.gmane.org>
References: <ojjt7s$hh7$1@blaine.gmane.org>
Message-ID: <cf4c2ba1-0937-2cde-0e06-f12bee4a8d57@wxs.nl>

On 7/6/2017 1:37 AM, Robert wrote:
> Hi,
> 
> I'm resending this post from last year (19 April), as I never got an 
> answer, and the questions still pertain to luatex 1.0.4:
> 
> Firstly, the manual says:
> 
> | When \adjustspacing has value 2, hz optimization will be applied to
> | glyphs and kerns. When the value is 3, only glyphs will be treated.
> | A value smaller than 2 disables this feature.
> 
> However, what I see is:
>   * a difference between \adjustspacing=0 and \adjustspacing=1,
>   * a difference between \adjustspacing=1 and \adjustspacing=2,
>   * no difference between \adjustspacing=2 and \adjustspacing=3
> (regardless of whether the font is expanded with \expandglyphsinfont or 
> via the luaotfload interface).

kerns are normally quite small so you will not really notice it and it 
being a backend related property the log will not report expansion factors

in your font definition below you don't enable kerns anyway (unless 
luaotfload does that automatically for you)

> So it seems that the former "compatibility" level 1 (same line breaks as 
> without expansion), which according to the manual should no longer 
> exist, still does; while the new level 3 does not (all the kerns are the 
> same as for level 2). Could somebody explain this?
> 
> Here's a test file:
> ----------
> \hsize=6cm
> \tracingoutput1
> \showboxbreadth\maxdimen
> \showboxdepth\maxdimen
> \input luaotfload.sty
> \font\x="Latin Modern Roman" at 10pt \x
> %\font\x="Latin Modern Roman:expansion=default" at 10pt \x
> \expandglyphsinfont\x 20 20 5 autoexpand
> \def\z#1{\adjustspacing=#1 When adjustspacing has value 2,
>    hz optimization will be applied to glyphs and kerns.
>    When the value is 3, only glyphs will be treated.
>    A value smaller than 2 disables this feature.\par}
> \z0\z1\z2\z3
> \bye
> ----------
> 
> Secondly, I wonder about the status of the "autoexpand" qualifier to 
> \expandglyphsinfont. AFAICT it is silently ignored, and fonts are always 
> autoexpanded. Is this correct? Or would it still be possible to use 
> pre-expanded font instances (say, from a MM font)?

it all depends on what magic you rmacro package does ... the \expand.. 
command works when no expansion has been set yet, otherwise you need to 
pass values (and it depends in your case what 'default' does)
  When I test the adjustments here it looks ok (it works).

Hans


-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From luatex at nililand.de  Thu Jul  6 15:30:45 2017
From: luatex at nililand.de (Ulrike Fischer)
Date: Thu, 6 Jul 2017 15:30:45 +0200
Subject: [luatex] font expansion
References: <ojjt7s$hh7$1@blaine.gmane.org>
 <cf4c2ba1-0937-2cde-0e06-f12bee4a8d57@wxs.nl>
Message-ID: <y2wdb25g5s84$.dlg@nililand.de>

Am Thu, 6 Jul 2017 14:02:24 +0200 schrieb Hans Hagen:

>>| When \adjustspacing has value 2, hz optimization will be applied to
>>| glyphs and kerns. When the value is 3, only glyphs will be treated.
>>| A value smaller than 2 disables this feature.
>> 
>> However, what I see is:
>>   * a difference between \adjustspacing=0 and \adjustspacing=1,
>>   * a difference between \adjustspacing=1 and \adjustspacing=2,
>>   * no difference between \adjustspacing=2 and \adjustspacing=3

>   When I test the adjustments here it looks ok (it works).

I have the impression that the manual description is "one off". 

The manual says

0,1: do nothing
2  : glyph + kerns
3  : glyphs

But for me it looks like

0:   do nothing
1:   glyphs + kerns     
2,3: glyphs          

(I'm not quite sure regarding the kerns, as I don't really
understand which kerns should be affected by it. But it is rather
obvious that 0 is different to 1 and that 2 and 3 give always the
same output).

-- 
Ulrike Fischer 
http://www.troubleshooting-tex.de/


From pragma at wxs.nl  Thu Jul  6 16:36:11 2017
From: pragma at wxs.nl (Hans Hagen)
Date: Thu, 6 Jul 2017 16:36:11 +0200
Subject: [luatex] font expansion
In-Reply-To: <y2wdb25g5s84$.dlg@nililand.de>
References: <ojjt7s$hh7$1@blaine.gmane.org>
 <cf4c2ba1-0937-2cde-0e06-f12bee4a8d57@wxs.nl> <y2wdb25g5s84$.dlg@nililand.de>
Message-ID: <16a2df2f-0d37-e64f-7742-c1c16720dbf0@wxs.nl>

On 7/6/2017 3:30 PM, Ulrike Fischer wrote:
> Am Thu, 6 Jul 2017 14:02:24 +0200 schrieb Hans Hagen:
> 
>>> | When \adjustspacing has value 2, hz optimization will be applied to
>>> | glyphs and kerns. When the value is 3, only glyphs will be treated.
>>> | A value smaller than 2 disables this feature.
>>>
>>> However, what I see is:
>>>    * a difference between \adjustspacing=0 and \adjustspacing=1,
>>>    * a difference between \adjustspacing=1 and \adjustspacing=2,
>>>    * no difference between \adjustspacing=2 and \adjustspacing=3
> 
>>    When I test the adjustments here it looks ok (it works).
> 
> I have the impression that the manual description is "one off".
> 
> The manual says
> 
> 0,1: do nothing
> 2  : glyph + kerns
> 3  : glyphs
> 
> But for me it looks like
> 
> 0:   do nothing
> 1:   glyphs + kerns
> 2,3: glyphs
> 
> (I'm not quite sure regarding the kerns, as I don't really
> understand which kerns should be affected by it. But it is rather
> obvious that 0 is different to 1 and that 2 and 3 give always the
> same output).
0: nothing
1: glyphs and kerns  (only stretch/shrink)
2: glyphs and kerns  (also in par builder)
3: glyphs            (also in par builder)

only kern marked as font kerns are dealt with

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From w.m.l at gmx.net  Thu Jul  6 17:46:14 2017
From: w.m.l at gmx.net (Robert)
Date: Thu, 6 Jul 2017 17:46:14 +0200
Subject: [luatex] font expansion
In-Reply-To: <cf4c2ba1-0937-2cde-0e06-f12bee4a8d57@wxs.nl>
References: <ojjt7s$hh7$1@blaine.gmane.org>
 <cf4c2ba1-0937-2cde-0e06-f12bee4a8d57@wxs.nl>
Message-ID: <ojlm01$3p4$1@blaine.gmane.org>

On 06.07.17 14:02, Hans Hagen wrote:
> On 7/6/2017 1:37 AM, Robert wrote:
>>
>> Firstly, the manual says:
>>
>> | When \adjustspacing has value 2, hz optimization will be applied to
>> | glyphs and kerns. When the value is 3, only glyphs will be treated.
>> | A value smaller than 2 disables this feature.
>>
>> However, what I see is:
>>   * a difference between \adjustspacing=0 and \adjustspacing=1,
>>   * a difference between \adjustspacing=1 and \adjustspacing=2,
>>   * no difference between \adjustspacing=2 and \adjustspacing=3
>> (regardless of whether the font is expanded with \expandglyphsinfont
>> or via the luaotfload interface).
>
> kerns are normally quite small so you will not really notice it and it
> being a backend related property the log will not report expansion factors

I'm aware that all things microtype are "quite small", so I don't trust 
my eyes but look into the log file. And there I find for example a kern 
of -0.56 between "v" and "a" regardless of whether \adjustspacing is set 
to 2 or 3.
Or are you suggesting that the reported kern of -0.56 isn't actually a 
kern of -0.56? Still, even with ridiculously large expansion limits (500 
500), I don't see any difference whatsoever. And the uncompressed pdf is 
also 100% the same (which would reveal a difference of 0.01bp).

> in your font definition below you don't enable kerns anyway (unless
> luaotfload does that automatically for you)

Yes, luaotfload enables kerns by default.

>> So it seems that the former "compatibility" level 1 (same line breaks
>> as without expansion), which according to the manual should no longer
>> exist, still does; while the new level 3 does not (all the kerns are
>> the same as for level 2). Could somebody explain this?

> 0: nothing
> 1: glyphs and kerns  (only stretch/shrink)
> 2: glyphs and kerns  (also in par builder)
> 3: glyphs            (also in par builder)

So the compatibility level 1 still exists. This is not mentioned in the 
manual. Level 3 continues to escape me.


>> Secondly, I wonder about the status of the "autoexpand" qualifier to
>> \expandglyphsinfont. AFAICT it is silently ignored, and fonts are
>> always autoexpanded. Is this correct? Or would it still be possible to
>> use pre-expanded font instances (say, from a MM font)?
>
> it all depends on what magic you rmacro package does ... the \expand..
> command works when no expansion has been set yet, otherwise you need to
> pass values (and it depends in your case what 'default' does)
>  When I test the adjustments here it looks ok (it works).

Sorry, I don't understand what you're saying. It's not about my macro 
package or any magic. What I meant is that in pdftex, there is a 
difference between

| \pdffontexpand\font 20 20 5 autoexpand

and

| \pdffontexpand\font 20 20 5

The latter requires pre-generated expanded font instances, which are 
then used and embedded in the pdf.
With luatex, however, there is no difference between

| \expandglyphsinfont 20 20 5 autoexpand

and

| \expandglyphsinfont 20 20 5

Existing expanded font instances are ignored, and only the base font is 
embedded in the pdf. Expansion seems to be calculated mechanically and 
linearly instead of taking into account the width axis of a Multiple 
Master font.


Best,
-- 
  Robert


From pragma at wxs.nl  Thu Jul  6 23:46:17 2017
From: pragma at wxs.nl (Hans Hagen)
Date: Thu, 6 Jul 2017 23:46:17 +0200
Subject: [luatex] font expansion
In-Reply-To: <ojlm01$3p4$1@blaine.gmane.org>
References: <ojjt7s$hh7$1@blaine.gmane.org>
 <cf4c2ba1-0937-2cde-0e06-f12bee4a8d57@wxs.nl> <ojlm01$3p4$1@blaine.gmane.org>
Message-ID: <0920e3ab-5d50-18af-8848-697ee15a0a9a@wxs.nl>

On 7/6/2017 5:46 PM, Robert wrote:
> On 06.07.17 14:02, Hans Hagen wrote:
>> On 7/6/2017 1:37 AM, Robert wrote:
>>>
>>> Firstly, the manual says:
>>>
>>> | When \adjustspacing has value 2, hz optimization will be applied to
>>> | glyphs and kerns. When the value is 3, only glyphs will be treated.
>>> | A value smaller than 2 disables this feature.
>>>
>>> However, what I see is:
>>>   * a difference between \adjustspacing=0 and \adjustspacing=1,
>>>   * a difference between \adjustspacing=1 and \adjustspacing=2,
>>>   * no difference between \adjustspacing=2 and \adjustspacing=3
>>> (regardless of whether the font is expanded with \expandglyphsinfont
>>> or via the luaotfload interface).
>>
>> kerns are normally quite small so you will not really notice it and it
>> being a backend related property the log will not report expansion 
>> factors
> 
> I'm aware that all things microtype are "quite small", so I don't trust 
> my eyes but look into the log file. And there I find for example a kern 
> of -0.56 between "v" and "a" regardless of whether \adjustspacing is set 
> to 2 or 3.
> Or are you suggesting that the reported kern of -0.56 isn't actually a 
> kern of -0.56? Still, even with ridiculously large expansion limits (500 
> 500), I don't see any difference whatsoever. And the uncompressed pdf is 
> also 100% the same (which would reveal a difference of 0.01bp).

Indeed the expansion is not reported. The kern value is unchanged but 
there is an additional kern (factor) traveling with the kern node which 
will be dealt with in the backend.

If you see no difference in the pdf file, then there is an issue inm the 
macros or font related code.

Anyway, I can only speak for context, so what I observe is not what you 
observe (others have to check that).

>> in your font definition below you don't enable kerns anyway (unless
>> luaotfload does that automatically for you)
> 
> Yes, luaotfload enables kerns by default.
> 
>>> So it seems that the former "compatibility" level 1 (same line breaks
>>> as without expansion), which according to the manual should no longer
>>> exist, still does; while the new level 3 does not (all the kerns are
>>> the same as for level 2). Could somebody explain this?
> 
>> 0: nothing
>> 1: glyphs and kerns  (only stretch/shrink)
>> 2: glyphs and kerns  (also in par builder)
>> 3: glyphs            (also in par builder)
> 
> So the compatibility level 1 still exists. This is not mentioned in the 
> manual. Level 3 continues to escape me.

Level 1 is rather useless .. (it was part of experiments when pdftex 
evolved) and by not mentioning it we hope that it will not be used (we 
might remove all traces some day). Level 3 makes sense in some cases 
(and is also handy for testing).

So, in your case: just stick to level 2.

>>> Secondly, I wonder about the status of the "autoexpand" qualifier to
>>> \expandglyphsinfont. AFAICT it is silently ignored, and fonts are
>>> always autoexpanded. Is this correct? Or would it still be possible to
>>> use pre-expanded font instances (say, from a MM font)?
>>
>> it all depends on what magic you rmacro package does ... the \expand..
>> command works when no expansion has been set yet, otherwise you need to
>> pass values (and it depends in your case what 'default' does)
>>  When I test the adjustments here it looks ok (it works).
> 
> Sorry, I don't understand what you're saying. It's not about my macro 
> package or any magic. What I meant is that in pdftex, there is a 
> difference between
> 
> | \pdffontexpand\font 20 20 5 autoexpand
> 
> and
> 
> | \pdffontexpand\font 20 20 5
> 
> The latter requires pre-generated expanded font instances, which are 
> then used and embedded in the pdf.
> With luatex, however, there is no difference between
> 
> | \expandglyphsinfont 20 20 5 autoexpand
> 
> and
> 
> | \expandglyphsinfont 20 20 5

Because we don't have pre-generated (copies of) fonts at all, the 
implementation in luatex is using factors stored with the glyphs (so 
there is no need for copies of fonts cq. faked copies) and in the 
backend a different model of scaling fonts is used, so it's unlikely 
that expansion in pdftex generates the same streams as in luatex.

(In pdftex a complication is that fonts are shared by the engine which 
makes expansion also shared which in turn can have surprising effects 
and that's why some copying mechanism was needed. In luatex each font is 
unique.)

> Existing expanded font instances are ignored, and only the base font is 
> embedded in the pdf. Expansion seems to be calculated mechanically and 
> linearly instead of taking into account the width axis of a Multiple 
> Master font.
There is no support for multiple masters which is obsolete technology 
and (recently) has been cq. is being replaced by variable fonts.

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From w.m.l at gmx.net  Fri Jul  7 18:20:54 2017
From: w.m.l at gmx.net (Robert)
Date: Fri, 7 Jul 2017 18:20:54 +0200
Subject: [luatex] font expansion
In-Reply-To: <0920e3ab-5d50-18af-8848-697ee15a0a9a@wxs.nl>
References: <ojjt7s$hh7$1@blaine.gmane.org>
 <cf4c2ba1-0937-2cde-0e06-f12bee4a8d57@wxs.nl> <ojlm01$3p4$1@blaine.gmane.org>
 <0920e3ab-5d50-18af-8848-697ee15a0a9a@wxs.nl>
Message-ID: <ojocd1$954$1@blaine.gmane.org>

On 06.07.17 23:46, Hans Hagen wrote:
> Indeed the expansion is not reported. The kern value is unchanged but
> there is an additional kern (factor) traveling with the kern node which
> will be dealt with in the backend.
>
> If you see no difference in the pdf file, then there is an issue inm the
> macros or font related code.
>
> Anyway, I can only speak for context, so what I observe is not what you
> observe (others have to check that).

Here's another plain tex example:

\pdfvariable compresslevel0
\hsize=1sp
\input luaotfload.sty
\font\x="Latin Modern Roman:+kern" at 10pt \x
\expandglyphsinfont\font 1000 1000 5
\adjustspacing=2 vabe\par
\adjustspacing=3 vabe\par
\bye

In the uncompressed pdf, both lines are exactly the same. However, if I 
remove lines 3 and 4 from the example, then there is indeed a 
difference, so the problem seems to be with luaotfload (which I thought 
uses context code)?

> Level 1 is rather useless .. (it was part of experiments when pdftex
> evolved) and by not mentioning it we hope that it will not be used

Level 1 makes sense for users who need to reproduce a document with 
unchanged line (and page) breaks. But anyway, I'll keep in mind that the 
luatex manual can't be trusted.


>> With luatex, however, there is no difference between
>>
>> | \expandglyphsinfont 20 20 5 autoexpand
>>
>> and
>>
>> | \expandglyphsinfont 20 20 5
>
> Because we don't have pre-generated (copies of) fonts at all,

OK, so I take it that autoexpand is always true. But then I wonder why 
\expandglyphsinfont still accepts the autoexpand keywords at all, and 
also the font table still has the key "auto_expand", if its value makes 
no difference?

>> Existing expanded font instances are ignored, and only the base font
>> is embedded in the pdf. Expansion seems to be calculated mechanically
>> and linearly instead of taking into account the width axis of a
>> Multiple Master font.
> There is no support for multiple masters which is obsolete technology
> and (recently) has been cq. is being replaced by variable fonts.

Obsolete or not, MM fonts (and MetaFont) with their parametrised width 
axis still allow typographically superior quality over expansion by 
linear distortion. Variable fonts may well be the future, and I would be 
excited to see them supported by luatex one day (I reckon this is not 
yet the case?), but at present production-ready fonts don't even seem to 
be available.


Best,
-- 
  Robert


From pragma at wxs.nl  Fri Jul  7 18:34:40 2017
From: pragma at wxs.nl (Hans Hagen)
Date: Fri, 7 Jul 2017 18:34:40 +0200
Subject: [luatex] font expansion
In-Reply-To: <ojocd1$954$1@blaine.gmane.org>
References: <ojjt7s$hh7$1@blaine.gmane.org>
 <cf4c2ba1-0937-2cde-0e06-f12bee4a8d57@wxs.nl> <ojlm01$3p4$1@blaine.gmane.org>
 <0920e3ab-5d50-18af-8848-697ee15a0a9a@wxs.nl> <ojocd1$954$1@blaine.gmane.org>
Message-ID: <3c368bba-b5c5-797f-f8ce-f2c758015399@wxs.nl>

On 7/7/2017 6:20 PM, Robert wrote:

>>> Existing expanded font instances are ignored, and only the base font
>>> is embedded in the pdf. Expansion seems to be calculated mechanically
>>> and linearly instead of taking into account the width axis of a
>>> Multiple Master font.
>> There is no support for multiple masters which is obsolete technology
>> and (recently) has been cq. is being replaced by variable fonts.
> 
> Obsolete or not, MM fonts (and MetaFont) with their parametrised width 
> axis still allow typographically superior quality over expansion by 
> linear distortion. Variable fonts may well be the future, and I would be 
> excited to see them supported by luatex one day (I reckon this is not 
> yet the case?), but at present production-ready fonts don't even seem to 
> be available.
There are not that many mm fonts so it makes no sense to add code to 
support them (the same is true for omega fonts). AFAIK one can make an 
instance of such fonts and use that.

Concerning variable fonts: these are already supported for a while (and 
supported by context) but indeed production quality fonts are not yet 
available and the standard is not yet final.

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From w.m.l at gmx.net  Sat Jul  8 00:16:18 2017
From: w.m.l at gmx.net (Robert)
Date: Sat, 8 Jul 2017 00:16:18 +0200
Subject: [luatex] font expansion
In-Reply-To: <3c368bba-b5c5-797f-f8ce-f2c758015399@wxs.nl>
References: <ojjt7s$hh7$1@blaine.gmane.org>
 <cf4c2ba1-0937-2cde-0e06-f12bee4a8d57@wxs.nl> <ojlm01$3p4$1@blaine.gmane.org>
 <0920e3ab-5d50-18af-8848-697ee15a0a9a@wxs.nl> <ojocd1$954$1@blaine.gmane.org>
 <3c368bba-b5c5-797f-f8ce-f2c758015399@wxs.nl>
Message-ID: <ojp17c$c6c$1@blaine.gmane.org>

On 07.07.17 18:34, Hans Hagen wrote:
> AFAIK one can make an instance of such fonts and use that.

But that's what I've been asking about the whole time: whether it is 
possible to use instances instead of autoexpanding (ie., linear 
distortion). And my tests led me to believe that this is, in contrast to 
pdftex, *not* possible with luatex, which was corroborated by what you 
said in your last post:

> Because we don't have pre-generated (copies of) fonts at all

?


> Concerning variable fonts: these are already supported for a while

Does this mean that the width axis will be taken into account for expansion?


Best,
-- 
  Robert



From pragma at wxs.nl  Sat Jul  8 17:26:34 2017
From: pragma at wxs.nl (Hans Hagen)
Date: Sat, 8 Jul 2017 17:26:34 +0200
Subject: [luatex] font expansion
In-Reply-To: <ojp17c$c6c$1@blaine.gmane.org>
References: <ojjt7s$hh7$1@blaine.gmane.org>
 <cf4c2ba1-0937-2cde-0e06-f12bee4a8d57@wxs.nl> <ojlm01$3p4$1@blaine.gmane.org>
 <0920e3ab-5d50-18af-8848-697ee15a0a9a@wxs.nl> <ojocd1$954$1@blaine.gmane.org>
 <3c368bba-b5c5-797f-f8ce-f2c758015399@wxs.nl> <ojp17c$c6c$1@blaine.gmane.org>
Message-ID: <8cfe6c8b-c368-dfc6-befd-c58ce860db33@wxs.nl>

On 7/8/2017 12:16 AM, Robert wrote:
> On 07.07.17 18:34, Hans Hagen wrote:
>> AFAIK one can make an instance of such fonts and use that.
> 
> But that's what I've been asking about the whole time: whether it is 
> possible to use instances instead of autoexpanding (ie., linear 
> distortion). And my tests led me to believe that this is, in contrast to 
> pdftex, *not* possible with luatex, which was corroborated by what you 
> said in your last post:

I'm out pf th epdftex dev loop for a while but i wonder if it really 
creates instances from multiple masters. What it did was create copies 
of fonts i.e. the tfm character data with different widths for 
characters so that the par builder can use that info when breaking into 
lines. Then the backend adds that instance (when used) which is nothing 
more that using the same font with a different width array and applying 
a different horizontal scaling. Luatex does not need to create the copies.

In the early (research) time of pdftex it could embed metafony instances
and create them runtime and/or use fonts with a scale added to the 
filename given that a map file provides the real thing. But again, the 
engine itself created no instances.

>> Because we don't have pre-generated (copies of) fonts at all
> 
> ?

See above: pdftex creates a copy of the tfm data with different widths. 
Also pdftex shares font instances (so best not change properties of a 
font in a global way what is actually happening when later on glyphs 
scaling is applied). Luatex doesn't do that.

>> Concerning variable fonts: these are already supported for a while
> 
> Does this mean that the width axis will be taken into account for 
> expansion?
No, as currently the hard coded mechanism is using scaling. But its 
trivial to kick in a copy with a scaled axis in an extra (lua driven) 
pass given that there is a variation in the font that is tuned for it 
(which i doubt, because often other properties (region related and so) 
also change). I will probably do that once there are useable public and 
free fonts.

(Btw, most people won't see the difference between a few pct horizontal 
scaling and some axis driven thing ... what we do see is annoying 
excessive scaling which unfortunately shows up more and more and for me 
that is then a don't read decision.)

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From eduardoochs at gmail.com  Mon Jul 10 06:55:15 2017
From: eduardoochs at gmail.com (Eduardo Ochs)
Date: Mon, 10 Jul 2017 01:55:15 -0300
Subject: [luatex] A question on "lualatex -record" and "require"
Message-ID: <CADs++6gwmNEQS=xaDDmJkxbtb4JheWhBk1vTwYi+226e5MkPRA@mail.gmail.com>

Hi all,

I have a script that parses the .fls file generated by something like

  lualatex -record foo.tex

and packs all .tex, .lua, etc files that are used by foo.tex and that
not from the texlive installation into a tarball... My script used to
work well when I was using luatex-0.79.1, then it broke when I had to
revert to the luatex-0.76 that came with a Debian installation (long
story not worth telling), and now I installed texlive-2017 and it
works only up to a certain point...

QUESTION: what (or where? Links to the source would be great) is the
code that makes the "require" in luatex produce lines these in the
.fls file?

  INPUT dednat6/dednat6.lua
  INPUT dednat6/lualoader.lua
  INPUT dednat6/binloader.lua
  INPUT edrxtikz.lua
  INPUT /home/edrx/dednat6/dednat6.lua
  INPUT edrxpict.lua

It seems that I need to add something to the extra loader that I add
to package.searchers, whose code is here...

  http://angg.twu.net/LATEX/dednat6/lualoader.lua.html

Cheers & thanks in advance,
  Eduardo Ochs
  http://angg.twu.net/luatex.html

From eduardoochs at gmail.com  Mon Jul 10 16:25:38 2017
From: eduardoochs at gmail.com (Eduardo Ochs)
Date: Mon, 10 Jul 2017 11:25:38 -0300
Subject: [luatex] A question on "lualatex -record" and "require"
In-Reply-To: <CADs++6gwmNEQS=xaDDmJkxbtb4JheWhBk1vTwYi+226e5MkPRA@mail.gmail.com>
References: <CADs++6gwmNEQS=xaDDmJkxbtb4JheWhBk1vTwYi+226e5MkPRA@mail.gmail.com>
Message-ID: <CADs++6jyeX3V_hWRKshH+wd7eqt1PSXxHZOOiF_LZvhnoDqR_g@mail.gmail.com>

I just found the answer by myself, sorry for the noise...

I ran "grep -w INPUT" on the luatex source tree and noticed that I
should look for calls to "recorder_record_input" (defined in
source/texk/web2c/lib/openclose.c), then I discovered that it is
called by "luatex_loadfile" and "luatex_dofile" in
source/texk/web2c/luatexdir/lua/luastuff.w... I made my loader
function use "loadfile(filename)" instead of the low-level code that I
was using that was based on load/loadstring, and everything worked.

  Cheers,
    Eduardo Ochs
    http://angg.twu.net/luatex.html

From squinky86 at gmail.com  Thu Jul 13 00:07:34 2017
From: squinky86 at gmail.com (Jon Hood)
Date: Wed, 12 Jul 2017 17:07:34 -0500
Subject: [luatex] Undefined Control Sequence with attachfile package
Message-ID: <CAD0jTRt_szTCcPXiQ59+C10sW=LbT3Mwhr2aKvO8A1xYcNACSA@mail.gmail.com>

Attempting to run lualatex on the following results in an error. Am I
doing something wrong with the attachfile package? It says that it
supports luatex, and it works fine when I use pdflatex...

$ lualatex --version
This is LuaTeX, Version 1.0.4 (TeX Live 2017/Cygwin)

$ grep -A 1 ProvidesPackage
/usr/share/texmf-dist/tex/latex/attachfile/attachfile.sty
\ProvidesPackage{attachfile}
    [2016/09/18 v1.9 PDF 1.3+ file attachment]

$ cat mwe.tex
\documentclass{article}
\usepackage{attachfile}
\begin{document}
\attachfile[icon=Paperclip, mimetype=text/plain]{mwe.tex}
\end{document}

$ lualatex mwe
This is LuaTeX, Version 1.0.4 (TeX Live 2017/Cygwin)
 restricted system commands enabled.
(./mwe.tex
LaTeX2e <2017-04-15>
(using cache: /var/lib/texmf/luatex-cache/generic)
luaotfload | main : initialization completed in 0.141 seconds
Babel <3.10> and hyphenation patterns for 1 language(s) loaded.
(/usr/share/texmf-dist/tex/latex/base/article.cls
Document Class: article 2014/09/29 v1.4h Standard LaTeX document class
(/usr/share/texmf-dist/tex/latex/base/size10.clo(load luc: /var/lib/texmf/luate
x-cache/generic/fonts/otl/lmroman10-regular.luc)))
(/usr/share/texmf-dist/tex/latex/attachfile/attachfile.sty
(/usr/share/texmf-dist/tex/generic/oberdiek/ifpdf.sty)
(/usr/share/texmf-dist/tex/latex/graphics/keyval.sty)
(/usr/share/texmf-dist/tex/latex/tools/calc.sty)
(/usr/share/texmf-dist/tex/latex/graphics/color.sty
(/usr/share/texmf-dist/tex/latex/graphics-cfg/color.cfg)
(/usr/share/texmf-dist/tex/latex/graphics-def/luatex.def
(/usr/share/texmf-dist/tex/generic/oberdiek/infwarerr.sty)
(/usr/share/texmf-dist/tex/generic/oberdiek/ltxcmds.sty)))
(/usr/share/texmf-dist/tex/latex/hyperref/hyperref.sty
(/usr/share/texmf-dist/tex/generic/oberdiek/hobsub-hyperref.sty
(/usr/share/texmf-dist/tex/generic/oberdiek/hobsub-generic.sty
(/usr/share/texmf-dist/scripts/oberdiek/oberdiek.luatex.lua)))
(/usr/share/texmf-dist/tex/generic/ifxetex/ifxetex.sty)
(/usr/share/texmf-dist/tex/latex/oberdiek/auxhook.sty)
(/usr/share/texmf-dist/tex/latex/oberdiek/kvoptions.sty)
(/usr/share/texmf-dist/tex/latex/hyperref/pd1enc.def)
(/usr/share/texmf-dist/tex/latex/latexconfig/hyperref.cfg)
(/usr/share/texmf-dist/tex/latex/url/url.sty))

Package hyperref Message: Driver (autodetected): hluatex.

(/usr/share/texmf-dist/tex/latex/hyperref/hluatex.def
(/usr/share/texmf-dist/tex/latex/oberdiek/rerunfilecheck.sty))) (./mwe.aux)
(/usr/share/texmf-dist/tex/context/base/mkii/supp-pdf.mkii
[Loading MPS to PDF converter (version 2006.09.02).]
) (/usr/share/texmf-dist/tex/latex/hyperref/nameref.sty
(/usr/share/texmf-dist/tex/generic/oberdiek/gettitlestring.sty)) (./mwe.out)
(./mwe.out)<<mwe.tex>>
! Undefined control sequence.
\atfi at set@appearance  ...x }}\immediate \pdfxform
                                                  \atfi at appearancebox \edef ...

l.4 ...icon=Paperclip, mimetype=text/plain]{mwe.tex}

From reinhard.kotucha at web.de  Thu Jul 13 03:12:16 2017
From: reinhard.kotucha at web.de (Reinhard Kotucha)
Date: Thu, 13 Jul 2017 03:12:16 +0200
Subject: [luatex] Undefined Control Sequence with attachfile package
In-Reply-To: <CAD0jTRt_szTCcPXiQ59+C10sW=LbT3Mwhr2aKvO8A1xYcNACSA@mail.gmail.com>
References: <CAD0jTRt_szTCcPXiQ59+C10sW=LbT3Mwhr2aKvO8A1xYcNACSA@mail.gmail.com>
Message-ID: <22886.51440.597163.484877@zaphod.ms25.net>

On 2017-07-12 at 17:07:34 -0500, Jon Hood wrote:

 > Attempting to run lualatex on the following results in an error. Am I
 > doing something wrong with the attachfile package? It says that it
 > supports luatex, and it works fine when I use pdflatex...
 > 
 > $ lualatex --version
 > This is LuaTeX, Version 1.0.4 (TeX Live 2017/Cygwin)
 > 
 > $ grep -A 1 ProvidesPackage
 > /usr/share/texmf-dist/tex/latex/attachfile/attachfile.sty
 > \ProvidesPackage{attachfile}
 >     [2016/09/18 v1.9 PDF 1.3+ file attachment]
 > 
 > $ cat mwe.tex
 > \documentclass{article}
 > \usepackage{attachfile}
 > \begin{document}
 > \attachfile[icon=Paperclip, mimetype=text/plain]{mwe.tex}
 > \end{document}
 > 
 > $ lualatex mwe
 > This is LuaTeX, Version 1.0.4 (TeX Live 2017/Cygwin)
 >  restricted system commands enabled.
 > (./mwe.tex
 > LaTeX2e <2017-04-15>
 > (using cache: /var/lib/texmf/luatex-cache/generic)
 > luaotfload | main : initialization completed in 0.141 seconds
 > Babel <3.10> and hyphenation patterns for 1 language(s) loaded.
 > (/usr/share/texmf-dist/tex/latex/base/article.cls
 > Document Class: article 2014/09/29 v1.4h Standard LaTeX document class
 > (/usr/share/texmf-dist/tex/latex/base/size10.clo(load luc: /var/lib/texmf/luate
 > x-cache/generic/fonts/otl/lmroman10-regular.luc)))
 > (/usr/share/texmf-dist/tex/latex/attachfile/attachfile.sty
 > (/usr/share/texmf-dist/tex/generic/oberdiek/ifpdf.sty)
 > (/usr/share/texmf-dist/tex/latex/graphics/keyval.sty)
 > (/usr/share/texmf-dist/tex/latex/tools/calc.sty)
 > (/usr/share/texmf-dist/tex/latex/graphics/color.sty
 > (/usr/share/texmf-dist/tex/latex/graphics-cfg/color.cfg)
 > (/usr/share/texmf-dist/tex/latex/graphics-def/luatex.def
 > (/usr/share/texmf-dist/tex/generic/oberdiek/infwarerr.sty)
 > (/usr/share/texmf-dist/tex/generic/oberdiek/ltxcmds.sty)))
 > (/usr/share/texmf-dist/tex/latex/hyperref/hyperref.sty
 > (/usr/share/texmf-dist/tex/generic/oberdiek/hobsub-hyperref.sty
 > (/usr/share/texmf-dist/tex/generic/oberdiek/hobsub-generic.sty
 > (/usr/share/texmf-dist/scripts/oberdiek/oberdiek.luatex.lua)))
 > (/usr/share/texmf-dist/tex/generic/ifxetex/ifxetex.sty)
 > (/usr/share/texmf-dist/tex/latex/oberdiek/auxhook.sty)
 > (/usr/share/texmf-dist/tex/latex/oberdiek/kvoptions.sty)
 > (/usr/share/texmf-dist/tex/latex/hyperref/pd1enc.def)
 > (/usr/share/texmf-dist/tex/latex/latexconfig/hyperref.cfg)
 > (/usr/share/texmf-dist/tex/latex/url/url.sty))
 > 
 > Package hyperref Message: Driver (autodetected): hluatex.
 > 
 > (/usr/share/texmf-dist/tex/latex/hyperref/hluatex.def
 > (/usr/share/texmf-dist/tex/latex/oberdiek/rerunfilecheck.sty))) (./mwe.aux)
 > (/usr/share/texmf-dist/tex/context/base/mkii/supp-pdf.mkii
 > [Loading MPS to PDF converter (version 2006.09.02).]
 > ) (/usr/share/texmf-dist/tex/latex/hyperref/nameref.sty
 > (/usr/share/texmf-dist/tex/generic/oberdiek/gettitlestring.sty)) (./mwe.out)
 > (./mwe.out)<<mwe.tex>>
 > ! Undefined control sequence.
 > \atfi at set@appearance  ...x }}\immediate \pdfxform
 >                                                   \atfi at appearancebox \edef ...
 > 
 > l.4 ...icon=Paperclip, mimetype=text/plain]{mwe.tex}

Does it work if you add the line

  \let\pdfxform\saveboxresource

to the preamble?

Some pdftex primitives were renamed in luatex recently.  I vaguely
remember that there is a LaTeX package which provides backwards
compatibility but I don't remember its name.

Regards,
  Reinhard

-- 
------------------------------------------------------------------
Reinhard Kotucha                            Phone: +49-511-3373112
Marschnerstr. 25
D-30167 Hannover                    mailto:reinhard.kotucha at web.de
------------------------------------------------------------------

From listwatch at moss.in-berlin.de  Thu Jul 13 04:18:38 2017
From: listwatch at moss.in-berlin.de (Martin Wilhelm Leidig)
Date: Thu, 13 Jul 2017 04:18:38 +0200
Subject: [luatex] Undefined Control Sequence with attachfile package
In-Reply-To: <22886.51440.597163.484877@zaphod.ms25.net>
References: <CAD0jTRt_szTCcPXiQ59+C10sW=LbT3Mwhr2aKvO8A1xYcNACSA@mail.gmail.com>
 <22886.51440.597163.484877@zaphod.ms25.net>
Message-ID: <8C6EA59D-8B4B-45BC-9D33-1EB97EC86DD4@moss.in-berlin.de>


> Am 2017-07-13 um 03.12 schrieb Reinhard Kotucha <reinhard.kotucha at web.de>:
[?]
> Some pdftex primitives were renamed in luatex recently.  I vaguely
> remember that there is a LaTeX package which provides backwards
> compatibility but I don't remember its name.

luatex85, <https://ctan.org/pkg/luatex85>.


Prost!

-Moss-
--
Martin Wilhelm Leidig, SatzTeXnik
Dante e. V. #1580



-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://tug.org/pipermail/luatex/attachments/20170713/c9c891b5/attachment.sig>

From frank.mittelbach at latex-project.org  Thu Jul 13 08:52:18 2017
From: frank.mittelbach at latex-project.org (Frank Mittelbach)
Date: Thu, 13 Jul 2017 08:52:18 +0200
Subject: [luatex] Undefined Control Sequence with attachfile package
In-Reply-To: <8C6EA59D-8B4B-45BC-9D33-1EB97EC86DD4@moss.in-berlin.de>
References: <CAD0jTRt_szTCcPXiQ59+C10sW=LbT3Mwhr2aKvO8A1xYcNACSA@mail.gmail.com>
 <22886.51440.597163.484877@zaphod.ms25.net>
 <8C6EA59D-8B4B-45BC-9D33-1EB97EC86DD4@moss.in-berlin.de>
Message-ID: <5c6e0c20-226b-dcf2-738b-c77e46d8f675@latex-project.org>

Am 13.07.2017 um 04:18 schrieb Martin Wilhelm Leidig:
>> Some pdftex primitives were renamed in luatex recently.  I vaguely
>> remember that there is a LaTeX package which provides backwards
>> compatibility but I don't remember its name.
> luatex85,<https://ctan.org/pkg/luatex85>.

not so recently any more :-)

as stated in the documentation of the package, this is intended to 
provide a temporary fix for packages not updated to the newer luatex engine.

so it would be best if you alert the developer of the attachfile package 
that it doesn't work properly any longer and that it should be updated 
accordingly

frank

From w.m.l at gmx.net  Sat Jul 15 02:02:04 2017
From: w.m.l at gmx.net (Robert)
Date: Sat, 15 Jul 2017 02:02:04 +0200
Subject: [luatex] font expansion
In-Reply-To: <8cfe6c8b-c368-dfc6-befd-c58ce860db33@wxs.nl>
References: <ojjt7s$hh7$1@blaine.gmane.org>
 <cf4c2ba1-0937-2cde-0e06-f12bee4a8d57@wxs.nl> <ojlm01$3p4$1@blaine.gmane.org>
 <0920e3ab-5d50-18af-8848-697ee15a0a9a@wxs.nl> <ojocd1$954$1@blaine.gmane.org>
 <3c368bba-b5c5-797f-f8ce-f2c758015399@wxs.nl> <ojp17c$c6c$1@blaine.gmane.org>
 <8cfe6c8b-c368-dfc6-befd-c58ce860db33@wxs.nl>
Message-ID: <okbm1m$faq$1@blaine.gmane.org>

On 08.07.17 17:26, Hans Hagen wrote:
> On 7/8/2017 12:16 AM, Robert wrote:
>> On 07.07.17 18:34, Hans Hagen wrote:
>>> AFAIK one can make an instance of such fonts and use that.
>>
>> But that's what I've been asking about the whole time: whether it is
>> possible to use instances instead of autoexpanding (ie., linear
>> distortion). And my tests led me to believe that this is, in contrast
>> to pdftex, *not* possible with luatex, which was corroborated by what
>> you said in your last post:
>
> I'm out pf th epdftex dev loop for a while but i wonder if it really
> creates instances from multiple masters.

No, it does not, and that's the whole point. In pdftex it is possible to 
use *existing* instances (created by external tools, in the case of MM 
fonts, mmpfb, for example, which have to be named <font>+5.tfm, 
<font>+10.tfm and so forth), *instead* of automatic expansion. So that, 
if you have created font instances in advance, there is a difference 
between specifying the "autoexpand" key to \pdffontexpand (in which case 
pdftex would disregard the existing instances), and leaving away the 
"autoexpand" key (in which case it would use the existing instances).

In luatex, there is no difference, and it seems to always autoexpand 
instead. I don't care if it does, it's just contrary to what the manual 
seems to suggest:
   (1) there is no mention of a difference between luatex's 
\expandglyphsinfont and its pdftex counterpart \pdffontexpand in terms 
of "autoexpand";
   (2) the boolean key "auto_expand" still exists in the "fonts" array, 
even though its setting doesn't seem to make any difference whatsoever.


> What it did was create copies
> of fonts i.e. the tfm character data with different widths for
> characters so that the par builder can use that info when breaking into
> lines. Then the backend adds that instance (when used) which is nothing
> more that using the same font with a different width array and applying
> a different horizontal scaling. Luatex does not need to create the copies.

I guess here you are talking about pdftex's old (pre-1.20) method of 
autoexpanding by embedding multiple (automatically calculated) instances 
of the same font. Since 1.20, pdftex does not create copies anymore 
either, but that's not what I'm asking about anyway.

> In the early (research) time of pdftex it could embed metafony instances
> and create them runtime and/or use fonts with a scale added to the
> filename given that a map file provides the real thing.

Exactly, only that this is still today possible in pdftex, but not in 
luatex.


>>> Concerning variable fonts: these are already supported for a while
>>
>> Does this mean that the width axis will be taken into account for
>> expansion?
> No, as currently the hard coded mechanism is using scaling. But its
> trivial to kick in a copy with a scaled axis in an extra (lua driven)
> pass given that there is a variation in the font that is tuned for it
> (which i doubt, because often other properties (region related and so)
> also change). I will probably do that once there are useable public and
> free fonts.

Good to hear that it's trivial, and looking forward to seeing this 
supported.


Best,
-- 
  Robert


From pragma at wxs.nl  Sat Jul 15 13:03:08 2017
From: pragma at wxs.nl (Hans Hagen)
Date: Sat, 15 Jul 2017 13:03:08 +0200
Subject: [luatex] font expansion
In-Reply-To: <okbm1m$faq$1@blaine.gmane.org>
References: <ojjt7s$hh7$1@blaine.gmane.org>
 <cf4c2ba1-0937-2cde-0e06-f12bee4a8d57@wxs.nl> <ojlm01$3p4$1@blaine.gmane.org>
 <0920e3ab-5d50-18af-8848-697ee15a0a9a@wxs.nl> <ojocd1$954$1@blaine.gmane.org>
 <3c368bba-b5c5-797f-f8ce-f2c758015399@wxs.nl> <ojp17c$c6c$1@blaine.gmane.org>
 <8cfe6c8b-c368-dfc6-befd-c58ce860db33@wxs.nl> <okbm1m$faq$1@blaine.gmane.org>
Message-ID: <1e0a635b-6322-582d-f2d0-0dc66efc56a0@wxs.nl>

On 7/15/2017 2:02 AM, Robert wrote:
> On 08.07.17 17:26, Hans Hagen wrote:
>> On 7/8/2017 12:16 AM, Robert wrote:
>>> On 07.07.17 18:34, Hans Hagen wrote:
>>>> AFAIK one can make an instance of such fonts and use that.
>>>
>>> But that's what I've been asking about the whole time: whether it is
>>> possible to use instances instead of autoexpanding (ie., linear
>>> distortion). And my tests led me to believe that this is, in contrast
>>> to pdftex, *not* possible with luatex, which was corroborated by what
>>> you said in your last post:
>>
>> I'm out pf th epdftex dev loop for a while but i wonder if it really
>> creates instances from multiple masters.
> 
> No, it does not, and that's the whole point. In pdftex it is possible to 
> use *existing* instances (created by external tools, in the case of MM 
> fonts, mmpfb, for example, which have to be named <font>+5.tfm, 
> <font>+10.tfm and so forth), *instead* of automatic expansion. So that, 
> if you have created font instances in advance, there is a difference 
> between specifying the "autoexpand" key to \pdffontexpand (in which case 
> pdftex would disregard the existing instances), and leaving away the 
> "autoexpand" key (in which case it would use the existing instances).

in fact it also relates to pdftex being tfm based while luatex has wide 
fonts and uses the same backend logic for both and therefore map files 
and backend-used-fonts are dealt with differently (tfm / pfb still can 
use map entries but for instance expansion in luatex has no concept of 
instances, only of expansion factors of glyphs)

(auto expansion is then simulated by automatically generating glyph 
factors automatically while defining the font in lua)

anyway, there are several places where pdftex and luatex differ and this 
is one of them (i can add a remark in the manual about it) and so if you 
look at the pdf you will see the same font being used but with a 
different transform matrix

it's not our objective to be compatible with e.g. pdftex and omega 
(aleph) in all aspects (esp not when it concerns extensions; we dropped 
quite a lot actually)

> In luatex, there is no difference, and it seems to always autoexpand 
> instead. I don't care if it does, it's just contrary to what the manual 
> seems to suggest:
>    (1) there is no mention of a difference between luatex's 
> \expandglyphsinfont and its pdftex counterpart \pdffontexpand in terms 
> of "autoexpand";
>    (2) the boolean key "auto_expand" still exists in the "fonts" array, 
> even though its setting doesn't seem to make any difference whatsoever.

we kept the key in order not to break macro compatiblity (but i agree 
that it can be removed in the lua part and will do that)

>> What it did was create copies
>> of fonts i.e. the tfm character data with different widths for
>> characters so that the par builder can use that info when breaking into
>> lines. Then the backend adds that instance (when used) which is nothing
>> more that using the same font with a different width array and applying
>> a different horizontal scaling. Luatex does not need to create the 
>> copies.
> 
> I guess here you are talking about pdftex's old (pre-1.20) method of 
> autoexpanding by embedding multiple (automatically calculated) instances 
> of the same font. Since 1.20, pdftex does not create copies anymore 
> either, but that's not what I'm asking about anyway.
> 
>> In the early (research) time of pdftex it could embed metafony instances
>> and create them runtime and/or use fonts with a scale added to the
>> filename given that a map file provides the real thing.
> 
> Exactly, only that this is still today possible in pdftex, but not in 
> luatex.

of course one can do that: just apply hz expansion to a font and
run over a typeset paragraph and remap (id,ex) combinations to a new 
font id associated with generate metafonts (or use predefined fonts) .. 
that is the (in fact more flexible) luatex way of doing things

>>>> Concerning variable fonts: these are already supported for a while
>>>
>>> Does this mean that the width axis will be taken into account for
>>> expansion?
>> No, as currently the hard coded mechanism is using scaling. But its
>> trivial to kick in a copy with a scaled axis in an extra (lua driven)
>> pass given that there is a variation in the font that is tuned for it
>> (which i doubt, because often other properties (region related and so)
>> also change). I will probably do that once there are useable public and
>> free fonts.
> 
> Good to hear that it's trivial, and looking forward to seeing this 
> supported.
(only when i see use for it, and of course only when there are free high 
quality fonts available that have good wider / narrower instances that 
fit well with the default instance; in fact, in the true nature of 
expansion - hz - one can use fonts that have alternative shapes as 
gutenberg had, but till now i didn't see such fonts)

(as it was one of things that came to mind when i implemented support 
for variable fonts and was discussed at meetings i might as well cook up 
some proof of concept just for fun)

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From luigi.scarso at gmail.com  Sat Jul 15 17:21:11 2017
From: luigi.scarso at gmail.com (luigi scarso)
Date: Sat, 15 Jul 2017 17:21:11 +0200
Subject: [luatex] font expansion
In-Reply-To: <1e0a635b-6322-582d-f2d0-0dc66efc56a0@wxs.nl>
References: <ojjt7s$hh7$1@blaine.gmane.org>
 <cf4c2ba1-0937-2cde-0e06-f12bee4a8d57@wxs.nl>
 <ojlm01$3p4$1@blaine.gmane.org> <0920e3ab-5d50-18af-8848-697ee15a0a9a@wxs.nl>
 <ojocd1$954$1@blaine.gmane.org> <3c368bba-b5c5-797f-f8ce-f2c758015399@wxs.nl>
 <ojp17c$c6c$1@blaine.gmane.org> <8cfe6c8b-c368-dfc6-befd-c58ce860db33@wxs.nl>
 <okbm1m$faq$1@blaine.gmane.org> <1e0a635b-6322-582d-f2d0-0dc66efc56a0@wxs.nl>
Message-ID: <CAG5iGsB=tW22dEp=8gXvDFEyyLtArkqNFMUcFmMT9JhwRnHF=A@mail.gmail.com>

Il 15 lug 2017 13:03, "Hans Hagen" <pragma at wxs.nl> ha scritto:

(as it was one of things that came to mind when i implemented support for
variable fonts and was discussed at meetings i might as well cook up some
proof of concept just for fun)


this sounds something doable with mflua.


--
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20170715/8a770e8f/attachment.html>

From patrick at gundla.ch  Mon Jul 24 08:53:51 2017
From: patrick at gundla.ch (Patrick Gundlach)
Date: Mon, 24 Jul 2017 08:53:51 +0200
Subject: [luatex] font expansion and parshape
Message-ID: <67C183F4-4317-4D1F-AD54-01D570CE8D65@gundla.ch>

Dear experts,


my observation is that font expansion and parshape don't (didn't) play well together, is that correct?

I use a very old version of LuaTeX (0.79) and break the paragraph by calling tex.linebreak(). I also set 

    f.stretch       = 40
    f.shrink        = 30
    f.step          = 10
    f.auto_expand   = true

on the fonts. When the parameter on the second option of tex.linebreak() has a parshape table, (left margin 0, right margin at max width, so the same margins etc. as the regular text) I get a different line break. 

My question is: is this intentional or is there something I can do on my side to prevent the different behavior?

I can't provide a plain TeX test file yet, just an output of my software at https://github.com/speedata/publisher/issues/125 

The first paragraph uses a parshape table.


Patrick






From daniel.flipo at free.fr  Thu Jul 27 17:04:42 2017
From: daniel.flipo at free.fr (Daniel Flipo)
Date: Thu, 27 Jul 2017 17:04:42 +0200
Subject: [luatex] \localleftbox, \localrightbox and \footnotes
Message-ID: <5bfb3bcd-e47d-7c1b-e2ff-3be5516c16ff@free.fr>

Hi all,

The following example shows that the content of \localleftbox leaks into
footnotes.  The same is true with \localrightbox.

--8<---------------cut here---------------start------------->8---
\input luaotfload.sty
\def\myfontname{Arial}
\font\myfont={name:\myfontname} at 12pt
\myfont

\hsize=160mm
\parindent=0mm

Bla bla bla\footnote{*}{Foo}

\localleftbox{|}
Bla bla bla\footnote{**}{Bar}
\bye
--8<---------------cut here---------------end--------------->8---

Is it a known feature or a bug?  Coding
{\localleftbox{}\footnote{**}{Bar}} is an option, not very pleasant though?

Best regards,
-- 
Daniel Flipo

From pragma at wxs.nl  Thu Jul 27 18:50:11 2017
From: pragma at wxs.nl (Hans Hagen)
Date: Thu, 27 Jul 2017 18:50:11 +0200
Subject: [luatex] \localleftbox, \localrightbox and \footnotes
In-Reply-To: <5bfb3bcd-e47d-7c1b-e2ff-3be5516c16ff@free.fr>
References: <5bfb3bcd-e47d-7c1b-e2ff-3be5516c16ff@free.fr>
Message-ID: <524ea45e-4eb0-e2e5-300b-237d0e32ecb0@wxs.nl>

On 7/27/2017 5:04 PM, Daniel Flipo wrote:
> Hi all,
> 
> The following example shows that the content of \localleftbox leaks into
> footnotes.  The same is true with \localrightbox.
> 
> --8<---------------cut here---------------start------------->8---
> \input luaotfload.sty
> \def\myfontname{Arial}
> \font\myfont={name:\myfontname} at 12pt
> \myfont
> 
> \hsize=160mm
> \parindent=0mm
> 
> Bla bla bla\footnote{*}{Foo}
> 
> \localleftbox{|}
> Bla bla bla\footnote{**}{Bar}
> \bye
> --8<---------------cut here---------------end--------------->8---
> 
> Is it a known feature or a bug?  Coding
> {\localleftbox{}\footnote{**}{Bar}} is an option, not very pleasant though?
It's a feature .. but if you want to use trickery like \local*box your 
macro package needs to manage it properly (because only the package know 
what is intended) .. you can do:

\let\normalfootnote\footnote

\def\footnote#1#2%
   {\begingroup
    \localleftbox{}%
    \normalfootnote{#1}{#2}%
    \endgroup}

but even then I bet that you get local boxes in places. In fact it's an 
example of a limited useable feature (and why not more such features get 
aded to the core). In retrospect we could have removed it.

Hans


-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From daniel.flipo at free.fr  Thu Jul 27 19:43:00 2017
From: daniel.flipo at free.fr (Daniel Flipo)
Date: Thu, 27 Jul 2017 19:43:00 +0200
Subject: [luatex] \localleftbox, \localrightbox and \footnotes
In-Reply-To: <524ea45e-4eb0-e2e5-300b-237d0e32ecb0@wxs.nl>
References: <5bfb3bcd-e47d-7c1b-e2ff-3be5516c16ff@free.fr>
 <524ea45e-4eb0-e2e5-300b-237d0e32ecb0@wxs.nl>
Message-ID: <12f7d5fa-5be1-aafd-ea5a-0b78e234750d@free.fr>



Le 27/07/2017 ? 18:50, Hans Hagen a ?crit :
> It's a feature .. but if you want to use trickery like \local*box your
> macro package needs to manage it properly (because only the package know
> what is intended) .. you can do:
> 
> \let\normalfootnote\footnote
> 
> \def\footnote#1#2%
>   {\begingroup
>    \localleftbox{}%
>    \normalfootnote{#1}{#2}%
>    \endgroup}

Yes, I can reset \localleftbox{} locally, I just wanted to be sure no
better option was available upstream.

> but even then I bet that you get local boxes in places. In fact it's an
> example of a limited useable feature (and why not more such features get
> aded to the core). In retrospect we could have removed it.

Please do not remove it! it is currently the simplest and safest way to
add French quotes at the beginning of every line in case of embedded
quotations --an old French typographic oddity ;-).

-- 
Daniel Flipo

From listas at tex-tipografia.com  Sun Jul 30 18:13:08 2017
From: listas at tex-tipografia.com (Javier Bezos)
Date: Sun, 30 Jul 2017 18:13:08 +0200
Subject: [luatex] Simple bidi
Message-ID: <597E0594.5010007@tex-tipografia.com>

I was intrigued by the possibility to devise a simple bidi algorithm
based on some assumptions -- Arabic by default, flat text (ie, no
nested directions), no math, etc. Since TeX is a markup language, I've
just ignored LRE, PDF end the like. One of my aims was to set
directions with just one loop, instead a series of them.

I managed to do it, with a second smaller loop for a special
case. Attached is the resulting code, which works in typical cases. I
tried to emulate the unicode behavior, but I'm not sure it's fully
compliant (I'd say it's not, but who knows :-)).  I have to add a few
things (eg, NSM, but little more, I hope).

Please, let me know if you find cases where the result is not what you
would expect, to improve it. The text has been copy-pasted from
Wikipedia (the only changes are % -> \%, and an extra [; I think
%68.3- has been wrongly entered).

(The bidi database is that by Khaled Hosny.)

Javier

-------------- next part --------------
A non-text attachment was scrubbed...
Name: bidiflat.zip
Type: application/x-zip-compressed
Size: 53831 bytes
Desc: not available
URL: <http://tug.org/pipermail/luatex/attachments/20170730/525cde62/attachment-0001.bin>

