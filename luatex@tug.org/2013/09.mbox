From Philipp.Gesang at alumni.uni-heidelberg.de  Tue Sep  3 10:57:59 2013
From: Philipp.Gesang at alumni.uni-heidelberg.de (Philipp Gesang)
Date: Tue, 3 Sep 2013 10:57:59 +0200
Subject: [luatex] Modifying protrusion default.
In-Reply-To: <20130829090656.74a1f083@wexfordpress>
References: <20130824112916.4f1d8872@wexfordpress>
 <20130825223107.GB13678@phlegethon>
 <20130829090656.74a1f083@wexfordpress>
Message-ID: <20130903085759.GA13509@phlegethon>

???<date: 2013-08-29, Thursday>???<from: john Culleton>???

> On Mon, 26 Aug 2013 00:31:07 +0200
> Philipp Gesang <Philipp.Gesang at alumni.uni-heidelberg.de> wrote:
> 
> > ???<date: 2013-08-24, Saturday>???<from: john Culleton>???
> > 
> > >                    These factors are too large for use in e.g., a
> > > novel. I can of course modify this file for my own use. But if I
> > > want to send the modified file to a client to use is it sufficient
> > > to just include a modified otfl-font-dum.lua file in the batch of
> > > macros I send to the customer? Or can I put the modified table in a
> > > my luatex template source document and expect it to override the
> > > original table?
> > >
> > > Or is there another way to use a modified protrusion table that is
> > > easily transportable to customers who aren't into replacing
> > > files in the innards of TeX?
> >  
> > I?ve added some example code to the test repo:
> > 
> >   https://bitbucket.org/phg/lua-la-tex-tests/src/tip/pln-expansion-protrusion-1.lua
> >   https://bitbucket.org/phg/lua-la-tex-tests/src/tip/pln-expansion-protrusion-1.tex
> > 
> > This should work with both luaotfload and luatex-fonts.
> > 
> > Basically, your options include a) manipulating the scale factors
> > of the default vector or b) making up your own vector. New
> > vectors, if added to the table fonts.protrusions.setups, can be
> > referred to by their name when defining a font just like the
> > default. E. g. create a vector
> > 
> >     fonts.protrusions.setups.myvector = {
> >       factor = 1,
> >       left   = 1,
> >       right  = 1,
> > 
> >       --- map code points to protrusion values
> >       --- [1] is  left, [2] is right
> >       [string.byte ","] = { 0, 0.4 },
> >       [string.byte "."] = { 0, 0.4 },
> >       ....
> >     }
> > 
> > and then in your document define a font like so:
> > 
> >   \pdfprotrudechars2
> >   \font \mainfont = "file:Iwona-Regular.otf:protrusion=myvector"
> > 
> > It?s not hard, except for coming up with sane values ;-)

> The hard part is adding either approach to the zip file I will send my
> customers.  Remember, my audience is not into modifying code in
> their TeX installation, whether it is TeXLive or Context minimal. Is
> there a way to add a macro to that zip file that will override the 
> code already embedded in the TeX installation? 

Not sure about a macro, but you can use the functions in the
example I linked to overwrite the ?default? values. Otoh, if you
ship your own texlive tree and don?t require the flexibility of
multiple vectors, then you can probably live with modifying the
defaults directly. In a recent luaotfload they reside in here:

    https://github.com/lualatex/luaotfload/blob/master/luaotfload-merged.lua#L13160

If you have a modified version of this file in the texmf-local/
tree, it should override the distribution default.

> And is there a plan to add the protrusion features already found in
> pdftex and Context MKIV to plain Luatex?

They are already there, in a sense. If you have a suggestion as
to how luaotfload should be expanded, it might be worthwhile to
file a feature request on the tracker [1]. Regarding the
fontloader (luatex-fonts) itself, it is up to Hans.

Good luck with your project,
Philipp


[1] https://github.com/lualatex/luaotfload/issues

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 490 bytes
Desc: not available
URL: <http://tug.org/pipermail/luatex/attachments/20130903/34bd436c/attachment.bin>

From John at wexfordpress.com  Tue Sep  3 16:08:32 2013
From: John at wexfordpress.com (john Culleton)
Date: Tue, 3 Sep 2013 10:08:32 -0400
Subject: [luatex] Modifying protrusion default.
In-Reply-To: <20130903085759.GA13509@phlegethon>
References: <20130824112916.4f1d8872@wexfordpress>
 <20130825223107.GB13678@phlegethon>
 <20130829090656.74a1f083@wexfordpress>
 <20130903085759.GA13509@phlegethon>
Message-ID: <20130903100832.086d0b0a@localb.wexfordpress.net>

On Tue, 3 Sep 2013 10:57:59 +0200
Philipp Gesang <Philipp.Gesang at alumni.uni-heidelberg.de> wrote:

> ???<date: 2013-08-29, Thursday>???<from: john Culleton>???
> 
> > On Mon, 26 Aug 2013 00:31:07 +0200
> > Philipp Gesang <Philipp.Gesang at alumni.uni-heidelberg.de> wrote:
> > 
> > > ???<date: 2013-08-24, Saturday>???<from: john Culleton>???
> > > 
> > > >                    These factors are too large for use in e.g.,
> > > > a novel. I can of course modify this file for my own use. But
> > > > if I want to send the modified file to a client to use is it
> > > > sufficient to just include a modified otfl-font-dum.lua file in
> > > > the batch of macros I send to the customer? Or can I put the
> > > > modified table in a my luatex template source document and
> > > > expect it to override the original table?
> > > >
> > > > Or is there another way to use a modified protrusion table that
> > > > is easily transportable to customers who aren't into replacing
> > > > files in the innards of TeX?
> > >  
> > > I?ve added some example code to the test repo:
> > > 
> > >   https://bitbucket.org/phg/lua-la-tex-tests/src/tip/pln-expansion-protrusion-1.lua
> > >   https://bitbucket.org/phg/lua-la-tex-tests/src/tip/pln-expansion-protrusion-1.tex
> > > 
> > > This should work with both luaotfload and luatex-fonts.
> > > 
> > > Basically, your options include a) manipulating the scale factors
> > > of the default vector or b) making up your own vector. New
> > > vectors, if added to the table fonts.protrusions.setups, can be
> > > referred to by their name when defining a font just like the
> > > default. E. g. create a vector
> > > 
> > >     fonts.protrusions.setups.myvector = {
> > >       factor = 1,
> > >       left   = 1,
> > >       right  = 1,
> > > 
> > >       --- map code points to protrusion values
> > >       --- [1] is  left, [2] is right
> > >       [string.byte ","] = { 0, 0.4 },
> > >       [string.byte "."] = { 0, 0.4 },
> > >       ....
> > >     }
> > > 
> > > and then in your document define a font like so:
> > > 
> > >   \pdfprotrudechars2
> > >   \font \mainfont = "file:Iwona-Regular.otf:protrusion=myvector"
> > > 
> > > It?s not hard, except for coming up with sane values ;-)
> 
> > The hard part is adding either approach to the zip file I will send
> > my customers.  Remember, my audience is not into modifying code in
> > their TeX installation, whether it is TeXLive or Context minimal. Is
> > there a way to add a macro to that zip file that will override the 
> > code already embedded in the TeX installation? 
> 
> Not sure about a macro, but you can use the functions in the
> example I linked to overwrite the ?default? values. Otoh, if you
> ship your own texlive tree and don?t require the flexibility of
> multiple vectors, then you can probably live with modifying the
> defaults directly. In a recent luaotfload they reside in here:
> 
>     https://github.com/lualatex/luaotfload/blob/master/luaotfload-merged.lua#L13160
> 
> If you have a modified version of this file in the texmf-local/
> tree, it should override the distribution default.
> 
> > And is there a plan to add the protrusion features already found in
> > pdftex and Context MKIV to plain Luatex?
> 
> They are already there, in a sense. If you have a suggestion as
> to how luaotfload should be expanded, it might be worthwhile to
> file a feature request on the tracker [1]. Regarding the
> fontloader (luatex-fonts) itself, it is up to Hans.
> 
> Good luck with your project,
> Philipp
> 
> 
> [1] https://github.com/lualatex/luaotfload/issues
> 


OK lets go back to your earlier solution:
 https://bitbucket.org/phg/lua-la-tex-tests/src/tip/pln-expansion-protrusion-1.tex
Is this a complete solution or must I run the other program first?

When I tried to run this file under luatex it blew up on the \jobname.
So  I defined \jobname to be the name of the file and it blew up again,
treating \jobname as a module. Clearly I am misunderstanding
something. Please educate me a bit further. What is \jobname?

I am running plain luatex, not Context or lualatex. 


-- 
John Culleton
Wexford Press
Free list of books for self-publishers:
http://wexfordpress.net/shortlist.html
PDF e-book: "Create Book Covers with Scribus"
available at http://www.booklocker.com/books/4055.html


From schuster.wolfgang at gmail.com  Tue Sep  3 17:36:57 2013
From: schuster.wolfgang at gmail.com (Wolfgang Schuster)
Date: Tue, 3 Sep 2013 17:36:57 +0200
Subject: [luatex] Modifying protrusion default.
In-Reply-To: <20130903100832.086d0b0a@localb.wexfordpress.net>
References: <20130824112916.4f1d8872@wexfordpress>
 <20130825223107.GB13678@phlegethon> <20130829090656.74a1f083@wexfordpress>
 <20130903085759.GA13509@phlegethon>
 <20130903100832.086d0b0a@localb.wexfordpress.net>
Message-ID: <A9C8ECD9-7180-473F-96AD-D048DFC77CC7@gmail.com>


Am 03.09.2013 um 16:08 schrieb john Culleton <John at wexfordpress.com>:

> OK lets go back to your earlier solution:
> https://bitbucket.org/phg/lua-la-tex-tests/src/tip/pln-expansion-protrusion-1.tex
> Is this a complete solution or must I run the other program first?
> 
> When I tried to run this file under luatex it blew up on the \jobname.
> So  I defined \jobname to be the name of the file and it blew up again,
> treating \jobname as a module. Clearly I am misunderstanding
> something. Please educate me a bit further. What is \jobname?

You have to replace \jobname with the name of the Lua file where
the changed values are defined, e.g. \directlua { require "pln-expansion-protrusion-1" }

Wolfgang

From no-reply at dropboxmail.com  Tue Sep  3 20:43:48 2013
From: no-reply at dropboxmail.com (Dropbox)
Date: Tue, 3 Sep 2013 18:43:48 +0000
Subject: [luatex] =?utf-8?q?Pander_invited_you_to_check_out_Dropbox?=
Message-ID: <20130903184348.DA1045C22E7@sjc-batch6.sjc.dropbox.com>

Hi there,

Pander wants you to try Dropbox! Dropbox lets you bring all your photos, docs and videos with you anywhere and share them easily.

Get started here.
https://www.dropbox.com/l/C2CIcKtj6kTiqryR2hROY31

Thanks!
- The Dropbox Team

____________________________________________________
To stop receiving invites from Dropbox, please go to https://www.dropbox.com/l/AcfCOZkF2yWZZ7PYeBMXoX
Dropbox, Inc., PO Box 77767, San Francisco, CA 94107
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20130903/dd7dfa37/attachment.html>

From Philipp.Gesang at alumni.uni-heidelberg.de  Wed Sep  4 19:31:18 2013
From: Philipp.Gesang at alumni.uni-heidelberg.de (Philipp Gesang)
Date: Wed, 4 Sep 2013 19:31:18 +0200
Subject: [luatex] Modifying protrusion default.
In-Reply-To: <20130903100832.086d0b0a@localb.wexfordpress.net>
References: <20130824112916.4f1d8872@wexfordpress>
 <20130825223107.GB13678@phlegethon>
 <20130829090656.74a1f083@wexfordpress>
 <20130903085759.GA13509@phlegethon>
 <20130903100832.086d0b0a@localb.wexfordpress.net>
Message-ID: <20130904173118.GA25704@phlegethon>

???<date: 2013-09-03, Tuesday>???<from: john Culleton>???

> On Tue, 3 Sep 2013 10:57:59 +0200
> Philipp Gesang <Philipp.Gesang at alumni.uni-heidelberg.de> wrote:
> 
> > ???<date: 2013-08-29, Thursday>???<from: john Culleton>???
> > 
> > > On Mon, 26 Aug 2013 00:31:07 +0200
> > > Philipp Gesang <Philipp.Gesang at alumni.uni-heidelberg.de> wrote:
> > > 
> > > > ???<date: 2013-08-24, Saturday>???<from: john Culleton>???
> > > > 
> > > > >                    These factors are too large for use in e.g.,
> > > > > a novel. I can of course modify this file for my own use. But
> > > > > if I want to send the modified file to a client to use is it
> > > > > sufficient to just include a modified otfl-font-dum.lua file in
> > > > > the batch of macros I send to the customer? Or can I put the
> > > > > modified table in a my luatex template source document and
> > > > > expect it to override the original table?
> > > > >
> > > > > Or is there another way to use a modified protrusion table that
> > > > > is easily transportable to customers who aren't into replacing
> > > > > files in the innards of TeX?
> > > >  
> > > > I?ve added some example code to the test repo:
> > > > 
> > > >   https://bitbucket.org/phg/lua-la-tex-tests/src/tip/pln-expansion-protrusion-1.lua
> > > >   https://bitbucket.org/phg/lua-la-tex-tests/src/tip/pln-expansion-protrusion-1.tex
> > > > 
> > > > This should work with both luaotfload and luatex-fonts.
> > > > 
> > > > Basically, your options include a) manipulating the scale factors
> > > > of the default vector or b) making up your own vector. New
> > > > vectors, if added to the table fonts.protrusions.setups, can be
> > > > referred to by their name when defining a font just like the
> > > > default. E. g. create a vector
> > > > 
> > > >     fonts.protrusions.setups.myvector = {
> > > >       factor = 1,
> > > >       left   = 1,
> > > >       right  = 1,
> > > > 
> > > >       --- map code points to protrusion values
> > > >       --- [1] is  left, [2] is right
> > > >       [string.byte ","] = { 0, 0.4 },
> > > >       [string.byte "."] = { 0, 0.4 },
> > > >       ....
> > > >     }
> > > > 
> > > > and then in your document define a font like so:
> > > > 
> > > >   \pdfprotrudechars2
> > > >   \font \mainfont = "file:Iwona-Regular.otf:protrusion=myvector"
> > > > 
> > > > It?s not hard, except for coming up with sane values ;-)
> > 
> > > The hard part is adding either approach to the zip file I will send
> > > my customers.  Remember, my audience is not into modifying code in
> > > their TeX installation, whether it is TeXLive or Context minimal. Is
> > > there a way to add a macro to that zip file that will override the 
> > > code already embedded in the TeX installation? 
> > 
> > Not sure about a macro, but you can use the functions in the
> > example I linked to overwrite the ?default? values. Otoh, if you
> > ship your own texlive tree and don?t require the flexibility of
> > multiple vectors, then you can probably live with modifying the
> > defaults directly. In a recent luaotfload they reside in here:
> > 
> >     https://github.com/lualatex/luaotfload/blob/master/luaotfload-merged.lua#L13160
> > 
> > If you have a modified version of this file in the texmf-local/
> > tree, it should override the distribution default.
> > 
> > > And is there a plan to add the protrusion features already found in
> > > pdftex and Context MKIV to plain Luatex?
> > 
> > They are already there, in a sense. If you have a suggestion as
> > to how luaotfload should be expanded, it might be worthwhile to
> > file a feature request on the tracker [1]. Regarding the
> > fontloader (luatex-fonts) itself, it is up to Hans.
> > 
> > Good luck with your project,
> > Philipp
> > 
> > 
> > [1] https://github.com/lualatex/luaotfload/issues
> > 
> 
> 
> OK lets go back to your earlier solution:
>  https://bitbucket.org/phg/lua-la-tex-tests/src/tip/pln-expansion-protrusion-1.tex
> Is this a complete solution or must I run the other program first?

This is the usage example. It relies on the code in the
corresponding Lua file where the new vectors are set up.

> When I tried to run this file under luatex it blew up on the \jobname.
> So  I defined \jobname to be the name of the file and it blew up again,
> treating \jobname as a module. Clearly I am misunderstanding
> something. Please educate me a bit further. What is \jobname?

  ?The expansion is the name that TeX has chosen for this job.
   For exaple, if TeX is putting its output on files paper.dvi
   and paper.log, then \jobname expands to ?paper?.?
   (TeXbook, p 213)

I.e. the file assumes, as Wolfgang already wrote, that the Lua
file differs from the main file only by its extension. Those
lines at the top are equivalent to a

  \directlua {require "<name of Lua file>"}

Of course, if you renamed the file then you can substitute
whatever name you chose (without the extension).

> I am running plain luatex, not Context or lualatex. 

The example runs in both flavors of Plain Luatex.

Best,
Philipp

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 490 bytes
Desc: not available
URL: <http://tug.org/pipermail/luatex/attachments/20130904/550f760b/attachment.bin>

From persian-tex at tug.org  Fri Sep 13 09:07:31 2013
From: persian-tex at tug.org (Vafa Khalighi)
Date: Fri, 13 Sep 2013 17:07:31 +1000
Subject: [luatex] \boxdir primitive
Message-ID: <CAJZ8fyqscPP4ECW9FGCEt-7Mp4_qzUzPjdp5kFsOuh0ihKJFAw@mail.gmail.com>

Hi

How \boxdir primitive work? if I give \boxdir TRT, I get error and luatex
expects the argument to be a number. I tried giving different numbers but
this time it complained that "that is a bad direction". However \boxdir
0TRT gives no error (actually you can replace 0 with any other number) but
that would not change the direction of any box.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20130913/2d4a97b0/attachment.html>

From persian-tex at tug.org  Fri Sep 13 09:12:11 2013
From: persian-tex at tug.org (Vafa Khalighi)
Date: Fri, 13 Sep 2013 17:12:11 +1000
Subject: [luatex] \boxdir primitive
In-Reply-To: <CAJZ8fyqscPP4ECW9FGCEt-7Mp4_qzUzPjdp5kFsOuh0ihKJFAw@mail.gmail.com>
References: <CAJZ8fyqscPP4ECW9FGCEt-7Mp4_qzUzPjdp5kFsOuh0ihKJFAw@mail.gmail.com>
Message-ID: <CAJZ8fyqqZQzDY1789y0R6pm7OACod_x-8DW-V+iHOhj_2ViU8A@mail.gmail.com>

no worries. I finally understood how that works.

\setbox0\hbox{This is a test.}
\boxdir 0 TRT
\box0

so the syntax is \boxdir <box register> <direction>


On Fri, Sep 13, 2013 at 5:07 PM, Vafa Khalighi <persian-tex at tug.org> wrote:

> Hi
>
> How \boxdir primitive work? if I give \boxdir TRT, I get error and luatex
> expects the argument to be a number. I tried giving different numbers but
> this time it complained that "that is a bad direction". However \boxdir
> 0TRT gives no error (actually you can replace 0 with any other number) but
> that would not change the direction of any box.
>
>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20130913/8be8542b/attachment.html>

From persian-tex at tug.org  Fri Sep 13 09:16:22 2013
From: persian-tex at tug.org (Vafa Khalighi)
Date: Fri, 13 Sep 2013 17:16:22 +1000
Subject: [luatex] \boxdir primitive
In-Reply-To: <CAJZ8fyqqZQzDY1789y0R6pm7OACod_x-8DW-V+iHOhj_2ViU8A@mail.gmail.com>
References: <CAJZ8fyqscPP4ECW9FGCEt-7Mp4_qzUzPjdp5kFsOuh0ihKJFAw@mail.gmail.com>
 <CAJZ8fyqqZQzDY1789y0R6pm7OACod_x-8DW-V+iHOhj_2ViU8A@mail.gmail.com>
Message-ID: <CAJZ8fyp+ZRAcv++UrMt9AwJzTLb1Wer1b2GWd=TOrTpj5_rFTw@mail.gmail.com>

And this only works for \hbox (the primitive has no effect on \vbox or
\vtop).


On Fri, Sep 13, 2013 at 5:12 PM, Vafa Khalighi <persian-tex at tug.org> wrote:

> no worries. I finally understood how that works.
>
> \setbox0\hbox{This is a test.}
> \boxdir 0 TRT
> \box0
>
> so the syntax is \boxdir <box register> <direction>
>
>
> On Fri, Sep 13, 2013 at 5:07 PM, Vafa Khalighi <persian-tex at tug.org>wrote:
>
>> Hi
>>
>> How \boxdir primitive work? if I give \boxdir TRT, I get error and luatex
>> expects the argument to be a number. I tried giving different numbers but
>> this time it complained that "that is a bad direction". However \boxdir
>> 0TRT gives no error (actually you can replace 0 with any other number) but
>> that would not change the direction of any box.
>>
>>
>>
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20130913/b5fe9eb7/attachment.html>

From mico.loretan at mac.com  Sun Sep 15 18:35:39 2013
From: mico.loretan at mac.com (Mico Loretan)
Date: Sun, 15 Sep 2013 18:35:39 +0200
Subject: [luatex] need help inserting a special character into the input
	stream
Message-ID: <007A5B5E-4D35-4604-9646-9D35A7BF146E@mac.com>

I have a feeling the following shouldn't be difficult to accomplish, but somehow I'm not succeeding. Advice/critiques/suggestions welcome!

I'm trying to insert a specific character, a so-called "zero width non joining" character (unicode point "200C) into specific points in the node stream. So far, I've tried to create such a node via

     local zwnjnode = node.new(glyph)
     zwnj.type      = 1
     zwnjnode.char  = unicode2utf("200C")

where "glyph" is created via 

     glyph   = node.id('glyph')

and unicode2utf is a function whose only instruction is

     return unicode.utf8.char(tonumber(c,16))

and 'c' would be "200C". Later on in the code, these zwnjnode objects are inserted into the node list via

      node.insert_before(hh, curr, node.copy(zwnjnode) )

where "curr" is the current node processed by node.traverse


Here's the problem: While **something** definitely ends up being inserted into the node list, it doesn't appear to be a ZWNJ character. If somebody could help me figure out the error(s) in my ways, I'd be much obliged. Is a ZWNJ character maybe not suitable for a node of type "glyph"? Am I doing something wrong in the process of creating the zwnjnode objects? Please advise.

Many thanks in advance,

Mico



From zappathustra at free.fr  Mon Sep 16 12:27:55 2013
From: zappathustra at free.fr (Paul Isambert)
Date: Mon, 16 Sep 2013 12:27:55 +0200
Subject: [luatex] need help inserting a special character into the
	input	stream
In-Reply-To: <007A5B5E-4D35-4604-9646-9D35A7BF146E@mac.com>
Message-ID: <79375849.149542474.1379327275704.JavaMail.root@zimbra54-e10.priv.proxad.net>

One question (I did not review the code):

> Here's the problem: While **something** definitely ends up being
> inserted into the node list, it doesn't appear to be a ZWNJ
> character.

Is there a glyph corresponding to that character in the font?

Best,
Paul

From graham.douglas at readytext.co.uk  Mon Sep 16 13:54:59 2013
From: graham.douglas at readytext.co.uk (Graham Douglas)
Date: Mon, 16 Sep 2013 12:54:59 +0100
Subject: [luatex] luatex Digest, Vol 57, Issue 5
In-Reply-To: <mailman.7.1379325602.13908.luatex@tug.org>
References: <mailman.7.1379325602.13908.luatex@tug.org>
Message-ID: <5236F193.8010208@readytext.co.uk>

On 16/09/2013 11:00, luatex-request at tug.org wrote:
> I have a feeling the following shouldn't be difficult to accomplish, but somehow I'm not succeeding. Advice/critiques/suggestions welcome!
>
> I'm trying to insert a specific character, a so-called "zero width non joining" character (unicode point "200C) into specific points in the node stream. So far, I've tried to create such a node via
>
>      local zwnjnode = node.new(glyph)
>      zwnj.type      = 1
>      zwnjnode.char  = unicode2utf("200C")
>
> where "glyph" is created via 
>
>      glyph   = node.id('glyph')
>
> and unicode2utf is a function whose only instruction is
>
>      return unicode.utf8.char(tonumber(c,16))
>
> and 'c' would be "200C". Later on in the code, these zwnjnode objects are inserted into the node list via
>
>       node.insert_before(hh, curr, node.copy(zwnjnode) )
>
> where "curr" is the current node processed by node.traverse
>
>
> Here's the problem: While **something** definitely ends up being inserted into the node list, it doesn't appear to be a ZWNJ character. If somebody could help me figure out the error(s) in my ways, I'd be much obliged. Is a ZWNJ character maybe not suitable for a node of type "glyph"? Am I doing something wrong in the process of creating the zwnjnode objects? Please advise.
>
> Many thanks in advance,
>
> Mico

Hi Mico

the .char field should not be UTF-8 but simply the integer value of the
character.

Assuming \test is a font with the ZWNJ as a displayable glyph, this works:

\test % set your font first...

\directlua{

local head= node.new("glyph")
head.font = font.current()
head.lang = tex.language
head.char=8204

tex.box[500]=node.hpack(head)

}

\copy500

best

Graham



From mico.loretan at mac.com  Tue Sep 17 18:48:45 2013
From: mico.loretan at mac.com (Mico Loretan)
Date: Tue, 17 Sep 2013 18:48:45 +0200
Subject: [luatex] luatex Digest, Vol 57, Issue 6
In-Reply-To: <mailman.7.1379412002.14652.luatex@tug.org>
References: <mailman.7.1379412002.14652.luatex@tug.org>
Message-ID: <758E058F-F96E-4E95-AE9E-5E5ADC1C6E17@mac.com>


On Sep 17, 2013, at 12:00 PM, Paul Isambert wrote:
> Message: 1
> Date: Mon, 16 Sep 2013 12:27:55 +0200
> From: Paul Isambert <zappathustra at free.fr>
> To: "LuaTeX discussion." <luatex at tug.org>
> Subject: Re: [luatex] need help inserting a special character into the
> 	input	stream
> Message-ID:
> 	<79375849.149542474.1379327275704.JavaMail.root at zimbra54-e10.priv.proxad.net>
> 	
> Content-Type: text/plain; charset="utf-8"
> 
> One question (I did not review the code):
> 
>> Here's the problem: While **something** definitely ends up being
>> inserted into the node list, it doesn't appear to be a ZWNJ
>> character.
> 
> Is there a glyph corresponding to that character in the font?
> 
> Best,
> Paul

I believe the "glyph" corresponding to the ZWNJ character (hex "200c) is "invisible", in the sense that it has zero width. Hence, nothing shows up visually. Nevertheless, being able to typeset it properly is important because some the "Contextuals=Alternate" setting of some fonts can make use of the presence to "decide" how to render the glyph that precedes it.

Here's the specific application for inserting a ZWNJ character that I have in mind: The font family EB Garamond has a "lowercase-f" glyph that has a long "arm" that hangs fairly far out to the right (as do virtually all Garaldes). This causes collisions with subsequent glyphs such as b, h, i, j, k, and l if the corresponding f-ligatures are suppressed. Why would one want to suppress these f-ligatures? In German typography, for one, the word "Auflage" should be typeset without the fl ligature since it spans a morpheme boundary. Because of the long right-leaning arm of the "f" glyph, an unsightly collision between the f and the subsequent l. However, this font also has a "short-armed lowercase-f" glyph and "Contextuals=Alternate" setting that says that the ordinary (long-armed) f glyph should be replaced by its short-armed variant if the f is followed by a ZWNJ character. Now, it's of course possible to insert a \char"200c instruction by hand, but I'm trying to train the selnolig package -- which does automated ligature suppression... -- to insert a ZWNJ character whenever an f-ligature should be suppressed because of morpheme boundary crossing issue.

The lua code of the selnolig package -- check it out at https://github.com/micoloretan/selnolig/selnolig.lua; the crucial code snippets were posted in my initial message to this group -- has macros to set up rules for automated ligature suppression. It works reasonably, i.e., it succeeds in breaking up the ligatures, but I'd like to change the item that's being inserted from a "whatsit" to a ZWNJ character. This would make the package very useful for people who use the EB Garamond font as well, it it would let them make use of its Contextuals=Alternate to use the font's short-armed-f glyph.

Sorry for this longish explanation; I hope some will find this background information useful.

Thanks, Mico



From graham.douglas at readytext.co.uk  Wed Sep 18 10:55:07 2013
From: graham.douglas at readytext.co.uk (Graham Douglas)
Date: Wed, 18 Sep 2013 09:55:07 +0100
Subject: [luatex] luatex Digest, Vol 57, Issue 6
In-Reply-To: <758E058F-F96E-4E95-AE9E-5E5ADC1C6E17@mac.com>
References: <758E058F-F96E-4E95-AE9E-5E5ADC1C6E17@mac.com>
Message-ID: <52396A6B.7070400@readytext.co.uk>

Hi Mico

Just a comment on:

"...believe the "glyph" corresponding to the ZWNJ character (hex "200c)
is "invisible", in the sense that it has zero width. Hence, nothing
shows up visually. "

Not quite. (Ignoring CJK fonts which I know nothing about) a glyph with
"zero width" means that it has zero advance width -- ie, it does not
affect the "current horizontal position" in the typesetting engine (or
display) but that does not mean it is "invisible". For example, many
Arabic vowel glyphs also have zero width but, of course, they display
correctly. You can of course use the ZWNJ **character** for various
text-processing applications and never need to actually display it.
Unless your font has the corresponding **glyph** to represent it
visually then, of course, it will not display when using fonts that do
not have a glyph for the ZWNJ. The visual representation of the ZWNJ
character varies quite a lot depending on the font being being used.

Best
Graham

From dirk.laurie at gmail.com  Wed Sep 18 16:03:21 2013
From: dirk.laurie at gmail.com (Dirk Laurie)
Date: Wed, 18 Sep 2013 16:03:21 +0200
Subject: [luatex] Inline Lua scripts
Message-ID: <CABcj=tmHciqAf3pGtqqFwkpkSW7L2RHeUZJ5S3wtqC379B2Srg@mail.gmail.com>

AFAICS, LuaLaTeX offers no

\begin{lua}
  Lua code to be read verbatim
\end{lua}

There is \directlua, which however allows TeX macros inside the code,
reorganizes whitespace and in general requires one to keep a cool
TeX head inside the Lua code.

So the workaround seems to be
\directlua{dofile"filename"}

which requires separate named files for such scripts.

Am I missing something?

From patrick at gundla.ch  Wed Sep 18 17:32:08 2013
From: patrick at gundla.ch (Patrick Gundlach)
Date: Wed, 18 Sep 2013 17:32:08 +0200
Subject: [luatex] Inline Lua scripts
In-Reply-To: <CABcj=tmHciqAf3pGtqqFwkpkSW7L2RHeUZJ5S3wtqC379B2Srg@mail.gmail.com>
References: <CABcj=tmHciqAf3pGtqqFwkpkSW7L2RHeUZJ5S3wtqC379B2Srg@mail.gmail.com>
Message-ID: <CB280819-EE26-4E46-8B33-B95C5C980662@gundla.ch>

Hi,

> Am I missing something?

[...]


see

http://tex.stackexchange.com/a/33102/243

for an explanation/solution.

Patrick

From dirk.laurie at gmail.com  Thu Sep 19 06:48:47 2013
From: dirk.laurie at gmail.com (Dirk Laurie)
Date: Thu, 19 Sep 2013 06:48:47 +0200
Subject: [luatex] Inline Lua scripts
In-Reply-To: <CB280819-EE26-4E46-8B33-B95C5C980662@gundla.ch>
References: <CABcj=tmHciqAf3pGtqqFwkpkSW7L2RHeUZJ5S3wtqC379B2Srg@mail.gmail.com>
 <CB280819-EE26-4E46-8B33-B95C5C980662@gundla.ch>
Message-ID: <CABcj=tkwd9cZebp8Qx-HEWbVAZZOJd3UkuVt=+--NxiNqABeSw@mail.gmail.com>

2013/9/18 Patrick Gundlach <patrick at gundla.ch>:

>
> http://tex.stackexchange.com/a/33102/243

The top line there says: use

\directlua{  require("myfile")  }

which also needs separate files.

One solution to the problem of keeping the code in one file would
be to modify verbatim.sty so that it also has

\begin{verbatimoutput}{myfile.lua}
\end{verbatim}

This is the sort of thing that someone has surely already done.

From Susan.Dittmar at gmx.de  Thu Sep 19 08:42:47 2013
From: Susan.Dittmar at gmx.de (Susan Dittmar)
Date: Thu, 19 Sep 2013 08:42:47 +0200
Subject: [luatex] Inline Lua scripts
In-Reply-To: <CABcj=tkwd9cZebp8Qx-HEWbVAZZOJd3UkuVt=+--NxiNqABeSw@mail.gmail.com>
References: <CABcj=tmHciqAf3pGtqqFwkpkSW7L2RHeUZJ5S3wtqC379B2Srg@mail.gmail.com>
 <CB280819-EE26-4E46-8B33-B95C5C980662@gundla.ch>
 <CABcj=tkwd9cZebp8Qx-HEWbVAZZOJd3UkuVt=+--NxiNqABeSw@mail.gmail.com>
Message-ID: <523A9CE7.5010000@gmx.de>

Dirk Laurie schrieb:
> One solution to the problem of keeping the code in one file would
> be to modify verbatim.sty so that it also has
> 
> \begin{verbatimoutput}{myfile.lua}
> \end{verbatim}
> 
> This is the sort of thing that someone has surely already done.

I think the package is named filecontents or something like that...

HTH,

	Susan

From Robin.Fairbairns at cl.cam.ac.uk  Thu Sep 19 11:10:23 2013
From: Robin.Fairbairns at cl.cam.ac.uk (Robin Fairbairns)
Date: Thu, 19 Sep 2013 10:10:23 +0100
Subject: [luatex] Inline Lua scripts
In-Reply-To: Your message of Thu, 19 Sep 2013 06:48:47 +0200.
 <CABcj=tkwd9cZebp8Qx-HEWbVAZZOJd3UkuVt=+--NxiNqABeSw@mail.gmail.com>
Message-ID: <7525.1379581823@cl.cam.ac.uk>

Dirk Laurie <dirk.laurie at gmail.com> wrote:

> 2013/9/18 Patrick Gundlach <patrick at gundla.ch>:
> 
> > http://tex.stackexchange.com/a/33102/243
> 
> The top line there says: use
> 
> \directlua{  require("myfile")  }
> 
> which also needs separate files.
> 
> One solution to the problem of keeping the code in one file would
> be to modify verbatim.sty so that it also has
> 
> \begin{verbatimoutput}{myfile.lua}
> \end{verbatim}
> 
> This is the sort of thing that someone has surely already done.

for example, by the latex team, as part of the latex 2e (first released
in 1994) -- \begin{filecontents}

i thought (in my simple way) that one couldn't use musix* with latex.
or maybe i had forgotten how this thread started...

robin

who's just done the last thing needed for the ctan installation of
lilyglyphs.sty, that allows lilypond glyphs and code fragments in
xelatex or lualatex.

/fx: washes mouth out with soap...

From dirk.laurie at gmail.com  Thu Sep 19 15:47:25 2013
From: dirk.laurie at gmail.com (Dirk Laurie)
Date: Thu, 19 Sep 2013 15:47:25 +0200
Subject: [luatex] Inline Lua scripts
In-Reply-To: <7525.1379581823@cl.cam.ac.uk>
References: <CABcj=tkwd9cZebp8Qx-HEWbVAZZOJd3UkuVt=+--NxiNqABeSw@mail.gmail.com>
 <7525.1379581823@cl.cam.ac.uk>
Message-ID: <CABcj=tmm88KJJ8=7jfdZo=54+tWQGKj9jAowt=HjPU2J2OUaiA@mail.gmail.com>

2013/9/19 Robin Fairbairns <Robin.Fairbairns at cl.cam.ac.uk>:


> i thought (in my simple way) that one couldn't use musix* with latex.
> or maybe i had forgotten how this thread started...

Or which list this is :-)

From dirk.laurie at gmail.com  Thu Sep 19 15:51:39 2013
From: dirk.laurie at gmail.com (Dirk Laurie)
Date: Thu, 19 Sep 2013 15:51:39 +0200
Subject: [luatex] Inline Lua scripts
In-Reply-To: <523A9CE7.5010000@gmx.de>
References: <CABcj=tmHciqAf3pGtqqFwkpkSW7L2RHeUZJ5S3wtqC379B2Srg@mail.gmail.com>
 <CB280819-EE26-4E46-8B33-B95C5C980662@gundla.ch>
 <CABcj=tkwd9cZebp8Qx-HEWbVAZZOJd3UkuVt=+--NxiNqABeSw@mail.gmail.com>
 <523A9CE7.5010000@gmx.de>
Message-ID: <CABcj=t=szURCJrYM7JVUtUQ77xDTsXZ8xMf2HGNx8bVpBkRxtw@mail.gmail.com>

2013/9/19 Susan Dittmar <Susan.Dittmar at gmx.de>:

> I think the package is named filecontents or something like that...

Thanks. Its documentation starts off like this:  "There is a little-known
environment called filecontents ..."

From reinhard.kotucha at web.de  Fri Sep 20 00:11:27 2013
From: reinhard.kotucha at web.de (Reinhard Kotucha)
Date: Fri, 20 Sep 2013 00:11:27 +0200
Subject: [luatex] Inline Lua scripts
In-Reply-To: <CABcj=tmHciqAf3pGtqqFwkpkSW7L2RHeUZJ5S3wtqC379B2Srg@mail.gmail.com>
References: <CABcj=tmHciqAf3pGtqqFwkpkSW7L2RHeUZJ5S3wtqC379B2Srg@mail.gmail.com>
Message-ID: <21051.30351.553446.526998@zaphod.ms25.net>

On 2013-09-18 at 16:03:21 +0200, Dirk Laurie wrote:

 > AFAICS, LuaLaTeX offers no
 > 
 > \begin{lua}
 >   Lua code to be read verbatim
 > \end{lua}
 > 
 > There is \directlua, which however allows TeX macros inside the code,
 > reorganizes whitespace and in general requires one to keep a cool
 > TeX head inside the Lua code.
 > 
 > So the workaround seems to be
 > \directlua{dofile"filename"}
 > 
 > which requires separate named files for such scripts.
 > 
 > Am I missing something?

I must admit that it's not clear to me what exactly you want to
achieve.  I often use separate files for Lua code because I get proper
syntax highlighting and indentation in Emacs then.

However, if you want to have the Lua code inline, use the luacode
package.  The luacode* environment allows you to write the code
conveniently without worrying about characters which have a special
meaning in TeX.

If you want to pass information from TeX to Lua, put only function
definitions into the luacode* environment and call these functions
using \directlua or \luadirect.  Since the latter expand TeX macros
you can pass any information from TeX to the Lua functions this way.

Using \filecontents probably allows you to put the expansion of TeX
macros into Lua function bodies instead of passing them as arguments.
But I suppose that you need the information from TeX when the Lua
functions are executed anyway.

Look at the file

  http://www.tug.org/~kotucha/luatab.pdf

It's kept extremely simple deliberately and doesn't pass information
from TeX to Lua.  But if you change
  
  -function mytable ()
  +function mytable (foo)

in the luacode* environment and

  -\newcommand{\mytable}{\luadirect{mytable()}}
  +\newcommand{\mytable}{\luadirect{mytable(\foo)}}

you can pass the TeX control sequence \foo as an argument to the Lua
function mytable().

Not tested, though.  But I'm convinced that external files are rarely
needed, if at all.  I also doubt that they make life easier.

Regards,
  Reinhard

-- 
----------------------------------------------------------------------------
Reinhard Kotucha                                      Phone: +49-511-3373112
Marschnerstr. 25
D-30167 Hannover                              mailto:reinhard.kotucha at web.de
----------------------------------------------------------------------------
Microsoft isn't the answer. Microsoft is the question, and the answer is NO.
----------------------------------------------------------------------------

From persian-tex at tug.org  Sat Sep 21 15:44:40 2013
From: persian-tex at tug.org (Vafa Khalighi)
Date: Sat, 21 Sep 2013 23:44:40 +1000
Subject: [luatex] Disabling primitives
Message-ID: <CAJZ8fyqtJHbVdmoMaRqsBMjPXwjx22dES4bBYKy07AQCn2xH3A@mail.gmail.com>

Is there any way for disabling some specific primitives just like there is
tex.enableprimitive for enabling them? or should it be done in the macro
level?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://tug.org/pipermail/luatex/attachments/20130921/2b5fc154/attachment.html>

From vleclement at gmail.com  Sun Sep 22 11:56:25 2013
From: vleclement at gmail.com (=?ISO-8859-1?Q?Vianney_le_Cl=E9ment?=)
Date: Sun, 22 Sep 2013 11:56:25 +0200
Subject: [luatex] Strange behaviour of node.insert_after
Message-ID: <CAMQPmcBcewHtZr21Pb9vwN3mpexgaF5a4JBaT14+=SPubxuuVw@mail.gmail.com>

Hi all,

I am trying to build boxes entirely in Lua using the
node.insert_before and node.insert_after utility functions. I have
notices a strange behaviour of node.insert_after that sometimes return
a wrong head.

Consider this MWE:

\directlua{
  local GLUE, GLUE_SPEC = node.id('glue'), node.id('glue_spec')
  local function append_skip(head, tail, width)
    local n = node.new(GLUE, 0)
    n.spec = node.new(GLUE_SPEC)
    n.spec.width = width
    return node.insert_after(head, tail, n)
  end

  local vhead1 = append_skip(nil, nil, 200)
  local vhead2 = append_skip(nil, nil, 300)

  local head, tail
  head, tail = node.insert_after(head, tail, node.vpack(vhead1))
  head, tail = append_skip(head, tail, 100)
  texio.write_nl("Head before:", tostring(head))
  head, tail = node.insert_after(head, tail, node.vpack(vhead2))
  texio.write_nl("Head after:", tostring(head))
}
\end

Output: [[
Head before:
<node    nil <    207 >    216 : vlist 0>
Head after:
<node    207 <    216 >    224 : glue 0> )
]]

The head before the last insert_after is indeed the first node of the
list (prev is nil), but the last insert_after returns the second node
of the list as head. Am I missing something or is node.insert_after
not supposed to be used like this?

BTW, this is with LuaTeX beta-0.76.0-2013061708 (TeX Live 2013).

Thanks for any insight,
Vianney

From mico.loretan at mac.com  Mon Sep 23 20:05:43 2013
From: mico.loretan at mac.com (Mico Loretan)
Date: Mon, 23 Sep 2013 20:05:43 +0200
Subject: [luatex] need help inserting a special character into the input
	stream
In-Reply-To: <mailman.9.1379498402.26586.luatex@tug.org>
References: <mailman.9.1379498402.26586.luatex@tug.org>
Message-ID: <7C58BEB7-292A-481C-B5EF-7E807EF4B5AE@mac.com>

It turns out that the real issue was simultaneously less and more difficult than I thought it was. 

The good news was that there was no bug in my code, i.e., the ZWNJ character was being inserted into the node list just fine. 

The problem, then, was that the function doing the work was registered as a "ligaturing" callback. Such functions take two inputs but don't return anything. Hence the odd experience that the code seemed to be correct yet didn't seem to do anything tangible.

Switching the function to a "pre_linebreak_filter" callback (which takes one input -- a list of nodes -- and produces one output -- a list of modified nodes) solved my problem. 

Sincerely, Mico

On Sep 18, 2013, at 12:00 PM, luatex-request at tug.org wrote:
> 
> Message: 2
> Date: Wed, 18 Sep 2013 09:55:07 +0100
> From: Graham Douglas <graham.douglas at readytext.co.uk>
> To: <luatex at tug.org>
> Subject: Re: [luatex] luatex Digest, Vol 57, Issue 6
> Message-ID: <52396A6B.7070400 at readytext.co.uk>
> Content-Type: text/plain; charset="ISO-8859-1"
> 
> Hi Mico
> 
> Just a comment on:
> 
> "...believe the "glyph" corresponding to the ZWNJ character (hex "200c)
> is "invisible", in the sense that it has zero width. Hence, nothing
> shows up visually. "
> 
> Not quite. (Ignoring CJK fonts which I know nothing about) a glyph with
> "zero width" means that it has zero advance width -- ie, it does not
> affect the "current horizontal position" in the typesetting engine (or
> display) but that does not mean it is "invisible". For example, many
> Arabic vowel glyphs also have zero width but, of course, they display
> correctly. You can of course use the ZWNJ **character** for various
> text-processing applications and never need to actually display it.
> Unless your font has the corresponding **glyph** to represent it
> visually then, of course, it will not display when using fonts that do
> not have a glyph for the ZWNJ. The visual representation of the ZWNJ
> character varies quite a lot depending on the font being being used.
> 
> Best
> Graham
> 


