From eduardoochs at gmail.com  Sat Jun  6 02:36:10 2020
From: eduardoochs at gmail.com (Eduardo Ochs)
Date: Fri, 5 Jun 2020 21:36:10 -0300
Subject: [luatex] Problem tex.print()-ing a verbatim block
Message-ID: <CADs++6in3_XwG6xjeuM+rLRFgrWxswbj0cJyfjRvB0AdknBm4g@mail.gmail.com>

Hello list,

if I run something like this from Lua

  tex.print([[
  \begin{verbatim}
  foo
    poo
      boo
  \end{verbatim}
  ]])

the newlines in the verbatim are converted to spaces... how do I fix
this?

I'm running Debian Stable and I've tried the test below - after the
line that says "snip-snip" - with the two versions of lualatex that I
have here. Thanks in advance!

  Eduardo Ochs
  http://angg.twu.net/dednat6.html


--snip--snip--

/usr/bin/lualatex --version
# -> This is LuaTeX, Version 1.07.0 (TeX Live 2019/dev/Debian)
/usr/local/texlive/2019/bin/x86_64-linux/lualatex --version
# -> This is LuaTeX, Version 1.10.0 (TeX Live 2019)

cat > test.tex <<'==='
\documentclass{article}
\begin{document}
\catcode`\^^J=10
\directlua{dofile "test.lua"}
Compare with:
\begin{verbatim}foo   poo     boo\end{verbatim}
\begin{verbatim}foo  poo    boo\end{verbatim}
\begin{verbatim}
foo
  poo
    boo
\end{verbatim}
\end{document}
===

cat > test.lua <<'==='
str = [[
\begin{verbatim}
foo
  poo
    boo
\end{verbatim}
]]
print(str)
tex.print(str)
===

lualatex test.tex
xpdf     test.pdf

From petr at olsak.net  Sat Jun  6 09:43:30 2020
From: petr at olsak.net (Petr Olsak)
Date: Sat, 6 Jun 2020 09:43:30 +0200
Subject: [luatex] bad \Umathfractiondelsize calculation
Message-ID: <11c47f51-1dc5-6795-b735-d5b08f061df9@olsak.net>

When I load Unicode math Latin Modern with LuaTeX and try:

 ??? $$ {n \atopwithdelims() k} $$ % i.e. {n \choose k}

then the result looks ugly, the brackets are too big.

The size of these brackets depend on the 
\Umathfractiondelsize\displaystyle prameter.

This parameter is is set to 24.0pt by LuaTeX when the Unicode 
latinmodern-math font at 10pt is loaded. I tried to use fontforge:

fontforge latinmodern-math.otf

menu: Element / Font info, tab: TeX, select: TeX math symbol, click: 
"more params". We can see that fontforge suggests the Delim1 (this is 
the same parameter) as 2390, i.e. 23.9 pt when the font is loaded at10pt.

If I correct it:

 ? ?? \Umathfractiondelsize\displaystyle=23.9pt

 ???? $$ {n \atopwithdelims() k} $$

then the result looks OK.

I know that this parameter is not present in Unicode MATH table (see 
fontforge menu: Element / Other info / Math info), but the calculation 
done by fontforge to the suggestion of this parameter for TeX is better 
than in LuaTeX. I don't know the internal algorithm in fontforge nor in 
LuaTeX for initializing this parameter, but it would be good idea to 
compare them and do correction in LuaTeX.

Notice about Unicode math loading. I did the Unicode Math loading for 
this test in OpTeX:

 ??? \fontfam[lmfonts]

 ?? \the\Umathfractiondelsize\displaystyle
 ?? $$ {n \atopwithdelims() k} $$

 ??? \bye

or in LuaLaTeX:

 ?? \documentclass{article}
 ?? \usepackage{unicode-math}
 ?? \begin{document}

 ?? \the\Umathfractiondelsize\displaystyle
 ?? $$ {n \atopwithdelims() k} $$

 ?? \end{document}

or in ConTeXt:

 ??? \starttext

 ??? \the\Umathfractiondelsize\displaystyle

 ??? $${n\atopwithdelims() k}$$

 ??? \stoptext

The last one shows the result 28.8pt and ugly combination number because 
the default size is 12pt here, 24.0*1.2 = 28.8pt.

Petr Olsak



From luigi.scarso at gmail.com  Sat Jun  6 13:09:26 2020
From: luigi.scarso at gmail.com (luigi scarso)
Date: Sat, 6 Jun 2020 13:09:26 +0200
Subject: [luatex] Problem tex.print()-ing a verbatim block
In-Reply-To: <CADs++6in3_XwG6xjeuM+rLRFgrWxswbj0cJyfjRvB0AdknBm4g@mail.gmail.com>
References: <CADs++6in3_XwG6xjeuM+rLRFgrWxswbj0cJyfjRvB0AdknBm4g@mail.gmail.com>
Message-ID: <CAG5iGsDNW9QKwSWaSsyGvvKwcJvxf8rytc7eOur3P3DcsR1SLQ@mail.gmail.com>

On Sat, Jun 6, 2020 at 2:37 AM Eduardo Ochs <eduardoochs at gmail.com> wrote:

> Hello list,
>
> if I run something like this from Lua
>
>   tex.print([[
>   \begin{verbatim}
>   foo
>     poo
>       boo
>   \end{verbatim}
>   ]])
>
> the newlines in the verbatim are converted to spaces... how do I fix
> this?
>

this is more a lualatex question, context is ok .
I suspect you need to use the right catcode table in tex.print .


-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://tug.org/pipermail/luatex/attachments/20200606/01a3adde/attachment.html>

From luigi.scarso at gmail.com  Sat Jun  6 17:18:20 2020
From: luigi.scarso at gmail.com (luigi scarso)
Date: Sat, 6 Jun 2020 17:18:20 +0200
Subject: [luatex] bad \Umathfractiondelsize calculation
In-Reply-To: <11c47f51-1dc5-6795-b735-d5b08f061df9@olsak.net>
References: <11c47f51-1dc5-6795-b735-d5b08f061df9@olsak.net>
Message-ID: <CAG5iGsDK11w0DZN99QNvFqjVWZk8Ner42d1kpJKHYo5Xbn7_jw@mail.gmail.com>

On Sat, Jun 6, 2020 at 9:44 AM Petr Olsak <petr at olsak.net> wrote:

> When I load Unicode math Latin Modern with LuaTeX and try:
>
>      $$ {n \atopwithdelims() k} $$ % i.e. {n \choose k}
>
> then the result looks ugly, the brackets are too big.
>
> The size of these brackets depend on the
> \Umathfractiondelsize\displaystyle prameter.
>
> This parameter is is set to 24.0pt by LuaTeX when the Unicode
> latinmodern-math font at 10pt is loaded. I tried to use fontforge:
>
> fontforge latinmodern-math.otf
>
> menu: Element / Font info, tab: TeX, select: TeX math symbol, click:
> "more params". We can see that fontforge suggests the Delim1 (this is
> the same parameter) as 2390, i.e. 23.9 pt when the font is loaded at10pt.
>
> If I correct it:
>
>       \Umathfractiondelsize\displaystyle=23.9pt
>
>       $$ {n \atopwithdelims() k} $$
>
> then the result looks OK.
>
> I know that this parameter is not present in Unicode MATH table (see
> fontforge menu: Element / Other info / Math info), but the calculation
> done by fontforge to the suggestion of this parameter for TeX is better
> than in LuaTeX. I don't know the internal algorithm in fontforge nor in
> LuaTeX for initializing this parameter, but it would be good idea to
> compare them and do correction in LuaTeX.
>
> Notice about Unicode math loading. I did the Unicode Math loading for
> this test in OpTeX:
>
>      \fontfam[lmfonts]
>
>     \the\Umathfractiondelsize\displaystyle
>     $$ {n \atopwithdelims() k} $$
>
>      \bye
>
> or in LuaLaTeX:
>
>     \documentclass{article}
>     \usepackage{unicode-math}
>     \begin{document}
>
>     \the\Umathfractiondelsize\displaystyle
>     $$ {n \atopwithdelims() k} $$
>
>     \end{document}
>
> or in ConTeXt:
>
>      \starttext
>
>      \the\Umathfractiondelsize\displaystyle
>
>      $${n\atopwithdelims() k}$$
>
>      \stoptext
>
> The last one shows the result 28.8pt and ugly combination number because
> the default size is 12pt here, 24.0*1.2 = 28.8pt.
>
>
\setupbodyfont[10pt]
\starttext
etc

optex and context gives 24.0pt, lualatex gives 23.99744pt

luatex.pdf says:
""
Note 9: FractionDelimiterDisplayStyleSize and FractionDelimiterSize do not
actually ex-
ist in the ?standard? OpenType math font Cambria, but were useful enough to
be added.
""
so I guess it's set at format level.

$ grep -r FractionDelimiterDisplayStyleSize
texmf-dist/tex/generic/context/luatex/luatex-fonts-merged.lua:  if not
mathparameters.FractionDelimiterDisplayStyleSize then
texmf-dist/tex/generic/context/luatex/luatex-fonts-merged.lua:
targetmathparameters.FractionDelimiterDisplayStyleSize=2.40*targetparameters.size
texmf-dist/tex/luatex/luaotfload/fontloader-reference.lua:  if not
mathparameters.FractionDelimiterDisplayStyleSize then
texmf-dist/tex/luatex/luaotfload/fontloader-reference.lua:
targetmathparameters.FractionDelimiterDisplayStyleSize=2.40*targetparameters.size
texmf-dist/tex/luatex/luaotfload/fontloader-font-con.lua:        if not
mathparameters.FractionDelimiterDisplayStyleSize then
texmf-dist/tex/luatex/luaotfload/fontloader-font-con.lua:
 targetmathparameters.FractionDelimiterDisplayStyleSize = 2.40 *
targetparameters.size
texmf-dist/tex/luatex/luaotfload/fontloader-2020-05-06.lua:  if not
mathparameters.FractionDelimiterDisplayStyleSize then
texmf-dist/tex/luatex/luaotfload/fontloader-2020-05-06.lua:
targetmathparameters.FractionDelimiterDisplayStyleSize=2.40*targetparameters.size
texmf-dist/tex/context/base/mkiv/math-dim.lua:
 cramped_display_style       = { "FractionDelimiterDisplayStyleSize",
 "delim1" },
texmf-dist/tex/context/base/mkiv/math-dim.lua:
 display_style               = { "FractionDelimiterDisplayStyleSize",
 "delim1" }, },
texmf-dist/tex/context/base/mkiv/math-dim.lua:
 FractionDelimiterDisplayStyleSize           = t . fraction_del_size     .
display_style,
texmf-dist/tex/context/base/mkiv/font-con.lua:        if not
mathparameters.FractionDelimiterDisplayStyleSize then
texmf-dist/tex/context/base/mkiv/font-con.lua:
 targetmathparameters.FractionDelimiterDisplayStyleSize = 2.40 *
targetparameters.size
texmf-dist/tex/context/base/mkiv/math-act.lua:                if not
mathparameters.FractionDelimiterDisplayStyleSize then
texmf-dist/tex/context/base/mkiv/math-act.lua:
 mathparameters.FractionDelimiterDisplayStyleSize = 2.40 * size


-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://tug.org/pipermail/luatex/attachments/20200606/4eeb600f/attachment.html>

From eduardoochs at gmail.com  Sat Jun  6 20:10:54 2020
From: eduardoochs at gmail.com (Eduardo Ochs)
Date: Sat, 6 Jun 2020 15:10:54 -0300
Subject: [luatex] Where can I learn more about catcodes in LuaTeX?
Message-ID: <CADs++6js2hjCQLv5ttEsy1Frk4W2MjrqY4KHYJkisTCzz734hA@mail.gmail.com>

Hi list,

I just sent a question about catcodes that had the wrong tone... let
me try to rewrite it completely.

I am the author of a package called "Dednat6" for drawing diagrams
with luatex/lualatex. It is very extensible, and, among other things,
it provides a way to run Lua code embedded in specially-marked
comments - more precisely, in what I call "%L"-blocks. This is
explained in sections 3 and 4 of the TUGBoat article about Dednat6:

  https://tug.org/TUGboat/tb39-3/tb123ochs-dednat.pdf

I am trying to convince more category theorists to try Dednat6, but I
am afraid that they will find LuaTeX too hard to learn, as I did, and
they will give up. One of the things that I am trying to do to remedy
this is to collect pointers on where they can learn things.



The message about catcodes that I sent yesterday is here:

  https://tug.org/pipermail/luatex/2020-June/007364.html

It contains a simple test that reveals - I mean, to an imaginary
newbie reading it - that the TeX interpreter and tex.print use two
different catcode tables.

One obvious place to learn more about these different catcode tables
is the LuaTeX reference manual. Let me use a trick from eev to point
to sections of the manual. The trick is explained here,

  http://angg.twu.net/eev-intros/find-pdf-like-intro.html#7
  (find-pdf-like-intro "7. Shorter hyperlinks to PDF files")

and - for the sake of completeness, and for Emacs users only - there
is an introduction of how to use Emacs and eev to create and share
"executable notes" here:

  http://angg.twu.net/emacsconf2019.html

To make a long story short, after running these sexps in Emacs,

(code-pdf-page "luatexref"
"/usr/local/texlive/2019/texmf-dist/doc/context/documents/general/manuals/luatex.pdf")
(code-pdf-text "luatexref"
"/usr/local/texlive/2019/texmf-dist/doc/context/documents/general/manuals/luatex.pdf"
4)

I can use the sexp hyperlinks below to point to specific sections of
the manual; I believe that they are easy to understand.

  (find-luatexrefpage        5  "Contents")
  (find-luatexreftext        5  "Contents")
  (find-luatexrefpage (+ 4  24) "Note that the expansion of \\directlua")
  (find-luatexreftext (+ 4  24) "Note that the expansion of \\directlua")
  (find-luatexrefpage (+ 4  27) "2.5 Catcode tables")
  (find-luatexreftext (+ 4  27) "2.5 Catcode tables")
  (find-luatexrefpage (+ 4 197) "10.3.14.1 print")
  (find-luatexreftext (+ 4 197) "10.3.14.1 print")

So, how can I do things like inspecting catcodes and changing them
from Lua? I saw that there is a brief mention of a "tex.catcodetable"
here,

  (find-luatexrefpage (+ 4 186) "10.3.2.1 Integer parameters")
  (find-luatexreftext (+ 4 186) "10.3.2.1 Integer parameters")
  (find-luatexreftext (+ 4 186) "10.3.2.1 Integer parameters"
"tex.catcodetable")

but I didn't find there the ways to inspect and change entries of
catcode tables from Lua...




I am quite outsider-ish in the LuaTeX community, and I have the
sensation that I don't even know where are the forums in which the
discussions are happening... so:

Please, people, if you have any pointers that you believe that may be
useful to me, I'd like to see them - and private messages are welcome.

I *guess* that the material - both "reference" and "discussions" -
about catcodes in LuaTeX is scattered through several mailing lists,
and in comments in the source code of LuaTeX itself, in the source
code of packages that use catcodes in luatex-ish ways, in TUGBoat
articles, in slides, in posts in stackexchange... and I don't know
where else, and I don't know if there are chat channels about LuaTeX
nowadays - did they migrate from IRC to things like Slack and
Zulip?...

  Cheers and thanks in advance,
    Eduardo Ochs
    http://angg.twu.net/dednat6.html
    http://angg.twu.net/dednat6.html#hacking

From luigi.scarso at gmail.com  Sat Jun  6 22:25:52 2020
From: luigi.scarso at gmail.com (luigi scarso)
Date: Sat, 6 Jun 2020 22:25:52 +0200
Subject: [luatex] Where can I learn more about catcodes in LuaTeX?
In-Reply-To: <CADs++6js2hjCQLv5ttEsy1Frk4W2MjrqY4KHYJkisTCzz734hA@mail.gmail.com>
References: <CADs++6js2hjCQLv5ttEsy1Frk4W2MjrqY4KHYJkisTCzz734hA@mail.gmail.com>
Message-ID: <CAG5iGsCRTsoLQ2qwNcJ0dDN6U785pLqjifhJoBx1qz3fBuzuag@mail.gmail.com>

On Sat, Jun 6, 2020 at 8:11 PM Eduardo Ochs <eduardoochs at gmail.com> wrote:

> Hi list,
>
> I just sent a question about catcodes that had the wrong tone...


nothing wrong to me



> So, how can I do things like inspecting catcodes and changing them
> from Lua?


it's better to open luatex.pdf with a pdfreader like evince,  latest mupdf
,
okular, adobe reader... and search for catcode.



> I am quite outsider-ish in the LuaTeX community, and I have the
> sensation that I don't even know where are the forums in which the
> discussions are happening... so:
>
> Please, people, if you have any pointers that you believe that may be
> useful to me, I'd like to see them - and private messages are welcome.
>
>
1) use \logginall ... \tracingnone just around the chunk of tex code, ie
\loggingall%
\catcode`\^^J=10
\directlua{dofile "test.lua"}\tracingnone
and for lualatex
\loggingall%
\begin{verbatim}
foo
  poo
    boo
\end{verbatim}\tracingnone

At least you can see where they differ.

2) learn a bit of context to check how / if the result changes:
--[==[ test-ctx.lua ]==]
str = [[
\starttyping
foo
  poo
    boo
\stoptyping
]]
print(str)

%% test-ctx.tex
\starttext
\starttyping
foo
  foo
    foo
\stoptyping

\directlua{dofile "test-ctx.lua"}
\stoptext

eventually use \logginall..\tracingnone

3) look into context code
texmf-dist/tex/context/base/mkiv
almost every answer is there.

4) sometimes   context mailing list  can answer to luatex questions


-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://tug.org/pipermail/luatex/attachments/20200606/b4b00471/attachment-0001.html>

From d.p.carlisle at gmail.com  Sat Jun  6 23:38:49 2020
From: d.p.carlisle at gmail.com (David Carlisle)
Date: Sat, 6 Jun 2020 22:38:49 +0100
Subject: [luatex] Where can I learn more about catcodes in LuaTeX?
In-Reply-To: <CADs++6js2hjCQLv5ttEsy1Frk4W2MjrqY4KHYJkisTCzz734hA@mail.gmail.com>
References: <CADs++6js2hjCQLv5ttEsy1Frk4W2MjrqY4KHYJkisTCzz734hA@mail.gmail.com>
Message-ID: <CAEW6iOhFY=+QvEdr1ri=HkwhFOtc6JAMuW=foOHz=1qdHQ_Adg@mail.gmail.com>

This isn't the right list really especially as your questions are more
latex than luatex related in many ways.
You may prefer to ask on tex.stackexchange.com

On Sat, 6 Jun 2020 at 19:11, Eduardo Ochs <eduardoochs at gmail.com> wrote:

>
>
>
>
> The message about catcodes that I sent yesterday is here:
>
>   https://tug.org/pipermail/luatex/2020-June/007364.html
>
> It contains a simple test that reveals - I mean, to an imaginary
> newbie reading it - that the TeX interpreter and tex.print use two
> different catcode tables.
>


Not really, it's just the standard issue that you can't use  verbatim in
the argument
of another command. You used tex.print but you would see the same from
\def\foo{
\begin{verbatim}
...
\end{verbatim}
}
\foo

without using luatex at all.

As you have the text in a Lua string you don't really need verbatim
environment

You could write out the tokens with \catcodetable at string  as the first
optional catcode table argument. (If I understand your use case)
but you would have to split up the string on \n first and print each
verbatim line separately.

Or you could print using the default catcode table but quote teh special
characters first. I give a small example of this at the end.



> One obvious place to learn more about these different catcode tables
> is the LuaTeX reference manual. Let me use a trick from eev to point
> to sections of the manual. The trick is explained here,
> at6.html#hacking <http://angg.twu.net/dednat6.html#hacking>



for the latex interface you could try

texdoc ltluatex
and perhaps
texdoc ctablestack


Here's a small example

verb.Lua defines a multi-line string then makes it safe for the latex
document test.tex


verb.lua

z=[[
aaa  bbb  \gggg
     jjj { \zzz
    blug
]]
tex.print("\\begin{flushleft}\\ttfamily\\let\\\\=\\textbackslash ")
tex.print(
z:
gsub('\\','\\\\'):
gsub('{','\\{'):
gsub('}','\\}'):
gsub(' ','\\ '):
gsub('\n','\\par ')
.. "")
tex.print("\\end{flushleft}")



test.tex

\documentclass{article}

\begin{document}

\directlua{
require("verb")
}
\end{document}
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://tug.org/pipermail/luatex/attachments/20200606/f1561b14/attachment.html>

From reinhard.kotucha at web.de  Fri Jun 19 23:16:46 2020
From: reinhard.kotucha at web.de (Reinhard Kotucha)
Date: Fri, 19 Jun 2020 23:16:46 +0200
Subject: [luatex] fio library byte order
Message-ID: <24301.11070.200329.759425@gargle.gargle.HOWL>

Hi,
it's nice that with the fio library LuaTeX can now process binary
files.  What I'm missing is the ability to specify the byte order
(little vs. big endian).

I didn't find any hint, neither in the manual nor in the sources.

Without being able to specify the byte order usage of the library is
quite limited.  The byte order of a particular file is not necessarily
the same as that of your system.

Some file formats have a certain byte order (PNM, for instance) and
others precede binary data with a byte order mark (TIFF).  In any case
it's necessary to specify the byte order before reading binary stuff.

Is there a chance to provide a switch?

Regards,
  Reinhard

--
------------------------------------------------------------------
Reinhard Kotucha                            Phone: +49-511-3373112
Marschnerstr. 25
D-30167 Hannover                    mailto:reinhard.kotucha at web.de
------------------------------------------------------------------


From j.hagen at xs4all.nl  Sat Jun 20 10:25:33 2020
From: j.hagen at xs4all.nl (Hans Hagen)
Date: Sat, 20 Jun 2020 10:25:33 +0200
Subject: [luatex] fio library byte order
In-Reply-To: <24301.11070.200329.759425@gargle.gargle.HOWL>
References: <24301.11070.200329.759425@gargle.gargle.HOWL>
Message-ID: <e2af3890-9f48-7454-0964-03e3d4fe94c6@xs4all.nl>

On 6/19/2020 11:16 PM, Reinhard Kotucha wrote:
> Hi,
> it's nice that with the fio library LuaTeX can now process binary
> files.  What I'm missing is the ability to specify the byte order
> (little vs. big endian).
> 
> I didn't find any hint, neither in the manual nor in the sources.
> 
> Without being able to specify the byte order usage of the library is
> quite limited.  The byte order of a particular file is not necessarily
> the same as that of your system.
> 
> Some file formats have a certain byte order (PNM, for instance) and
> others precede binary data with a byte order mark (TIFF).  In any case
> it's necessary to specify the byte order before reading binary stuff.
> 
> Is there a chance to provide a switch?
When I have time I'll backport a couple of the additional 
[integer|cardinal]*_le ones that we have in luametatex (I though that 
i'd already done that).

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From luigi.scarso at gmail.com  Sat Jun 20 13:26:50 2020
From: luigi.scarso at gmail.com (luigi scarso)
Date: Sat, 20 Jun 2020 13:26:50 +0200
Subject: [luatex] fio library byte order
In-Reply-To: <24301.11070.200329.759425@gargle.gargle.HOWL>
References: <24301.11070.200329.759425@gargle.gargle.HOWL>
Message-ID: <CAG5iGsC7Te4JP=3Es4tzLKYqQ7hSRmZO58AooNX0cP+KKMp3eg@mail.gmail.com>

On Fri, Jun 19, 2020 at 11:17 PM Reinhard Kotucha <reinhard.kotucha at web.de>
wrote:

> Hi,
> it's nice that with the fio library LuaTeX can now process binary
> files.  What I'm missing is the ability to specify the byte order
> (little vs. big endian).
>
>
I don't knwo if it can help,
but if you can use ffi I think you can know the endianness of the current
platform with with this code:
\directlua{
ffi.cdef [[
 union endianness {
   int32_t i;
   char c[4];
 }
]]
local x = ffi.new('union endianness x',{i=1})
if(x.c[0]==1) then
  print "little endian"
else
 print "big endian"
end
}
\end

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://tug.org/pipermail/luatex/attachments/20200620/449439ee/attachment.html>

From henrimenke at gmail.com  Mon Jun 22 02:40:18 2020
From: henrimenke at gmail.com (Henri Menke)
Date: Mon, 22 Jun 2020 12:40:18 +1200
Subject: [luatex] fio library byte order
In-Reply-To: <CAG5iGsC7Te4JP=3Es4tzLKYqQ7hSRmZO58AooNX0cP+KKMp3eg@mail.gmail.com>
References: <24301.11070.200329.759425@gargle.gargle.HOWL>
 <CAG5iGsC7Te4JP=3Es4tzLKYqQ7hSRmZO58AooNX0cP+KKMp3eg@mail.gmail.com>
Message-ID: <20200622004018.b6gu6djxzndziflw@vento15post8>

On 20/06/20, 13:26, luigi scarso wrote:
> On Fri, Jun 19, 2020 at 11:17 PM Reinhard Kotucha <reinhard.kotucha at web.de>
> wrote:
> 
> > Hi,
> > it's nice that with the fio library LuaTeX can now process binary
> > files.  What I'm missing is the ability to specify the byte order
> > (little vs. big endian).
> >
> >
> I don't knwo if it can help,
> but if you can use ffi I think you can know the endianness of the current
> platform with with this code:
> \directlua{
> ffi.cdef [[
>  union endianness {
>    int32_t i;
>    char c[4];
>  }
> ]]
> local x = ffi.new('union endianness x',{i=1})
> if(x.c[0]==1) then
>   print "little endian"
> else
>  print "big endian"
> end
> }
> \end

Type punning is undefined behaviour.  When you read from a different
union member than you wrote to, there is no guarantee that you are
actually reading the same memory.  It is much safer to just do a memcpy
to an array of char of the correct length.

local x = ffi.new('int[1]',1)
local size = ffi.sizeof(x, 0)
local y = ffi.new('char[' .. size .. ']')
ffi.copy(y, x, ffi.sizeof(x))
if (y[0] == 0x01) then
    print "little endian"
elseif (y[size - 1] == 0x01) then
    print "big endian"
else
    error("could not detect endianness")
end

Cheers, Henri

> 
> -- 
> luigi

From mj at ucw.cz  Mon Jun 22 10:52:30 2020
From: mj at ucw.cz (Martin =?utf-8?B?TWFyZcWh?=)
Date: Mon, 22 Jun 2020 10:52:30 +0200
Subject: [luatex] fio library byte order
In-Reply-To: <20200622004018.b6gu6djxzndziflw@vento15post8>
References: <24301.11070.200329.759425@gargle.gargle.HOWL>
 <CAG5iGsC7Te4JP=3Es4tzLKYqQ7hSRmZO58AooNX0cP+KKMp3eg@mail.gmail.com>
 <20200622004018.b6gu6djxzndziflw@vento15post8>
Message-ID: <mj+md-20200622.084527.58192.nikam@ucw.cz>

Hello!

> Type punning is undefined behaviour.  When you read from a different
> union member than you wrote to, there is no guarantee that you are
> actually reading the same memory.

I beg to disagree.  Generally, type punning causes undefined behavior,
but there is a couple of specific cases explicitly allowed by the standard.

According to paragraph 6.5.7 of the C11 standard:

(1) A union containing a member of type T can be accessed as type T directly
    (this also implies that union padding can be inserted only after the
    members, not before).

(2) Any object can be accessed as (signed or unsigned) chars.

				Have a nice fortnight
-- 
Martin `MJ' Mare?                        <mj at ucw.cz>   http://mj.ucw.cz/
United Computer Wizards, Prague, Czech Republic, Europe, Earth, Universe
Hex dump:  Where witches put used curses...

From henrimenke at gmail.com  Tue Jun 23 04:28:50 2020
From: henrimenke at gmail.com (Henri Menke)
Date: Tue, 23 Jun 2020 14:28:50 +1200
Subject: [luatex] fio library byte order
In-Reply-To: <mj+md-20200622.084527.58192.nikam@ucw.cz>
References: <24301.11070.200329.759425@gargle.gargle.HOWL>
 <CAG5iGsC7Te4JP=3Es4tzLKYqQ7hSRmZO58AooNX0cP+KKMp3eg@mail.gmail.com>
 <20200622004018.b6gu6djxzndziflw@vento15post8>
 <mj+md-20200622.084527.58192.nikam@ucw.cz>
Message-ID: <20200623022850.5yct2xpr5pkmjgin@vento15post8>

On 22/06/20, 10:52, Martin Mare? wrote:
> Hello!
> 
> > Type punning is undefined behaviour.  When you read from a different
> > union member than you wrote to, there is no guarantee that you are
> > actually reading the same memory.
> 
> I beg to disagree.  Generally, type punning causes undefined behavior,
> but there is a couple of specific cases explicitly allowed by the standard.

No, type punning *is* undefined behaviour.

    6.2.6.1 General
    
    7 When a value is stored in a member of an object of union type, the
    bytes of the object representation that do not correspond to that member
    but do correspond to other members take unspecified values.

http://port70.net/~nsz/c/c11/n1570.html#6.2.6.1p7

It's also really unclear to me why people insist on doing this.  The
memcpy trick is safe and because it uses sizeof it also takes care of
alignment and other platform-specifics.  Most (probably all) compilers
will generate the same or even better assembly for the memcpy variant.

> According to paragraph 6.5.7 of the C11 standard:
> 
> (1) A union containing a member of type T can be accessed as type T directly
>     (this also implies that union padding can be inserted only after the
>     members, not before).

This standardese has nothing to do with type punning.  It says that you
can access, e.g. union { int } as int.

> (2) Any object can be accessed as (signed or unsigned) chars.

This standardese refers to casts, e.g.

    int i = 1;
    char *pc = (char *)&i;

While the compiler might generate the same code as for type punning
through a union, the latter is still not specified by the standard.

Cheers, Henri

> 
> 				Have a nice fortnight
> -- 
> Martin `MJ' Mare?                        <mj at ucw.cz>   http://mj.ucw.cz/
> United Computer Wizards, Prague, Czech Republic, Europe, Earth, Universe
> Hex dump:  Where witches put used curses...

From Knut_Petersen at t-online.de  Wed Jun 24 16:45:57 2020
From: Knut_Petersen at t-online.de (Knut Petersen)
Date: Wed, 24 Jun 2020 16:45:57 +0200
Subject: [luatex] This is LuaHBTeX,
	Version 1.12.0 -- lualatex.fmt was written by luatex
Message-ID: <f852bf10-0fe8-49e6-e1cf-4f75e84dac7c@t-online.de>

Hi everybody!

After updating my openSuSE Tumbleweed system I found lualatex broken. "lualatex somefile" led to an error message:? LuaHBTeX, Version 1.12.0 complained that "lualatex.fmt was written by luatex".

Removing lualatex.fmt did not fix the problem.

"fmtutil --all" did not fix the problem.

Then I changed the lualtex entry in /etc/texmf/web2c/fmtutil.cnf? to "lualatex lua*hb*tex language.dat,language.dat.lua lualatex.ini" and started "fmtutil --all" again. That fixed the problem, but I suspect that I only found a quick workaround.

Is this a general TeXLive 2020 problem or an openSuSE bug?

Knut


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://tug.org/pipermail/luatex/attachments/20200624/002df349/attachment.html>

From luatex at nililand.de  Wed Jun 24 19:44:19 2020
From: luatex at nililand.de (Ulrike Fischer)
Date: Wed, 24 Jun 2020 19:44:19 +0200
Subject: [luatex] This is LuaHBTeX,
	Version 1.12.0 -- lualatex.fmt was written by luatex
References: <f852bf10-0fe8-49e6-e1cf-4f75e84dac7c@t-online.de>
Message-ID: <k5gzta4lr7x2$.dlg@nililand.de>

Am Wed, 24 Jun 2020 16:45:57 +0200 schrieb Knut Petersen:

> Then I changed the lualtex entry in /etc/texmf/web2c/fmtutil.cnf?
> to "lualatex lua*hb*tex language.dat,language.dat.lua
> lualatex.ini" and started "fmtutil --all" again. That fixed the
> problem, but I suspect that I only found a quick workaround.

> Is this a general TeXLive 2020 problem or an openSuSE bug?

It is not a general texlive problem. It works fine for me and for
lots of other people. 

I don't know your OS but  /etc/texmf/web2c/fmtutil.cnf sounds like a
local, older fmtutil.cnf, and adapting it to the new luahbtex engine
is the right thing to do (or perhaps you should check, why you have
this fmtutil.cnf and if it is still needed at all).


-- 
Ulrike Fischer 
http://www.troubleshooting-tex.de/


From norbert at preining.info  Wed Jun 24 21:55:49 2020
From: norbert at preining.info (Norbert Preining)
Date: Thu, 25 Jun 2020 04:55:49 +0900
Subject: [luatex] This is LuaHBTeX,
 Version 1.12.0 -- lualatex.fmt was written by luatex
In-Reply-To: <f852bf10-0fe8-49e6-e1cf-4f75e84dac7c@t-online.de>
References: <f852bf10-0fe8-49e6-e1cf-4f75e84dac7c@t-online.de>
Message-ID: <20200624195549.GA63591@burischnitzel.preining.info>

Hi Knut,

> After updating my openSuSE Tumbleweed system I found lualatex broken. "lualatex somefile" led to an error message:? LuaHBTeX, Version 1.12.0 complained that "lualatex.fmt was written by luatex".
> 
> Removing lualatex.fmt did not fix the problem.

My guess is you have a format for luahbtex hanging around in below your
$HOME. If you would have shown the actual log file, one could see it.

> "fmtutil --all" did not fix the problem.

A sign of the above.

> Then I changed the lualtex entry in /etc/texmf/web2c/fmtutil.cnf? to "lualatex lua*hb*tex language.dat,language.dat.lua lualatex.ini" and started "fmtutil --all" again. That fixed the problem, but I suspect that I only found a quick workaround.
> 
> Is this a general TeXLive 2020 problem or an openSuSE bug?

Please report this to OpenSUSE. In TeX Live 2020 lualatex format is
based on luahbtex, but what OpenSUSE does I don't know.

Best

Norbert

--
PREINING Norbert                              https://www.preining.info
Accelia Inc. + IFMGA ProGuide + TU Wien + JAIST + TeX Live + Debian Dev
GPG: 0x860CDC13   fp: F7D8 A928 26E3 16A1 9FA0 ACF0 6CAC A448 860C DC13

From Knut_Petersen at t-online.de  Thu Jun 25 10:26:27 2020
From: Knut_Petersen at t-online.de (Knut Petersen)
Date: Thu, 25 Jun 2020 10:26:27 +0200
Subject: [luatex] This is LuaHBTeX,
 Version 1.12.0 -- lualatex.fmt was written by luatex
In-Reply-To: <20200624195549.GA63591@burischnitzel.preining.info>
References: <f852bf10-0fe8-49e6-e1cf-4f75e84dac7c@t-online.de>
 <20200624195549.GA63591@burischnitzel.preining.info>
Message-ID: <d91b97d6-12c0-b1b4-76ff-8f6ee79bf5bc@t-online.de>

Hi Norbert,

>> After updating my openSuSE Tumbleweed system I found lualatex broken. "lualatex somefile" led to an error message:? LuaHBTeX, Version 1.12.0 complained that "lualatex.fmt was written by luatex". Removing lualatex.fmt did not fix the problem. 
> My guess is you have a format for luahbtex hanging around in below your $HOME. If you would have shown the actual log file, one could see it.

There definitely was no old format file in the cwd or somewhere else in or below $HOME, it really were outdated fmtutil.cnf / lualatex.fmt in the texmf tree. I agree that an error in the update process is a case for a bugreport to openSuSE.
But I was surprised that fixing fmtutil.cnf and removing the obsolete format file did not trigger the creation of a new format file , so I removed the lualatex.fmt file and executed lualatex again:

    knut at golem:~/foo> sudo rm /var/lib/texmf/web2c/lualatex/lualatex.fmt
    [sudo] Passwort f?r root:
    knut at golem:~/foo> rm TRACE*; strace -v -f -ff -s 8192 -o TRACE lualatex Teilnehmer20200627.tex
    This is LuaHBTeX, Version 1.12.0 (TeX Live 2020/TeX Live for SUSE Linux)
     ?restricted system commands enabled.

    kpathsea: Running mktexfmt lualatex.fmt
    mktexfmt [ERROR]: -user mode but path setup is -sys type, bailing out.
    I can't find the format file `lualatex.fmt'!
    knut at golem:~/foo>

The trace shows that"/usr/bin/mktexfmt" was used with the single option "lualatex.fmt".

Let's summarize: The engine fails if there is a broken or outdated format file.
The engine tries to recover if it does not find format file,? but that fails too.
I would suggest to actually use a command that generates a format file in a place that normally is writable and searched first in those cases.

    fmtutil --no-engine-subdir --fmtdir=.? --byfmt lualatex.fmt'

seems to be a better idea than

    '/usr/bin/mktexfmt lualatex.fmt'.

Knut









-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://tug.org/pipermail/luatex/attachments/20200625/848f9256/attachment.html>

From norbert at preining.info  Thu Jun 25 10:34:53 2020
From: norbert at preining.info (Norbert Preining)
Date: Thu, 25 Jun 2020 17:34:53 +0900
Subject: [luatex] This is LuaHBTeX,
 Version 1.12.0 -- lualatex.fmt was written by luatex
In-Reply-To: <d91b97d6-12c0-b1b4-76ff-8f6ee79bf5bc@t-online.de>
References: <f852bf10-0fe8-49e6-e1cf-4f75e84dac7c@t-online.de>
 <20200624195549.GA63591@burischnitzel.preining.info>
 <d91b97d6-12c0-b1b4-76ff-8f6ee79bf5bc@t-online.de>
Message-ID: <20200625083453.GA1922038@bulldog.preining.info>

Hi Knut,

> There definitely was no old format file in the cwd or somewhere else in or below $HOME, it really were outdated fmtutil.cnf / lualatex.fmt in the texmf tree. I agree that an error in the update process is a case for a bugreport to openSuSE.

Ok.

Why the fmtutil.cnf was outdated, that is again a question for the
OpenSUSE Team, not us.

>    knut at golem:~/foo> rm TRACE*; strace -v -f -ff -s 8192 -o TRACE lualatex Teilnehmer20200627.tex
>    This is LuaHBTeX, Version 1.12.0 (TeX Live 2020/TeX Live for SUSE Linux)
>     ?restricted system commands enabled.

That doesn't work, well, it should actually


>    kpathsea: Running mktexfmt lualatex.fmt
>    mktexfmt [ERROR]: -user mode but path setup is -sys type, bailing out.

You seem to have some env variables set that makes fmtutil believe that
it is running in sysmode.

Do you have
	TEXMVAR=$TEXMFSYSVAR
?

> Let's summarize: The engine fails if there is a broken or outdated format file.

Because the **link** from
	lualatex -> luahbtex
is probably there, but the format definition is wrong. That does not go
well together.

>    fmtutil --no-engine-subdir --fmtdir=.? --byfmt lualatex.fmt'

THat is all not a good idea, why not do
	sudo fmtutil-sys --byfmt lualatex
?

Best

Norbert

--
PREINING Norbert                              https://www.preining.info
Accelia Inc. + IFMGA ProGuide + TU Wien + JAIST + TeX Live + Debian Dev
GPG: 0x860CDC13   fp: F7D8 A928 26E3 16A1 9FA0 ACF0 6CAC A448 860C DC13

From reinhard.kotucha at web.de  Sat Jun 27 02:56:33 2020
From: reinhard.kotucha at web.de (Reinhard Kotucha)
Date: Sat, 27 Jun 2020 02:56:33 +0200
Subject: [luatex] fio library byte order
In-Reply-To: <e2af3890-9f48-7454-0964-03e3d4fe94c6@xs4all.nl>
References: <24301.11070.200329.759425@gargle.gargle.HOWL>
 <e2af3890-9f48-7454-0964-03e3d4fe94c6@xs4all.nl>
Message-ID: <24310.39233.122361.695575@gargle.gargle.HOWL>

On 2020-06-20 at 10:25:33 +0200, Hans Hagen wrote:

 > On 6/19/2020 11:16 PM, Reinhard Kotucha wrote:
 > > Hi,
 > > it's nice that with the fio library LuaTeX can now process binary
 > > files.  What I'm missing is the ability to specify the byte order
 > > (little vs. big endian).
 > >
 > > I didn't find any hint, neither in the manual nor in the sources.
 > >
 > > Without being able to specify the byte order usage of the library is
 > > quite limited.  The byte order of a particular file is not necessarily
 > > the same as that of your system.
 > >
 > > Some file formats have a certain byte order (PNM, for instance) and
 > > others precede binary data with a byte order mark (TIFF).  In any case
 > > it's necessary to specify the byte order before reading binary stuff.
 > >
 > > Is there a chance to provide a switch?
 >
 > When I have time I'll backport a couple of the additional
 > [integer|cardinal]*_le ones that we have in luametatex (I though that
 > i'd already done that).

Hi Hans,
I must admit that I don't know anything about luametatex.  I just
looked into liolibext.c .

IMO there are a few things to consider.

The current code extracts single bytes from a file.

 | static int readcardinal2(lua_State *L) {
 |     FILE *f = tofile(L);
 |     int a = getc(f);
 |     int b = getc(f);
 |

This, and even the extraction of short strings, is extremely slow.
It's much more efficient to read data blocks of 8192 bytes, for
instance, into memory and to process these data blocks.  I'm not
convinced that reading a complete file into memory is a good idea,
despite its simplicity.

Processing the content of a file with the fio library is then similar
to processing a string with the sio library, with the exception that
endianness has to be considered when files are involved.

The host byte order must always be determined automatically, either
with Luigi's approach or probably more easily with ntohs(3) if this
function is available on Windows too.  The file byte order has to be
specified by the user because it depends on the file format.

If a particular file format has a BOM in its header, the BOM can be
evaluated by the user, for instance with fio.readline().  This means
that a user should be able to specify the andianness at any time, not
necessarily in advance.

As far as I understand it's sufficient that the relevant functions
read{cardinal,integer}{2,4} obey a flag which tells them whether byte
re-ordering is necessary.  The flag has to be set if host and file
byte orders are different.  I don't know whether we have to consider
64 bit integers too.

If you intend to go this way the number of functions in liolibext.c
can be halved because there is no significant difference between a
buffer and a string.  Only very few functions have to be aware of
endianness.

There is one difference though.  A string is always complete while a
buffer contains only a part of a file.  If a there are not enough
bytes at the end of a buffer in order to fulfill a request, the
missing bytes can be loaded from the file and appended to the buffer.
This has no significant impact on speed because it happens quite
rarely.  It's similar to the example in PIL, chapter 'The complete I/O
Model', section 'A small performance trick'.

If the user doesn't specify a byte order we can assume host byte
order.  I can't imagine any reasonable use case right now, except
if a temporary file is read by the same process that created it.

Regards,
  Reinhard

--
------------------------------------------------------------------
Reinhard Kotucha                            Phone: +49-511-3373112
Marschnerstr. 25
D-30167 Hannover                    mailto:reinhard.kotucha at web.de
------------------------------------------------------------------


From j.hagen at xs4all.nl  Sat Jun 27 09:59:43 2020
From: j.hagen at xs4all.nl (Hans Hagen)
Date: Sat, 27 Jun 2020 09:59:43 +0200
Subject: [luatex] fio library byte order
In-Reply-To: <24310.39233.122361.695575@gargle.gargle.HOWL>
References: <24301.11070.200329.759425@gargle.gargle.HOWL>
 <e2af3890-9f48-7454-0964-03e3d4fe94c6@xs4all.nl>
 <24310.39233.122361.695575@gargle.gargle.HOWL>
Message-ID: <ac9e9c28-64ce-40cd-b938-33fb90912397@xs4all.nl>

On 6/27/2020 2:56 AM, Reinhard Kotucha wrote:
> On 2020-06-20 at 10:25:33 +0200, Hans Hagen wrote:
> 
>   > On 6/19/2020 11:16 PM, Reinhard Kotucha wrote:
>   > > Hi,
>   > > it's nice that with the fio library LuaTeX can now process binary
>   > > files.  What I'm missing is the ability to specify the byte order
>   > > (little vs. big endian).
>   > >
>   > > I didn't find any hint, neither in the manual nor in the sources.
>   > >
>   > > Without being able to specify the byte order usage of the library is
>   > > quite limited.  The byte order of a particular file is not necessarily
>   > > the same as that of your system.
>   > >
>   > > Some file formats have a certain byte order (PNM, for instance) and
>   > > others precede binary data with a byte order mark (TIFF).  In any case
>   > > it's necessary to specify the byte order before reading binary stuff.
>   > >
>   > > Is there a chance to provide a switch?
>   >
>   > When I have time I'll backport a couple of the additional
>   > [integer|cardinal]*_le ones that we have in luametatex (I though that
>   > i'd already done that).
> 
> Hi Hans,
> I must admit that I don't know anything about luametatex.  I just
> looked into liolibext.c .
> 
> IMO there are a few things to consider.
> 
> The current code extracts single bytes from a file.
> 
>   | static int readcardinal2(lua_State *L) {
>   |     FILE *f = tofile(L);
>   |     int a = getc(f);
>   |     int b = getc(f);
>   |
> 
> This, and even the extraction of short strings, is extremely slow.
> It's much more efficient to read data blocks of 8192 bytes, for
> instance, into memory and to process these data blocks.  I'm not
> convinced that reading a complete file into memory is a good idea,
> despite its simplicity.

that would add all kind of overhead (buffer underrun, adapting to seek 
etc and therefore reload) and we can assume that the operating system 
also buffers

> Processing the content of a file with the fio library is then similar
> to processing a string with the sio library, with the exception that
> endianness has to be considered when files are involved.

it depends on what one does, sometimes a full load and using sio is 
faster but that also has its overhead (pseudo seek)

as usual i did lots of (performance) tests and there is not that much to 
gain on either end (several variants were played with)

> The host byte order must always be determined automatically, either
> with Luigi's approach or probably more easily with ntohs(3) if this
> function is available on Windows too.  The file byte order has to be
> specified by the user because it depends on the file format.

the lib is meant for usage in known scenarios (known, documented file 
formats), not arbitrary, depending on architecture or implementation

(btw, the format file used to normalize to hig endian but that was 
dropped long ago already: formats are no longer portable, which in fact 
was already dropped before that)

> If a particular file format has a BOM in its header, the BOM can be
> evaluated by the user, for instance with fio.readline().  This means
> that a user should be able to specify the andianness at any time, not
> necessarily in advance.

sure but a few extra readers would solve that

> As far as I understand it's sufficient that the relevant functions
> read{cardinal,integer}{2,4} obey a flag which tells them whether byte
> re-ordering is necessary.  The flag has to be set if host and file
> byte orders are different.  I don't know whether we have to consider
> 64 bit integers too.

that adds passing parameters and checking them for each call ... you can 
then as well use lua's 'read' function and convert with string.byte/char 
which is then about equally fast

> If you intend to go this way the number of functions in liolibext.c
> can be halved because there is no significant difference between a
> buffer and a string.  Only very few functions have to be aware of
> endianness.

halved in calls to simple functions, enlarged by more checking .. .more 
pain than gain

> There is one difference though.  A string is always complete while a
> buffer contains only a part of a file.  If a there are not enough
> bytes at the end of a buffer in order to fulfill a request, the
> missing bytes can be loaded from the file and appended to the buffer.
> This has no significant impact on speed because it happens quite
> rarely.  It's similar to the example in PIL, chapter 'The complete I/O
> Model', section 'A small performance trick'.
> 
> If the user doesn't specify a byte order we can assume host byte
> order.  I can't imagine any reasonable use case right now, except
> if a temporary file is read by the same process that created it.
as we have lua 5.3 you can consider using the string.unpack function

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From reinhard.kotucha at web.de  Sun Jun 28 03:26:24 2020
From: reinhard.kotucha at web.de (Reinhard Kotucha)
Date: Sun, 28 Jun 2020 03:26:24 +0200
Subject: [luatex] fio library byte order
In-Reply-To: <ac9e9c28-64ce-40cd-b938-33fb90912397@xs4all.nl>
References: <24301.11070.200329.759425@gargle.gargle.HOWL>
 <e2af3890-9f48-7454-0964-03e3d4fe94c6@xs4all.nl>
 <24310.39233.122361.695575@gargle.gargle.HOWL>
 <ac9e9c28-64ce-40cd-b938-33fb90912397@xs4all.nl>
Message-ID: <24311.61888.535072.336389@gargle.gargle.HOWL>

On 2020-06-27 at 09:59:43 +0200, Hans Hagen wrote:

 > On 6/27/2020 2:56 AM, Reinhard Kotucha wrote:
 > > On 2020-06-20 at 10:25:33 +0200, Hans Hagen wrote:
 > >
 > > The host byte order must always be determined automatically,
 > > either with Luigi's approach or probably more easily with
 > > ntohs(3) if this function is available on Windows too.  The file
 > > byte order has to be specified by the user because it depends on
 > > the file format.
 >
 > the lib is meant for usage in known scenarios (known, documented
 > file formats), not arbitrary, depending on architecture or
 > implementation

Sure.  This is what I said.  The file byte order has to be set by the
user, one way or another.  The host (system) byte order must be
determined at compile time.  Otherwise it's impossible to write
portable scripts.

 > (btw, the format file used to normalize to hig endian but that was
 > dropped long ago already: formats are no longer portable, which in fact
 > was already dropped before that)

I don't understand.  All format files in TeX Live work on all systems.
They have a distinct byte order and are portable among all systems
supported by TeX Live.  What do you mean if you say "formats are no
longer portable"?

 > > If a particular file format has a BOM in its header, the BOM can
 > > be evaluated by the user, for instance with fio.readline().  This
 > > means that a user should be able to specify the andianness at any
 > > time, not necessarily in advance.
 >
 > sure but a few extra readers would solve that

 > > As far as I understand it's sufficient that the relevant
 > > functions read{cardinal,integer}{2,4} obey a flag which tells
 > > them whether byte re-ordering is necessary.  The flag has to be
 > > set if host and file byte orders are different.  I don't know
 > > whether we have to consider 64 bit integers too.
 >
 > that adds passing parameters and checking them for each call
 > ... you can then as well use lua's 'read' function and convert with
 > string.byte/char which is then about equally fast

This is what I actually did.  It took 14 s to process a PNM file, way
too much if I have to process hundreds or thousands files.  I ported
the script to C and could process the file within 270 ms.  I can't
imagine that obeying a variable in C can slow down everything so much.

I'm not very familiar with C programming.  You say that it's expensive
to pass arguments to a function.  What I had in mind is that functions
obey a global variable at runtime which denotes whether byte order
conversion is necessary or not.

 > > If you intend to go this way the number of functions in
 > > liolibext.c can be halved because there is no significant
 > > difference between a buffer and a string.  Only very few
 > > functions have to be aware of endianness.
 >
 > halved in calls to simple functions, enlarged by more checking
 > .. .more pain than gain

It's just a suggestion.  For me, as a user, it doesn't matter how
things work behind the scenes.


Regards,
  Reinhard

--
------------------------------------------------------------------
Reinhard Kotucha                            Phone: +49-511-3373112
Marschnerstr. 25
D-30167 Hannover                    mailto:reinhard.kotucha at web.de
------------------------------------------------------------------


From P.Taylor at Hellenic-Institute.Uk  Sun Jun 28 09:57:08 2020
From: P.Taylor at Hellenic-Institute.Uk (Philip Taylor)
Date: Sun, 28 Jun 2020 08:57:08 +0100
Subject: [luatex] fio library byte order
In-Reply-To: <24311.61888.535072.336389@gargle.gargle.HOWL>
References: <24301.11070.200329.759425@gargle.gargle.HOWL>
 <e2af3890-9f48-7454-0964-03e3d4fe94c6@xs4all.nl>
 <24310.39233.122361.695575@gargle.gargle.HOWL>
 <ac9e9c28-64ce-40cd-b938-33fb90912397@xs4all.nl>
 <24311.61888.535072.336389@gargle.gargle.HOWL>
Message-ID: <bcd07992-09e0-54d9-3de4-1979f73d4f32@Hellenic-Institute.Uk>

Reinhard Kotucha wrote:

> I'm not very familiar with C programming.  You say that it's expensive
> to pass arguments to a function.

Then it is not fit for purpose, something I thought when I was first 
exposed to it and something I continue to think to this day.? I think 
that we now have conclusive evidence to support that assertion.

** Phil.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://tug.org/pipermail/luatex/attachments/20200628/3c1a367e/attachment.html>

From j.hagen at xs4all.nl  Sun Jun 28 13:04:25 2020
From: j.hagen at xs4all.nl (Hans Hagen)
Date: Sun, 28 Jun 2020 13:04:25 +0200
Subject: [luatex] fio library byte order
In-Reply-To: <bcd07992-09e0-54d9-3de4-1979f73d4f32@Hellenic-Institute.Uk>
References: <24301.11070.200329.759425@gargle.gargle.HOWL>
 <e2af3890-9f48-7454-0964-03e3d4fe94c6@xs4all.nl>
 <24310.39233.122361.695575@gargle.gargle.HOWL>
 <ac9e9c28-64ce-40cd-b938-33fb90912397@xs4all.nl>
 <24311.61888.535072.336389@gargle.gargle.HOWL>
 <bcd07992-09e0-54d9-3de4-1979f73d4f32@Hellenic-Institute.Uk>
Message-ID: <ab073b0f-d993-64f5-c80e-44c5a2bd6e42@xs4all.nl>

On 6/28/2020 9:57 AM, Philip Taylor wrote:
> Reinhard Kotucha wrote:
> 
>> I'm not very familiar with C programming.  You say that it's expensive
>> to pass arguments to a function.
> 
> Then it is not fit for purpose, something I thought when I was first 
> exposed to it and something I continue to think to this day.? I think 
> that we now have conclusive evidence to support that assertion.
hm, no code seen, no tests seen, so no proof of anything

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From j.hagen at xs4all.nl  Sun Jun 28 13:52:56 2020
From: j.hagen at xs4all.nl (Hans Hagen)
Date: Sun, 28 Jun 2020 13:52:56 +0200
Subject: [luatex] fio library byte order
In-Reply-To: <24311.61888.535072.336389@gargle.gargle.HOWL>
References: <24301.11070.200329.759425@gargle.gargle.HOWL>
 <e2af3890-9f48-7454-0964-03e3d4fe94c6@xs4all.nl>
 <24310.39233.122361.695575@gargle.gargle.HOWL>
 <ac9e9c28-64ce-40cd-b938-33fb90912397@xs4all.nl>
 <24311.61888.535072.336389@gargle.gargle.HOWL>
Message-ID: <648ea776-d5fa-39de-3a25-d6a759003d3c@xs4all.nl>

On 6/28/2020 3:26 AM, Reinhard Kotucha wrote:

>   > (btw, the format file used to normalize to hig endian but that was
>   > dropped long ago already: formats are no longer portable, which in fact
>   > was already dropped before that)
> 
> I don't understand.  All format files in TeX Live work on all systems.
> They have a distinct byte order and are portable among all systems
> supported by TeX Live.  What do you mean if you say "formats are no
> longer portable"?

i can only speak for luatex but indeed, there we don't juggle the bytes 
of the format file (actually, as most users use a le system it ended up 
always juggling) ... one reason is that a format can have stored 
bytecode or whatever code which can be system dependent so ...

>   > that adds passing parameters and checking them for each call
>   > ... you can then as well use lua's 'read' function and convert with
>   > string.byte/char which is then about equally fast
> 
> This is what I actually did.  It took 14 s to process a PNM file, way
> too much if I have to process hundreds or thousands files.  I ported
> the script to C and could process the file within 270 ms.  I can't
> imagine that obeying a variable in C can slow down everything so much.

how big a file ... also, i bet you do more than just reading, you don't 
define what 'process' is  (270 ms for 100K files is still not fast I guess)

> I'm not very familiar with C programming.  You say that it's expensive
> to pass arguments to a function.  What I had in mind is that functions
> obey a global variable at runtime which denotes whether byte order
> conversion is necessary or not.

passing variables in c is no issue (also because compilers are smart 
enough to deal with it)

a global variable would not work because one can read several files a 
the same time interleaved with different properties

i'm talking of picking up some optional argument passed by lua (passed 
on stack, checking needed, etc)

anyway, there's nothing wrong with writing and using a c program if that 
is more suitable esp when you need to process that many files ... 
opening closing in lua is slower than in c, as is storing all your read 
bytes in lua variables (and i'm not even talking about the fact that a 
file metatable has to be looked up and type being checked for every 
read) plus some garbage collection every now and then

as you can compile c, you can also write a dedicated library and add 
that to luatex (assuming you need to do this runtime from luatex)

(you could consider using ffi)

I downloaded the 3.7 GB texlive iso and read integers from that one

-- 360 sec : one  byte integers + counting
-- 224 sec : two  byte integers + counting
-- 166 sec : four byte integers + counting (160 no counting)

But that's a lot of lua calls.

Then I downloaded the tug logo from the website

-- string : .55 sec for 1000 times (including opening / loading)
-- file   : .67 sec for 1000 times (including opening / loading)

So, that's milliseconds per file.

Finally I processed the 3414 files in the 268M context distribution and 
read 2 byte integers from those till end of file which took 15 seconds 
for the lot. So, no complaints from my end.

I think it's not the file handling that is your bottleneck.

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From luigi.scarso at gmail.com  Sun Jun 28 15:53:02 2020
From: luigi.scarso at gmail.com (luigi scarso)
Date: Sun, 28 Jun 2020 15:53:02 +0200
Subject: [luatex] fio library byte order
In-Reply-To: <24311.61888.535072.336389@gargle.gargle.HOWL>
References: <24301.11070.200329.759425@gargle.gargle.HOWL>
 <e2af3890-9f48-7454-0964-03e3d4fe94c6@xs4all.nl>
 <24310.39233.122361.695575@gargle.gargle.HOWL>
 <ac9e9c28-64ce-40cd-b938-33fb90912397@xs4all.nl>
 <24311.61888.535072.336389@gargle.gargle.HOWL>
Message-ID: <CAG5iGsDYkBeoRDRKk1X1T9aD=dvRkNiFXEe43nByDK8BQq1eVg@mail.gmail.com>

On Sun, Jun 28, 2020 at 3:27 AM Reinhard Kotucha <reinhard.kotucha at web.de>
wrote:

>
> I don't understand.  All format files in TeX Live work on all systems.
> They have a distinct byte order and are portable among all systems
> supported by TeX Live.  What do you mean if you say "formats are no
> longer portable"?
>

https://tug.org/texinfohtml/web2c.html
3.5.2.3 Hardware and memory dumps
:
TeXnically, even without ?--disable-dump-share?, sharing of .fmt files
cannot be guaranteed to work. Floating-point values are always written in
native format, and hence will generally not be readable across platforms.
Fortunately, TeX uses floating point only to represent glue ratios, and all
common formats (plain, LaTeX, AMSTeX, ?) do not do any glue setting at
.fmt-creation time. Metafont does not use floating point in any dumped
value at all.
:


-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://tug.org/pipermail/luatex/attachments/20200628/e2d6de09/attachment.html>

From taco at elvenkind.com  Mon Jun 29 10:30:14 2020
From: taco at elvenkind.com (Taco Hoekwater)
Date: Mon, 29 Jun 2020 10:30:14 +0200
Subject: [luatex] fio library byte order
In-Reply-To: <24311.61888.535072.336389@gargle.gargle.HOWL>
References: <24301.11070.200329.759425@gargle.gargle.HOWL>
 <e2af3890-9f48-7454-0964-03e3d4fe94c6@xs4all.nl>
 <24310.39233.122361.695575@gargle.gargle.HOWL>
 <ac9e9c28-64ce-40cd-b938-33fb90912397@xs4all.nl>
 <24311.61888.535072.336389@gargle.gargle.HOWL>
Message-ID: <1C91B893-3525-42AD-A926-3EB244DB68E3@elvenkind.com>



> On 28 Jun 2020, at 03:26, Reinhard Kotucha <reinhard.kotucha at web.de> wrote:
> 
>>> 
>>> As far as I understand it's sufficient that the relevant
>>> functions read{cardinal,integer}{2,4} obey a flag which tells
>>> them whether byte re-ordering is necessary.  The flag has to be
>>> set if host and file byte orders are different.  I don't know
>>> whether we have to consider 64 bit integers too.
>> 
>> that adds passing parameters and checking them for each call
>> ... you can then as well use lua's 'read' function and convert with
>> string.byte/char which is then about equally fast
> 
> This is what I actually did.  It took 14 s to process a PNM file, way
> too much if I have to process hundreds or thousands files.  I ported
> the script to C and could process the file within 270 ms.  I can't
> imagine that obeying a variable in C can slow down everything so much.

The quick way to fix this without noticeable overhead would be to add
a few extra function definitions for read{cardinal,integer}{2,4} in
the byte permutations that are likely to actually happen. There are 
not *that* many of those.

Taco





From j.hagen at xs4all.nl  Mon Jun 29 15:35:57 2020
From: j.hagen at xs4all.nl (Hans Hagen)
Date: Mon, 29 Jun 2020 15:35:57 +0200
Subject: [luatex] fio library byte order
In-Reply-To: <1C91B893-3525-42AD-A926-3EB244DB68E3@elvenkind.com>
References: <24301.11070.200329.759425@gargle.gargle.HOWL>
 <e2af3890-9f48-7454-0964-03e3d4fe94c6@xs4all.nl>
 <24310.39233.122361.695575@gargle.gargle.HOWL>
 <ac9e9c28-64ce-40cd-b938-33fb90912397@xs4all.nl>
 <24311.61888.535072.336389@gargle.gargle.HOWL>
 <1C91B893-3525-42AD-A926-3EB244DB68E3@elvenkind.com>
Message-ID: <78a70144-2acb-f3f7-85b4-eff3081a1683@xs4all.nl>

On 6/29/2020 10:30 AM, Taco Hoekwater wrote:
> 
> 
>> On 28 Jun 2020, at 03:26, Reinhard Kotucha <reinhard.kotucha at web.de> wrote:
>>
>>>>
>>>> As far as I understand it's sufficient that the relevant
>>>> functions read{cardinal,integer}{2,4} obey a flag which tells
>>>> them whether byte re-ordering is necessary.  The flag has to be
>>>> set if host and file byte orders are different.  I don't know
>>>> whether we have to consider 64 bit integers too.
>>>
>>> that adds passing parameters and checking them for each call
>>> ... you can then as well use lua's 'read' function and convert with
>>> string.byte/char which is then about equally fast
>>
>> This is what I actually did.  It took 14 s to process a PNM file, way
>> too much if I have to process hundreds or thousands files.  I ported
>> the script to C and could process the file within 270 ms.  I can't
>> imagine that obeying a variable in C can slow down everything so much.
> 
> The quick way to fix this without noticeable overhead would be to add
> a few extra function definitions for read{cardinal,integer}{2,4} in
> the byte permutations that are likely to actually happen. There are
> not *that* many of those.
that was indeed the idea ... (i'll do it this week)

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From reinhard.kotucha at web.de  Mon Jun 29 19:45:17 2020
From: reinhard.kotucha at web.de (Reinhard Kotucha)
Date: Mon, 29 Jun 2020 19:45:17 +0200
Subject: [luatex] fio library byte order
In-Reply-To: <648ea776-d5fa-39de-3a25-d6a759003d3c@xs4all.nl>
References: <24301.11070.200329.759425@gargle.gargle.HOWL>
 <e2af3890-9f48-7454-0964-03e3d4fe94c6@xs4all.nl>
 <24310.39233.122361.695575@gargle.gargle.HOWL>
 <ac9e9c28-64ce-40cd-b938-33fb90912397@xs4all.nl>
 <24311.61888.535072.336389@gargle.gargle.HOWL>
 <648ea776-d5fa-39de-3a25-d6a759003d3c@xs4all.nl>
Message-ID: <24314.10413.117772.452292@gargle.gargle.HOWL>

On 2020-06-28 at 13:52:56 +0200, Hans Hagen wrote:

 > On 6/28/2020 3:26 AM, Reinhard Kotucha wrote:
 > 
 > >   > that adds passing parameters and checking them for each call
 > >   > ... you can then as well use lua's 'read' function and
 > >   > convert with string.byte/char which is then about equally
 > >   > fast
 > > 
 > > This is what I actually did.  It took 14 s to process a PNM file,
 > > way too much if I have to process hundreds or thousands files.  I
 > > ported the script to C and could process the file within 270 ms.
 > > I can't imagine that obeying a variable in C can slow down
 > > everything so much.
 > 
 > how big a file ... also, i bet you do more than just reading, you
 > don't define what 'process' is (270 ms for 100K files is still not
 > fast I guess)

96MiB per file.  Processing means to apply a lookup table and a 3?3
color matrix, quite inexpensive operations.  What takes most of the
time is to extract single bytes with string.sub() and to convert them
to integers.  Finally I have to convert everything back to uint16.

In C I convert to host byte order with ntohs(3) and access the color
triplets by pushing a pointer around.  In both cases I read the file
line by line (30024 bytes per line).

 > > I'm not very familiar with C programming.  You say that it's expensive
 > > to pass arguments to a function.  What I had in mind is that functions
 > > obey a global variable at runtime which denotes whether byte order
 > > conversion is necessary or not.
 > 
 > passing variables in c is no issue (also because compilers are
 > smart enough to deal with it)
 > 
 > a global variable would not work because one can read several files
 > a the same time interleaved with different properties
 > 
 > i'm talking of picking up some optional argument passed by lua
 > (passed on stack, checking needed, etc)
 > 
 > anyway, there's nothing wrong with writing and using a c program if
 > that is more suitable esp when you need to process that many files
 > ...  opening closing in lua is slower than in c, as is storing all
 > your read bytes in lua variables (and i'm not even talking about
 > the fact that a file metatable has to be looked up and type being
 > checked for every read) plus some garbage collection every now and
 > then
 > 
 > as you can compile c, you can also write a dedicated library and add 
 > that to luatex (assuming you need to do this runtime from luatex)
 > 
 > (you could consider using ffi)

Thanks for the info.  I wasn't aware that reading bytes into lua
variables is expensive too.  Maybe it's better indeed to stay with C.

 > I downloaded the 3.7 GB texlive iso and read integers from that one
 > 
 > -- 360 sec : one  byte integers + counting
 > -- 224 sec : two  byte integers + counting
 > -- 166 sec : four byte integers + counting (160 no counting)
 > 
 > But that's a lot of lua calls.

Reading 96MB as two byte integers would then take 6 seconds, much more
than I expected.

 > Then I downloaded the tug logo from the website
 > 
 > -- string : .55 sec for 1000 times (including opening / loading)
 > -- file   : .67 sec for 1000 times (including opening / loading)
 > 
 > So, that's milliseconds per file.
 > 
 > Finally I processed the 3414 files in the 268M context distribution and 
 > read 2 byte integers from those till end of file which took 15 seconds 
 > for the lot. So, no complaints from my end.

This means that file opening is quite fast:

  3700/224 = 16.518
  268/15 = 17.867

 > I think it's not the file handling that is your bottleneck.

Yes, thanks for the info.

Regards,
  Reinhard

-- 
------------------------------------------------------------------
Reinhard Kotucha                            Phone: +49-511-3373112
Marschnerstr. 25
D-30167 Hannover                    mailto:reinhard.kotucha at web.de
------------------------------------------------------------------


From j.hagen at xs4all.nl  Mon Jun 29 20:32:23 2020
From: j.hagen at xs4all.nl (Hans Hagen)
Date: Mon, 29 Jun 2020 20:32:23 +0200
Subject: [luatex] fio library byte order
In-Reply-To: <24314.10413.117772.452292@gargle.gargle.HOWL>
References: <24301.11070.200329.759425@gargle.gargle.HOWL>
 <e2af3890-9f48-7454-0964-03e3d4fe94c6@xs4all.nl>
 <24310.39233.122361.695575@gargle.gargle.HOWL>
 <ac9e9c28-64ce-40cd-b938-33fb90912397@xs4all.nl>
 <24311.61888.535072.336389@gargle.gargle.HOWL>
 <648ea776-d5fa-39de-3a25-d6a759003d3c@xs4all.nl>
 <24314.10413.117772.452292@gargle.gargle.HOWL>
Message-ID: <a77b8da2-ea36-fde2-00b9-05f2748978b8@xs4all.nl>

On 6/29/2020 7:45 PM, Reinhard Kotucha wrote:

> 96MiB per file.  Processing means to apply a lookup table and a 3?3
> color matrix, quite inexpensive operations.  What takes most of the
> time is to extract single bytes with string.sub() and to convert them
> to integers.  Finally I have to convert everything back to uint16.
last mail as it's way off topic ...

loading 96 MB string and converting 2 bytes to an unsigned: 1.7 sec
idem plus a lookup                                        : 2.1 sec
idem but then also going back string with 2 byte unsigned : 5.0 sec

add a few sec for some calculations in between, so still doable in lua 
(half that time when using luajit)

(measured on my 8 year old laptop so on a modern machine maybe less than 
half the mentioned time which is okay compared to some pure c approach i 
guess)

Hans

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From luigi.scarso at gmail.com  Tue Jun 30 20:39:03 2020
From: luigi.scarso at gmail.com (luigi scarso)
Date: Tue, 30 Jun 2020 20:39:03 +0200
Subject: [luatex] fio library byte order
In-Reply-To: <20200623022850.5yct2xpr5pkmjgin@vento15post8>
References: <24301.11070.200329.759425@gargle.gargle.HOWL>
 <CAG5iGsC7Te4JP=3Es4tzLKYqQ7hSRmZO58AooNX0cP+KKMp3eg@mail.gmail.com>
 <20200622004018.b6gu6djxzndziflw@vento15post8>
 <mj+md-20200622.084527.58192.nikam@ucw.cz>
 <20200623022850.5yct2xpr5pkmjgin@vento15post8>
Message-ID: <CAG5iGsB-pPvEPxVOdS96J=LPX-gFatresxdmVnd+9uM0Jsef3Q@mail.gmail.com>

On Tue, Jun 23, 2020 at 4:29 AM Henri Menke <henrimenke at gmail.com> wrote:

>
>
> No, type punning *is* undefined behaviour.
>
>     6.2.6.1 General
>
>     7 When a value is stored in a member of an object of union type, the
>     bytes of the object representation that do not correspond to that
> member
>     but do correspond to other members take unspecified values.
>
> http://port70.net/~nsz/c/c11/n1570.html#6.2.6.1p7


hm, unspecified value, not undefined behaviour.

Probably this one is ok:
\directlua{
ffi.cdef [[
 unsigned int c ;
 union endianess {
   uint32_t i;
   uint8_t c[sizeof(uint32_t)];
 }
]]
local x = ffi.new('union endianess x',{i=0xAABBCCDD})
if ffi.sizeof('uint8_t')==1 and ffi.sizeof('uint32_t')==4 then
 if(x.c[0]==0xDD and x.c[1]==0xCC and x.c[2]==0xBB and x.c[3]==0xAA) then
   print "little endian"
 elseif (x.c[0]==0xAA and x.c[1]==0xBB and x.c[2]==0xCC and x.c[3]==0xDD)
then
  print "big endian"
 else
  print "mixed endian"
 end
else
 print "unable to check endianess"
end
}
\end

see eg Modern-C on unions
https://modernc.gforge.inria.fr/#orgd2172c0


-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://tug.org/pipermail/luatex/attachments/20200630/82d7a424/attachment.html>

