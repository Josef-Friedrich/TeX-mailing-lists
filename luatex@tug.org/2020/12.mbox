From peter.dedecker at kuleuven.be  Wed Dec  2 11:52:19 2020
From: peter.dedecker at kuleuven.be (Peter Dedecker)
Date: Wed, 2 Dec 2020 11:52:19 +0100
Subject: [luatex] Reproducible font cache corruption (?) with LuaHBTeX,
 Version 1.12.0 (TeX Live 2020)
Message-ID: <4685FE79-8EA9-463B-B0DF-8EA08A882831@kuleuven.be>

Dear all,

I have a repository with two Latex files that are processed with LuaTeX. Individually these files process fine, but if I process one then switch to the other then I reliably obtain an error at the the very end of the typesetting:

> warning  (pdf backend): unreferenced destination with name 'equation.0.6'
> </usr/local/texlive/2020basic/texmf-dist/fonts/opentype/public/tex-gyre/texgyre
> termes-bold.otf>
> ! error:  (file ) (type 0): cannot find file ''
> !  ==> Fatal error occurred, no output PDF file produced!

Fixing this error requires that I delete the Luatex font cache. More specifically, I execute
> rm -rf ~/Library/texlive/2020basic/texmf-var/luatex-cache/generic/*

This is 100% reproducible, and affects both Linux and Mac.

Is there any interest in fixing this? Or should I just upgrade to a later version of Luatex? But how do I do that with TeXLive? I can provide a copy of the source materials to the developers upon request, though I cannot make the documents publicly available.

Regards
Peter



From luatex at nililand.de  Thu Dec  3 19:40:11 2020
From: luatex at nililand.de (Ulrike Fischer)
Date: Thu, 3 Dec 2020 19:40:11 +0100
Subject: [luatex] Reproducible font cache corruption (?) with LuaHBTeX,
	Version 1.12.0 (TeX Live 2020)
References: <4685FE79-8EA9-463B-B0DF-8EA08A882831@kuleuven.be>
Message-ID: <u3lf1tx0iu7z$.dlg@nililand.de>

Am Wed, 2 Dec 2020 11:52:19 +0100 schrieb Peter Dedecker:

> I have a repository with two Latex files that are processed with
> LuaTeX. Individually these files process fine, but if I process
> one then switch to the other then I reliably obtain an error at
> the the very end of the typesetting: 


Open an issue at the luaotfload repo:
https://github.com/latex3/luaotfload

(along with the files needed to reproduce the error).

-- 
Ulrike Fischer 
http://www.troubleshooting-tex.de/


From patrick at gundla.ch  Tue Dec  8 13:38:38 2020
From: patrick at gundla.ch (Patrick Gundlach)
Date: Tue, 8 Dec 2020 13:38:38 +0100
Subject: [luatex] Please document units_per_em
Message-ID: <308AE752-7E06-4B4A-88EB-E36EFC60667F@gundla.ch>

Hello all,

I could not find the key units_per_em in the font table (6.1 The font tables), I assume this is just an oversight. Perhaps this could be documented?

Thank you

  Patrick



From luigi.scarso at gmail.com  Tue Dec  8 13:51:33 2020
From: luigi.scarso at gmail.com (luigi scarso)
Date: Tue, 8 Dec 2020 13:51:33 +0100
Subject: [luatex] Please document units_per_em
In-Reply-To: <308AE752-7E06-4B4A-88EB-E36EFC60667F@gundla.ch>
References: <308AE752-7E06-4B4A-88EB-E36EFC60667F@gundla.ch>
Message-ID: <CAG5iGsCGQZm+bUYom_eC7nioGbidUAu9VJP2X4LihyBEvpKm5Q@mail.gmail.com>

On Tue, Dec 8, 2020 at 1:39 PM Patrick Gundlach <patrick at gundla.ch> wrote:

> Hello all,
>
> I could not find the key units_per_em in the font table (6.1 The font
> tables), I assume this is just an oversight. Perhaps this could be
> documented?
>
> Thank you
>
>   Patrick
>
>
>
I think so.  Iirc, It should be related to the unusual em-size:

* There is a new <tfmtable> key: 'units_per_em' (defaults to 0).
  This is part of a fix for bug #200 (Problem with CFF fonts having
  em-size other than 1000): there is a special correction to the
  embedded cff font itself and the font scale if the font to be output
  is opentype or type1 in unicode encoding and the 'units_per_em
  differs' from zero.
  <tfmtable>.units_per_em has to be passed back to luatex from
  the lua font loading code for this to work.

-- 
luigi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://tug.org/pipermail/luatex/attachments/20201208/9c295d4f/attachment.html>

From manfred.meyer2001 at gmail.com  Thu Dec 24 10:59:45 2020
From: manfred.meyer2001 at gmail.com (Manfred Meyer)
Date: Thu, 24 Dec 2020 13:29:45 +0330
Subject: [luatex] append_to_vlist_filter gobbles the baselineskip
Message-ID: <CAPLNrqJLaHi+9OBKG5miCtTqLtpiqGScOqWse2qjb-OcuMWHCw@mail.gmail.com>

Hi all,

The callback append_to_vlist_filter seems to gobble the baselineskip
glue in the following example. How can I fix it?

Thanks - Manfred

\baselineskip = 20pt
\directlua{
    function appendtovlistfilter(b, l, p, m)
        b_id      = b.id
        b_subtype = b.subtype
        print(' box id: ' .. b_id .. ', box subtype: ' .. b_subtype ..
', locationcode: ' .. l ..
              ', prevdepth: ' .. p .. ', mirrored: ' .. tostring(m))
        return b, p
    end
    cb_id = callback.register("append_to_vlist_filter", appendtovlistfilter)
}

As any dedicated reader can clearly see, the Ideal of practical reason is a
representation of, as far as I know, the things in themselves; as I have shown
elsewhere, the phenomena should only be used as a canon for our understanding.
The paralogisms of practical reason are what first give rise to the
architectonic
of practical reason. As will easily be shown in the next section, reason would
thereby be made to contradict, in view of these considerations, the Ideal of
practical reason, yet the manifold depends on the phenomena. Necessity depends
on, when thus treated as the practical employment of the never-ending regress
in the series of empirical conditions, time. Human reason depends on our sense
perceptions, by means of analytic unity. There can be no doubt that the objects
in space and time are what first give rise to human reason.

\bye

From manfred.meyer2001 at gmail.com  Thu Dec 24 11:14:20 2020
From: manfred.meyer2001 at gmail.com (Manfred Meyer)
Date: Thu, 24 Dec 2020 13:44:20 +0330
Subject: [luatex] append_to_vlist_filter gobbles the baselineskip
Message-ID: <CAPLNrq++ReOjok6xn4hDx1kE83qjrPWbKp6Em2Y2FY1cVd6Qpg@mail.gmail.com>

Hi all,

The callback append_to_vlist_filter seems to gobble the baselineskip
glue in the following example. How can I fix it?

Thanks - Manfred

\baselineskip = 20pt
\directlua{
    function appendtovlistfilter(b, l, p, m)
        b_id      = b.id
        b_subtype = b.subtype
        print(' box id: ' .. b_id .. ', box subtype: ' .. b_subtype ..
', locationcode: ' .. l ..
              ', prevdepth: ' .. p .. ', mirrored: ' .. tostring(m))
        return b, p
    end
    cb_id = callback.register("append_to_vlist_filter", appendtovlistfilter)
}

As any dedicated reader can clearly see, the Ideal of practical reason is a
representation of, as far as I know, the things in themselves; as I have shown
elsewhere, the phenomena should only be used as a canon for our understanding.
The paralogisms of practical reason are what first give rise to the
architectonic
of practical reason. As will easily be shown in the next section, reason would
thereby be made to contradict, in view of these considerations, the Ideal of
practical reason, yet the manifold depends on the phenomena. Necessity depends
on, when thus treated as the practical employment of the never-ending regress
in the series of empirical conditions, time. Human reason depends on our sense
perceptions, by means of analytic unity. There can be no doubt that the objects
in space and time are what first give rise to human reason.

\bye

From henri at henrimenke.de  Mon Dec 28 15:54:31 2020
From: henri at henrimenke.de (Henri Menke)
Date: Mon, 28 Dec 2020 15:54:31 +0100
Subject: [luatex] Diagnositics in LuaTeX
Message-ID: <e8df66839725d11fe9101448624d5239cdd3d49c.camel@henrimenke.de>

Dear lists,

Recently I've been working a bit on PGF/TikZ and many times I wished I had
certain metrics that are available in regular programming languages.  In
particular I am missing:

- A callback that is triggered when a macro is defined.  This would allow me to
trap when a cs is defined in the wrong place.  That could probably be done by
overriding `\def` but there are some gotchas with prefixes, e.g. `\long\def`.

- A callback that is triggered when a token is expanded (or executed in the case
of primitives).  In conjunction with the previous request, this would allow me
to measure code coverage by comparing which macros are defined and which ones
are used.

- Switches to trap on certain pathological events.  For example I want to trap
when TeX inserts a frozen \relax because a number couldn't be read.  Another
thing I want to trap is `Missing character: There is no <char> in font <font>!`.
There are probably more silent TeX errors that I currently don't have in mind.

Are these things possible in LuaTeX right now or could they be made possible in
the future?

Kind regards,
Henri


From j.hagen at xs4all.nl  Mon Dec 28 17:09:31 2020
From: j.hagen at xs4all.nl (Hans Hagen)
Date: Mon, 28 Dec 2020 17:09:31 +0100
Subject: [luatex] [NTG-context] Diagnositics in LuaTeX
In-Reply-To: <e8df66839725d11fe9101448624d5239cdd3d49c.camel@henrimenke.de>
References: <e8df66839725d11fe9101448624d5239cdd3d49c.camel@henrimenke.de>
Message-ID: <e3d704a7-99ce-7ff0-7a64-4d46c82e8eff@xs4all.nl>

On 12/28/2020 3:54 PM, Henri Menke wrote:
> Dear lists,
> 
> Recently I've been working a bit on PGF/TikZ and many times I wished I had
> certain metrics that are available in regular programming languages.  In
> particular I am missing:
> 
> - A callback that is triggered when a macro is defined.  This would allow me to
> trap when a cs is defined in the wrong place.  That could probably be done by
> overriding `\def` but there are some gotchas with prefixes, e.g. `\long\def`.

if you intercept for that reason you need to make the callback function 
situation aware which means that you can as well test things the tex 
which is way more efficient

> - A callback that is triggered when a token is expanded (or executed in the case
> of primitives).  In conjunction with the previous request, this would allow me
> to measure code coverage by comparing which macros are defined and which ones
> are used.

given the amount of expansion going on in the engine that would mean, 
for a reasonable large document, or for some complex macro package like 
pgf, many millions of

Also, what exactly is 'expanded'. Some tokens are handled directly, some 
enter an expansion call, others are macros that themselves use expansion 
to even get started. Basically you want to check each token that is read 
or accessed from internal storage (lists). Adding granilarity means many 
callbacks (each one checking if it's defined, then setting up lua, call 
the function, and go back to tex). There's also a lot of pushback ging on.

If you just hook into 'picking up a token', here are some numbers if we 
hook into that:

making context lmtx format: 4M (million)
simple tufte document with minimal font setup: 500K
loading tikz (with patterns lib): 3M
drawing simple pattern in tikz: 100K (1 cm circle with pdf pattern)
290 page luametatex manual: 105M

(ok, latex is probably much more efficient than context but it gives an 
idea)

> - Switches to trap on certain pathological events.  For example I want to trap
> when TeX inserts a frozen \relax because a number couldn't be read.  Another
> thing I want to trap is `Missing character: There is no <char> in font <font>!`.
> There are probably more silent TeX errors that I currently don't have in mind.

there is s missing glyph callback and with some juggling the 'no number' 
can be intercepted at the tex end ... you can set an error callback and 
look at the message

> Are these things possible in LuaTeX right now or could they be made possible in
> the future?
all is possile but this will not happen ... enabling callbacks like that 
would make luatex unuseable slow (which is probably not what you want 
because pgf is already kind of slow) (even checking for the callback 
being set takes time)

Hans


-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

