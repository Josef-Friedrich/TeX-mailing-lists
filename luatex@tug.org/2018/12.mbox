From marduk at ciencias.unam.mx  Thu Dec  6 16:28:33 2018
From: marduk at ciencias.unam.mx (Marduk BP)
Date: Thu, 6 Dec 2018 16:28:33 +0100
Subject: [luatex] Writing a LuaTeX-powered equation editor with 2D math input
Message-ID: <CALnHwt_g14Ka=hP5WXFXdaWF03ANFcSPE=q4ueOqdZxFhBbO7g@mail.gmail.com>

Dear all,

I have long wanted to have an equation editor with 2D math input for use in
LibreOffice, Inkscape, Emacs and anywhere one would like to enter math
formulas. The only program I know of this kind is MathType, which does not
work on Linux. I am aware of LyX and Texmacs, which provide 2D math input,
but they are overkill for this purpose.

My understanding is that LuaTeX provides a Lua API to the TeX typesetting
engine and, in principle, it should be possible to use it for 2D math input
in a standalone equation editor. Assuming this is correct, can you provide
some pointers to examples of programmatic use of TeX in Lua and pointers to
specific parts of the documentation, that are relevant for such a project?

Best regards,
Marduk
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://tug.org/pipermail/luatex/attachments/20181206/9678faf4/attachment.html>

From tspiteri at ieee.org  Thu Dec 13 01:09:30 2018
From: tspiteri at ieee.org (Trevor Spiteri)
Date: Thu, 13 Dec 2018 01:09:30 +0100
Subject: [luatex] Combining accents break monospace spacing with LuaTeX
Message-ID: <34ec8f40-f0f3-db3b-299d-2d0ceb22adef@ieee.org>

With LuaTeX, using combining accents for Source Code Pro (otf) and
DejaVu Sans Mono (ttf) breaks the letter spacing. Latin Modern Mono
(otf) and FreeMono? (ttf) seem to work fine.

I get this issue with LuaTeX, Version 1.07.0 (TeX Live 2018). The issue
is not there in other software packages, and in particular the LaTeX
below produces an issue with LuaTeX but works fine with XeTeX, so I
think it might be an issue in LuaTeX rather than the fonts, though I'm
not sure.

\documentclass[12pt]{article}
\usepackage{fontspec}
\begin{document}
\setmainfont{lmmono12-regular.otf}
Combining: aa?a cc?c. Not combining: c?c.
\setmainfont{FreeMono.ttf}
Combining: aa?a cc?c. Not combining: c?c.
\setmainfont{SourceCodePro-Regular.otf}
Combining: aa?a cc?c. Not combining: c?c.
\setmainfont{DejaVuSansMono.ttf}
Combining: aa?a cc?c. Not combining: c?c.
\end{document}

Regards.

Trevor Spiteri

From luatex at nililand.de  Thu Dec 13 10:55:04 2018
From: luatex at nililand.de (Ulrike Fischer)
Date: Thu, 13 Dec 2018 10:55:04 +0100
Subject: [luatex] Combining accents break monospace spacing with LuaTeX
References: <34ec8f40-f0f3-db3b-299d-2d0ceb22adef@ieee.org>
Message-ID: <apegmtgb4j6e$.dlg@nililand.de>

Am Thu, 13 Dec 2018 01:09:30 +0100 schrieb Trevor Spiteri:

> With LuaTeX, using combining accents for Source Code Pro (otf) and
> DejaVu Sans Mono (ttf) breaks the letter spacing. Latin Modern Mono
> (otf) and FreeMono? (ttf) seem to work fine.

context has the problem too:

\starttext
\tt
Combining: aa?a cc?c. Not combining: c?c.
\font\test {file:DejaVuSansMono.ttf}\test
Combining: aa?a cc?c. Not combining: c?c.
\stoptext




-- 
Ulrike Fischer 
https://www.troubleshooting-tex.de/


From Knut_Petersen at t-online.de  Tue Dec 18 23:49:18 2018
From: Knut_Petersen at t-online.de (Knut Petersen)
Date: Tue, 18 Dec 2018 23:49:18 +0100
Subject: [luatex] pdf inclusion: extended font handling
Message-ID: <790417ed-91ea-ceb0-dba4-d3e470b538b3@t-online.de>

Hi everybody!

I often write documents that mix text and music, a short example is given below:

    \NeedsTeXFormat{LaTeX2e}
    \documentclass[12pt]{letter}
    \usepackage{geometry}
    \geometry{papersize={14.85cm,21cm},noheadfoot,nomarginpar,
     ????????? left=1.5cm,right=1.5cm,top=1.5cm,bottom=1.5cm}
    \usepackage{fontspec}
    \defaultfontfeatures{Ligatures=TeX}
    \setmainfont{cmunrm.otf}[BoldFont=cmunbx.otf,
     ???????????????????????? ItalicFont=cmunti.otf,
     ???????????????????????? BoldItalicFont=cmunbi.otf]
    \usepackage{lipsum}
    \usepackage{lyinla}
    \begin{document}
    \pagestyle{empty}
    \small\lipsum[1]
    {\bfseries O du fr?hliche}\hspace{\fill}EG 44, 1-3\par
    \begin{lilyfrag}[staffsize=16.666,width=0.92\textwidth,smalllatexfont]
     ? \include "deutsch.ly"
     ??? \relative a' {
     ????? \key d \major
     ????? a2 h a4. g8 fis4 (g) \breathe a2 h a4. g8 fis4 (g) \breathe \break
     ????? a2 2 h cis4 d cis2 h a1
     ??? }
     ??? \addlyrics {
     ????? O du fr?h -- li -- che, __ o du se -- li -- ge, __
     ????? gna -- den -- brin -- gen -- de Weih -- nachts -- zeit!
     ??? }
    \end{lilyfrag}
    \lipsum[2]
    \end{document}

The example above is intended to be translated with lualatex --shell-escape.

lyinla.sty provides the necessary code for the lilyfrag environement.
The text inside of a lilyfrag environment is extended and passed to the lilypond
music engraver. The result is a number of pdfs without any embedded
fonts, these pdf are included using \includegraphics. At the end of the lualatex
run (triggered by the stop_run callback) ghostscript is used to postprocess
the pdf generated by lualatex. A bit if postscript code provides the fonts to
ghostscript, the result is a final pdf that contains only one copy of every font
used in all the included pdfs, not one copy per usage of \includegraphics.

Often the mechanism pointed out above reduces file size by more than 80 percent.

Unfortunately recent changes to ghostscript (commit 04a517f39cc) broke
that mechanism, and it's not the first time that changes to gs broke my code.
I'd prefer to have a lualatex (or pdflatex/xelatex) that would be able to detect
usage of unembedded normal and CID fonts in included pdfs and to embed
exactly one subsetted copy of all needed fonts in the output pdf.


Is there already a solution somewhere in the bit bucket?

If not: Do you think it is possible to extend lua/xe/pdflatex with reasonable effort?

Knut

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://tug.org/pipermail/luatex/attachments/20181218/9a08a401/attachment.html>

From herbs at wideopenwest.com  Wed Dec 19 00:03:23 2018
From: herbs at wideopenwest.com (Herbert Schulz)
Date: Tue, 18 Dec 2018 17:03:23 -0600
Subject: [luatex] pdf inclusion: extended font handling
In-Reply-To: <790417ed-91ea-ceb0-dba4-d3e470b538b3@t-online.de>
References: <790417ed-91ea-ceb0-dba4-d3e470b538b3@t-online.de>
Message-ID: <3D873393-CCF4-4918-9450-8DE09DF709F9@wideopenwest.com>

Howdy,

No guarantees but try using the -dNOSAFER option for gs. 

Good Luck,
Herb Schulz


> On Dec 18, 2018, at 4:49 PM, Knut Petersen <Knut_Petersen at t-online.de> wrote:
> 
> Hi everybody!
> 
> I often write documents that mix text and music, a short example is given below:
> 
> \NeedsTeXFormat{LaTeX2e}
> \documentclass[12pt]{letter}
> \usepackage{geometry}
> \geometry{papersize={14.85cm,21cm},noheadfoot,nomarginpar,
>           left=1.5cm,right=1.5cm,top=1.5cm,bottom=1.5cm}
> \usepackage{fontspec}
> \defaultfontfeatures{Ligatures=TeX}
> \setmainfont{cmunrm.otf}[BoldFont=cmunbx.otf,
>                          ItalicFont=cmunti.otf,
>                          BoldItalicFont=cmunbi.otf]
> \usepackage{lipsum} 
> \usepackage{lyinla}
> \begin{document}
> \pagestyle{empty}
> \small\lipsum[1]
> {\bfseries O du fr?hliche}\hspace{\fill}EG 44, 1-3\par
> \begin{lilyfrag}[staffsize=16.666,width=0.92\textwidth,smalllatexfont]
>   \include "deutsch.ly"
>     \relative a' { 
>       \key d \major
>       a2 h a4. g8 fis4 (g) \breathe a2 h a4. g8 fis4 (g) \breathe \break
>       a2 2 h cis4 d cis2 h a1
>     }
>     \addlyrics {
>       O du fr?h -- li -- che, __ o du se -- li -- ge, __
>       gna -- den -- brin -- gen -- de Weih -- nachts -- zeit!
>     }
> \end{lilyfrag}
> \lipsum[2]
> \end{document}
> 
> The example above is intended to be translated with lualatex --shell-escape.
> 
> lyinla.sty provides the necessary code for the lilyfrag environement.
> The text inside of a lilyfrag environment is extended and passed to the lilypond
> music engraver. The result is a number of pdfs without any embedded
> fonts, these pdf are included using \includegraphics. At the end of the lualatex
> run (triggered by the stop_run callback) ghostscript is used to postprocess
> the pdf generated by lualatex. A bit if postscript code provides the fonts to
> ghostscript, the result is a final pdf that contains only one copy of every font
> used in all the included pdfs, not one copy per usage of \includegraphics.
> Often the mechanism pointed out above reduces file size by more than 80 percent.
> 
> Unfortunately recent changes to ghostscript (commit 04a517f39cc) broke
> that mechanism, and it's not the first time that changes to gs broke my code.
> I'd prefer to have a lualatex (or pdflatex/xelatex) that would be able to detect
> usage of unembedded normal and CID fonts in included pdfs and to embed
> exactly one subsetted copy of all needed fonts in the output pdf.
> 
> 
> Is there already a solution somewhere in the bit bucket? 
> 
> If not: Do you think it is possible to extend lua/xe/pdflatex with reasonable effort?
> 
> Knut
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://tug.org/pipermail/luatex/attachments/20181218/b35aeb7c/attachment.html>

From dirk.laurie at gmail.com  Wed Dec 19 10:06:52 2018
From: dirk.laurie at gmail.com (Dirk Laurie)
Date: Wed, 19 Dec 2018 11:06:52 +0200
Subject: [luatex] pdf inclusion: extended font handling
In-Reply-To: <790417ed-91ea-ceb0-dba4-d3e470b538b3@t-online.de>
References: <790417ed-91ea-ceb0-dba4-d3e470b538b3@t-online.de>
Message-ID: <CABcj=tm_xwwKM1wW+FrbT6B1LKeEMXTLTxU=XJst_ofJ1RNrWA@mail.gmail.com>

Op Wo. 19 Des. 2018 om 00:49 het Knut Petersen
<Knut_Petersen at t-online.de> geskryf:

> I often write documents that mix text and music, a short example is given below:
...
> Is there already a solution somewhere in the bit bucket?
>
> If not: Do you think it is possible to extend lua/xe/pdflatex with reasonable effort?

You might consider posting this question to the TeX-Music List
<tex-music at tug.org>.

From henrimenke at gmail.com  Mon Dec 24 09:34:07 2018
From: henrimenke at gmail.com (Henri Menke)
Date: Mon, 24 Dec 2018 21:34:07 +1300
Subject: [luatex] LuaTeX garbles special tokens in terminal output
Message-ID: <9c6ddae7-21c1-aa7e-d671-c9778d16a674@gmail.com>

Dear devs,

LuaTeX somehow garbles special tokens when printing to the log using
\show.  For example when you define a macro with active end of lines,
I'd expect ^^M to be printed in the log.  However, LuaTeX replaces ^^M
with \r, mashing all the lines together into one.

Consider the follwing MWE:

\begingroup
\obeylines
\gdef\lines{
  Hello LuaTeX!

  Why do you garble newlines in
  terminal output?
}
\endgroup

\show\lines

\bye

------------------------------------------------

Here is the log with pdfTeX.

------------------------------------------------

$ pdftex test.tex
This is pdfTeX, Version 3.14159265-2.6-1.40.19 (TeX Live 2018)
(preloaded format=pdftex)
 restricted \write18 enabled.
entering extended mode
(./test.tex
> \lines=macro:
->^^MHello LuaTeX!^^M^^MWhy do you garble newlines in^^Mterminal output?^^M.
l.11 \show\lines

?
 )
No pages of output.
Transcript written on test.log.

------------------------------------------------

And here is the log with LuaTeX.

------------------------------------------------

$ luatex test.tex
This is LuaTeX, Version 1.09.0 (TeX Live 2019/dev)
 restricted system commands enabled.
(./test.tex
> \lines=macro:
.erminal output?e newlines in
l.11 \show\lines

?
)
warning  (pdf backend): no pages of output.
Transcript written on test.log.

------------------------------------------------

Cheers, Henri

From joseph.wright at morningstar2.co.uk  Mon Dec 24 09:40:56 2018
From: joseph.wright at morningstar2.co.uk (Joseph Wright)
Date: Mon, 24 Dec 2018 08:40:56 +0000
Subject: [luatex] LuaTeX garbles special tokens in terminal output
In-Reply-To: <9c6ddae7-21c1-aa7e-d671-c9778d16a674@gmail.com>
References: <9c6ddae7-21c1-aa7e-d671-c9778d16a674@gmail.com>
Message-ID: <bb61b41f-c3d4-068a-e30d-beaa2acca57e@morningstar2.co.uk>

On 24/12/2018 08:34, Henri Menke wrote:
> Dear devs,
> 
> LuaTeX somehow garbles special tokens when printing to the log using
> \show.  For example when you define a macro with active end of lines,
> I'd expect ^^M to be printed in the log.  However, LuaTeX replaces ^^M
> with \r, mashing all the lines together into one.
> 
> Consider the follwing MWE:
> 
> \begingroup
> \obeylines
> \gdef\lines{
>    Hello LuaTeX!
> 
>    Why do you garble newlines in
>    terminal output?
> }
> \endgroup
> 
> \show\lines
> 
> \bye
> 
> ------------------------------------------------
> 
> Here is the log with pdfTeX.
> 
> ------------------------------------------------
> 
> $ pdftex test.tex
> This is pdfTeX, Version 3.14159265-2.6-1.40.19 (TeX Live 2018)
> (preloaded format=pdftex)
>   restricted \write18 enabled.
> entering extended mode
> (./test.tex
>> \lines=macro:
> ->^^MHello LuaTeX!^^M^^MWhy do you garble newlines in^^Mterminal output?^^M.
> l.11 \show\lines
> 
> ?
>   )
> No pages of output.
> Transcript written on test.log.
> 
> ------------------------------------------------
> 
> And here is the log with LuaTeX.
> 
> ------------------------------------------------
> 
> $ luatex test.tex
> This is LuaTeX, Version 1.09.0 (TeX Live 2019/dev)
>   restricted system commands enabled.
> (./test.tex
>> \lines=macro:
> .erminal output?e newlines in
> l.11 \show\lines
> 
> ?
> )
> warning  (pdf backend): no pages of output.
> Transcript written on test.log.
> 
> ------------------------------------------------
> 
> Cheers, Henri
> 

This is by-design: see page 12 of the current manual:

Output to the terminal uses ^^ notation for the lower control range (? 
< 32), with the exception
of ^^I, ^^J and ^^M. These are considered ?safe? and therefore printed 
as-is.

For l3build (which uses log comparison), we do a sweep over the log to 
turn returns into ^^M to get 'closer' to pdfTeX for exactly this reason.

Joseph

From henrimenke at gmail.com  Mon Dec 24 09:58:29 2018
From: henrimenke at gmail.com (Henri Menke)
Date: Mon, 24 Dec 2018 21:58:29 +1300
Subject: [luatex] LuaTeX garbles special tokens in terminal output
In-Reply-To: <bb61b41f-c3d4-068a-e30d-beaa2acca57e@morningstar2.co.uk>
References: <9c6ddae7-21c1-aa7e-d671-c9778d16a674@gmail.com>
 <bb61b41f-c3d4-068a-e30d-beaa2acca57e@morningstar2.co.uk>
Message-ID: <e3f1b382-8fb4-f381-ecd4-9202a38991ac@gmail.com>

On 12/24/18 9:40 PM, Joseph Wright wrote:
> On 24/12/2018 08:34, Henri Menke wrote:
>> Dear devs,
>>
>> LuaTeX somehow garbles special tokens when printing to the log using
>> \show.? For example when you define a macro with active end of lines,
>> I'd expect ^^M to be printed in the log.? However, LuaTeX replaces ^^M
>> with \r, mashing all the lines together into one.
>>
>> Consider the follwing MWE:
>>
>> \begingroup
>> \obeylines
>> \gdef\lines{
>> ?? Hello LuaTeX!
>>
>> ?? Why do you garble newlines in
>> ?? terminal output?
>> }
>> \endgroup
>>
>> \show\lines
>>
>> \bye
>>
>> ------------------------------------------------
>>
>> Here is the log with pdfTeX.
>>
>> ------------------------------------------------
>>
>> $ pdftex test.tex
>> This is pdfTeX, Version 3.14159265-2.6-1.40.19 (TeX Live 2018)
>> (preloaded format=pdftex)
>> ? restricted \write18 enabled.
>> entering extended mode
>> (./test.tex
>>> \lines=macro:
>> ->^^MHello LuaTeX!^^M^^MWhy do you garble newlines in^^Mterminal
>> output?^^M.
>> l.11 \show\lines
>>
>> ?
>> ? )
>> No pages of output.
>> Transcript written on test.log.
>>
>> ------------------------------------------------
>>
>> And here is the log with LuaTeX.
>>
>> ------------------------------------------------
>>
>> $ luatex test.tex
>> This is LuaTeX, Version 1.09.0 (TeX Live 2019/dev)
>> ? restricted system commands enabled.
>> (./test.tex
>>> \lines=macro:
>> .erminal output?e newlines in
>> l.11 \show\lines
>>
>> ?
>> )
>> warning? (pdf backend): no pages of output.
>> Transcript written on test.log.
>>
>> ------------------------------------------------
>>
>> Cheers, Henri
>>
> 
> This is by-design: see page 12 of the current manual:
> 
> Output to the terminal uses ^^ notation for the lower control range (?
> < 32), with the exception
> of ^^I, ^^J and ^^M. These are considered ?safe? and therefore printed
> as-is.

Ahhh, that's really inconvenient.  This makes debugging macros handling
verbatim material impossible.  Is there a possibility to access the
signature and replacement text of a macro from Lua?

> 
> For l3build (which uses log comparison), we do a sweep over the log to
> turn returns into ^^M to get 'closer' to pdfTeX for exactly this reason.
> 
> Joseph


From joseph.wright at morningstar2.co.uk  Mon Dec 24 10:03:15 2018
From: joseph.wright at morningstar2.co.uk (Joseph Wright)
Date: Mon, 24 Dec 2018 09:03:15 +0000
Subject: [luatex] LuaTeX garbles special tokens in terminal output
In-Reply-To: <e3f1b382-8fb4-f381-ecd4-9202a38991ac@gmail.com>
References: <9c6ddae7-21c1-aa7e-d671-c9778d16a674@gmail.com>
 <bb61b41f-c3d4-068a-e30d-beaa2acca57e@morningstar2.co.uk>
 <e3f1b382-8fb4-f381-ecd4-9202a38991ac@gmail.com>
Message-ID: <138811ac-c517-2adf-216d-e131362da35a@morningstar2.co.uk>

On 24/12/2018 08:58, Henri Menke wrote:
>> Output to the terminal uses ^^ notation for the lower control range (?
>> < 32), with the exception
>> of ^^I, ^^J and ^^M. These are considered ?safe? and therefore printed
>> as-is.
> 
> Ahhh, that's really inconvenient.  This makes debugging macros handling
> verbatim material impossible.  Is there a possibility to access the

Is there a reason you don't want to do this from the 'TeX side'? I'd 
just use expl3's \tl_analysis_show:N or equivalent (i.e. decompose and 
show meaning token-by-token).

Joseph

