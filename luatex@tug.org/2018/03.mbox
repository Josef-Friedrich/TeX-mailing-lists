From patrick at gundla.ch  Mon Mar 12 16:16:42 2018
From: patrick at gundla.ch (Patrick Gundlach)
Date: Mon, 12 Mar 2018 16:16:42 +0100
Subject: [luatex] luasocket - https
Message-ID: <4BFAB6F2-9C2B-424E-A075-2D058032548A@gundla.ch>

Hi all,

I have the feeling that Lua Socket does not support TLS(1). Is there another (pure LuaTeX) mechanism to get the contents of an https served page?

Patrick

(1) https://stackoverflow.com/questions/42628888/get-https-page-content-with-lua




From luigi.scarso at gmail.com  Mon Mar 12 16:32:18 2018
From: luigi.scarso at gmail.com (luigi scarso)
Date: Mon, 12 Mar 2018 16:32:18 +0100
Subject: [luatex] luasocket - https
In-Reply-To: <4BFAB6F2-9C2B-424E-A075-2D058032548A@gundla.ch>
References: <4BFAB6F2-9C2B-424E-A075-2D058032548A@gundla.ch>
Message-ID: <CAG5iGsABrmWzRJujY4GvCr8uO8CbtWeGYB4R9onkn-JqFq4rTA@mail.gmail.com>

On Mon, Mar 12, 2018 at 4:16 PM, Patrick Gundlach <patrick at gundla.ch> wrote:
> Hi all,
>
> I have the feeling that Lua Socket does not support TLS(1). Is there another (pure LuaTeX) mechanism to get the contents of an https served page?
>
> Patrick
>
> (1) https://stackoverflow.com/questions/42628888/get-https-page-content-with-lua
>
>
>
luasec
https://github.com/brunoos/luasec
but it depends on openssl
https://www.openssl.org/
and we cannot include it in texlive
(we cannot include any  cryptography software)

--
luigi

From analuciadm at gmail.com  Mon Mar 12 16:42:03 2018
From: analuciadm at gmail.com (=?UTF-8?Q?Ana_L=C3=BAcia_de_Moura?=)
Date: Mon, 12 Mar 2018 12:42:03 -0300
Subject: [luatex] luasocket - https
In-Reply-To: <CAG5iGsABrmWzRJujY4GvCr8uO8CbtWeGYB4R9onkn-JqFq4rTA@mail.gmail.com>
References: <4BFAB6F2-9C2B-424E-A075-2D058032548A@gundla.ch>
 <CAG5iGsABrmWzRJujY4GvCr8uO8CbtWeGYB4R9onkn-JqFq4rTA@mail.gmail.com>
Message-ID: <CA+BL8gJkK_KNts3D4WW3RsLgE_RqJJbu3eObOzEKwRtFSyQAxw@mail.gmail.com>

Hi
Have a look at https://daurnimator.github.io/lua-http/0.2/

-- Ana

2018-03-12 12:32 GMT-03:00 luigi scarso <luigi.scarso at gmail.com>:
> On Mon, Mar 12, 2018 at 4:16 PM, Patrick Gundlach <patrick at gundla.ch> wrote:
>> Hi all,
>>
>> I have the feeling that Lua Socket does not support TLS(1). Is there another (pure LuaTeX) mechanism to get the contents of an https served page?
>>
>> Patrick
>>
>> (1) https://stackoverflow.com/questions/42628888/get-https-page-content-with-lua
>>
>>
>>
> luasec
> https://github.com/brunoos/luasec
> but it depends on openssl
> https://www.openssl.org/
> and we cannot include it in texlive
> (we cannot include any  cryptography software)
>
> --
> luigi

From patrick at gundla.ch  Mon Mar 12 16:42:57 2018
From: patrick at gundla.ch (Patrick Gundlach)
Date: Mon, 12 Mar 2018 16:42:57 +0100
Subject: [luatex] luasocket - https
In-Reply-To: <CAG5iGsABrmWzRJujY4GvCr8uO8CbtWeGYB4R9onkn-JqFq4rTA@mail.gmail.com>
References: <4BFAB6F2-9C2B-424E-A075-2D058032548A@gundla.ch>
 <CAG5iGsABrmWzRJujY4GvCr8uO8CbtWeGYB4R9onkn-JqFq4rTA@mail.gmail.com>
Message-ID: <BBC2A1E7-8373-4250-8FB9-FE2884B444AA@gundla.ch>

Hi Luigi,

thanks for the answer, I can understand that you/TeXLive don't ship crypto software.

Patrick




From luatex at nililand.de  Mon Mar 12 17:22:14 2018
From: luatex at nililand.de (Ulrike Fischer)
Date: Mon, 12 Mar 2018 17:22:14 +0100
Subject: [luatex] luasocket - https
References: <4BFAB6F2-9C2B-424E-A075-2D058032548A@gundla.ch>
 <CAG5iGsABrmWzRJujY4GvCr8uO8CbtWeGYB4R9onkn-JqFq4rTA@mail.gmail.com>
Message-ID: <1bw7d10901p1q.dlg@nililand.de>

Am Mon, 12 Mar 2018 16:32:18 +0100 schrieb luigi scarso:

> but it depends on openssl
> https://www.openssl.org/
> and we cannot include it in texlive
> (we cannot include any  cryptography software)

For the gpg verification Norbert offered a package through an
external repository: http://www.preining.info/tlgpg/

Wouldn't this be possible here too?

-- 
Ulrike Fischer 
http://www.troubleshooting-tex.de/


From luigi.scarso at gmail.com  Mon Mar 12 17:29:38 2018
From: luigi.scarso at gmail.com (luigi scarso)
Date: Mon, 12 Mar 2018 17:29:38 +0100
Subject: [luatex] luasocket - https
In-Reply-To: <1bw7d10901p1q.dlg@nililand.de>
References: <4BFAB6F2-9C2B-424E-A075-2D058032548A@gundla.ch>
 <CAG5iGsABrmWzRJujY4GvCr8uO8CbtWeGYB4R9onkn-JqFq4rTA@mail.gmail.com>
 <1bw7d10901p1q.dlg@nililand.de>
Message-ID: <CAG5iGsD0eBOJiAybAYfA-kUJvi8pNPSymVvxDJHRCowqnj88KA@mail.gmail.com>

On Mon, Mar 12, 2018 at 5:22 PM, Ulrike Fischer <luatex at nililand.de> wrote:
> Am Mon, 12 Mar 2018 16:32:18 +0100 schrieb luigi scarso:
>
>> but it depends on openssl
>> https://www.openssl.org/
>> and we cannot include it in texlive
>> (we cannot include any  cryptography software)
>
> For the gpg verification Norbert offered a package through an
> external repository: http://www.preining.info/tlgpg/
>
> Wouldn't this be possible here too?
What should be possible ?

-- 
luigi

From luatex at nililand.de  Mon Mar 12 18:16:56 2018
From: luatex at nililand.de (Ulrike Fischer)
Date: Mon, 12 Mar 2018 18:16:56 +0100
Subject: [luatex] luasocket - https
References: <4BFAB6F2-9C2B-424E-A075-2D058032548A@gundla.ch>
 <CAG5iGsABrmWzRJujY4GvCr8uO8CbtWeGYB4R9onkn-JqFq4rTA@mail.gmail.com>
 <1bw7d10901p1q.dlg@nililand.de>
 <CAG5iGsD0eBOJiAybAYfA-kUJvi8pNPSymVvxDJHRCowqnj88KA@mail.gmail.com>
Message-ID: <1rchf1bs526cm$.dlg@nililand.de>

Am Mon, 12 Mar 2018 17:29:38 +0100 schrieb luigi scarso:

>>> and we cannot include it in texlive
>>> (we cannot include any  cryptography software)

>> For the gpg verification Norbert offered a package through an
>> external repository: http://www.preining.info/tlgpg/
>> Wouldn't this be possible here too?

> What should be possible ?

That the needed "crypto software" is installed independently from
the main texlive. 

-- 
Ulrike Fischer 
http://www.troubleshooting-tex.de/


From luigi.scarso at gmail.com  Mon Mar 12 19:20:24 2018
From: luigi.scarso at gmail.com (luigi scarso)
Date: Mon, 12 Mar 2018 19:20:24 +0100
Subject: [luatex] luasocket - https
In-Reply-To: <1rchf1bs526cm$.dlg@nililand.de>
References: <4BFAB6F2-9C2B-424E-A075-2D058032548A@gundla.ch>
 <CAG5iGsABrmWzRJujY4GvCr8uO8CbtWeGYB4R9onkn-JqFq4rTA@mail.gmail.com>
 <1bw7d10901p1q.dlg@nililand.de>
 <CAG5iGsD0eBOJiAybAYfA-kUJvi8pNPSymVvxDJHRCowqnj88KA@mail.gmail.com>
 <1rchf1bs526cm$.dlg@nililand.de>
Message-ID: <CAG5iGsC3Kk1WKKhLQtGwe64yQ-rEE=6DuA1Nc6nuJYhTNzJBpg@mail.gmail.com>

On Mon, Mar 12, 2018 at 6:16 PM, Ulrike Fischer <luatex at nililand.de> wrote:
> That the needed "crypto software" is installed independently from
> the main texlive.
sure, once there are the repository, the software, and a maintainer.

-- 
luigi

From A.Grahn at hzdr.de  Mon Mar 19 11:20:48 2018
From: A.Grahn at hzdr.de (Alexander Grahn)
Date: Mon, 19 Mar 2018 11:20:48 +0100
Subject: [luatex] Bug: When nesting Form XObject reference in <box>,
 \pdfxform resources {<resources>} <box> -> missing user-provided
 <resources>
Message-ID: <20180319102047.GD30863@hzdr.de>

Dear all,

it seems that I discovered a bug in connection with nested Form XObjects
(pdftex built-in \pdfxform) that occurs in pdfTeX as well as in LuaTeX.

The \pdfxform built-in provides the optional `resources {<resources>}'
argument, as in

  \pdfxform resources {<resources>} <box>

, in order to allow the user to insert additional entries in the /Resources
dictionary of the Form XObject to be produced from box register <box>.

This works as advertised for ordinary box content (1st \pdfxform in the code
below), but as soon as another Form XObject is referenced inside <box>, the
`resources {...}' argument is ignored and user-provided <resources> are missing
in the generated PDF code (2nd \pdfxform).

Here is a minimal example for pdfTeX and LuaTeX for demonstration. The PDF
object numbers mentioned in the comments are different in the PDF output from
LuaTeX.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Bug: When nesting Form XObject reference in <box>,
%      \pdfxform resources {<resources>} <box>
%      --> missing user-provided <resources>

\input luatex85.sty

\pdfcompresslevel=0
\pdfobjcompresslevel=0

\setbox0=\hbox{World}
\edef\wrldwd{\the\wd0}

\pdfxform
attr {}
resources {/Properties <</Key1 (Val1)>>} % OK
0

%nesting Form XObject reference
\setbox0=\hbox{Hello \hbox to \wrldwd {\pdfrefxform\pdflastxform\hss}!}

\pdfxform
attr {}
% /Properties <<...>> missing in /Resources dict (object `8 0'), ref'ed in
resources {/Properties <</Key2 (Val2)>>}%       Form XObject (object `2 0')
0

\pdfrefxform\pdflastxform

\bye
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Kind regards,
Alexander
-------------- next part --------------
A non-text attachment was scrubbed...
Name: nestedXForm.tex
Type: application/x-tex
Size: 633 bytes
Desc: not available
URL: <http://tug.org/pipermail/luatex/attachments/20180319/0e416105/attachment.tex>

From j.hagen at xs4all.nl  Mon Mar 19 11:52:49 2018
From: j.hagen at xs4all.nl (Hans Hagen)
Date: Mon, 19 Mar 2018 11:52:49 +0100
Subject: [luatex] Bug: When nesting Form XObject reference in <box>,
 \pdfxform resources {<resources>} <box> -> missing user-provided
 <resources>
In-Reply-To: <20180319102047.GD30863@hzdr.de>
References: <20180319102047.GD30863@hzdr.de>
Message-ID: <a82d6ca7-4d46-a1f0-1884-52ed2e65179c@xs4all.nl>

On 3/19/2018 11:20 AM, Alexander Grahn wrote:
> Dear all,
> 
> it seems that I discovered a bug in connection with nested Form XObjects
> (pdftex built-in \pdfxform) that occurs in pdfTeX as well as in LuaTeX.
> 
> The \pdfxform built-in provides the optional `resources {<resources>}'
> argument, as in
> 
>    \pdfxform resources {<resources>} <box>
> 
> , in order to allow the user to insert additional entries in the /Resources
> dictionary of the Form XObject to be produced from box register <box>.
> 
> This works as advertised for ordinary box content (1st \pdfxform in the code
> below), but as soon as another Form XObject is referenced inside <box>, the
> `resources {...}' argument is ignored and user-provided <resources> are missing
> in the generated PDF code (2nd \pdfxform).
> 
> Here is a minimal example for pdfTeX and LuaTeX for demonstration. The PDF
> object numbers mentioned in the comments are different in the PDF output from
> LuaTeX.
> 
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
> % Bug: When nesting Form XObject reference in <box>,
> %      \pdfxform resources {<resources>} <box>
> %      --> missing user-provided <resources>
> 
> \input luatex85.sty
> 
> \pdfcompresslevel=0
> \pdfobjcompresslevel=0
> 
> \setbox0=\hbox{World}
> \edef\wrldwd{\the\wd0}
> 
> \pdfxform
> attr {}
> resources {/Properties <</Key1 (Val1)>>} % OK
> 0
> 
> %nesting Form XObject reference
> \setbox0=\hbox{Hello \hbox to \wrldwd {\pdfrefxform\pdflastxform\hss}!}
> 
> \pdfxform
> attr {}
> % /Properties <<...>> missing in /Resources dict (object `8 0'), ref'ed in
> resources {/Properties <</Key2 (Val2)>>}%       Form XObject (object `2 0')
> 0
> 
> \pdfrefxform\pdflastxform
> 
> \bye
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

there is no nesting stack kept there ...

\immediate\pdfxform ...

works ok

Hans


-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From A.Grahn at hzdr.de  Mon Mar 19 12:58:51 2018
From: A.Grahn at hzdr.de (Alexander Grahn)
Date: Mon, 19 Mar 2018 12:58:51 +0100
Subject: [luatex] Bug: When nesting Form XObject reference in <box>,
 \pdfxform resources {<resources>} <box> -> missing user-provided
 <resources>
Message-ID: <20180319115851.GA23735@hzdr.de>

On 3/19/2018 11:52 AM, Hans Hagen wrote:
> On 3/19/2018 11:20 AM, Alexander Grahn wrote:
> > Dear all,
> >
> > it seems that I discovered a bug in connection with nested Form XObjects
> > (pdftex built-in \pdfxform) that occurs in pdfTeX as well as in LuaTeX.
> >
> > The \pdfxform built-in provides the optional `resources {<resources>}'
> > argument, as in
> >
> >    \pdfxform resources {<resources>} <box>
> >
> > , in order to allow the user to insert additional entries in the /Resources
> > dictionary of the Form XObject to be produced from box register <box>.
> >
> > This works as advertised for ordinary box content (1st \pdfxform in the code
> > below), but as soon as another Form XObject is referenced inside <box>, the
> > `resources {...}' argument is ignored and user-provided <resources> are missing
> > in the generated PDF code (2nd \pdfxform).
> >
> > Here is a minimal example for pdfTeX and LuaTeX for demonstration. The PDF
> > object numbers mentioned in the comments are different in the PDF output from
> > LuaTeX.
> >
> > %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
> > % Bug: When nesting Form XObject reference in <box>,
> > %      \pdfxform resources {<resources>} <box>
> > %      --> missing user-provided <resources>
> >
> > \input luatex85.sty
> >
> > \pdfcompresslevel=0
> > \pdfobjcompresslevel=0
> >
> > \setbox0=\hbox{World}
> > \edef\wrldwd{\the\wd0}
> >
> > \pdfxform
> > attr {}
> > resources {/Properties <</Key1 (Val1)>>} % OK
> > 0
> >
> > %nesting Form XObject reference
> > \setbox0=\hbox{Hello \hbox to \wrldwd {\pdfrefxform\pdflastxform\hss}!}
> >
> > \pdfxform
> > attr {}
> > % /Properties <<...>> missing in /Resources dict (object `8 0'), ref'ed in
> > resources {/Properties <</Key2 (Val2)>>}%       Form XObject (object `2 0')
> > 0
> >
> > \pdfrefxform\pdflastxform
> >
> > \bye
> > %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
> 
> there is no nesting stack kept there ...
> 
> \immediate\pdfxform ...
> 
> works ok
> 
> Hans

That is strange, as for `attr {...}' such a stack apparently exists.
`resources {...}' should behave in the same way.

Consider this:

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Bug: When nesting Form XObject reference in <box>,
%      \pdfxform resources {<resources>} <box>
%      --> missing user-provided <resources>

\input luatex85.sty

\pdfcompresslevel=0
\pdfobjcompresslevel=0

\setbox0=\hbox{World}
\edef\wrldwd{\the\wd0}

\pdfxform
attr {/UserDict <</K1 (V1)>>} %OK
resources {/Properties <</Key1 (Val1)>>} % OK
0

%nesting Form XObject reference
\setbox0=\hbox{Hello \hbox to \wrldwd {\pdfrefxform\pdflastxform\hss}!}

\pdfxform
attr {/UserDict <</K2 (V2)>>} %OK
% /Properties <<...>> missing in /Resources dict (object `8 0'), ref'ed in
resources {/Properties <</Key2 (Val2)>>}%       Form XObject (object `2 0')
0

\pdfrefxform\pdflastxform

\bye
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Alexander

From j.hagen at xs4all.nl  Mon Mar 19 13:17:11 2018
From: j.hagen at xs4all.nl (Hans Hagen)
Date: Mon, 19 Mar 2018 13:17:11 +0100
Subject: [luatex] Bug: When nesting Form XObject reference in <box>,
 \pdfxform resources {<resources>} <box> -> missing user-provided
 <resources>
In-Reply-To: <20180319115851.GA23735@hzdr.de>
References: <20180319115851.GA23735@hzdr.de>
Message-ID: <048bd94f-24a0-591b-0931-07ae301dc7e8@xs4all.nl>

On 3/19/2018 12:58 PM, Alexander Grahn wrote:
> On 3/19/2018 11:52 AM, Hans Hagen wrote:
>> On 3/19/2018 11:20 AM, Alexander Grahn wrote:
>>> Dear all,
>>>
>>> it seems that I discovered a bug in connection with nested Form XObjects
>>> (pdftex built-in \pdfxform) that occurs in pdfTeX as well as in LuaTeX.
>>>
>>> The \pdfxform built-in provides the optional `resources {<resources>}'
>>> argument, as in
>>>
>>>     \pdfxform resources {<resources>} <box>
>>>
>>> , in order to allow the user to insert additional entries in the /Resources
>>> dictionary of the Form XObject to be produced from box register <box>.
>>>
>>> This works as advertised for ordinary box content (1st \pdfxform in the code
>>> below), but as soon as another Form XObject is referenced inside <box>, the
>>> `resources {...}' argument is ignored and user-provided <resources> are missing
>>> in the generated PDF code (2nd \pdfxform).
>>>
>>> Here is a minimal example for pdfTeX and LuaTeX for demonstration. The PDF
>>> object numbers mentioned in the comments are different in the PDF output from
>>> LuaTeX.
>>>
>>> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
>>> % Bug: When nesting Form XObject reference in <box>,
>>> %      \pdfxform resources {<resources>} <box>
>>> %      --> missing user-provided <resources>
>>>
>>> \input luatex85.sty
>>>
>>> \pdfcompresslevel=0
>>> \pdfobjcompresslevel=0
>>>
>>> \setbox0=\hbox{World}
>>> \edef\wrldwd{\the\wd0}
>>>
>>> \pdfxform
>>> attr {}
>>> resources {/Properties <</Key1 (Val1)>>} % OK
>>> 0
>>>
>>> %nesting Form XObject reference
>>> \setbox0=\hbox{Hello \hbox to \wrldwd {\pdfrefxform\pdflastxform\hss}!}
>>>
>>> \pdfxform
>>> attr {}
>>> % /Properties <<...>> missing in /Resources dict (object `8 0'), ref'ed in
>>> resources {/Properties <</Key2 (Val2)>>}%       Form XObject (object `2 0')
>>> 0
>>>
>>> \pdfrefxform\pdflastxform
>>>
>>> \bye
>>> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
>>
>> there is no nesting stack kept there ...
>>
>> \immediate\pdfxform ...
>>
>> works ok
>>
>> Hans
> 
> That is strange, as for `attr {...}' such a stack apparently exists.
> `resources {...}' should behave in the same way.

resources are more complex as they also need to merge with others ... 
it's something we will ook into but don't expect changes too soon as 
we're in texlive code freeze mode

> Consider this:
> 
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
> % Bug: When nesting Form XObject reference in <box>,
> %      \pdfxform resources {<resources>} <box>
> %      --> missing user-provided <resources>
> 
> \input luatex85.sty
> 
> \pdfcompresslevel=0
> \pdfobjcompresslevel=0
> 
> \setbox0=\hbox{World}
> \edef\wrldwd{\the\wd0}
> 
> \pdfxform
> attr {/UserDict <</K1 (V1)>>} %OK
> resources {/Properties <</Key1 (Val1)>>} % OK
> 0
> 
> %nesting Form XObject reference
> \setbox0=\hbox{Hello \hbox to \wrldwd {\pdfrefxform\pdflastxform\hss}!}
> 
> \pdfxform
> attr {/UserDict <</K2 (V2)>>} %OK
> % /Properties <<...>> missing in /Resources dict (object `8 0'), ref'ed in
> resources {/Properties <</Key2 (Val2)>>}%       Form XObject (object `2 0')
> 0
> 
> \pdfrefxform\pdflastxform
> 
> \bye
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
> 
> Alexander
> 


-- 

-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From A.Grahn at hzdr.de  Mon Mar 19 13:29:51 2018
From: A.Grahn at hzdr.de (Alexander Grahn)
Date: Mon, 19 Mar 2018 13:29:51 +0100
Subject: [luatex] Bug: When nesting Form XObject reference in <box>,
 \pdfxform resources {<resources>} <box> -> missing user-provided
 <resources>
In-Reply-To: <048bd94f-24a0-591b-0931-07ae301dc7e8@xs4all.nl>
References: <20180319115851.GA23735@hzdr.de>
 <048bd94f-24a0-591b-0931-07ae301dc7e8@xs4all.nl>
Message-ID: <20180319122951.GB23735@hzdr.de>

On Mon, Mar 19, 2018 at 01:17:11PM +0100, Hans Hagen wrote:
>On 3/19/2018 12:58 PM, Alexander Grahn wrote:
>> On 3/19/2018 11:52 AM, Hans Hagen wrote:
>>> On 3/19/2018 11:20 AM, Alexander Grahn wrote:
>>>> Dear all,
>>>>
>>>> it seems that I discovered a bug in connection with nested Form XObjects
>>>> (pdftex built-in \pdfxform) that occurs in pdfTeX as well as in LuaTeX.
>>>>
>>>> The \pdfxform built-in provides the optional `resources {<resources>}'
>>>> argument, as in
>>>>
>>>>     \pdfxform resources {<resources>} <box>
>>>>
>>>> , in order to allow the user to insert additional entries in the /Resources
>>>> dictionary of the Form XObject to be produced from box register <box>.
>>>>
>>>> This works as advertised for ordinary box content (1st \pdfxform in the code
>>>> below), but as soon as another Form XObject is referenced inside <box>, the
>>>> `resources {...}' argument is ignored and user-provided <resources> are missing
>>>> in the generated PDF code (2nd \pdfxform).
>>>>
>>>> Here is a minimal example for pdfTeX and LuaTeX for demonstration. The PDF
>>>> object numbers mentioned in the comments are different in the PDF output from
>>>> LuaTeX.
>>>>
>>>> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
>>>> % Bug: When nesting Form XObject reference in <box>,
>>>> %      \pdfxform resources {<resources>} <box>
>>>> %      --> missing user-provided <resources>
>>>>
>>>> \input luatex85.sty
>>>>
>>>> \pdfcompresslevel=0
>>>> \pdfobjcompresslevel=0
>>>>
>>>> \setbox0=\hbox{World}
>>>> \edef\wrldwd{\the\wd0}
>>>>
>>>> \pdfxform
>>>> attr {}
>>>> resources {/Properties <</Key1 (Val1)>>} % OK
>>>> 0
>>>>
>>>> %nesting Form XObject reference
>>>> \setbox0=\hbox{Hello \hbox to \wrldwd {\pdfrefxform\pdflastxform\hss}!}
>>>>
>>>> \pdfxform
>>>> attr {}
>>>> % /Properties <<...>> missing in /Resources dict (object `8 0'), ref'ed in
>>>> resources {/Properties <</Key2 (Val2)>>}%       Form XObject (object `2 0')
>>>> 0
>>>>
>>>> \pdfrefxform\pdflastxform
>>>>
>>>> \bye
>>>> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
>>>
>>> there is no nesting stack kept there ...
>>>
>>> \immediate\pdfxform ...
>>>
>>> works ok
>>>
>>> Hans
>> 
>> That is strange, as for `attr {...}' such a stack apparently exists.
>> `resources {...}' should behave in the same way.
>
>resources are more complex as they also need to merge with others ... 
>it's something we will ook into but don't expect changes too soon as 
>we're in texlive code freeze mode

Thank you, Hans, a lot for taking this into consideration!

Kind regards,
Alexander

From luigi.scarso at gmail.com  Wed Mar 21 10:41:31 2018
From: luigi.scarso at gmail.com (luigi scarso)
Date: Wed, 21 Mar 2018 10:41:31 +0100
Subject: [luatex] Bug: When nesting Form XObject reference in <box>,
 \pdfxform resources {<resources>} <box> -> missing user-provided
 <resources>
In-Reply-To: <20180319122951.GB23735@hzdr.de>
References: <20180319115851.GA23735@hzdr.de>
 <048bd94f-24a0-591b-0931-07ae301dc7e8@xs4all.nl>
 <20180319122951.GB23735@hzdr.de>
Message-ID: <CAG5iGsBfeWMcAqdGqkFJ7nEFSG9uHdSWskUov14ehRef8eHf1A@mail.gmail.com>

On Mon, Mar 19, 2018 at 1:29 PM, Alexander Grahn <A.Grahn at hzdr.de> wrote:
> On Mon, Mar 19, 2018 at 01:17:11PM +0100, Hans Hagen wrote:
>>On 3/19/2018 12:58 PM, Alexander Grahn wrote:
>>> On 3/19/2018 11:52 AM, Hans Hagen wrote:
>>>> On 3/19/2018 11:20 AM, Alexander Grahn wrote:
>>>>> Dear all,
>>>>>
>>>>> it seems that I discovered a bug in connection with nested Form XObjects
>>>>> (pdftex built-in \pdfxform) that occurs in pdfTeX as well as in LuaTeX.
>>>>>
>>>>> The \pdfxform built-in provides the optional `resources {<resources>}'
>>>>> argument, as in
>>>>>
>>>>>     \pdfxform resources {<resources>} <box>
>>>>>
>>>>> , in order to allow the user to insert additional entries in the /Resources
>>>>> dictionary of the Form XObject to be produced from box register <box>.
>>>>>
>>>>> This works as advertised for ordinary box content (1st \pdfxform in the code
>>>>> below), but as soon as another Form XObject is referenced inside <box>, the
>>>>> `resources {...}' argument is ignored and user-provided <resources> are missing
>>>>> in the generated PDF code (2nd \pdfxform).
>>>>>
>>>>> Here is a minimal example for pdfTeX and LuaTeX for demonstration. The PDF
>>>>> object numbers mentioned in the comments are different in the PDF output from
>>>>> LuaTeX.
>>>>>
>>>>> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
>>>>> % Bug: When nesting Form XObject reference in <box>,
>>>>> %      \pdfxform resources {<resources>} <box>
>>>>> %      --> missing user-provided <resources>
>>>>>
>>>>> \input luatex85.sty
>>>>>
>>>>> \pdfcompresslevel=0
>>>>> \pdfobjcompresslevel=0
>>>>>
>>>>> \setbox0=\hbox{World}
>>>>> \edef\wrldwd{\the\wd0}
>>>>>
>>>>> \pdfxform
>>>>> attr {}
>>>>> resources {/Properties <</Key1 (Val1)>>} % OK
>>>>> 0
>>>>>
>>>>> %nesting Form XObject reference
>>>>> \setbox0=\hbox{Hello \hbox to \wrldwd {\pdfrefxform\pdflastxform\hss}!}
>>>>>
>>>>> \pdfxform
>>>>> attr {}
>>>>> % /Properties <<...>> missing in /Resources dict (object `8 0'), ref'ed in
>>>>> resources {/Properties <</Key2 (Val2)>>}%       Form XObject (object `2 0')
>>>>> 0
>>>>>
>>>>> \pdfrefxform\pdflastxform
>>>>>
>>>>> \bye
>>>>> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
>>>>
>>>> there is no nesting stack kept there ...
>>>>
>>>> \immediate\pdfxform ...
>>>>
>>>> works ok
>>>>
>>>> Hans
>>>
>>> That is strange, as for `attr {...}' such a stack apparently exists.
>>> `resources {...}' should behave in the same way.
>>
>>resources are more complex as they also need to merge with others ...
>>it's something we will ook into but don't expect changes too soon as
>>we're in texlive code freeze mode
>
> Thank you, Hans, a lot for taking this into consideration!
>
> Kind regards,
> Alexander

pdftex in TeX Live 2018 has a patch,
but currently we need to test luatex a bit more,
so it's not sure that the patch will be committed for  luatex in TeX
Live 2018 too.
It will be for sure in the next 1.08.0 after texlive and just before
the context meeting in September.

-- 
luigi

From maxwell at umiacs.umd.edu  Fri Mar 23 20:58:15 2018
From: maxwell at umiacs.umd.edu (maxwell)
Date: Fri, 23 Mar 2018 15:58:15 -0400
Subject: [luatex] Indic scripts
Message-ID: <bb2d6b0ecc9b7ca38d7c2f444ee0afa5@umiacs.umd.edu>

I am just finishing up a project in which we are typesetting texts in 
various languages, and outputting in a separate XML file the bounding 
boxes corresponding to each line of text in the PDF.  It may be possible 
to do this in other varieties of *TeX, but LuaTeX made it easy to use a 
few Lua functions to output this information to the XML.

Unfortunately, we discovered at the very end of this project that LuaTeX 
is mis-rendering Tamil text.  In particular, vowel signs often do not 
appear in the correct position: they are encoded in the underlying 
Unicode text to the right of a consonant, which corresponds to the 
pronunciation order, but should sometimes appear visually to the left of 
that consonant.  LuaTeX does not perform that visual re-ordering.  I am 
also told (by someone who knows Tamil) that LuaTeX is mis-rendering some 
vowel signs that ought to combine with the preceding consonant letters, 
but I'd be hard-pressed to come up with good examples.  (Fact is, I 
don't know much about these scripts, which is why I didn't discover the 
problem until the end of the project...)

Tamil and Bengali are only two of the scripts for which this problem 
arises; most Indic scripts (and probably other complex scripts, like 
Burmese) would probably have the same problems.  There's a discussion of 
the proper rendering of Indic scripts in 
http://www.unicode.org/versions/latest/ch12.pdf (Tamil is in section 
12.6).

Rendering of Indic scripts in LuateX appears to be a known issue, e.g. 
the following thread in this mailing list from 2011: 
http://tug.org/pipermail/luatex/2011-February/002554.html.  Also this 
posting from 2016/2017: 
https://tex.stackexchange.com/questions/285527/how-can-bengali-v-2-bng2-be-used-to-typeset-bengali-with-xetex. 
(The topic was Bengali, but the points are relevant to other Indic 
scripts.  There's a comment down near the bottom from yours truly.)

Is this on someone's radar?  It effectively makes it impossible to 
render text in complex scripts using LuaTeX.  It works correctly in 
XeTeX, presumably because XeTeX uses a different rendering engine to 
create the PDF.

    Mike Maxwell
    University of Maryland

From arthur.reutenauer at normalesup.org  Sat Mar 24 12:15:43 2018
From: arthur.reutenauer at normalesup.org (Arthur Reutenauer)
Date: Sat, 24 Mar 2018 12:15:43 +0100
Subject: [luatex] Indic scripts
In-Reply-To: <bb2d6b0ecc9b7ca38d7c2f444ee0afa5@umiacs.umd.edu>
References: <bb2d6b0ecc9b7ca38d7c2f444ee0afa5@umiacs.umd.edu>
Message-ID: <20180324111543.GA1023757@phare.normalesup.org>

	Hi Mike,

  Any kind of rendering is outside of LuaTeX?s scope and has to be done
at the macro package level, which is what is done in ConTeXt for a
number of scripts but, as you?ve found out, not for most Indic scripts
(though to my knowledge Devanagari rendering has been implemented).  The
ConTeXt code that does the rendering is also used in LaTeX via a number
of packages, so that LaTeX supports exactly the same scripts as ConTeXt.

> Unfortunately, we discovered at the very end of this project that LuaTeX is
> mis-rendering Tamil text.

  It?s unfortunate that you embarked in a project that includes texts in
Tamil and Bengali without checking whether LuaTeX was able to render it
properly.  The LuaTeX project has always been very clear, from the
beginning, that LuaTeX wouldn?t do any rendering at all.  This is by
design.

> Is this on someone's radar?  It effectively makes it impossible to render
> text in complex scripts using LuaTeX.  It works correctly in XeTeX,
> presumably because XeTeX uses a different rendering engine to create the
> PDF.

  That?s correct, XeTeX uses Harfbuzz that is embedded in the engine;
that is to say that XeTeX itself can do the rendering and does not rely
on macro packages.  There is regular talk of libraries or macro packages
that could interface Harfbuzz with LuaTeX, but nothing concrete has come
out of it (yet?).

	Best,

		Arthur

From luigi.scarso at gmail.com  Sat Mar 24 12:37:05 2018
From: luigi.scarso at gmail.com (luigi scarso)
Date: Sat, 24 Mar 2018 12:37:05 +0100
Subject: [luatex] Indic scripts
In-Reply-To: <20180324111543.GA1023757@phare.normalesup.org>
References: <bb2d6b0ecc9b7ca38d7c2f444ee0afa5@umiacs.umd.edu>
 <20180324111543.GA1023757@phare.normalesup.org>
Message-ID: <CAG5iGsC7TeBsdtmJecPdkS-P+uKHF0JoGTUQ+ixR3+bLOKN=KA@mail.gmail.com>

On Sat, Mar 24, 2018 at 12:15 PM, Arthur Reutenauer
<arthur.reutenauer at normalesup.org> wrote:
>   That?s correct, XeTeX uses Harfbuzz that is embedded in the engine;
> that is to say that XeTeX itself can do the rendering and does not rely
> on macro packages.  There is regular talk of libraries or macro packages
> that could interface Harfbuzz with LuaTeX, but nothing concrete has come
> out of it (yet?).

https://www.guitex.org/home/en/numero-23-aprile-2017

Foreign Function Interface in LuaTeX

Hans shown how to use luaffi to  connect to (the shared lib version of
) harfbuzz
plus a comparison of context vs harfbuzz vs uniscribe  text shaping engines
(experimental, and only under windows , but definitively something to
develop further, being very useful for font development).

-- 
luigi


From arthur.reutenauer at normalesup.org  Sat Mar 24 12:53:25 2018
From: arthur.reutenauer at normalesup.org (Arthur Reutenauer)
Date: Sat, 24 Mar 2018 12:53:25 +0100
Subject: [luatex] Indic scripts
In-Reply-To: <CAG5iGsC7TeBsdtmJecPdkS-P+uKHF0JoGTUQ+ixR3+bLOKN=KA@mail.gmail.com>
References: <bb2d6b0ecc9b7ca38d7c2f444ee0afa5@umiacs.umd.edu>
 <20180324111543.GA1023757@phare.normalesup.org>
 <CAG5iGsC7TeBsdtmJecPdkS-P+uKHF0JoGTUQ+ixR3+bLOKN=KA@mail.gmail.com>
Message-ID: <20180324115325.GB1023757@phare.normalesup.org>

> https://www.guitex.org/home/en/numero-23-aprile-2017
> 
> Foreign Function Interface in LuaTeX
> 
> Hans shown how to use luaffi to  connect to (the shared lib version of
> ) harfbuzz

  Haha!  That?s promising.  I?ll wait until 15 April to download the
article then :-)

	Best,

		Arthur

From maxwell at umiacs.umd.edu  Sat Mar 24 16:13:49 2018
From: maxwell at umiacs.umd.edu (Mike Maxwell)
Date: Sat, 24 Mar 2018 11:13:49 -0400
Subject: [luatex] Indic scripts
In-Reply-To: <20180324111543.GA1023757@phare.normalesup.org>
References: <bb2d6b0ecc9b7ca38d7c2f444ee0afa5@umiacs.umd.edu>
 <20180324111543.GA1023757@phare.normalesup.org>
Message-ID: <02ddee6e-8ba6-ff92-dd71-93ae1b1710df@umiacs.umd.edu>

On 3/24/2018 7:15 AM, Arthur Reutenauer wrote:
>> Unfortunately, we discovered at the very end of this project that LuaTeX is
>> mis-rendering Tamil text.
> 
>    It?s unfortunate that you embarked in a project that includes texts in
> Tamil and Bengali without checking whether LuaTeX was able to render it
> properly.  The LuaTeX project has always been very clear, from the
> beginning, that LuaTeX wouldn?t do any rendering at all.  This is by
> design.

My excuse is that it never occurred to me that LuaTeX would not have 
this capability...  and web search just now didn't turn up any obvious 
disclaimers along those lines, although I did run into some projects 
aimed at using HarfBuzz from LuaTeX (as mentioned in yours and Luigi's 
emails just now).  But we used XeTeX with reasonably good results on 
Bengali before XeTeX switched over to HarfBuzz, so the fact that LuaTeX 
doesn't (so far) use HarfBuzz wouldn't have struck me as too worrisome 
if I had noticed it earlier...

Anyway, I think I have a work-around that involves initially typesetting 
in LuaTeX, then using the output from LuaTeX to tell XeTeX where to 
place each line of text on the page.  A real kludge, and untested as 
yet, but it will probably work (perhaps with slightly ragged right 
margins, but for our purposes that's unimportant).
-- 
    Mike Maxwell
    "My definition of an interesting universe is
    one that has the capacity to study itself."
          --Stephen Eastmond

From maxwell at umiacs.umd.edu  Sat Mar 24 16:24:50 2018
From: maxwell at umiacs.umd.edu (Mike Maxwell)
Date: Sat, 24 Mar 2018 11:24:50 -0400
Subject: [luatex] Indic scripts
In-Reply-To: <CAG5iGsC7TeBsdtmJecPdkS-P+uKHF0JoGTUQ+ixR3+bLOKN=KA@mail.gmail.com>
References: <bb2d6b0ecc9b7ca38d7c2f444ee0afa5@umiacs.umd.edu>
 <20180324111543.GA1023757@phare.normalesup.org>
 <CAG5iGsC7TeBsdtmJecPdkS-P+uKHF0JoGTUQ+ixR3+bLOKN=KA@mail.gmail.com>
Message-ID: <305fe196-4f59-cf75-01ff-5868f24b149f@umiacs.umd.edu>

On 3/24/2018 7:37 AM, luigi scarso wrote:
> https://www.guitex.org/home/en/numero-23-aprile-2017
> 
> Foreign Function Interface in LuaTeX
> 
> Hans shown how to use luaffi to  connect to (the shared lib version of
> ) harfbuzz
> plus a comparison of context vs harfbuzz vs uniscribe  text shaping engines
> (experimental, and only under windows , but definitively something to
> develop further, being very useful for font development).

Thanks, I'll watch this space.  Hopefully someone will also make it work 
in Linux.

FWIW, now that I know what to look for, I see there are a couple-three 
(maybe more) other projects aimed at making LuaTeX work together with 
HarfBuzz (probably not all under active development):

https://github.com/tatzetwerk/luatex-harfbuzz
https://github.com/deepakjois/luatex-harfbuzz
http://tug.org/pipermail/luatex/2015-May/005192.html
-- 
    Mike Maxwell
    "My definition of an interesting universe is
    one that has the capacity to study itself."
          --Stephen Eastmond

From arthur.reutenauer at normalesup.org  Sun Mar 25 17:20:45 2018
From: arthur.reutenauer at normalesup.org (Arthur Reutenauer)
Date: Sun, 25 Mar 2018 17:20:45 +0200
Subject: [luatex] Indic scripts
In-Reply-To: <02ddee6e-8ba6-ff92-dd71-93ae1b1710df@umiacs.umd.edu>
References: <bb2d6b0ecc9b7ca38d7c2f444ee0afa5@umiacs.umd.edu>
 <20180324111543.GA1023757@phare.normalesup.org>
 <02ddee6e-8ba6-ff92-dd71-93ae1b1710df@umiacs.umd.edu>
Message-ID: <20180325152045.GB1596506@phare.normalesup.org>

On Sat, Mar 24, 2018 at 11:13:49AM -0400, Mike Maxwell wrote:
> My excuse is that it never occurred to me that LuaTeX would not have this
> capability...

  Hum.

>                and web search just now didn't turn up any obvious
> disclaimers along those lines

  With respect, disclaimers about what?  What did you actually search
for?  I really would like to know, because if there are misconceptions
about concrete capabilities of LuaTeX we can try and address them.

>        But we used XeTeX with reasonably good results on Bengali before
> XeTeX switched over to HarfBuzz, so the fact that LuaTeX doesn't (so far)
> use HarfBuzz wouldn't have struck me as too worrisome if I had noticed it
> earlier...

  This is a bit of a non-sequitur: when XeTeX switched to using HarfBuzz
as a rendering engine, it replaced other libraries that implemented the
same functionality.  In the current state of things, there is nothing
that plays the same role in LuaTeX, and no plan to change that either;
luaffi and similar experiments are an effort to create an interface
between LuaTeX and libraries such as HarfBuzz; they are not about making
LuaTeX use HarfBuzz (or similar).  This is written expressly in Luigi?s
email (?shared lib?).

> Anyway, I think I have a work-around that involves initially typesetting in
> LuaTeX, then using the output from LuaTeX to tell XeTeX where to place each
> line of text on the page.  A real kludge, and untested as yet, but it will
> probably work (perhaps with slightly ragged right margins, but for our
> purposes that's unimportant).

  Glad to know you found a way forward.

	Best,

		Arthur

From maxwell at umiacs.umd.edu  Tue Mar 27 03:22:21 2018
From: maxwell at umiacs.umd.edu (Mike Maxwell)
Date: Mon, 26 Mar 2018 21:22:21 -0400
Subject: [luatex] Indic scripts
In-Reply-To: <20180325152045.GB1596506@phare.normalesup.org>
References: <bb2d6b0ecc9b7ca38d7c2f444ee0afa5@umiacs.umd.edu>
 <20180324111543.GA1023757@phare.normalesup.org>
 <02ddee6e-8ba6-ff92-dd71-93ae1b1710df@umiacs.umd.edu>
 <20180325152045.GB1596506@phare.normalesup.org>
Message-ID: <d3499a05-541b-3e69-b2de-ab2b6a7ba608@umiacs.umd.edu>

(I thought I sent this yesterday; I thought wrong)

On 3/25/2018 11:20 AM, Arthur Reutenauer wrote:
> On Sat, Mar 24, 2018 at 11:13:49AM -0400, Mike Maxwell wrote:
>> and web search just now didn't turn up any obvious
>> disclaimers along those lines
> 
>    With respect, disclaimers about what?  What did you actually search
> for?  I really would like to know, because if there are misconceptions
> about concrete capabilities of LuaTeX we can try and address them.

I searched for information about LuaTeX in general; as I say, I didn't 
realize it wouldn't natively handle complex scripts, so I wasn't really 
looking for information on that.  And most everything I saw said how 
good Luatex was; I never ran into anything that said "Don't use Luatex 
if..." or "Luatex is good except..."

And I hasten to say that Luatex has proven good at some things, like 
getting information out that would be inaccessible in other *TeXs.  (In 
particular, information about the contents of boxes, which I needed in 
my project.)  It just had significant limitations with regard to complex 
scripts that caught me by surprise, as I had come to take them more or 
less for granted.

> luaffi and similar experiments are an effort to create an interface
> between LuaTeX and libraries such as HarfBuzz; they are not about making
> LuaTeX use HarfBuzz (or similar).  

I'm not quite sure what you mean here.  Perhaps by "making LuaTeX use 
HarfBuzz", you mean forcing it to use only HarfBuzz.  If that's what you 
mean, no worries; as long as I could turn on its use of HarfBuzz 
(whether by command line parameter or a TeX command), that would be fine.

-- 
    Mike Maxwell
    "My definition of an interesting universe is
    one that has the capacity to study itself."
          --Stephen Eastmond

From j.hagen at xs4all.nl  Tue Mar 27 09:13:51 2018
From: j.hagen at xs4all.nl (Hans Hagen)
Date: Tue, 27 Mar 2018 09:13:51 +0200
Subject: [luatex] Indic scripts
In-Reply-To: <d3499a05-541b-3e69-b2de-ab2b6a7ba608@umiacs.umd.edu>
References: <bb2d6b0ecc9b7ca38d7c2f444ee0afa5@umiacs.umd.edu>
 <20180324111543.GA1023757@phare.normalesup.org>
 <02ddee6e-8ba6-ff92-dd71-93ae1b1710df@umiacs.umd.edu>
 <20180325152045.GB1596506@phare.normalesup.org>
 <d3499a05-541b-3e69-b2de-ab2b6a7ba608@umiacs.umd.edu>
Message-ID: <29c5822b-c1be-117c-3e16-1081e28f7ce6@xs4all.nl>

On 3/27/2018 3:22 AM, Mike Maxwell wrote:
> (I thought I sent this yesterday; I thought wrong)
> 
> On 3/25/2018 11:20 AM, Arthur Reutenauer wrote:
>> On Sat, Mar 24, 2018 at 11:13:49AM -0400, Mike Maxwell wrote:
>>> and web search just now didn't turn up any obvious
>>> disclaimers along those lines
>>
>> ?? With respect, disclaimers about what?? What did you actually search
>> for?? I really would like to know, because if there are misconceptions
>> about concrete capabilities of LuaTeX we can try and address them.
> 
> I searched for information about LuaTeX in general; as I say, I didn't 
> realize it wouldn't natively handle complex scripts, so I wasn't really 
> looking for information on that.? And most everything I saw said how 
> good Luatex was; I never ran into anything that said "Don't use Luatex 
> if..." or "Luatex is good except..."
This is because there are not that many limitations (at least i havaen't 
run into them). Also consider the fact that whatever libraries are used, 
they also have limitations so that shifts the argument. For instance TeX 
never could do graphics in its core (it's backend stuff) but 
nevertheless it always could produce documents with graphics.

Concerning scripts .. that's mostly a matter of demand ... some indic 
scripts are supported, some not yet. In the decade we have luatex now, 
no one ever asked for it. (Btw, discussions about these kind of things 
normally don't happen here but on the context list as we then need 
specs, samples, testing, long term continuity, etc.).

LuaTeX (as Arthur explained already) will never provide hard coded 
(either or not library based) solutions for typesetting. Even some (not 
font related) basic features could be done in lua but we keep the 
original around (also for efficiency reasons). The smaller the better.

Btw, being extensible means that luatex can sometimes be hip an dmodern 
too. We could support for instance variable fonts right from the start; 
not that anyone cares about that. In practice, pro-active development 
doesn't really pay of (supporting fancy pdf features comes to mind).

Of course you can add your own code either or not using libraries 
(possibly via ffi) but dependency on external code and solutions is not 
under the flag of luatex dev.

Hans


-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From maxwell at umiacs.umd.edu  Thu Mar 29 01:29:24 2018
From: maxwell at umiacs.umd.edu (maxwell)
Date: Wed, 28 Mar 2018 19:29:24 -0400
Subject: [luatex] glyph to Unicode code point
Message-ID: <a8d7f6abd418886d20e7627b05821aad@umiacs.umd.edu>

I'm using a version of the code in the answer here
     https://tex.stackexchange.com/questions/228312/
to convert a LuaTeX node structure into a list of characters in that 
structure.

My code at present traverses a Node, recursing on nodes that are hlists 
(or vlists); when it comes to a node which is a glyph (node.id() = 29 in 
the table on p99 of the LuaTeX reference manual, version 1.0.4 of April 
2017), it converts the node.char to what is (hopefully) a Unicode code 
point:
     unicode.utf8.char(node.char)

I say hopefully, because this conversion relies on the glyph being 
assigned a slot in in a particular font that has the same number as the 
Unicode code point for that character.  This works ok for many simple 
fonts, particularly some Latin fonts.  It also works for some simple 
Arabic script fonts which encode the various glyph variants (like 
initial, final, medial and isolated) as being the Arabic Presentation 
Form code points (which can easily be converted to code points in the 
normal Arabic block).  Unfortunately, it does not work for glyphs that 
are assigned to other slots in a font, corresponding to a Private Use 
Area code point in Unicode, or sometimes not corresponding to a valid 
Unicode code point at all.

The cmap table in an Open Type font (or a True Type font) provides a 
mapping between Unicode code points and glyph slots.  Somewhere under 
the hood, LuaTex is presumably using this table to choose an appropriate 
glyph.  It seems like it should be possible to do the reverse mapping, 
i.e. to map from a particular glyph to the corresponding Unicode code 
point.  (In the case of ligatures, this will be a one-to-many mapping.)  
The LuaTeX reference appears to discuss this on p68-69; if I have a 
character's hash (from a font table), I can apparently extract the 
'tounicode' value, which IIUC is the Unicode code point I'm looking for.

My problem is that I don't know how to go from the glyph's slot number 
(which is apparently what node.char is giving me, for nodes that 
represent a glyph) to the character hash in the font table, or even how 
to find the font table from the font number.  The node.char elements are 
numbers like 1583 (which appears to be 0x62F, and makes sense as the 
code point for Arabic Dal) and 983159 (0xF0077, which would not be a 
valid Unicode character, but might be a glyph in some font).

How do I go from these node.char numbers and a node.font number (a 
number like 29, which apparently points to a font) to a character hash 
in the font's table?  I'm guessing I need a function that maps from the 
node.font to a font table, and then a function that maps the number from 
node.char plus a font table to a character hash.  Something like
    if node.id == 29 then
        UnicodeChar = unicode.utf8.char(Node2CharHash(node.char, 
Node2FontTable(node.font)).tounicode)
where Node2CharHash and Node2FontTable are the functions I'm looking 
for, if my guess is right.  (My syntax is probably wrong, I'm used to 
Python...)

    Mike Maxwell

From j.hagen at xs4all.nl  Thu Mar 29 10:01:25 2018
From: j.hagen at xs4all.nl (Hans Hagen)
Date: Thu, 29 Mar 2018 10:01:25 +0200
Subject: [luatex] glyph to Unicode code point
In-Reply-To: <a8d7f6abd418886d20e7627b05821aad@umiacs.umd.edu>
References: <a8d7f6abd418886d20e7627b05821aad@umiacs.umd.edu>
Message-ID: <aa72eef7-17dd-15e1-5c74-e8b5538515fd@xs4all.nl>

On 3/29/2018 1:29 AM, maxwell wrote:
> I'm using a version of the code in the answer here
>  ??? https://tex.stackexchange.com/questions/228312/
> to convert a LuaTeX node structure into a list of characters in that 
> structure.
> 
> My code at present traverses a Node, recursing on nodes that are hlists 
> (or vlists); when it comes to a node which is a glyph (node.id() = 29 in 
> the table on p99 of the LuaTeX reference manual, version 1.0.4 of April 
> 2017), it converts the node.char to what is (hopefully) a Unicode code 
> point:
>  ??? unicode.utf8.char(node.char)
> 
> I say hopefully, because this conversion relies on the glyph being 
> assigned a slot in in a particular font that has the same number as the 
> Unicode code point for that character.? This works ok for many simple 
> fonts, particularly some Latin fonts.? It also works for some simple 
> Arabic script fonts which encode the various glyph variants (like 
> initial, final, medial and isolated) as being the Arabic Presentation 
> Form code points (which can easily be converted to code points in the 
> normal Arabic block).? Unfortunately, it does not work for glyphs that 
> are assigned to other slots in a font, corresponding to a Private Use 
> Area code point in Unicode, or sometimes not corresponding to a valid 
> Unicode code point at all.
> 
> The cmap table in an Open Type font (or a True Type font) provides a 
> mapping between Unicode code points and glyph slots.? Somewhere under 
> the hood, LuaTex is presumably using this table to choose an appropriate 
> glyph.? It seems like it should be possible to do the reverse mapping, 
> i.e. to map from a particular glyph to the corresponding Unicode code 
> point.? (In the case of ligatures, this will be a one-to-many mapping.) 
> The LuaTeX reference appears to discuss this on p68-69; if I have a 
> character's hash (from a font table), I can apparently extract the 
> 'tounicode' value, which IIUC is the Unicode code point I'm looking for.
> 
> My problem is that I don't know how to go from the glyph's slot number 
> (which is apparently what node.char is giving me, for nodes that 
> represent a glyph) to the character hash in the font table, or even how 
> to find the font table from the font number.? The node.char elements are 
> numbers like 1583 (which appears to be 0x62F, and makes sense as the 
> code point for Arabic Dal) and 983159 (0xF0077, which would not be a 
> valid Unicode character, but might be a glyph in some font).
> 
> How do I go from these node.char numbers and a node.font number (a 
> number like 29, which apparently points to a font) to a character hash 
> in the font's table?? I'm guessing I need a function that maps from the 
> node.font to a font table, and then a function that maps the number from 
> node.char plus a font table to a character hash.? Something like
>  ?? if node.id == 29 then
>  ?????? UnicodeChar = unicode.utf8.char(Node2CharHash(node.char, 
> Node2FontTable(node.font)).tounicode)
> where Node2CharHash and Node2FontTable are the functions I'm looking 
> for, if my guess is right.? (My syntax is probably wrong, I'm used to 
> Python...)
if you use context or latex ... this is a starting point

\starttext

\setbox0\hbox{something effe}

\directlua {
     for n in node.traverse(tex.box[0].list) do
         if n.id == node.id("glyph") then
             print(
                 fonts.hashes.identifiers[n.font].properties.filename,
 
fonts.hashes.identifiers[n.font].characters[n.char].tounicode
             )
         end
     end
}

\stoptext


-----------------------------------------------------------------
                                           Hans Hagen | PRAGMA ADE
               Ridderstraat 27 | 8061 GH Hasselt | The Netherlands
        tel: 038 477 53 69 | www.pragma-ade.nl | www.pragma-pod.nl
-----------------------------------------------------------------

From maxwell at umiacs.umd.edu  Thu Mar 29 19:28:49 2018
From: maxwell at umiacs.umd.edu (maxwell)
Date: Thu, 29 Mar 2018 13:28:49 -0400
Subject: [luatex] glyph to Unicode code point
In-Reply-To: <aa72eef7-17dd-15e1-5c74-e8b5538515fd@xs4all.nl>
References: <a8d7f6abd418886d20e7627b05821aad@umiacs.umd.edu>
 <aa72eef7-17dd-15e1-5c74-e8b5538515fd@xs4all.nl>
Message-ID: <5cceb873560f8a2f0ec6dca212ae4dd5@umiacs.umd.edu>

On 2018-03-29 04:01, Hans Hagen wrote:
> \directlua {
>     for n in node.traverse(tex.box[0].list) do
>         if n.id == node.id("glyph") then
>             print(
>                 fonts.hashes.identifiers[n.font].properties.filename,
> 
> fonts.hashes.identifiers[n.font].characters[n.char].tounicode
>             )
>         end
>     end
> }

Thank you, that worked perfectly!

    Mike Maxwell


